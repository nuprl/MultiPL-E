language: go_test.go
name: HumanEval_37_sort_even
results:
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    for i := 1; i < len(l); i += 2 {\n        for j := 0; j < len(l)\
    \ - 1; j += 2 {\n            if l[j] > l[j + 2] {\n                l[j], l[j +\
    \ 2] = l[j + 2], l[j]\n            }\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [10] with length 10 [recovered]\n\tpanic: runtime error: index out of range\
    \ [10] with length 10\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000160018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even(...)\n\t/tmp/tmpvmf_2ipa_test.go:21\n\
    command-line-arguments_test.TestSort_Even(0x0?)\n\t/tmp/tmpvmf_2ipa_test.go:38\
    \ +0x4ca\ntesting.tRunner(0xc000103380, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    ret := make([]int, len(l))\n\
    \    for i, v := range l {\n        ret[i] = v\n    }\n    evens := make([]int,\
    \ 0)\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens =\
    \ append(evens, v)\n        }\n    }\n    for i, v := range evens {\n        ret[i*2]\
    \ = v\n    }\n    return ret\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpsasuq_75_test.go:47: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpsasuq_75_test.go:47:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l)/2)\n\
    \    for i, e := range l {\n        if i % 2 == 0 {\n            evens[i/2] =\
    \ e\n        }\n    }\n    // sort\n    for i := 0; i < len(evens); i++ {\n  \
    \      for j := i + 1; j < len(evens); j++ {\n            if evens[i] > evens[j]\
    \ {\n                evens[i], evens[j] = evens[j], evens[i]\n            }\n\
    \        }\n    }\n    // insert in result slice\n    result := make([]int, len(l))\n\
    \    for i, e := range l {\n        if i % 2 == 0 {\n            result[i] = evens[i/2]\n\
    \        } else {\n            result[i] = e\n        }\n    }\n    return result\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x3, 0x2b8f61dd9a88?})\n\
    \t/tmp/tmp7hqrqbp8_test.go:19 +0x158\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp7hqrqbp8_test.go:49 +0x75\ntesting.tRunner(0xc0001924e0, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    return nil\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp_2rotigc_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp_2rotigc_test.go:34:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp_2rotigc_test.go:34: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var (\n        ret []int\n  \
    \      even_list []int\n    )\n    for i, n := range l {\n        if i % 2 ==\
    \ 0 {\n            even_list = append(even_list, n)\n        }\n    }\n    quick_sort(even_list)\n\
    \    fmt.Println(even_list)\n    for i, n := range l {\n        if i % 2 == 0\
    \ {\n            ret = append(ret, even_list[0])\n            even_list = even_list[1:]\n\
    \        } else {\n            ret = append(ret, n)\n        }\n    }\n    return\
    \ ret\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeeq1an_y_test.go:25:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    return []int{1, 2, 3}\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp75rm4zuo_test.go:34: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp75rm4zuo_test.go:34: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 2 {\n        return\
    \ l\n    }\n    left := make([]int, 0)\n    right := make([]int, 0)\n    for i,\
    \ v := range l {\n        if i % 2 == 0 {\n            continue\n        }\n \
    \       if len(left) == 0 {\n            left = append(left, v)\n        } else\
    \ if len(right) == 0 {\n            if v < left[0] {\n                right =\
    \ append(right, left[0])\n                left[0] = v\n            } else {\n\
    \                right = append(right, v)\n            }\n        } else {\n \
    \           if v < left[0] {\n                right = append(right, left[0])\n\
    \                left[0] = v\n            } else if v < right[0] {\n         \
    \       right = append(right, v)\n            } else {\n                right\
    \ = append(right, right[0])\n                right[0] = v\n            }\n   \
    \     }\n    }\n    ans := make([]int, 0)\n    for i, v := range l {\n       \
    \ if i % 2 == 0 {\n            ans = append(ans, v)\n        } else {\n      \
    \      ans = append(ans, left[0])\n            left = left[1:]\n        }\n  \
    \  }\n    ans = append(ans, right...)\n    return ans\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0]\
    \ with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc00002c360?, 0xb, 0x5e3ea0?})\n\
    \t/tmp/tmpnutuz16__test.go:51 +0x5a5\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmpnutuz16__test.go:67 +0xfc\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, len(l) /\
    \ 2)\n    copy(evens, l[0:len(l):2])\n    odd_indicies := []int{1, 3, 5, 7, 9}\n\
    \    fmt.Println(evens)\n    for i := 0; i < len(evens); i++ {\n        for j\
    \ := 0; j < len(evens) - 1; j++ {\n            if evens[j] > evens[j + 1] {\n\
    \                evens[j], evens[j + 1] = evens[j + 1], evens[j]\n           \
    \ }\n        }\n    }\n    for i := 0; i < len(odd_indicies); i++ {\n        evens\
    \ = append(evens, l[odd_indicies[i]])\n    }\n    return evens\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:3:2] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [:3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x3, 0x3})\n\t\
    /tmp/tmp_xq9i5wg_test.go:17 +0x265\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp_xq9i5wg_test.go:40 +0x75\ntesting.tRunner(0xc000120340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    ll := make([]int, len(l))\n    copy(ll, l)\n    h := len(ll)\n\
    \    i := 0\n    for i < h {\n        i += 2\n    }\n    ll = ll[0:i]\n    i =\
    \ 0\n    for i < len(ll) {\n        j := i + 1\n        for j < len(ll) {\n  \
    \          if ll[i] > ll[j] {\n                ll[i], ll[j] = ll[j], ll[i]\n \
    \           }\n            j += 1\n        }\n        i += 2\n    }\n    return\
    \ ll\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:4] with capacity 3 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:4] with capacity 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc000014360?, 0x3, 0x5e3ea0?})\n\
    \t/tmp/tmpft94oyhs_test.go:26 +0xe7\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmpft94oyhs_test.go:48 +0x6f\ntesting.tRunner(0xc0001a01a0, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even := make([]int, 0)\n    odd\
    \ := make([]int, 0)\n    for i, v := range l {\n        if i % 2 == 0 {\n    \
    \        even = append(even, v)\n        } else {\n            odd = append(odd,\
    \ v)\n        }\n    }\n    fmt.Println(even)\n    fmt.Println(odd)\n    // even\
    \ is sorted\n    for i := 0; i < len(even) - 1; i++ {\n        for j := i + 1;\
    \ j < len(even); j++ {\n            if even[i] > even[j] {\n                even[i],\
    \ even[j] = even[j], even[i]\n            }\n        }\n    }\n    res := make([]int,\
    \ 0)\n    //fmt.Println(res)\n    for i := 0; i < len(even); i++ {\n        res\
    \ = append(res, even[i])\n        if i != len(odd) - 1 {\n            res = append(res,\
    \ odd[i])\n        }\n    }\n    fmt.Println(res)\n    return res\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 3]\n[2]\n--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index\
    \ out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out\
    \ of range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x3, 0x2af1689dfa88?})\n\
    \t/tmp/tmp2ng2rs40_test.go:40 +0x43c\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp2ng2rs40_test.go:54 +0x75\ntesting.tRunner(0xc0001a01a0, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    last_even := len(l) - 1\n   \
    \ for i := len(l) - 1; i >= 0; i-- {\n        if i % 2 == 0 {\n            last_even\
    \ = i\n            break\n        }\n    }\n    for i := 0; i < last_even; i +=\
    \ 2 {\n        for j := i + 2; j <= last_even; j += 2 {\n            if l[i] >\
    \ l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // TODO: implement this function\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp4ongnhz9_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp4ongnhz9_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073804
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // TODO: Write this function\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpn5xhsm01_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpn5xhsm01_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    odd_cnt := len(l) / 2\n    even_cnt\
    \ := len(l) - odd_cnt\n    odd_half := l[:odd_cnt]\n    even_half := l[odd_cnt:]\n\
    \    for i := 0; i < even_cnt - 1; i++ {\n        for j := i + 1; j < even_cnt;\
    \ j++ {\n            if even_half[i] > even_half[j] {\n                even_half[i],\
    \ even_half[j] = even_half[j], even_half[i]\n            }\n        }\n    }\n\
    \    sorted_list := make([]int, len(l))\n    for i := 0; i < odd_cnt; i++ {\n\
    \        sorted_list[2 * i] = odd_half[i]\n    }\n    for i := 0; i < even_cnt;\
    \ i++ {\n        sorted_list[2 * i + 1] = even_half[i]\n    }\n    return sorted_list\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x5e3ea0?, 0x2ada20320a88?})\n\
    \t/tmp/tmp7z4sv1w4_test.go:32 +0x11c\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp7z4sv1w4_test.go:44 +0x75\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 1; i < len(l); i +=\
    \ 2 {\n        for j := 0; j < i; j += 2 {\n            if l[i] < l[j] {\n   \
    \             tmp := l[i]\n                l[i] = l[j]\n                l[j] =\
    \ tmp\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpfl38zel6_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=5) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=3) %!s(int=1) %!s(int=9) %!s(int=2) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpfl38zel6_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=8)\
    \ %!s(int=-12) %!s(int=5) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=4)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    lcopy := make([]int, len(l))\n\
    \    copy(lcopy, l)\n    for i := 0; i < len(l); i += 2 {\n        lcopy[i] =\
    \ l[i]\n    }\n    for i := 0; i < len(l); i += 2 {\n        for j := 0; j < len(l)\
    \ - i - 2; j += 2 {\n            if lcopy[j] > lcopy[j + 2] {\n              \
    \  lcopy[j], lcopy[j + 2] = lcopy[j + 2], lcopy[j]\n            }\n        }\n\
    \    }\n    return lcopy\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var out []int\n    for i, v :=\
    \ range l {\n        if i%2 == 0 {\n            out = append(out, v)\n       \
    \ } else {\n            for _, vi := range out {\n                if v > vi {\n\
    \                    i := 0\n                    for out[i] < v {\n          \
    \              i++\n                    }\n                    out = append(out,\
    \ 0)\n                    copy(out[i+1:], out[i:])\n                    out[i]\
    \ = v\n                    break\n                }\n            }\n        }\n\
    \    }\n    return out\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even(...)\n\t/tmp/tmp38s2s3r6_test.go:24\n\
    command-line-arguments_test.TestSort_Even(0x0?)\n\t/tmp/tmp38s2s3r6_test.go:45\
    \ +0xc10\ntesting.tRunner(0xc0001a01a0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Write your code here\n   \
    \ ret := make([]int, len(l))\n    copy(ret, l)\n    for i, v := range l {\n  \
    \      if i % 2 == 0 {\n            ret[i] = v\n        } else {\n           \
    \ ret[i] = sort_even_helper(l[i])\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5_8m80xb_test.go:23:22: undefined: sort_even_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var even []int\n    for i, n\
    \ := range l {\n        if i % 2 == 0 {\n            even = append(even, n)\n\
    \        }\n    }\n    fmt.Println(even)\n    //sorted := even[:]\n    sort(even)\n\
    \    fmt.Println(even)\n    for i, n := range l {\n        if i % 2 == 0 {\n \
    \           l[i] = even[i/2]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1dz48brk_test.go:24:5: undefined: sort

    /tmp/tmp1dz48brk_test.go:26:12: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, 0)\n   \
    \ for i, v := range l {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ v)\n        }\n    }\n    fmt.Println(evens)\n    lenEvens := len(evens)\n \
    \   for i := 0; i < lenEvens; i++ {\n        for j := i + 1; j < lenEvens; j++\
    \ {\n            if evens[i] > evens[j] {\n                evens[i], evens[j]\
    \ = evens[j], evens[i]\n            }\n        }\n    }\n    fmt.Println(evens)\n\
    \    sortedList := make([]int, 0)\n    for i, v := range l {\n        if i % 2\
    \ == 0 {\n            sortedList = append(sortedList, evens[0])\n            evens\
    \ = evens[1:]\n        } else {\n            sortedList = append(sortedList, v)\n\
    \        }\n    }\n    return sortedList\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l2 := []int{}\n    var k int\n\
    \    for k = 0; k < len(l) - len(l) % 2; k += 2 {\n        l2 = append(l2, l[k],\
    \ l[k+1])\n    }\n    if k < len(l) {\n        l2 = append(l2, l[k])\n    }\n\
    \    return l2\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpsq7m6yrq_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpsq7m6yrq_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073947
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var evens []int\n    for i, n\
    \ := range l {\n        if i % 2 == 0 {\n            evens = append(evens, n)\n\
    \        }\n    }\n    for i, n := range l {\n        if i % 2 == 0 {\n      \
    \      j := i / 2\n            l[i] = evens[j]\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1ydtrvu7_test.go:22:12: n declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // You cannot sort a list in\
    \ place, so you must allocate a new list\n    new_list := make([]int, len(l))\n\
    \    // We can copy the odd values directly\n    copy(new_list[0:len(l):2], l[0:len(l):2])\n\
    \    // We can sort the even values and copy them\n    even_values := make([]int,\
    \ len(l)/2)\n    copy(even_values, l[1:len(l):2])\n    bubble_sort(even_values)\n\
    \    copy(new_list[1:len(l):2], even_values)\n    return new_list\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa02kqz4g_test.go:23:5: undefined: bubble_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073947
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    n := len(l)\n    for i := 0;\
    \ i < n; i += 2 {\n        for j := 0; j < n - i - 2; j += 2 {\n            if\
    \ l[j] > l[j + 2] {\n                l[j], l[j + 2] = l[j + 2], l[j]\n       \
    \     }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073947
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Track the index of the last\
    \ even number we've encountered, so that we can sort the even indicies later\n\
    \    last_even_idx := -1\n    sorted_evens := make([]int, 0)\n    l_prime := make([]int,\
    \ len(l))\n    for i, num := range l {\n        if num % 2 == 0 {\n          \
    \  // This is an even number; add it to the end of sorted_evens\n            sorted_evens\
    \ = append(sorted_evens, num)\n            last_even_idx = i\n        } else {\n\
    \            // This is an odd number; copy it to l_prime\n            l_prime[i]\
    \ = num\n        }\n    }\n    // Sort the evens in sorted_evens\n    for i :=\
    \ range sorted_evens {\n        min_val := sorted_evens[i]\n        min_idx :=\
    \ i\n        for j := i + 1; j < len(sorted_evens); j++ {\n            if sorted_evens[j]\
    \ < min_val {\n                min_val = sorted_evens[j]\n                min_idx\
    \ = j\n            }\n        }\n        sorted_evens[i], sorted_evens[min_idx]\
    \ = sorted_evens[min_idx], sorted_evens[i]\n    }\n    // Copy the sorted evens\
    \ from sorted_evens to l_prime\n    for i, num := range sorted_evens {\n     \
    \   l_prime[last_even_idx - i] = num\n    }\n    return l_prime\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpz2d02vxf_test.go:64: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=0)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=2) %!s(int=0) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpz2d02vxf_test.go:64:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=12) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=-10)\
    \ %!s(int=-12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    a := make([]int, len(l))\n  \
    \  copy(a, l)\n    if len(a) < 2 {\n        return a\n    }\n    i := 0\n    j\
    \ := 2\n    for j < len(a) {\n        if a[i] > a[j] {\n            a[i], a[j]\
    \ = a[j], a[i]\n            if i > 0 {\n                i--\n            }\n \
    \       } else {\n            i = j\n        }\n        j += 2\n    }\n    return\
    \ a\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp8k391ln0_test.go:52: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=-10) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp8k391ln0_test.go:52:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=8)\
    \ %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=23) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) < 2 {\n        return\
    \ l\n    }\n    evens := []int{}\n    odds := []int{}\n    for i, v := range l\
    \ {\n        if i % 2 == 0 {\n            odds = append(odds, v)\n        } else\
    \ {\n            evens = append(evens, v)\n        }\n    }\n    for i, _ := range\
    \ evens {\n        for j := i + 1; j < len(evens); j++ {\n            if evens[i]\
    \ > evens[j] {\n                tmp := evens[i]\n                evens[i] = evens[j]\n\
    \                evens[j] = tmp\n            }\n        }\n    }\n    new_l :=\
    \ []int{}\n    for i, _ := range odds {\n        new_l = append(new_l, odds[i])\n\
    \        new_l = append(new_l, evens[i])\n    }\n    return new_l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000162018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000162018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc000162000?, 0x3, 0x5e3ea0?})\n\
    \t/tmp/tmptbcdvf2k_test.go:40 +0x2d1\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmptbcdvf2k_test.go:52 +0x6f\ntesting.tRunner(0xc000103860, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ []int{}\n    }\n    res := make([]int, len(l))\n    copy(res, l)\n    copy(res[2:],\
    \ sort_even(l[2:]))\n    if (l[0] > l[1]) {\n        res[0], res[1] = res[1],\
    \ res[0]\n    }\n    return res\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [2:1] [recovered]\n\tpanic: runtime error: slice bounds out of range\
    \ [2:1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780, 0xc000014378})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513780,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4610, 0x1, 0x1})\n\t\
    /tmp/tmpj6uxgreq_test.go:21 +0x130\ncommand-line-arguments_test.sort_even({0xc0000d3e00,\
    \ 0x3, 0x3})\n\t/tmp/tmpj6uxgreq_test.go:21 +0xa5\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmpj6uxgreq_test.go:35 +0x75\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // if the input is the empty\
    \ list, return the empty list\n    if len(l) == 0 {\n        return l\n    }\n\
    \    // if the list has an odd number of elements, then the last element is an\
    \ odd index, so it remains.\n    odd_count := len(l) % 2\n    last_index := len(l)\
    \ - 1\n    // odd_indexes := []int{last_index - i for i in range(odd_count)}\n\
    \    odd_indexes := make([]int, odd_count)\n    for i := 0; i < odd_count; i++\
    \ {\n        odd_indexes[i] = last_index - i\n    }\n    // even_indexes := []int{i\
    \ for i in range(len(l)) if i not in odd_indexes}\n    even_indexes := make([]int,\
    \ len(l) - odd_count)\n    j := 0\n    for i := 0; i < len(l); i++ {\n       \
    \ even := true\n        for k := 0; k < odd_count; k++ {\n            if i ==\
    \ odd_indexes[k] {\n                even = false\n                break\n    \
    \        }\n        }\n        if even {\n            even_indexes[j] = i\n  \
    \          j++\n        }\n    }\n    even_sublist := make([]int, len(even_indexes))\n\
    \    for i := 0; i < len(even_indexes); i++ {\n        even_sublist[i] = l[even_indexes[i]]\n\
    \    }\n    even_sublist = quick_sort(even_sublist)\n    // even_sublist.sort()\n\
    \    l_prime := make([]int, len(l))\n    for i := 0; i < len(odd_indexes); i++\
    \ {\n        l_prime[odd_indexes[i]] = l[odd_indexes[i]]\n    }\n    for i :=\
    \ 0; i < len(even_indexes); i++ {\n        l_prime[even_indexes[i]] = even_sublist[i]\n\
    \    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0zug3tx9_test.go:48:20: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073948
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    n := len(l)\n    if n == 0 {\n\
    \        return l\n    }\n    even := make([]int, 0, n/2)\n    for i := 0; i <\
    \ n; i += 2 {\n        even = append(even, l[i])\n    }\n    even = sort(even)\n\
    \    k := 0\n    for i := 0; i < n; i += 2 {\n        l[i] = even[k]\n       \
    \ k++\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaj847wl1_test.go:24:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    r := make([]int, len(l))\n  \
    \  copy(r, l)\n    for i := 1; i < len(l); i += 2 {\n        for j := 0; j < i;\
    \ j += 2 {\n            if r[i] < r[j] {\n                r[i], r[j] = r[j], r[i]\n\
    \            }\n        }\n    }\n    return r\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpnn90io5g_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=5) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=3) %!s(int=1) %!s(int=9) %!s(int=2) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpnn90io5g_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=8)\
    \ %!s(int=-12) %!s(int=5) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=4)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ l\n    }\n    evens := []int{}\n    odds := []int{}\n    for i, v := range l\
    \ {\n        if i % 2 == 0 {\n            odds = append(odds, v)\n        } else\
    \ {\n            evens = append(evens, v)\n        }\n    }\n    evens = sort(evens)\n\
    \    l = []int{}\n    i := 0\n    for _, v := range odds {\n        l = append(l,\
    \ v)\n        l = append(l, evens[i])\n        i++\n    }\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy_7iysa2_test.go:28:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l_even := l[1::2]\n    l_odd\
    \ := l[0::2]\n    l_even = sort_list(l_even)\n    l_answer := []int{}\n    for\
    \ i, n := range l_odd {\n        l_answer = append(l_answer, n)\n        l_answer\
    \ = append(l_answer, l_even[i])\n    }\n    return l_answer\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmppzltjenm_test.go:16:18: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073948
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps4710wid_test.go:34: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps4710wid_test.go:34:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i, v := range l {\n     \
    \   // if the index is even,\n        if i % 2 == 0 {\n            // find the\
    \ index of the greatest odd value in l\n            var maxI int\n           \
    \ for j, v2 := range l {\n                if j % 2 == 1 && v2 > l[maxI] {\n  \
    \                  maxI = j\n                }\n            }\n            //\
    \ swap the even value with the max odd value\n            l[i], l[maxI] = l[maxI],\
    \ l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvvv4hc0y_test.go:16:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ l\n    }\n    odds := []int{}\n    evens := []int{}\n    for _, i := range l\
    \ {\n        if i % 2 == 0 {\n            evens = append(evens, i)\n        }\
    \ else {\n            odds = append(odds, i)\n        }\n    }\n    result :=\
    \ make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        if i % 2 ==\
    \ 0 {\n            result[i] = odds[i / 2]\n        } else {\n            result[i]\
    \ = evens[i / 2]\n        }\n    }\n    return result\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014390})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc00002c360?, 0xb, 0x5e3ea0?})\n\
    \t/tmp/tmp1xp4sqg7_test.go:33 +0x20d\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp1xp4sqg7_test.go:47 +0xfc\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    l_odd := l[0::2]\n    l_even := l[1::2]\n    l_even = bubble_sort(l_even)\n\
    \    for i, _ := range l_even {\n        l_odd = append(l_odd, l_even[i])\n  \
    \  }\n    return l_odd\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp0o3ubppp_test.go:19:17: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073948
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even := make([]int, len(l) /\
    \ 2)\n    for i := 0; i < len(l); i+=2 {\n        even[i/2] = l[i]\n    }\n  \
    \  sorted_even := quicksort(even)\n    result := make([]int, len(l))\n    for\
    \ i := 0; i < len(result); i+=2 {\n        result[i] = sorted_even[i/2]\n    }\n\
    \    for i := 1; i < len(result); i+=2 {\n        result[i] = l[i]\n    }\n  \
    \  return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj2txauc0_test.go:20:20: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    odds, evens := l[1:], l[0]\n    sorted_evens := []int{}\n    sorted_evens\
    \ = append(sorted_evens, evens)\n    for i := 0; i < len(odds); i += 2 {\n   \
    \     sorted_evens = append(sorted_evens, odds[i])\n    }\n    for i := 0; i <\
    \ len(odds); i += 2 {\n        sorted_evens = append(sorted_evens, odds[i])\n\
    \    }\n    sorted_evens = bubblesort(sorted_evens)\n    for i := 0; i < len(odds);\
    \ i += 2 {\n        odds[i] = sorted_evens[i]\n    }\n    odds = sort_even(odds)\n\
    \    return append([]int{evens}, odds...)\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7ir1wuo_test.go:28:20: undefined: bubblesort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    var even_indicies []int\n    for i, _ := range l {\n        if\
    \ i % 2 == 0 {\n            even_indicies = append(even_indicies, i)\n       \
    \ }\n    }\n    if len(even_indicies) <= 1 {\n        return l\n    }\n    fmt.Println(even_indicies)\n\
    \    var even_list []int\n    for _, i := range even_indicies {\n        even_list\
    \ = append(even_list, l[i])\n    }\n    fmt.Println(even_list)\n    even_list\
    \ = quick_sort(even_list)\n    for i, j := range even_indicies {\n        l[j]\
    \ = even_list[i]\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksvtkl2w_test.go:34:17: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, 0)\n   \
    \ odds := make([]int, 0)\n    sorted_evens := make([]int, 0)\n    sorted_list\
    \ := make([]int, 0)\n\n    for i, v := range l {\n        if i % 2 == 0 {\n  \
    \          odds = append(odds, v)\n        } else {\n            evens = append(evens,\
    \ v)\n        }\n    }\n\n    for _, v := range evens {\n        sorted_evens\
    \ = append(sorted_evens, v)\n    }\n\n    // TODO: Just use sort.Ints(sorted_evens)\n\
    \    for i := 0; i < len(sorted_evens); i++ {\n        for j := i + 1; j < len(sorted_evens);\
    \ j++ {\n            if sorted_evens[i] > sorted_evens[j] {\n                sorted_evens[i],\
    \ sorted_evens[j] = sorted_evens[j], sorted_evens[i]\n            }\n        }\n\
    \    }\n\n    for i, v := range odds {\n        sorted_list = append(sorted_list,\
    \ v)\n        sorted_list = append(sorted_list, sorted_evens[i])\n    }\n\n  \
    \  return sorted_list\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x3, 0x2b743037aa88?})\n\
    \t/tmp/tmpdz1pen8x_test.go:44 +0x392\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmpdz1pen8x_test.go:57 +0x75\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var even []int\n    for i, v\
    \ := range l {\n        if i % 2 == 0 {\n            even = append(even, v)\n\
    \        }\n    }\n    // make sure you don't include the even values\n    //\
    \ in the return slice\n    var nums []int\n    var odd []int\n    for i, v :=\
    \ range l {\n        if i % 2 == 0 {\n            continue\n        }\n      \
    \  odd = append(odd, v)\n    }\n    sort_slice(even)\n    even = append(even,\
    \ odd...)\n    fmt.Println(even)\n    return even\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprtph0xc5_test.go:24:9: nums declared but not used

    /tmp/tmprtph0xc5_test.go:32:5: undefined: sort_slice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even_values := make([]int, 0)\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            even_values =\
    \ append(even_values, v)\n        }\n    }\n    // In order to sort the even numbers,\
    \ we need to convert the\n    // slice of integers to a slice of sort.IntSlice,\
    \ then sort.\n    sortable_evens := sort.IntSlice(even_values)\n    sortable_evens.Sort()\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            l[i] = sortable_evens[i/2]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0jugfgb_test.go:24:23: undefined: sort

    /tmp/tmpm0jugfgb_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // local variables\n    length\
    \ := len(l)\n    even := []int{}\n    odd := []int{}\n    output := []int{}\n\n\
    \    // sort even indicies into list\n    for i := 0; i < length; i++ {\n    \
    \    if i % 2 == 0 {\n            odd = append(odd, l[i])\n        } else {\n\
    \            even = append(even, l[i])\n        }\n    }\n\n    // sort even indicies\n\
    \    for i := 0; i < length / 2; i++ {\n        for j := 0; j < length / 2 - 1;\
    \ j++ {\n            if even[j] > even[j + 1] {\n                temp := even[j]\n\
    \                even[j] = even[j + 1]\n                even[j + 1] = temp\n \
    \           }\n        }\n    }\n\n    // create even and odd array\n    for i\
    \ := 0; i < length / 2; i++ {\n        output = append(output, odd[i])\n     \
    \   output = append(output, even[i])\n    }\n\n    // return sorted list\n   \
    \ return output\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpjb5ghsrc_test.go:67: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n\
    \        tmpjb5ghsrc_test.go:67: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1) %!s(int=-3)\
    \ %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__2\
    \ (0.00s)\n        tmpjb5ghsrc_test.go:67: expected '[%!s(int=-12) %!s(int=8)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10) %!s(int=-12) %!s(int=2) %!s(int=23)\
    \ %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Figure out where the even\
    \ indicies are.\n    even_indicies := make([]int, 0)\n    for i, _ := range l\
    \ {\n        if i % 2 == 0 {\n            even_indicies = append(even_indicies,\
    \ i)\n        }\n    }\n\n    // Fill in the even indicies\n    even_values :=\
    \ make([]int, len(even_indicies))\n    for i, v := range even_indicies {\n   \
    \     even_values[i] = l[v]\n    }\n\n    // Sort the even indicies\n    for i\
    \ := 1; i < len(even_values); i++ {\n        for j := i; j > 0 && even_values[j]\
    \ < even_values[j-1]; j-- {\n            even_values[j], even_values[j-1] = even_values[j-1],\
    \ even_values[j]\n        }\n    }\n\n    // Fill in the even indicies of l\n\
    \    for i, v := range even_indicies {\n        l[v] = even_values[i]\n    }\n\
    \n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // YOUR CODE HERE\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxeaxch8v_test.go:17:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073949
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    i := 0\n    for i < len(l) {\n\
    \        for j := i+2; j < len(l); j+=2 {\n            if l[i] > l[j] {\n    \
    \            tmp := l[i]\n                l[i] = l[j]\n                l[j] =\
    \ tmp\n            }\n        }\n        i += 2\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073949
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var evens []int\n    var odds\
    \ []int\n    for i, v := range l {\n        if i % 2 == 0 {\n            evens\
    \ = append(evens, v)\n        } else {\n            odds = append(odds, v)\n \
    \       }\n    }\n    for i := range evens {\n        for j := i + 1; j < len(evens);\
    \ j++ {\n            if evens[i] > evens[j] {\n                evens[i], evens[j]\
    \ = evens[j], evens[i]\n            }\n        }\n    }\n    var ans []int\n \
    \   for i := range evens {\n        ans = append(ans, evens[i])\n        ans =\
    \ append(ans, odds[i])\n    }\n    return ans\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000162000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000be600, 0x3, 0x2b7201b4fff8?})\n\
    \t/tmp/tmp3ux8wpx9_test.go:35 +0x2b0\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp3ux8wpx9_test.go:47 +0x75\ntesting.tRunner(0xc000103520, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073950
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var re []int\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 2 == 0 {\n            re = append(re, l[i])\n\
    \        } else {\n            re = append(re, l[i-1])\n            re = append(re,\
    \ l[i])\n            i++\n        }\n    }\n    return re\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp35147nn5_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp35147nn5_test.go:44: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp35147nn5_test.go:44:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=8) %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11)\
    \ %!s(int=12) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073950
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // s[0:i] = sorted s[:i:2] (slice\
    \ of evens)\n    var s []int\n    for _, a := range l {\n        if len(s)%2 ==\
    \ 0 {\n            s = append(s, a)\n        } else {\n            b := s[len(s)-1]\n\
    \            if a < b {\n                s[len(s)-1] = a\n                s =\
    \ append(s, b)\n            } else {\n                s = append(s, a)\n     \
    \       }\n        }\n    }\n    return s\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmptkvgf4fu_test.go:49: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=3) %!s(int=5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmptkvgf4fu_test.go:49:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=-10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073950
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // This could easily be done\
    \ in O(n) time, so it seems reasonable to\n    // presume that they're looking\
    \ for a linearithmic solution, and to use\n    // mergesort (my preferred sort\
    \ algorithm anyway).\n    evens := make([]int, 0)\n    odds := make([]int, 0)\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            odds = append(odds,\
    \ v)\n        } else {\n            evens = append(evens, v)\n        }\n    }\n\
    \    sorted_evens := mergesort(evens)\n    result := make([]int, len(l))\n   \
    \ for i, v := range odds {\n        result[i * 2] = v\n    }\n    for i, v :=\
    \ range sorted_evens {\n        result[(i * 2) + 1] = v\n    }\n    return result\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6uhpn542_test.go:28:21: undefined: mergesort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073950
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var result []int\n    even_l\
    \ := []int{}\n    odd_l := []int{}\n    for i, num := range l {\n        if (i\
    \ % 2 == 0) {\n            even_l = append(even_l, num)\n        } else {\n  \
    \          odd_l = append(odd_l, num)\n        }\n    }\n    sort_even_helper(even_l)\n\
    \    for i, _ := range l {\n        if (i % 2 == 0) {\n            result = append(result,\
    \ even_l[i/2])\n        } else {\n            result = append(result, odd_l[i/2])\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6p3h66ms_test.go:26:5: undefined: sort_even_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073950
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var res []int\n    var o []int\n\
    \    var e []int\n    for i, v := range l {\n        if i % 2 == 0 {\n       \
    \     o = append(o, v)\n        } else {\n            e = append(e, v)\n     \
    \   }\n    }\n    sort_func(e)\n    for i, _ := range o {\n        res = append(res,\
    \ o[i])\n        res = append(res, e[i])\n    }\n    return res\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl5schtdw_test.go:26:5: undefined: sort_func

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073950
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l) - 1; i\
    \ += 2 {\n        for j := i + 2; j < len(l); j += 2 {\n            if l[i] >\
    \ l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073951
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    odd_indicies := []int{}\n   \
    \ even_indicies := []int{}\n    for i, v := range l {\n        if i % 2 == 0 {\n\
    \            odd_indicies = append(odd_indicies, v)\n        } else {\n      \
    \      even_indicies = append(even_indicies, v)\n        }\n    }\n    even_indicies\
    \ = sort(even_indicies)\n    j := 0\n    for i, v := range l {\n        if i %\
    \ 2 == 0 {\n            l[i] = odd_indicies[j]\n            j++\n        } else\
    \ {\n            l[i] = even_indicies[j]\n            j++\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsrm0qvzr_test.go:25:21: undefined: sort

    /tmp/tmpsrm0qvzr_test.go:27:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073951
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var sortedSlice []int\n    for\
    \ _, i := range l {\n        if i % 2 == 0 {\n            sortedSlice = append(sortedSlice,\
    \ i)\n        }\n    }\n    fmt.Println(sortedSlice)\n    var copySlice []int\n\
    \    for _, i := range l {\n        if i % 2 != 0 {\n            copySlice = append(copySlice,\
    \ i)\n        }\n    }\n    fmt.Println(copySlice)\n    var resultSlice []int\n\
    \    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n            resultSlice\
    \ = append(resultSlice, copySlice[i / 2])\n        } else {\n            resultSlice\
    \ = append(resultSlice, sortedSlice[i / 2])\n        }\n    }\n    return resultSlice\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[2]\n[1 3]\n[2 0 -10]\n[5 3 -5 -3 3 9 123 1]\n--- FAIL: TestSort_Even (0.00s)\n\
    panic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic:\
    \ runtime error: index out of range [3] with length 3\n\ngoroutine 34 [running]:\n\
    testing.tRunner.func1.2({0x513780, 0xc0001da000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc0001da000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc000187e68, 0xb, 0x2b36f4fcd418?})\n\
    \t/tmp/tmpdj7f6qe4_test.go:35 +0x38c\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmpdj7f6qe4_test.go:49 +0x157\ntesting.tRunner(0xc000199040, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073951
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ []int{}\n    }\n    if len(l) % 2 == 0 {\n        temp := l[1:]\n        return\
    \ append([]int{l[0]}, sort_even(temp)...)\n    }\n    temp := l[2:]\n    return\
    \ append([]int{l[0], l[1]}, append(quicksort(l[2:5]), temp...)...)\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpazgyzerk_test.go:24:45: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073951
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Need to somehow get the indicies\
    \ of the even indicies.\n    // Then need to sort those indicies.\n    // Would\
    \ that be possible in go without using a map?\n    // Can I just append in go?\n\
    \n    len := len(l)\n    odd := make([]int, 0)\n    even := make([]int, 0)\n \
    \   // Get all odd indicies first\n    for i := 0; i < len; i++ {\n        if\
    \ i % 2 == 0 {\n            odd = append(odd, l[i])\n        } else {\n      \
    \      even = append(even, l[i])\n        }\n    }\n    // Sort all even indicies\n\
    \    temp := 0\n    swap_counter := 0\n    for i := 0; i < len/2; i++ {\n    \
    \    for j := 0; j < len/2; j++ {\n            if even[j] > even[j+1] {\n    \
    \            // Swap indicies\n                temp = even[j]\n              \
    \  even[j] = even[j+1]\n                even[j+1] = temp\n                swap_counter++\n\
    \            }\n        }\n        if swap_counter == 0 {\n            break\n\
    \        }\n    }\n    // Now I need to con\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqahh6tm1_test.go:50:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073950
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i++ {\n\
    \        // If current index is even (i.e. it's even) and the value there is larger\
    \ than the value at the next index\n        // (i.e. the odd index), then swap\
    \ them.\n        if i % 2 == 0 && l[i] > l[i+1] {\n            l[i], l[i+1] =\
    \ l[i+1], l[i]\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3]\
    \ with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512780,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x512780, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even(...)\n\t/tmp/tmp8qbdtpwp_test.go:19\n\
    command-line-arguments_test.TestSort_Even(0x0?)\n\t/tmp/tmp8qbdtpwp_test.go:33\
    \ +0x516\ntesting.tRunner(0xc0001924e0, 0x5280a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073951
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Your code here!\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp_y3do5ls_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp_y3do5ls_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073951
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    i := 0\n    l_len := len(l)\n\
    \    var sorted_list []int\n    for i < l_len {\n        if i == 0 {\n       \
    \     sorted_list = append(sorted_list, l[i])\n        } else {\n            num\
    \ := l[i]\n            j := i - 1\n            for j >= 0 {\n                if\
    \ num > sorted_list[j] {\n                    break\n                }\n     \
    \           j -= 1\n            }\n            sorted_list = append(sorted_list,\
    \ 0)\n            copy(sorted_list[j+2:], sorted_list[j+1:])\n            sorted_list[j+1]\
    \ = num\n        }\n        i += 2\n    }\n    return sorted_list\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x3, 0x2b524b595a88?})\n\
    \t/tmp/tmpo4_yi77l_test.go:26 +0x288\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmpo4_yi77l_test.go:47 +0x75\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073951
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if l == nil {\n        return\
    \ l\n    }\n    i := 0\n    for i < len(l) {\n        j := i + 1\n        for\
    \ j < len(l) {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j],\
    \ l[i]\n            }\n            j += 2\n        }\n        i += 2\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmplndyxmeu_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=5) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=3) %!s(int=1) %!s(int=9) %!s(int=2) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmplndyxmeu_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=8)\
    \ %!s(int=-12) %!s(int=5) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=4)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073951
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i +=\
    \ 2 {\n        for j := 0; j < len(l) - i - 2; j += 2 {\n            if l[j] >\
    \ l[j + 2] {\n                t := l[j]\n                l[j] = l[j + 2]\n   \
    \             l[j + 2] = t\n            }\n        }\n    }\n    return l\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073951
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ []int{}\n    }\n\n    var even_slice []int\n    for i, _ := range l {\n    \
    \    if i % 2 == 0 {\n            even_slice = append(even_slice, l[i])\n    \
    \    }\n    }\n\n    for i := 1; i < len(even_slice); i++ {\n        j := i\n\
    \        for j > 0 && even_slice[j-1] > even_slice[j] {\n            even_slice[j-1],\
    \ even_slice[j] = even_slice[j], even_slice[j-1]\n            j--\n        }\n\
    \    }\n\n    var result []int\n    for i, _ := range l {\n        if i % 2 ==\
    \ 0 {\n            result = append(result, even_slice[i/2])\n        } else {\n\
    \            result = append(result, l[i])\n        }\n    }\n\n    return result\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073952
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i, e := range l {\n     \
    \   if i % 2 == 0 {\n            for j := i+2; j < len(l); j += 2 {\n        \
    \        if l[j] < e {\n                    l[i], l[j] = l[j], l[i]\n        \
    \            e = l[i]\n                }\n            }\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073952
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even := make([]int, len(l) /\
    \ 2)\n    for i := 0; i < len(l); i += 2 {\n        even[i / 2] = l[i]\n    }\n\
    \    quickSort(even)\n    for i := 0; i < len(l); i += 2 {\n        l[i] = even[i\
    \ / 2]\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6j90p165_test.go:20:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073951
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) < 2 {\n        return\
    \ l\n    }\n    even := []int{}\n    odd := []int{}\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            even = append(even, v)\n        } else {\n\
    \            odd = append(odd, v)\n        }\n    }\n    // sort the even slice\n\
    \    even = mergesort(even)\n    // con\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3ezbvyqb_test.go:31:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073951
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ []int{}\n    }\n    l1 := make([]int, len(l))\n    k := 0\n    for i, _ := range\
    \ l {\n        if i % 2 == 0 {\n            l1[i] = l[i]\n        } else {\n \
    \           tmp := make([]int, len(l)/2)\n            for j := 0; j < len(l)/2;\
    \ j++ {\n                tmp[j] = l[i]\n                i++\n            }\n \
    \           quick_sort(tmp)\n            for j := 0; j < len(l)/2; j++ {\n   \
    \             l1[k] = tmp[j]\n                k++\n            }\n        }\n\
    \    }\n    return l1\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptj_tk98z_test.go:30:13: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073951
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i++ {\n\
    \        // . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpz9w4hs55_test.go:18:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073951
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    new_l := make([]int, len(l))\n\
    \    // Sort the even indicies\n    e := l[0:len(l):2]\n    new_e := make([]int,\
    \ len(e))\n    copy(new_e, e)\n    quick_sort(new_e)\n    // Combine them\n  \
    \  copy(new_l[0:len(new_l):2], new_e)\n    copy(new_l[1:len(new_l):2], l[1:len(l):2])\n\
    \    return new_l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy4eukwv4_test.go:21:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073951
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n\n    even_sorted := make([]int, len(l))\n    for i := 0; i < len(l);\
    \ i++ {\n        even_sorted[i] = l[i]\n    }\n\n    for i := 0; i < len(l); i\
    \ += 2 {\n        for j := i+2; j < len(l); j += 2 {\n            if even_sorted[i]\
    \ > even_sorted[j] {\n                even_sorted[i], even_sorted[j] = even_sorted[j],\
    \ even_sorted[i]\n            }\n        }\n    }\n\n    return even_sorted\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073953
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l) - 1; i++\
    \ {\n        if i % 2 == 0 {\n            for j := i + 1; j < len(l); j++ {\n\
    \                if l[j] < l[i] {\n                    l[i], l[j] = l[j], l[i]\n\
    \                }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpk1i1soxg_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=5) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=3) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123) %!s(int=2)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpk1i1soxg_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=8)\
    \ %!s(int=-10) %!s(int=5) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=4)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073953
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var s []int\n    for i, x :=\
    \ range l {\n        if i % 2 == 0 {\n            s = append(s, x)\n        }\n\
    \    }\n    sort(s)\n    var r []int\n    j := 0\n    for i, x := range l {\n\
    \        if i % 2 == 0 {\n            r = append(r, s[j])\n            j++\n \
    \       } else {\n            r = append(r, x)\n        }\n    }\n    return r\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp54ytvjpt_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073953
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if l == nil {\n        return\
    \ nil\n    }\n\n    m := len(l) / 2\n    i := 0\n    for j := 1; j < len(l); j\
    \ += 2 {\n        l[i] = l[j]\n        i++\n    }\n\n    // Bubble sort\n    for\
    \ i := 0; i < m; i++ {\n        for j := 0; j < m-i-1; j++ {\n            if l[j]\
    \ > l[j+1] {\n                l[j], l[j+1] = l[j+1], l[j]\n            }\n   \
    \     }\n    }\n\n    k := 0\n    for i := 0; i < len(l); i += 2 {\n        l[i]\
    \ = l[k]\n        k++\n    }\n\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp1wf6j2y5_test.go:60: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp1wf6j2y5_test.go:60: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=1) %!s(int=1) %!s(int=3)\
    \ %!s(int=1) %!s(int=3) %!s(int=3) %!s(int=0) %!s(int=1) %!s(int=1) %!s(int=3)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp1wf6j2y5_test.go:60:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=2)\
    \ %!s(int=2) %!s(int=8) %!s(int=2) %!s(int=2) %!s(int=8) %!s(int=11) %!s(int=2)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073953
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var evens []int\n    var indices\
    \ []int\n    for i, x := range l {\n        if i % 2 == 0 {\n            evens\
    \ = append(evens, x)\n            indices = append(indices, i)\n        }\n  \
    \  }\n    sort(evens)\n    for i, x := range evens {\n        l[indices[i]] =\
    \ x\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyevko8ey_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073953
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort := l[0:0]\n    not_sort\
    \ := l[0:0]\n    for i, x := range l {\n        if i % 2 == 0 {\n            sort\
    \ = append(sort, x)\n        } else {\n            not_sort = append(not_sort,\
    \ x)\n        }\n    }\n    sort = quick_sort(sort)\n    not_sort = quick_sort(not_sort)\n\
    \    j := 0\n    for i, x := range l {\n        if i % 2 == 0 {\n            l[i]\
    \ = sort[j]\n            j += 1\n        } else {\n            l[i] = not_sort[j]\n\
    \            j += 1\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbun481pf_test.go:25:12: undefined: quick_sort

    /tmp/tmpbun481pf_test.go:26:16: undefined: quick_sort

    /tmp/tmpbun481pf_test.go:28:12: x declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073953
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var ret []int\n    var evens\
    \ []int\n    for i, num := range l {\n        if i % 2 == 0 {\n            ret\
    \ = append(ret, num)\n        } else {\n            evens = append(evens, num)\n\
    \        }\n    }\n    fmt.Println(evens)\n    quick_sort(evens, 0, len(evens)\
    \ - 1)\n    fmt.Println(evens)\n    for i, num := range evens {\n        ret =\
    \ append(ret, num)\n    }\n    return ret\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5o9lhl8u_test.go:26:5: undefined: quick_sort

    /tmp/tmp5o9lhl8u_test.go:28:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073953
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even := make([]int, 0)\n    odd\
    \ := make([]int, 0)\n    for i, v := range l {\n        if i % 2 == 0 {\n    \
    \        even = append(even, v)\n        } else {\n            odd = append(odd,\
    \ v)\n        }\n    }\n    fmt.Println(even)\n    fmt.Println(odd)\n    return\
    \ []int{}\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 3]\n[2]\n[5 -5 -3 9 123 -10]\n[3 2 3 0 1]\n[5 -12 23 3 12]\n[8 4 2 11\
    \ -10]\n--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp1e79is7f_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp1e79is7f_test.go:45:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp1e79is7f_test.go:45: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073953
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    i := 0\n    j := 0\n    even := []int{}\n    odd := []int{}\n\
    \    for i < len(l) {\n        if i % 2 == 0 {\n            odd = append(odd,\
    \ l[i])\n        } else {\n            even = append(even, l[i])\n        }\n\
    \        i += 1\n    }\n    even = selection_sort(even)\n    for j < len(l) {\n\
    \        if j % 2 == 0 {\n            l[j] = odd[j / 2]\n        } else {\n  \
    \          l[j] = even[j / 2]\n        }\n        j += 1\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3nnvlw36_test.go:31:12: undefined: selection_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073953
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // If the list has length <=\
    \ 1, then there's nothing to do.\n    if len(l) <= 1 {\n        return l\n   \
    \ }\n\n    // We start by splitting the list into two portions: its even indicies,\
    \ and its odd indicies.\n    var even []int\n    var odd []int\n    // Even indicies\
    \ are every other element, starting with the first element.\n    for i := 0; i\
    \ < len(l); i += 2 {\n        even = append(even, l[i])\n    }\n    // Odd indicies\
    \ are every other element, starting with the second element.\n    for i := 1;\
    \ i < len(l); i += 2 {\n        odd = append(odd, l[i])\n    }\n\n    // We sort\
    \ the even list.\n    sort_even(even)\n\n    // We then copy the sorted even list\
    \ into the even indicies of a new list.\n    // We also copy the unmodified odd\
    \ list into the odd indicies of this new list.\n    newList := make([]int, len(l))\n\
    \    // We fill in the even indicies first.\n    for i := 0; i < len(even); i++\
    \ {\n        newList[i*2] = even[i]\n    }\n    // We then fill in the odd indicies.\n\
    \    for i := 0; i < len(odd); i++ {\n        newList[i*2+1] = odd[i]\n    }\n\
    \n    return newList\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpovusft68_test.go:66: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpovusft68_test.go:66:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073953
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var newL = make([]int, len(l))\n\
    \    copy(newL, l)\n    odd := true\n    for i := 0; i < len(l); i++ {\n     \
    \   // Break loop if i hits the end and the list is even.\n        if i == len(l)\
    \ - 1 && !odd {\n            break\n        }\n        if odd {\n            i++\n\
    \        } else {\n            // If not odd, sort current and last values\n \
    \           if newL[i] > newL[i - 1] {\n                newL[i], newL[i - 1] =\
    \ newL[i - 1], newL[i]\n            }\n        }\n        odd = !odd\n    }\n\
    \    return newL\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpjvxsl9hd_test.go:52: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=3) %!s(int=-3) %!s(int=9) %!s(int=123) %!s(int=0) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpjvxsl9hd_test.go:52:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=12) %!s(int=11)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073953
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) < 2 {\n        return\
    \ l\n    }\n\n    if len(l) == 2 {\n        if l[0] > l[1] {\n            return\
    \ []int{l[1], l[0]}\n        } else {\n            return l\n        }\n    }\n\
    \n    // now we know that the list has at least two elements\n\n    // TODO: this\
    \ is currently an O(n^2) process\n    // can I do better? (e.g. insert sort)\n\
    \    for i := 0; i < len(l); i += 2 {\n        for j := i + 2; j < len(l); j +=\
    \ 2 {\n            if l[i] > l[j] {\n                l[i], l[j] = l[j], l[i]\n\
    \            }\n        }\n    }\n\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // write your code in Go 1.4\n\
    \    if len(l) <= 1 {\n        return l\n    }\n    evenSlice := l[1::2]\n   \
    \ sortedEvenSlice := mergeSort(evenSlice)\n    for i, v := range sortedEvenSlice\
    \ {\n        l[2*i+1] = v\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1wjxvvhn_test.go:20:21: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073953
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    max := len(l)\n    sort_e :=\
    \ make([]int, max)\n    for i := 0; i < max; i++ {\n        sort_e[i] = l[i]\n\
    \    }\n    for i := 1; i < max; i += 2 {\n        for j := i + 2; j < max; j\
    \ += 2 {\n            if sort_e[i] > sort_e[j] {\n                temp := sort_e[i]\n\
    \                sort_e[i] = sort_e[j]\n                sort_e[j] = temp\n   \
    \         }\n        }\n    }\n    return sort_e\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmplww96ee4_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmplww96ee4_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073954
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := []int{}\n    odds :=\
    \ []int{}\n    l_sorted := []int{}\n    for i, v := range l {\n        if i %\
    \ 2 == 0 {\n            odds = append(odds, v)\n        } else {\n           \
    \ evens = append(evens, v)\n        }\n    }\n    sort(evens)\n    for i, v :=\
    \ range odds {\n        l_sorted = append(l_sorted, v)\n        l_sorted = append(l_sorted,\
    \ evens[i])\n    }\n    return l_sorted\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpanqjcr4j_test.go:26:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073953
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    odd := l[1::2]\n    even := l[0::2]\n\
    \    even = merge_sort(even)\n    l = append(odd, even...)\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpeje4cxku_test.go:16:15: 2nd index required in 3-index slice

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073953
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Make a new list with the same\
    \ length as l\n    l2 := make([]int, len(l))\n    // Copy l into l2\n    copy(l2,\
    \ l)\n    // Iterate over the even indicies\n    for i := 0; i < len(l2); i+=2\
    \ {\n        // Sort the values of the even indicies\n        for j := i+2; j\
    \ < len(l2); j+=2 {\n            if l2[i] > l2[j] {\n                l2[i], l2[j]\
    \ = l2[j], l2[i]\n            }\n        }\n    }\n    return l2\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 1; i < len(l); i+=2\
    \ {\n        for j := i + 2; j < len(l); j+=2 {\n            if l[i] > l[j] {\n\
    \                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpevpk7oym_test.go:41: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpevpk7oym_test.go:41:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073954
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, 0)\n   \
    \ for i, x := range l {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ x)\n        }\n    }\n    sort(evens)\n    result := make([]int, len(l))\n \
    \   j := 0\n    for i, x := range l {\n        if i % 2 == 0 {\n            result[i]\
    \ = evens[j]\n            j++\n        } else {\n            result[i] = x\n \
    \       }\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5knhirwj_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var sorted []int\n    for i,\
    \ v := range l {\n        if i % 2 == 0 {\n            sorted = append(sorted,\
    \ v)\n        }\n    }\n    fmt.Println(sorted)\n    if len(sorted) > 1 {\n  \
    \      for i := 0; i < len(sorted); i++ {\n            for j := i + 1; j < len(sorted);\
    \ j++ {\n                if sorted[i] > sorted[j] {\n                    sorted[i],\
    \ sorted[j] = sorted[j], sorted[i]\n                }\n            }\n       \
    \ }\n    }\n    fmt.Println(sorted)\n    var results []int\n    var index int\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            results = append(results,\
    \ sorted[index])\n            index++\n        } else {\n            results =\
    \ append(results, v)\n        }\n    }\n    return results\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // NOTE: This is the signature\
    \ that was given to me by the test.\n    // I was told to return a slice that\
    \ was sorted.\n    // However, I thought it was not required to return a slice,\n\
    \    // since in the example they showed they return a slice to the caller and\
    \ not a variable.\n    // Because of this, I made the decision to sort in place\
    \ to avoid memory allocation\n    // and to return a pointer to the slice, as\
    \ suggested by the example.\n    for i := 0; i < len(l); i++ {\n        for j\
    \ := i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                tmp\
    \ := l[i]\n                l[i] = l[j]\n                l[j] = tmp\n         \
    \   }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpa66hvfrl_test.go:49: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=-5) %!s(int=-3) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=9) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpa66hvfrl_test.go:49:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=-10)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=8) %!s(int=11) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073954
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // First, find the odd indicies.\n\
    \    var odds []int\n    for i, e := range l {\n        if (i % 2) == 1 {\n  \
    \          odds = append(odds, e)\n        }\n    }\n\n    // Then, sort the even\
    \ indicies.\n    var evens []int\n    for i, e := range l {\n        if (i % 2)\
    \ == 0 {\n            evens = append(evens, e)\n        }\n    }\n    insert_sort(evens)\n\
    \n    // Finally, merge the odd and even indicies.\n    var sorted []int\n   \
    \ for i, e := range l {\n        if (i % 2) == 0 {\n            sorted = append(sorted,\
    \ evens[i / 2])\n        } else {\n            sorted = append(sorted, odds[i\
    \ / 2])\n        }\n    }\n    return sorted\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdd9mo7h2_test.go:31:5: undefined: insert_sort

    /tmp/tmpdd9mo7h2_test.go:35:12: e declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // we'll store the even indicies\
    \ of l in l_even\n    l_even := make([]int, 0)\n    // we'll store the original\
    \ values of the even indicies of l in l_even_original\n    l_even_original :=\
    \ make([]int, 0)\n    for i, v := range l {\n        if i % 2 == 0 {\n       \
    \     l_even = append(l_even, v)\n            l_even_original = append(l_even_original,\
    \ v)\n        }\n    }\n    // Now we sort l_even, and we'll use the result to\
    \ update l\n    // This should update the values of l at the even indicies, but\
    \ the\n    // values at the odd indicies should remain unchanged\n    l_even =\
    \ sort_and_check(l_even)\n    // Now we'll iterate through l_even, updating l\n\
    \    for i, _ := range l_even {\n        l[i*2] = l_even[i]\n    }\n    // Now\
    \ we return l\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptc1at3_m_test.go:29:14: undefined: sort_and_check

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Your code here\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp8l4ny9yo_test.go:17:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073955
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort_list := []int{}\n    for\
    \ i, item := range l {\n        if i % 2 == 0 {\n            sort_list = append(sort_list,\
    \ item)\n        }\n    }\n    sort_list = merge_sort(sort_list)\n    for i, item\
    \ := range l {\n        if i % 2 == 0 {\n            l[i] = sort_list[0]\n   \
    \         sort_list = sort_list[1:]\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3bb3_bor_test.go:22:17: undefined: merge_sort

    /tmp/tmp3bb3_bor_test.go:23:12: item declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073955
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := []int{}\n    odds :=\
    \ []int{}\n    sorted_evens := []int{}\n    sorted_evens_index := 0\n    odd_index\
    \ := 0\n    odd_list_len := 0\n    odd_even_len := 0\n    for i, v := range l\
    \ {\n        if i % 2 == 0 {\n            odds = append(odds, v)\n        } else\
    \ {\n            evens = append(evens, v)\n        }\n    }\n    for i, v := range\
    \ odds {\n        for j, x := range evens {\n            if x > v {\n        \
    \        sorted_evens = append(sorted_evens, x)\n                evens = append(evens[:j],\
    \ evens[j+1:]...)\n                break\n            }\n        }\n        if\
    \ i == len(odds) - 1 {\n            odd_list_len = len(odds)\n            odd_even_len\
    \ = len(sorted_evens)\n            if odd_list_len > odd_even_len {\n        \
    \        sorted_evens = append(sorted_evens, evens...)\n            }\n      \
    \  }\n    }\n    for i, v := range l {\n        if i % 2 == 0 {\n            l[i]\
    \ = v\n        } else {\n            l[i] = sorted_evens[sorted_evens_index]\n\
    \            sorted_evens_index++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7ewan32b_test.go:20:5: odd_index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073955
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    ret := make([]int, len(l))\n\
    \    copy(ret, l)\n    evens := make([]int, 0)\n    for i, n := range l {\n  \
    \      if i % 2 == 0 {\n            evens = append(evens, n)\n        }\n    }\n\
    \    if len(evens) > 0 {\n        sort(evens)\n        for i, even := range evens\
    \ {\n            ret[i*2] = even\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpml7bqegu_test.go:25:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073955
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ l\n    }\n    return merge(sort_even(l[0:len(l)/2]), sort_even(l[len(l)/2:]))\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp798sly4s_test.go:19:12: undefined: merge

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073955
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i +=\
    \ 2 {\n        for j := i; j < len(l); j += 2 {\n            if l[i] > l[j] {\n\
    \                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073955
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var even_indicies []int\n\n \
    \   for i, v := range l {\n        if i % 2 == 0 {\n            even_indicies\
    \ = append(even_indicies, v)\n        }\n    }\n\n    bubble_sort(even_indicies)\n\
    \n    j := 0\n    for i, v := range l {\n        if i % 2 == 0 {\n           \
    \ l[i] = even_indicies[j]\n            j += 1\n        }\n    }\n\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpep4mayre_test.go:24:5: undefined: bubble_sort

    /tmp/tmpep4mayre_test.go:27:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // This is just meant to be a\
    \ template \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp__88urhb_test.go:17:6: expected ''('', found TestSort_Even

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073954
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps4710wid_test.go:34: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps4710wid_test.go:34:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073949
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Since we need to sort l[1:],\
    \ it's easiest to make a copy of\n    // the slice; that way the original slice\
    \ is unmodified.\n    // There are other ways to achieve this, such as by using\
    \ the\n    // built-in sort.Slice() function, but for the purposes of this\n \
    \   // exercise this is probably the simplest.\n    sorted_list := make([]int,\
    \ len(l))\n    copy(sorted_list, l)\n    // Sort the copy.\n    sort.Ints(sorted_list[1:])\n\
    \    // Now we have the original list and the sorted list.\n    // To return the\
    \ sorted list, we must iterate through both lists\n    // and use the appropriate\
    \ values.\n    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n      \
    \      // Even indices.\n            sorted_list[i] = l[i]\n        }\n    }\n\
    \    return sorted_list\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcwtgh49a_test.go:24:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073955
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // This is the output we'll be\
    \ returning.\n    var sorted_list []int\n\n    // This is the length of the input\
    \ list.\n    list_length := len(l)\n\n    // This is a for loop.\n    // For loops\
    \ are a bit different in Go than other languages you may be familiar with.\n \
    \   // Go's for loop has only one form.\n    // Instead of counting from 0 to\
    \ list_length, we can\n    // write the i++ ourselves.\n    for i := 0; i < list_length;\
    \ i++ {\n        // This if statement checks whether i is even.\n        // If\
    \ it is, we add it to our list.\n        if i % 2 == 0 {\n            sorted_list\
    \ = append(sorted_list, l[i])\n        } else {\n            // Otherwise, we\
    \ add the value to our list.\n            sorted_list = append(sorted_list, l[i])\n\
    \        }\n    }\n\n    // Now, we return our list.\n    return sorted_list\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpqzd804fy_test.go:57: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpqzd804fy_test.go:57:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even_array := make([]int, len(l))\n\
    \    even_count := 0\n    for i, _ := range l {\n        if i % 2 == 0 {\n   \
    \         even_array[even_count] = l[i]\n            even_count++\n        }\n\
    \    }\n    fmt.Println(even_array)\n    for i := 0; i < even_count; i++ {\n \
    \       for j := 0; j < even_count; j++ {\n            if even_array[i] < even_array[j]\
    \ {\n                even_array[i], even_array[j] = even_array[j], even_array[i]\n\
    \            }\n        }\n    }\n    fmt.Println(even_array)\n    for i, _ :=\
    \ range l {\n        if i % 2 == 0 {\n            l[i] = even_array[i / 2]\n \
    \       }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // TODO: implement\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpdj9yusii_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpdj9yusii_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sorted := make([]int, len(l))\n\
    \    // odd indicies shouldn't change\n    for i := 0; i < len(l); i += 2 {\n\
    \        sorted[i] = l[i]\n    }\n    // even indicies should be sorted.\n   \
    \ j := 0\n    for i := 1; i < len(l); i += 2 {\n        sorted[i] = l[j]\n   \
    \     j++\n    }\n    return sorted\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpxec5b0ef_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpxec5b0ef_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=-5) %!s(int=9) %!s(int=2) %!s(int=123) %!s(int=-3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpxec5b0ef_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=5)\
    \ %!s(int=-12) %!s(int=8) %!s(int=23) %!s(int=-12) %!s(int=3) %!s(int=4) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Insert your code here.\n \
    \   // Remember to return the appropriate value.\n    evens := make([]int, len(l)/2)\n\
    \    odds := make([]int, len(l)/2)\n    for i := 0; i < len(l); i++ {\n      \
    \  if i % 2 == 0 {\n            odds[i/2] = l[i]\n        } else {\n         \
    \   evens[i/2] = l[i]\n        }\n    }\n    HeapSort(evens)\n    for i := 0;\
    \ i < len(l); i++ {\n        if i % 2 == 0 {\n            l[i] = odds[i/2]\n \
    \       } else {\n            l[i] = evens[i/2]\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpky1n3hur_test.go:27:5: undefined: HeapSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Your code here\n\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpoq62n_js_test.go:36: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpoq62n_js_test.go:36:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even_indices := make([]int, 0)\n\
    \    odd_indices := make([]int, 0)\n    var result = make([]int, len(l))\n   \
    \ for index, element := range l {\n        if index % 2 == 0 {\n            even_indices\
    \ = append(even_indices, element)\n        } else {\n            odd_indices =\
    \ append(odd_indices, element)\n        }\n    }\n    for idx, element := range\
    \ l {\n        if idx % 2 == 0 {\n            result[idx] = even_indices[idx/2]\n\
    \        } else {\n            result[idx] = odd_indices[idx/2]\n        }\n \
    \   }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdcw4ctf3_test.go:26:14: element declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var result []int\n    if len(l)\
    \ == 0 {\n        return result\n    }\n    result = append(result, l[0])\n  \
    \  for i := 1; i < len(l); i++ {\n        if i % 2 == 0 {\n            min :=\
    \ l[i]\n            min_index := i\n            for j := i + 1; j < len(l); j++\
    \ {\n                if l[j] < min {\n                    min = l[j]\n       \
    \             min_index = j\n                }\n            }\n            //\
    \ swap l[i] and l[min_index]\n            temp := l[i]\n            l[i] = l[min_index]\n\
    \            l[min_index] = temp\n        }\n        result = append(result, l[i])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpcv_ej4uq_test.go:56: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-10) %!s(int=2)\
    \ %!s(int=-5) %!s(int=3) %!s(int=-3) %!s(int=0) %!s(int=1) %!s(int=123) %!s(int=9)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpcv_ej4uq_test.go:56:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=-10) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073956
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var i, k int\n    var n int\n\
    \    n = len(l)\n    if n % 2 == 0 {\n        n = n / 2\n    } else {\n      \
    \  n = n / 2 + 1\n    }\n    for i = 0; i < n; i++ {\n        for k = i + 1; k\
    \ < n; k++ {\n            if l[2 * i] > l[2 * k] {\n                l[2 * i],\
    \ l[2 * k] = l[2 * k], l[2 * i]\n            }\n        }\n    }\n    return l\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073956
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // TODO: your code here\n   \
    \ return []int{}\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpx80p0vex_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmpx80p0vex_test.go:35:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpx80p0vex_test.go:35: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // TODO implement this function.\n\
    \    // If you'd like to use the swap function, it is available below.\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmphzq3qe85_test.go:36: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmphzq3qe85_test.go:36:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var even_idx_values []int\n\n\
    \    for i, val := range l {\n        if i % 2 == 0 {\n            even_idx_values\
    \ = append(even_idx_values, val)\n        }\n    }\n\n    // sort the even indicies\n\
    \    for i := 0; i < len(even_idx_values); i++ {\n        for j := i + 1; j <\
    \ len(even_idx_values); j++ {\n            if even_idx_values[i] > even_idx_values[j]\
    \ {\n                even_idx_values[i], even_idx_values[j] = even_idx_values[j],\
    \ even_idx_values[i]\n            }\n        }\n    }\n\n    // append the sorted\
    \ even indices\n    for i, val := range even_idx_values {\n        l[i] = val\n\
    \    }\n\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpnf8j_zxn_test.go:56: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpnf8j_zxn_test.go:56: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=-5) %!s(int=-3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpnf8j_zxn_test.go:56:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=3)\
    \ %!s(int=5) %!s(int=12) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l_prime := make([]int, len(l))\n\
    \    for i, _ := range l {\n        l_prime[i] = l[i]\n    }\n    for i := 1;\
    \ i < len(l); i += 2 {\n        for j := i; j > 0; j -= 2 {\n            if l_prime[j]\
    \ < l_prime[j-2] {\n                temp := l_prime[j]\n                l_prime[j]\
    \ = l_prime[j-2]\n                l_prime[j-2] = temp\n            }\n       \
    \ }\n    }\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 18 [running]:\ntesting.tRunner.func1.2({0x513780, 0xc0001ce018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc0001ce018})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even(...)\n\t/tmp/tmpimu27xc3_test.go:22\n\
    command-line-arguments_test.TestSort_Even(0x0?)\n\t/tmp/tmpimu27xc3_test.go:39\
    \ +0x6bf\ntesting.tRunner(0xc00019aea0, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073957
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    odd_indicies := []int{}\n   \
    \ even_indicies := []int{}\n    for i, v := range l {\n        if i % 2 == 0 {\n\
    \            odd_indicies = append(odd_indicies, v)\n        } else {\n      \
    \      even_indicies = append(even_indicies, v)\n        }\n    }\n    sorted_even_indicies\
    \ := Sort(even_indicies)\n    for i, v := range l {\n        if i % 2 == 0 {\n\
    \            continue\n        } else {\n            l[i] = sorted_even_indicies[i/2]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp48jtk4ic_test.go:25:29: undefined: Sort

    /tmp/tmp48jtk4ic_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073956
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l_even, l_odd := l[1:], l[:1]\n\
    \    for i := 0; i < len(l_even); i += 2 {\n        l_even[i], l_even[i+1] = min(l_even[i],\
    \ l_even[i+1]), max(l_even[i], l_even[i+1])\n    }\n    return append(l_odd, l_even...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpiz3ic3z5_test.go:18:34: undefined: min

    /tmp/tmpiz3ic3z5_test.go:18:63: undefined: max

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    firstEvenIndex := getFirstEvenIndex(l)\n\
    \    return append(append(l[:firstEvenIndex], getSortedEvenIndicies(l)...), l[firstEvenIndex+1:]...)\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp815b_f99_test.go:16:23: undefined: getFirstEvenIndex

    /tmp/tmp815b_f99_test.go:17:46: undefined: getSortedEvenIndicies

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sorted := make([]int, len(l))\n\
    \    copy(sorted, l)\n    for i, v := range l {\n        if i % 2 == 0 {\n   \
    \         // we have an even index, so insert it\n            sorted[i] = v\n\
    \        }\n    }\n    return sorted\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp1dotr32x_test.go:42: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp1dotr32x_test.go:42:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073958
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var evens []int\n    for i, v\
    \ := range l {\n        if i % 2 == 0 {\n            evens = append(evens, v)\n\
    \        }\n    }\n    evens = bubble_sort(evens)\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            l[i] = evens[i/2]\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpj0qan305_test.go:22:13: undefined: bubble_sort

    /tmp/tmpj0qan305_test.go:23:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073805
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) < 2 {\n        return\
    \ l\n    }\n\n    if len(l) == 2 {\n        if l[0] > l[1] {\n            l[0],\
    \ l[1] = l[1], l[0]\n        }\n        return l\n    }\n\n    evens := []int{}\n\
    \    odds := []int{}\n    for i, v := range l {\n        if i % 2 == 0 {\n   \
    \         evens = append(evens, v)\n        } else {\n            odds = append(odds,\
    \ v)\n        }\n    }\n\n    for i := 1; i < len(evens); i++ {\n        for j\
    \ := 0; j < len(evens) - i; j++ {\n            if evens[j] > evens[j + 1] {\n\
    \                evens[j], evens[j + 1] = evens[j + 1], evens[j]\n           \
    \ }\n        }\n    }\n\n    sorted_l := []int{}\n    for i, v := range odds {\n\
    \        sorted_l = append(sorted_l, evens[i])\n        sorted_l = append(sorted_l,\
    \ v)\n    }\n\n    return sorted_l\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpwrg3vp_q_test.go:69: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n\
    \        tmpwrg3vp_q_test.go:69: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3)\
    \ %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073958
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l_out := make([]int, len(l))\n\
    \    copy(l_out, l)\n    even_l := []int{}\n    for i, elem := range l {\n   \
    \     if i % 2 == 0 {\n            even_l = append(even_l, elem)\n        }\n\
    \    }\n    // Now even_l has the even numbers from l.\n    // Sort even_l\n \
    \   // Quick sort\n    l_length := len(even_l)\n    if l_length < 2 {\n      \
    \  return even_l\n    }\n    // Pick a pivot, which is the last element\n    pivot\
    \ := even_l[l_length - 1]\n    // Initialize lower and higher arrays\n    lower\
    \ := []int{}\n    higher := []int{}\n    // Create lower and higher arrays\n \
    \   for _, elem := range even_l[:l_length - 1] {\n        if elem <= pivot {\n\
    \            lower = append(lower, elem)\n        } else {\n            higher\
    \ = append(higher, elem)\n        }\n    }\n    // Now call sort_even on lower\
    \ and higher\n    lower = sort_even(lower)\n    higher = sort_even(higher)\n \
    \   // Append the pivot to the end of lower\n    lower = append(lower, pivot)\n\
    \    // Concat lower and higher\n    sorted_even_l := append(lower, higher...)\n\
    \    // Fill in the even indicies with the values from sorted_even_l\n    i :=\
    \ 0\n    for j, elem := range l_out {\n        if j % 2 == 0 {\n            l_out[j]\
    \ = sorted_even_l[i]\n            i += 1\n        }\n    }\n    return l_out\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcy94ttn7_test.go:53:12: elem declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073957
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i+=2\
    \ {\n        for j := i + 2; j < len(l); j+=2 {\n            if l[i] > l[j] {\n\
    \                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n  \
    \  return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073958
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ l\n    }\n\n    for i := 0; i < len(l); i += 2 {\n        for j := 0; j < len(l)\
    \ - 2; j += 2 {\n            if l[j] > l[j + 2] {\n                temp := l[j]\n\
    \                l[j] = l[j + 2]\n                l[j + 2] = temp\n          \
    \  }\n        }\n    }\n\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073958
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) < 2 {\n        return\
    \ l\n    }\n\n    var evens []int\n    for i, el := range l {\n        if i %\
    \ 2 == 0 {\n            evens = append(evens, el)\n        }\n    }\n\n    //\
    \ Sort evens\n    for i := 0; i < len(evens) - 1; i++ {\n        for j := i +\
    \ 1; j < len(evens); j++ {\n            if evens[i] > evens[j] {\n           \
    \     evens[i], evens[j] = evens[j], evens[i]\n            }\n        }\n    }\n\
    \n    var result []int\n    for i, el := range l {\n        if i % 2 == 0 {\n\
    \            result = append(result, evens[i / 2])\n        } else {\n       \
    \     result = append(result, el)\n        }\n    }\n\n    return result\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073958
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) < 2 {\n        return\
    \ l\n    }\n\n    result := make([]int, len(l))\n    for i := 0; i < len(l); i++\
    \ {\n        result[i] = l[i]\n    }\n\n    for i := 0; i < len(l) - 1; i++ {\n\
    \        if l[i] > l[i + 1] {\n            result[i], result[i + 1] = result[i\
    \ + 1], result[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp877maz31_test.go:49: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=3) %!s(int=-5) %!s(int=5) %!s(int=-3)\
    \ %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=-10) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp877maz31_test.go:49:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-12)\
    \ %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=-10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073958
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var lEven []int\n    var lOdd\
    \ []int\n    for i, v := range l {\n        if i % 2 == 0 {\n            lEven\
    \ = append(lEven, v)\n        } else {\n            lOdd = append(lOdd, v)\n \
    \       }\n    }\n    sortedEven := bubbleSort(lEven)\n    var result []int\n\
    \    for i, v := range lOdd {\n        result = append(result, lEven[i])\n   \
    \     result = append(result, v)\n    }\n    return result\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2ngv0aex_test.go:25:19: undefined: bubbleSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073958
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var result []int\n    var even\
    \ []int\n    for i, val := range l {\n        if i % 2 == 0 {\n            even\
    \ = append(even, val)\n        } else {\n            result = append(result, val)\n\
    \        }\n    }\n    sort(even)\n    // Insert the sorted evens into the result\n\
    \    for i, val := range even {\n        result = append(result[:i*2], append([]int{val},\
    \ result[i*2:]...)...)\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpluwfebmp_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073958
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    odds := []int{}\n    evens :=\
    \ []int{}\n    for i, v := range l {\n        if i % 2 == 0 {\n            odds\
    \ = append(odds, v)\n        } else {\n            evens = append(evens, v)\n\
    \        }\n    }\n    sort.Ints(evens)\n    result := []int{}\n    for i, v :=\
    \ range odds {\n        result = append(result, v)\n        result = append(result,\
    \ evens[i])\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_8mukb7a_test.go:25:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073958
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l_new := make([]int, len(l))\n\
    \    c := 0\n    for i := 0; i < len(l); i++ {\n        if i % 2 == 0 {\n    \
    \        l_new[i] = l[i]\n        } else {\n            l_new[i] = l[c]\n    \
    \        c++\n        }\n    }\n    l_new[1] = 3\n    return l_new\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp7vm77yxr_test.go:45: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp7vm77yxr_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=-5) %!s(int=9) %!s(int=2) %!s(int=123) %!s(int=-3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp7vm77yxr_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=3)\
    \ %!s(int=-12) %!s(int=8) %!s(int=23) %!s(int=-12) %!s(int=3) %!s(int=4) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evens := make([]int, 0)\n   \
    \ for i, v := range l {\n        if i % 2 == 0 {\n            evens = append(evens,\
    \ v)\n        }\n    }\n    sort(evens)\n    r := make([]int, len(l))\n    for\
    \ i, v := range l {\n        if i % 2 == 0 {\n            r[i] = evens[0]\n  \
    \          evens = evens[1:]\n        } else {\n            r[i] = v\n       \
    \ }\n    }\n    return r\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyvkuo35c_test.go:22:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073958
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    out := []int{}\n    evens := []int{}\n    for i, v := range l\
    \ {\n        if i % 2 == 0 {\n            out = append(out, v)\n        } else\
    \ {\n            evens = append(evens, v)\n        }\n    }\n    for _, v := range\
    \ evens {\n        out = append(out, v)\n    }\n    return out\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmplbu3mf1a_test.go:49: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmplbu3mf1a_test.go:49: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=-5) %!s(int=-3) %!s(int=9)\
    \ %!s(int=123) %!s(int=-10) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmplbu3mf1a_test.go:49:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-12)\
    \ %!s(int=23) %!s(int=3) %!s(int=12) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=11)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    evenList := []int{}\n    for\
    \ _, v := range l {\n        if v % 2 == 0 {\n            evenList = append(evenList,\
    \ v)\n        }\n    }\n    sortList(evenList)\n    return evenList\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpfwrhbxfg_test.go:22:5: undefined: sortList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073958
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    var res []int\n    for i, v := range l {\n        if i % 2 ==\
    \ 0 {\n            res = append(res, v)\n        } else {\n            l[i] =\
    \ -1\n        }\n    }\n    merge_sort_even(res)\n    for i, v := range l {\n\
    \        if v == -1 {\n            l[i] = res[0]\n            res = res[1:]\n\
    \        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5qbs4m_j_test.go:27:5: undefined: merge_sort_even

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073959
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) < 2 {\n        return\
    \ l\n    }\n    odd := make([]int, len(l) / 2)\n    even := make([]int, len(l)\
    \ / 2)\n    result := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n\
    \        if i % 2 == 0 {\n            odd[i / 2] = l[i]\n        } else {\n  \
    \          even[i / 2] = l[i]\n        }\n    }\n    isorted := InsertionSort(even)\n\
    \    for i := 0; i < len(odd); i++ {\n        result[2 * i] = odd[i]\n       \
    \ result[2 * i + 1] = isorted[i]\n    }\n    return result\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqalk_5eq_test.go:29:16: undefined: InsertionSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    //\n    // YOUR CODE HERE\n \
    \   //\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpdk5thz5a_test.go:37: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpdk5thz5a_test.go:37:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // TODO: implement me\n    return\
    \ []int{}\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpb0i3wspt_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmpb0i3wspt_test.go:35:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb0i3wspt_test.go:35: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    return []int{}\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp5ki6corv_test.go:34: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp5ki6corv_test.go:34:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp5ki6corv_test.go:34: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even_slice := make([]int, len(l)/2)\n\
    \    for i := 0; i < len(l); i += 2 {\n        even_slice[i/2] = l[i]\n    }\n\
    \    buble_sort(even_slice)\n    odd_slice := make([]int, len(l)/2)\n    for i\
    \ := 1; i < len(l); i += 2 {\n        odd_slice[i/2] = l[i]\n    }\n    res :=\
    \ make([]int, len(l))\n    copy(res, even_slice)\n    copy(res[len(even_slice):],\
    \ odd_slice)\n    return res\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dqpqy27_test.go:20:5: undefined: buble_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073959
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Add your code here\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpzdk_ndj0_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpzdk_ndj0_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073959
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i +=\
    \ 2 {\n        for j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j]\
    \ {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073875
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n\n    evens := []int{}\n    odds := []int{}\n    for i, v := range\
    \ l {\n        if i % 2 == 0 {\n            odds = append(odds, v)\n        }\
    \ else {\n            evens = append(evens, v)\n        }\n    }\n\n    sortedEvens\
    \ := merge_sort(evens)\n    res := []int{}\n    for i, v := range odds {\n   \
    \     res = append(res, v)\n        res = append(res, sortedEvens[i])\n    }\n\
    \n    return res\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9j5ry23l_test.go:30:20: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073959
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even_list := []int{}\n    odd_list\
    \ := []int{}\n    for i, v := range l {\n        if i % 2 == 0 {\n           \
    \ even_list = append(even_list, v)\n        } else {\n            odd_list = append(odd_list,\
    \ v)\n        }\n    }\n    quicksort(even_list)\n    new_list := []int{}\n  \
    \  for i, v := range even_list {\n        new_list = append(new_list, v)\n   \
    \     new_list = append(new_list, odd_list[i])\n    }\n    return new_list\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9u0akg2_test.go:25:5: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073959
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var even []int\n    even_indicies\
    \ := make(map[int]int)\n    for i, e := range l {\n        if i % 2 == 0 {\n \
    \           even = append(even, e)\n            even_indicies[e] = i\n       \
    \ }\n    }\n    quick_sort(even, 0, len(even)-1)\n    var result []int\n    for\
    \ _, e := range even {\n        result = append(result, l[even_indicies[e]])\n\
    \    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpksfof4uy_test.go:24:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073960
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    res := []int{}\n    evens :=\
    \ []int{}\n    for i, v := range l {\n        if i % 2 == 0 {\n            res\
    \ = append(res, v)\n        } else {\n            evens = append(evens, v)\n \
    \       }\n    }\n    sort(evens)\n    for i, v := range evens {\n        res\
    \ = append(res, v)\n    }\n    return res\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxw4mju4l_test.go:25:5: undefined: sort

    /tmp/tmpxw4mju4l_test.go:26:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073960
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l2 := make([]int, len(l))\n \
    \   for index, element := range l {\n        l2[index] = element\n    }\n    for\
    \ i := 0; i < len(l2); i += 2 {\n        for j := i + 2; j < len(l2); j += 2 {\n\
    \            if l2[i] > l2[j] {\n                l2[i], l2[j] = l2[j], l2[i]\n\
    \            }\n        }\n    }\n    return l2\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // 4 5 6 7 8 9 10\n    evens\
    \ := make([]int, 0)\n    for i, v := range l {\n        if i % 2 == 0 {\n    \
    \        evens = append(evens, v)\n        }\n    }\n    for i, v := range evens\
    \ {\n        for j := i + 1; j < len(evens); j++ {\n            if evens[j] <\
    \ v {\n                v, evens[j] = evens[j], v\n            }\n        }\n \
    \   }\n    for i, v := range evens {\n        l[i * 2] = v\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmppzgwoi9h_test.go:51: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=5) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmppzgwoi9h_test.go:51:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=5) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=23) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // I'm assuming that it's ok\
    \ to modify l since it's a slice.\n    for i := 0; i < len(l); i+=2 {\n      \
    \  for j := i + 2; j < len(l); j+=2 {\n            if l[i] > l[j] {\n        \
    \        l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    ret := make([]int, len(l))\n\
    \    odd := true\n    for i, v := range l {\n        ret[i] = v\n        if odd\
    \ {\n            odd = false\n        } else {\n            odd = true\n     \
    \       for j := i; j > 0; j-- {\n                if ret[j] < ret[j-1] {\n   \
    \                 ret[j], ret[j-1] = ret[j-1], ret[j]\n                } else\
    \ {\n                    break\n                }\n            }\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpl1yf6bvg_test.go:51: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=3) %!s(int=5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=0) %!s(int=1) %!s(int=3) %!s(int=9) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpl1yf6bvg_test.go:51:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=-10) %!s(int=2) %!s(int=4) %!s(int=23) %!s(int=3) %!s(int=11)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var even []int\n    for i, x\
    \ := range l {\n        if i%2 == 0 {\n            even = append(even, x)\n  \
    \      }\n    }\n    // sort even slice of l\n    insertion_sort(even)\n    //\
    \ inject even slice back into l\n    var j int\n    for i, x := range l {\n  \
    \      if i%2 == 0 {\n            l[i] = even[j]\n            j++\n        }\n\
    \    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmu0fbg6c_test.go:23:5: undefined: insertion_sort

    /tmp/tmpmu0fbg6c_test.go:26:12: x declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073960
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i++ {\n\
    \        if l[i] % 2 == 0 {\n            for j := 0; j < len(l); j++ {\n     \
    \           if l[j] % 2 == 0 && l[i] < l[j] {\n                    l[i], l[j]\
    \ = l[j], l[i]\n                }\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpfbntcunr_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=-10)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=2)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpfbntcunr_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-12)\
    \ %!s(int=-10) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=11) %!s(int=8)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // add code here\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpihb2lsti_test.go:35: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpihb2lsti_test.go:35:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sort_l := make([]int, len(l))\n\
    \    for i, v := range l {\n        sort_l[i] = v\n    }\n    for i := 0; i <\
    \ len(sort_l) - 1; i++ {\n        for j := i + 1; j < len(sort_l); j++ {\n   \
    \         if sort_l[i] > sort_l[j] {\n                sort_l[i], sort_l[j] = sort_l[j],\
    \ sort_l[i]\n            }\n        }\n    }\n    return sort_l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp5vmx9fm2_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=-5) %!s(int=-3) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=9) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp5vmx9fm2_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=-10)\
    \ %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=8) %!s(int=11) %!s(int=12)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // This will be the return value\n\
    \    var ret []int\n    // We will keep track of the current odd index we are\
    \ on in a variable\n    odd_index := 0\n    // Then we will look at a variable\
    \ which will keep track of the last\n    // Even index we have looked at\n   \
    \ last_seen_even_index := -1\n    // Then we will iterate through l\n    for _,\
    \ val := range l {\n        // Each time we will append val to the return value\n\
    \        ret = append(ret, val)\n        // Then we will check if val is even\n\
    \        if val % 2 == 0 {\n            // If it is, we know that we have seen\
    \ an even number\n            // So we will update last_seen_even_index\n    \
    \        last_seen_even_index = odd_index\n            // Then we will increment\
    \ odd_index\n            odd_index++\n        } else {\n            // If it isn't\
    \ we will simply increment odd_index\n            odd_index++\n        }\n   \
    \ }\n    // After we have iterated through the list, we will then\n    // iterate\
    \ through the return value\n    for i, val := range ret {\n        // And if val\
    \ is even\n        if val % 2 == 0 {\n            // We will insert the value\
    \ of ret[last_seen_even_index] in the return value at i\n            ret = append(ret[:i],\
    \ append([]int{ret[last_seen_even_index]}, ret[i:]...)...)\n            // Then\
    \ we will increment last_seen_even_index\n            last_seen_even_index++\n\
    \        }\n    }\n    // Finally we will return ret\n    return ret\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmphf9kpa3b_test.go:69: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL:\
    \ TestSort_Even/test_num__1 (0.00s)\n        tmphf9kpa3b_test.go:69: expected\
    \ '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5)\
    \ %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3)\
    \ %!s(int=-5) %!s(int=-10) %!s(int=-10) %!s(int=-10) %!s(int=-10) %!s(int=-10)\
    \ %!s(int=-10) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=1) %!s(int=-10)]'\n    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n\
    \        tmphf9kpa3b_test.go:69: expected '[%!s(int=-12) %!s(int=8) %!s(int=3)\
    \ %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]',\
    \ got '[%!s(int=5) %!s(int=-10) %!s(int=-10) %!s(int=-10) %!s(int=-10) %!s(int=-10)\
    \ %!s(int=-10) %!s(int=-10) %!s(int=-10) %!s(int=-10) %!s(int=8) %!s(int=-12)\
    \ %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    //Initalize the output list\n\
    \    m := make([]int, len(l))\n    // Copy the odd indicies over to the output\
    \ list\n    copy(m, l)\n    // Now we have to sort the even indicies:\n    //\
    \ It is important that we make a separate copy of the list to sort, otherwise\n\
    \    // we would be sorting the output list directly, and that would change the\
    \ odd indicies\n    n := make([]int, len(l)/2)\n    // Copy the even indicies\
    \ over to the new list\n    for i := 0; i < len(l); i += 2 {\n        n[i/2] =\
    \ l[i]\n    }\n    // Sort the list using quicksort\n    quickSort(n)\n    //\
    \ Now we copy the sorted even indicies back over to the output list\n    for i\
    \ := 0; i < len(l); i += 2 {\n        m[i] = n[i/2]\n    }\n    return m\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6dx6i94l_test.go:29:5: undefined: quickSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073960
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Copy l to l'.\n    l_prime\
    \ := make([]int, len(l))\n    copy(l_prime, l)\n\n    // Bubble sort all the even\
    \ indicies.\n    for i := 0; i < len(l_prime); i += 2 {\n        for j := i +\
    \ 2; j < len(l_prime); j += 2 {\n            if l_prime[i] > l_prime[j] {\n  \
    \              l_prime[i], l_prime[j] = l_prime[j], l_prime[i]\n            }\n\
    \        }\n    }\n\n    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Take a lenth n list l and\
    \ return a sorted list such that l' is identical to l at the odd indicies\n  \
    \  // and at the even indicies l' is equal to the even indicies of l, but sorted.\n\
    \    var r = make([]int, len(l))\n    for i, v := range l {\n        if i%2 ==\
    \ 0 {\n            r[i] = v\n        } else {\n            r[i] = v\n        }\n\
    \    }\n    return r\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate :=\
    \ sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp4x_opcao_test.go:44: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp4x_opcao_test.go:44:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l_copy := make([]int, len(l))\n\
    \    copy(l_copy, l)\n    for i := 1; i < len(l_copy); i+=2 {\n        for j :=\
    \ 1; j < len(l_copy); j+=2 {\n            if l_copy[j-1] > l_copy[j] {\n     \
    \           tmp := l_copy[j-1]\n                l_copy[j-1] = l_copy[j]\n    \
    \            l_copy[j] = tmp\n            }\n        }\n    }\n    return l_copy\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpsvp_m__k_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=3) %!s(int=5) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpsvp_m__k_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=-10)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i++ {\n\
    \        for j := i; j < len(l); j++ {\n            if l[i] < l[j] {\n       \
    \         l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpj4psv4b7_test.go:41: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpj4psv4b7_test.go:41: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=123) %!s(int=9) %!s(int=5) %!s(int=3)\
    \ %!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=-3) %!s(int=-5) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpj4psv4b7_test.go:41:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=23) %!s(int=12)\
    \ %!s(int=11) %!s(int=8) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=-10)\
    \ %!s(int=-12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    for k, _ := range l {\n        if k % 2 == 0 {\n            for\
    \ i := 0; i < len(l); i++ {\n                if i % 2 == 0 {\n               \
    \     j := i\n                    for j < len(l) {\n                        if\
    \ l[j] < l[i] {\n                            l[i], l[j] = l[j], l[i]\n       \
    \                 }\n                        j += 2\n                    }\n \
    \               }\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ l\n    }\n    // Take every other value in l into its own list\n    even :=\
    \ []int{}\n    for i := 1; i < len(l); i += 2 {\n        even = append(even, l[i])\n\
    \    }\n    // Now sort even\n    for i := 0; i < len(even); i++ {\n        for\
    \ j := i + 1; j < len(even); j++ {\n            if even[i] > even[j] {\n     \
    \           even[i], even[j] = even[j], even[i]\n            }\n        }\n  \
    \  }\n    // Now build the final list\n    final := []int{}\n    for i := 0; i\
    \ < len(l); i++ {\n        if i % 2 == 0 {\n            final = append(final,\
    \ l[i])\n        } else {\n            final = append(final, even[i/2])\n    \
    \    }\n    }\n    return final\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpb7ykg_k2_test.go:59: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpb7ykg_k2_test.go:59:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l0 := make([]int, len(l))\n \
    \   for i, v := range l {\n        l0[i] = v\n    }\n    for i := 1; i < len(l0);\
    \ i += 2 {\n        for j := i + 2; j < len(l0); j += 2 {\n            if l0[i]\
    \ > l0[j] {\n                l0[i], l0[j] = l0[j], l0[i]\n            }\n    \
    \    }\n    }\n    return l0\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmp4a6npq4d_test.go:45: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=1)\
    \ %!s(int=-3) %!s(int=2) %!s(int=9) %!s(int=3) %!s(int=123) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp4a6npq4d_test.go:45:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-10)\
    \ %!s(int=-12) %!s(int=2) %!s(int=23) %!s(int=4) %!s(int=3) %!s(int=8) %!s(int=12)\
    \ %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073962
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var even_list []int\n    var\
    \ odd_list []int\n    for i, _ := range l {\n        if i % 2 == 0 {\n       \
    \     even_list = append(even_list, l[i])\n        } else {\n            odd_list\
    \ = append(odd_list, l[i])\n        }\n    }\n    // sort even list\n    even_list\
    \ = sort(even_list)\n    // interleave sorted even list with odd list\n    var\
    \ ret []int\n    for i, _ := range even_list {\n        ret = append(ret, even_list[i])\n\
    \        ret = append(ret, odd_list[i])\n    }\n    return ret\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1al6a3q_test.go:26:17: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073961
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i, n := range l {\n     \
    \   if i % 2 == 0 {\n            continue\n        }\n        for j := range l\
    \ {\n            if l[j] > n && j % 2 == 0 {\n                l[i], l[j] = l[j],\
    \ l[i]\n            }\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpxtqawxv0_test.go:44: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpxtqawxv0_test.go:44: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=123) %!s(int=-5) %!s(int=9)\
    \ %!s(int=-3) %!s(int=5) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpxtqawxv0_test.go:44:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=12)\
    \ %!s(int=-12) %!s(int=23) %!s(int=2) %!s(int=8) %!s(int=4) %!s(int=11) %!s(int=5)\
    \ %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073962
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    even := make([]int, 0)\n    odd\
    \ := make([]int, 0)\n    result := make([]int, 0)\n    odd_idx := 0\n    even_idx\
    \ := 0\n    for i, n := range l {\n        if n % 2 == 0 {\n            even =\
    \ append(even, n)\n            even_idx = i\n        } else {\n            odd\
    \ = append(odd, n)\n            odd_idx = i\n        }\n    }\n    result = append(result,\
    \ even...)\n    result = append(result, odd...)\n    return result\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2rl4wypg_test.go:19:5: odd_idx declared but not used

    /tmp/tmp2rl4wypg_test.go:20:5: even_idx declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073962
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // first create a list of the\
    \ even indicies of l\n    evens := []int{}\n    for i, value := range l {\n  \
    \      if i % 2 == 0 {\n            evens = append(evens, value)\n        }\n\
    \    }\n    // now sort the evens\n    for i := 0; i < len(evens); i++ {\n   \
    \     for j := 0; j < len(evens); j++ {\n            if evens[i] < evens[j] {\n\
    \                // now swap\n                tmp := evens[i]\n              \
    \  evens[i] = evens[j]\n                evens[j] = tmp\n            }\n      \
    \  }\n    }\n    // now rebuild the return list\n    k := 0\n    for i, value\
    \ := range l {\n        if i % 2 == 0 {\n            l[i] = evens[k]\n       \
    \     k++\n        }\n    }\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe51pqknr_test.go:36:12: value declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073962
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var result []int\n    var e []int\n\
    \    for i, v := range l {\n        if (i % 2) == 0 {\n            result = append(result,\
    \ v)\n        } else {\n            e = append(e, v)\n        }\n    }\n    for\
    \ i, v := range e {\n        result = append(result, v)\n    }\n    return result\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzy6m3p7p_test.go:25:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073962
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i +=\
    \ 2 {\n        for j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j]\
    \ {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073875
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var res []int\n    var evens\
    \ []int\n    var odds []int\n    var idx int = 0\n    for _, elt := range l {\n\
    \        if idx % 2 == 0 {\n            odds = append(odds, elt)\n        } else\
    \ {\n            evens = append(evens, elt)\n        }\n        idx += 1\n   \
    \ }\n    quick_sort(evens)\n    for i, _ := range odds {\n        res = append(res,\
    \ odds[i])\n        res = append(res, evens[i])\n    }\n    return res\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpednekmj6_test.go:28:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073962
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var evens []int\n    for i, val\
    \ := range l {\n        if i % 2 == 0 {\n            evens = append(evens, val)\n\
    \        }\n    }\n    fmt.Println(evens)\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 3]\n[5 -5 -3 9 123 -10]\n[5 -12 23 3 12]\n--- FAIL: TestSort_Even (0.00s)\n\
    \    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmpi3px2e1l_test.go:41:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=1) %!s(int=-10)]'\n    --- FAIL: TestSort_Even/test_num__2\
    \ (0.00s)\n        tmpi3px2e1l_test.go:41: expected '[%!s(int=-12) %!s(int=8)\
    \ %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12) %!s(int=11) %!s(int=23)\
    \ %!s(int=-10)]', got '[%!s(int=5) %!s(int=8) %!s(int=-12) %!s(int=4) %!s(int=23)\
    \ %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073963
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    r := make([]int, len(l))\n  \
    \  var lEven []int\n\n    for i, v := range l {\n        r[i] = v\n        if\
    \ i%2 == 0 {\n            lEven = append(lEven, v)\n        }\n    }\n\n    for\
    \ i, v := range lEven {\n        // fmt.Println(i, v)\n        for j := i+1; j\
    \ < len(lEven); j++ {\n            if lEven[j] < lEven[i] {\n                lEven[i],\
    \ lEven[j] = lEven[j], lEven[i]\n            }\n        }\n    }\n\n    // fmt.Println(lEven)\n\
    \n    for i, v := range lEven {\n        r[i] = v\n    }\n\n    return r\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmi15z0lk_test.go:26:12: v declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073963
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var evens []int\n    var odds\
    \ []int\n    for i, v := range l {\n        if i % 2 == 0 {\n            odds\
    \ = append(odds, v)\n        } else {\n            evens = append(evens, v)\n\
    \        }\n    }\n    //sort evens slice\n    for i := 0; i < len(evens) - 1;\
    \ i++ {\n        min_i := i\n        for j := i + 1; j < len(evens); j++ {\n \
    \           if evens[j] < evens[min_i] {\n                min_i = j\n        \
    \    }\n        }\n        if min_i != i {\n            //swap\n            evens[i],\
    \ evens[min_i] = evens[min_i], evens[i]\n        }\n    }\n    var new_list []int\n\
    \    for i, v := range odds {\n        new_list = append(new_list, v)\n      \
    \  new_list = append(new_list, evens[i])\n    }\n    return new_list\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc0000c4600, 0x3, 0x2ac066298a88?})\n\
    \t/tmp/tmp37gojluw_test.go:41 +0x2d5\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmp37gojluw_test.go:53 +0x75\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073963
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var out []int\n    var even []int\n\
    \    for i, elem := range l {\n        if i % 2 == 0 {\n            out = append(out,\
    \ elem)\n        } else {\n            even = append(even, elem)\n        }\n\
    \    }\n    for _, v := range even {\n        out = append(out, v)\n    }\n  \
    \  return out\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpo3ajwmfz_test.go:46: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpo3ajwmfz_test.go:46: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=-5) %!s(int=-3) %!s(int=9)\
    \ %!s(int=123) %!s(int=-10) %!s(int=3) %!s(int=2) %!s(int=3) %!s(int=0) %!s(int=1)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpo3ajwmfz_test.go:46:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-12)\
    \ %!s(int=23) %!s(int=3) %!s(int=12) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=11)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073963
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var res = make([]int, len(l))\n\
    \    copy(res, l)\n    for i := 0; i < len(l); i += 2 {\n        for j := i +\
    \ 2; j < len(l); j += 2 {\n            if l[i] > l[j] {\n                res[i],\
    \ res[j] = res[j], res[i]\n            }\n        }\n    }\n    return res\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpt1_ttacu_test.go:43: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=3) %!s(int=-3) %!s(int=2)\
    \ %!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpt1_ttacu_test.go:43:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=3) %!s(int=8)\
    \ %!s(int=5) %!s(int=4) %!s(int=12) %!s(int=2) %!s(int=23) %!s(int=11) %!s(int=-12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073963
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var result []int\n    for i,\
    \ v := range l {\n        if i%2 == 0 {\n            result = append(result, v)\n\
    \        } else {\n            result = append(result, sort_even_aux(l[i-1:i+1])...)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3dbvhy6__test.go:21:37: undefined: sort_even_aux

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073963
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    n := len(l)\n    even := make([]int,\
    \ n/2)\n    for i := 0; i < n; i += 2 {\n        even[i/2] = l[i]\n    }\n   \
    \ // TODO: figure out why this does not sort in place\n    even = sort_odd(even)\n\
    \    for i := 0; i < n; i += 2 {\n        l[i] = even[i/2]\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxqd9p8a4_test.go:22:12: undefined: sort_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073963
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n\n    new_list := make([]int, len(l))\n    copy(new_list, l)\n\n \
    \   var even_list []int\n    for i, v := range l {\n        if i % 2 == 0 {\n\
    \            continue\n        }\n        even_list = append(even_list, v)\n \
    \   }\n\n    for i, v := range sort(even_list) {\n        new_list[i*2 + 1] =\
    \ v\n    }\n\n    return new_list\n}\n\nfunc TestSort_Even(t *testing.T) {\n \
    \ candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpugg3bzp6_test.go:31:23: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073963
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l) - 1; i++\
    \ {\n        if l[i] > l[i + 1] {\n            tmp := l[i]\n            l[i] =\
    \ l[i + 1]\n            l[i + 1] = tmp\n        }\n    }\n    return l\n}\n\n\
    func TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpp4tj2zip_test.go:41: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3)\
    \ %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=-10) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpp4tj2zip_test.go:41:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=-12)\
    \ %!s(int=4) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12) %!s(int=-10)\
    \ %!s(int=23)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073963
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    for i := 0; i < len(l); i +=\
    \ 2 {\n        for j := i + 2; j < len(l); j += 2 {\n            if l[i] > l[j]\
    \ {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073875
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var odd []int\n    var even []int\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            odd = append(odd,\
    \ v)\n        } else {\n            even = append(even, v)\n        }\n    }\n\
    \    for i, v := range even {\n        for j := i + 1; j < len(even); j++ {\n\
    \            if even[j] < v {\n                v, even[j] = even[j], v\n     \
    \       }\n        }\n        odd[i] = v\n    }\n    return odd\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpzvvxftr6_test.go:51: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n\
    \        tmpzvvxftr6_test.go:51: expected '[%!s(int=-10) %!s(int=3) %!s(int=-5)\
    \ %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1)\
    \ %!s(int=123)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3)\
    \ %!s(int=-10)]'\n    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpzvvxftr6_test.go:51:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=2)\
    \ %!s(int=4) %!s(int=8) %!s(int=11)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\n\
    FAIL\n"
  timestamp: 1660073963
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) <= 1 {\n        return\
    \ l\n    }\n    even := make([]int, 0)\n    odd := make([]int, 0)\n    for i,\
    \ v := range l {\n        if i % 2 == 0 {\n            even = append(even, v)\n\
    \        } else {\n            odd = append(odd, v)\n        }\n    }\n    even\
    \ = bubble_sort(even)\n    var ans []int\n    for i, v := range odd {\n      \
    \  if i == 0 {\n            ans = append(ans, even[i])\n        }\n        ans\
    \ = append(ans, v)\n        if i != len(odd) - 1 {\n            ans = append(ans,\
    \ even[i + 1])\n        }\n    }\n    return ans\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd5pvlo51_test.go:28:12: undefined: bubble_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073963
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ l\n    }\n    // Find the midpoint\n    mid := len(l) / 2\n    // copy the even\
    \ indicies into a new slice (the \"left\" part)\n    left := make([]int, mid)\n\
    \    copy(left, l[:mid*2])\n    // copy the odd indicies into a new slice (the\
    \ \"right\" part)\n    right := make([]int, len(l)-mid)\n    copy(right, l[mid*2:])\n\
    \    // Sort the left part\n    for i := 0; i < len(left)-1; i++ {\n        //\
    \ Use Bubble Sort to sort the left part\n        for j := 0; j < len(left)-1;\
    \ j++ {\n            if left[j] > left[j+1] {\n                left[j], left[j+1]\
    \ = left[j+1], left[j]\n            }\n        }\n    }\n    // Combine the left\
    \ and right parts\n    res := make([]int, len(l))\n    copy(res, left)\n    copy(res[mid*2:],\
    \ right)\n    return res\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate\
    \ := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected:\
    \ []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n \
    \    { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected:\
    \ []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmpurtlbr0d_test.go:58: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[%!s(int=1) %!s(int=0) %!s(int=3)]'\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpurtlbr0d_test.go:58: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-5) %!s(int=-3) %!s(int=2) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpurtlbr0d_test.go:58:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-12) %!s(int=4)\
    \ %!s(int=5) %!s(int=8) %!s(int=23) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073964
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) < 2 {\n        return\
    \ l\n    }\n\n    var l_odd_indices []int\n    var l_even_indices []int\n\n  \
    \  for index, value := range l {\n        if index % 2 == 0 {\n            l_odd_indices\
    \ = append(l_odd_indices, value)\n        } else {\n            l_even_indices\
    \ = append(l_even_indices, value)\n        }\n    }\n\n    is_sorted := false\n\
    \    for is_sorted == false {\n        is_sorted = true\n        for index, value\
    \ := range l_even_indices {\n            if index < len(l_even_indices) - 1 &&\
    \ value > l_even_indices[index + 1] {\n                // if the value is larger\
    \ than the value after it, swap them\n                temp := l_even_indices[index\
    \ + 1]\n                l_even_indices[index + 1] = value\n                l_even_indices[index]\
    \ = temp\n                is_sorted = false\n            }\n        }\n    }\n\
    \n    var sorted_list []int\n    for index, value := range l_odd_indices {\n \
    \       sorted_list = append(sorted_list, value)\n        sorted_list = append(sorted_list,\
    \ l_even_indices[index])\n    }\n\n    return sorted_list\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even({0xc000014360?, 0x3, 0x5e3ea0?})\n\
    \t/tmp/tmphut49yh3_test.go:48 +0x2b2\ncommand-line-arguments_test.TestSort_Even(0x0?)\n\
    \t/tmp/tmphut49yh3_test.go:61 +0x6f\ntesting.tRunner(0xc0001201a0, 0x5290a0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073964
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    odd := make([]int, len(l) / 2)\n\
    \    for i := 0; i < len(l); i += 2 {\n        odd[i / 2] = l[i]\n    }\n    for\
    \ i := 0; i < len(l); i += 2 {\n        var tmp int\n        for _, v := range\
    \ odd {\n            if v < l[i] {\n                tmp = v\n            }\n \
    \       }\n        l[i] = tmp\n    }\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\npanic: runtime error: index out of range\
    \ [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1]\
    \ with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513780,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513780, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sort_even(...)\n\t/tmp/tmpmfei1ute_test.go:18\n\
    command-line-arguments_test.TestSort_Even(0x0?)\n\t/tmp/tmpmfei1ute_test.go:39\
    \ +0x65f\ntesting.tRunner(0xc0001a0340, 0x5290a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073964
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ []int{}\n    }\n    res := make([]int, len(l))\n    for i := range l {\n   \
    \     res[i] = l[i]\n    }\n    for i := 1; i < len(l); i += 2 {\n        for\
    \ j := 0; j < i; j += 2 {\n            if res[i] < res[j] {\n                res[i],\
    \ res[j] = res[j], res[i]\n            }\n        }\n    }\n    return res\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpl1rlb4hm_test.go:48: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=5) %!s(int=-5) %!s(int=3)\
    \ %!s(int=-3) %!s(int=3) %!s(int=1) %!s(int=9) %!s(int=2) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpl1rlb4hm_test.go:48:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=8)\
    \ %!s(int=-12) %!s(int=5) %!s(int=2) %!s(int=23) %!s(int=3) %!s(int=11) %!s(int=4)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073964
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var l_even []int\n    for i,\
    \ v := range l {\n        if i % 2 == 0 {\n            l_even = append(l_even,\
    \ v)\n        }\n    }\n    if len(l_even) == 0 {\n        return l\n    }\n \
    \   for i := 0; i < len(l_even); i++ {\n        for j := 0; j < len(l_even) -\
    \ 1; j++ {\n            if l_even[j] > l_even[j + 1] {\n                l_even[j],\
    \ l_even[j + 1] = l_even[j + 1], l_even[j]\n            }\n        }\n    }\n\
    \    var l_prime []int\n    for i, v := range l {\n        if i % 2 == 0 {\n \
    \           l_prime = append(l_prime, l_even[0])\n            l_even = l_even[1:]\n\
    \        } else {\n            l_prime = append(l_prime, v)\n        }\n    }\n\
    \    return l_prime\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073964
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // insert your code here\n  \
    \  for i:= 0; i < len(l); i+=2 {\n        for j:= i+2; j < len(l); j+=2 {\n  \
    \          if l[i] > l[j] {\n                temp := l[i]\n                l[i]\
    \ = l[j]\n                l[j] = temp\n            }\n        }\n    }\n    return\
    \ l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073964
- exit_code: 0
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    sorted := false\n    var temp\
    \ int\n    for sorted == false {\n        sorted = true\n        for i := 0; i\
    \ < len(l); i += 2 {\n            if i + 2 < len(l) && l[i] > l[i + 2] {\n   \
    \             temp = l[i]\n                l[i] = l[i + 2]\n                l[i\
    \ + 2] = temp\n                sorted = false\n            }\n        }\n    }\n\
    \    return l\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073964
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    res := make([]int, len(l))\n\
    \    copy(res, l)\n    evens := []int{}\n    for i, val := range l {\n       \
    \ if i % 2 == 0 {\n            evens = append(evens, val)\n        }\n    }\n\
    \    sorted := insertion_sort(evens)\n    for i, val := range l {\n        if\
    \ i % 2 == 0 {\n            res[i] = sorted[i / 2]\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxxb58wj2_test.go:24:15: undefined: insertion_sort

    /tmp/tmpxxb58wj2_test.go:25:12: val declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073964
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var ans []int\n    even := []int{}\n\
    \    for i, v := range l {\n        if i % 2 == 0 {\n            ans = append(ans,\
    \ v)\n        } else {\n            even = append(even, v)\n        }\n    }\n\
    \    for _, v := range even {\n        index := 0\n        for _, va := range\
    \ ans {\n            if v < va {\n                ans = append(ans[:index], append([]int{v},\
    \ ans[index:]...)...)\n                break\n            }\n            index\
    \ += 1\n        }\n        if index == len(ans) {\n            ans = append(ans,\
    \ v)\n        }\n    }\n    return ans\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpjsiqkyw7_test.go:56: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)\
    \ %!s(int=3) %!s(int=5) %!s(int=-5) %!s(int=-3) %!s(int=9) %!s(int=123) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpjsiqkyw7_test.go:56:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=-10) %!s(int=2)\
    \ %!s(int=4) %!s(int=5) %!s(int=-12) %!s(int=8) %!s(int=11) %!s(int=23) %!s(int=3)\
    \ %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073964
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    output := make([]int, len(l))\n\
    \    copy(output, l)\n    even := make([]int, 0)\n    for i, v := range l {\n\
    \        if i % 2 == 0 {\n            even = append(even, v)\n        }\n    }\n\
    \    sorted := make([]int, len(even))\n    copy(sorted, even)\n    bubble_sort(sorted)\n\
    \    for i, v := range sorted {\n        output[i*2] = v\n    }\n    return output\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2biz2aeo_test.go:26:5: undefined: bubble_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073964
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    odd_values := make([]int, 0)\n\
    \    even_values := make([]int, 0)\n    new_list := make([]int, len(l))\n    for\
    \ i, val := range l {\n        if i % 2 == 0 {\n            odd_values = append(odd_values,\
    \ val)\n        } else {\n            even_values = append(even_values, val)\n\
    \        }\n    }\n    sort_slice(even_values)\n    for i, _ := range l {\n  \
    \      if i % 2 == 0 {\n            new_list[i] = odd_values[i / 2]\n        }\
    \ else {\n            new_list[i] = even_values[i / 2]\n        }\n    }\n   \
    \ return new_list\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu3qb7osf_test.go:26:5: undefined: sort_slice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073964
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    if len(l) == 0 {\n        return\
    \ l\n    }\n    if len(l) == 1 {\n        return l\n    }\n    // pick the middle\
    \ value\n    middle := len(l) / 2\n    // create a slice that holds the even indicies\
    \ of l\n    even := l[1:middle*2]\n    //recursively call sort on the even indices\n\
    \    even = sort(even)\n    // assign the recursive output to even.\n    // create\
    \ a slice that holds the odd indicies of l\n    odd := l[middle*2:len(l)]\n  \
    \  // create a copy of l\n    newl := l\n    // for each even element in the newl,\
    \ assign it the value at the same index of even.\n    for i := 0; i < len(even);\
    \ i++ {\n        newl[2*i+1] = even[i]\n    }\n    // for each odd element in\
    \ the newl, assign it the value at the same index of odd.\n    for i := 0; i <\
    \ len(odd); i++ {\n        newl[2*i] = odd[i]\n    }\n    return newl\n}\n\nfunc\
    \ TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnct5bmi2_test.go:27:12: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073964
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // Your code here\n    return\
    \ []int{}\n}\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1,\
    \ 2, 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__0\
    \ (0.00s)\n        tmp2g69glmy_test.go:35: expected '[%!s(int=1) %!s(int=2) %!s(int=3)]',\
    \ got '[]'\n    --- FAIL: TestSort_Even/test_num__1 (0.00s)\n        tmp2g69glmy_test.go:35:\
    \ expected '[%!s(int=-10) %!s(int=3) %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3)\
    \ %!s(int=5) %!s(int=0) %!s(int=9) %!s(int=1) %!s(int=123)]', got '[]'\n    ---\
    \ FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmp2g69glmy_test.go:35: expected\
    \ '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2) %!s(int=12)\
    \ %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073964
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    // find first even index\n  \
    \  i := 0\n    for ; i < len(l); i += 2 {\n        if i%2 == 0 {\n           \
    \ break\n        }\n    }\n    // i is first even index\n\n    // find last even\
    \ index\n    j := len(l) - 1\n    for ; j >= 0; j -= 2 {\n        if j%2 == 0\
    \ {\n            break\n        }\n    }\n    // j is last even index\n\n    //\
    \ make a sub list containing only the even indicies\n    l_even := l[i:j+1]\n\n\
    \    // sort l_even\n    for i := 0; i < len(l_even) - 1; i++ {\n        for j\
    \ := i + 1; j < len(l_even); j++ {\n            if l_even[i] > l_even[j] {\n \
    \               temp := l_even[i]\n                l_even[i] = l_even[j]\n   \
    \             l_even[j] = temp\n            }\n        }\n    }\n\n    // replace\
    \ the even indicies of l with the elements of l_even\n    for i, e := range l_even\
    \ {\n        l[i] = e\n    }\n\n    return l\n}\n\nfunc TestSort_Even(t *testing.T)\
    \ {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmpxgb874_d_test.go:71: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=-10) %!s(int=-5) %!s(int=-3) %!s(int=0)\
    \ %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=5) %!s(int=9) %!s(int=123)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmpxgb874_d_test.go:71:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073964
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    l_odd := make([]int, 0)\n   \
    \ l_even := make([]int, 0)\n    for i, v := range l {\n        if i % 2 == 0 {\n\
    \            l_odd = append(l_odd, v)\n        } else {\n            l_even =\
    \ append(l_even, v)\n        }\n    }\n    l_even = sort_list(l_even)\n    l_sorted\
    \ := make([]int, 0)\n    for i, v := range l_odd {\n        l_sorted = append(l_sorted,\
    \ v)\n        l_sorted = append(l_sorted, l_even[i])\n    }\n    return l_sorted\n\
    }\n\nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2,\
    \ 3} },\n     { actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}),\
    \ expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5,\
    \ 8, -12, 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12,\
    \ 11, 23, -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7gfg6qwm_test.go:25:14: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073964
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var evens []int\n    var odds\
    \ []int\n    for i, v := range l {\n        if i % 2 == 0 {\n            odds\
    \ = append(odds, v)\n        } else {\n            evens = append(evens, v)\n\
    \        }\n    }\n    return append(sort_odd(odds), sort_even(evens)...)\n}\n\
    \nfunc TestSort_Even(t *testing.T) {\n  candidate := sort_even\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     {\
    \ actual: candidate([]int{5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10,\
    \ 3, -5, 2, -3, 3, 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12,\
    \ 4, 23, 2, 3, 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23,\
    \ -10} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpikx45o9c_test.go:25:19: undefined: sort_odd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073964
- exit_code: 2
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    var ret []int\n    var evens\
    \ []int\n    var odds []int\n    for i, v := range l {\n        if i % 2 == 0\
    \ {\n            odds = append(odds, v)\n        } else {\n            evens =\
    \ append(evens, v)\n        }\n    }\n    evens = sort(evens)\n    for i, _ :=\
    \ range odds {\n        ret = append(ret, odds[i])\n        ret = append(ret,\
    \ evens[i])\n    }\n    return ret\n}\n\nfunc TestSort_Even(t *testing.T) {\n\
    \  candidate := sort_even\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3, 5, 0, 9,\
    \ 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3, 11, 12, -10}),\
    \ expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpeuuktgv0_test.go:26:13: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073964
- exit_code: 1
  program: "package sort_even_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // This function takes a list l and returns a list l' such that\n// l' is identical\
    \ to l in the odd indicies, while its values at the even indicies are equal\n\
    // to the values of the even indicies of l, but sorted.\n// >>> sort_even([]int{1,\
    \ 2, 3})\n// []int{1, 2, 3}\n// >>> sort_even([]int{5, 6, 3, 4})\n// []int{3,\
    \ 6, 5, 4}\nfunc sort_even(l []int) []int {\n    return l\n}\n\nfunc TestSort_Even(t\
    \ *testing.T) {\n  candidate := sort_even\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 3}), expected: []int{1, 2, 3} },\n     { actual: candidate([]int{5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), expected: []int{-10, 3, -5, 2, -3, 3,\
    \ 5, 0, 9, 1, 123} },\n     { actual: candidate([]int{5, 8, -12, 4, 23, 2, 3,\
    \ 11, 12, -10}), expected: []int{-12, 8, 3, 4, 5, 2, 12, 11, 23, -10} },\n   }\n\
    \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSort_Even (0.00s)\n    --- FAIL: TestSort_Even/test_num__1\
    \ (0.00s)\n        tmps4710wid_test.go:34: expected '[%!s(int=-10) %!s(int=3)\
    \ %!s(int=-5) %!s(int=2) %!s(int=-3) %!s(int=3) %!s(int=5) %!s(int=0) %!s(int=9)\
    \ %!s(int=1) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=-5) %!s(int=2)\
    \ %!s(int=-3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=1) %!s(int=-10)]'\n\
    \    --- FAIL: TestSort_Even/test_num__2 (0.00s)\n        tmps4710wid_test.go:34:\
    \ expected '[%!s(int=-12) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=2)\
    \ %!s(int=12) %!s(int=11) %!s(int=23) %!s(int=-10)]', got '[%!s(int=5) %!s(int=8)\
    \ %!s(int=-12) %!s(int=4) %!s(int=23) %!s(int=2) %!s(int=3) %!s(int=11) %!s(int=12)\
    \ %!s(int=-10)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073949
