language: go_test.go
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // length of list is 0 or 1\n    if len(l) <= 1 {\n     \
    \   return true\n    }\n\n    // list elements are increasing\n    if l[0] < l[len(l)-1]\
    \ {\n        for i := 0; i < len(l)-1; i++ {\n            if l[i] > l[i+1] {\n\
    \                return false\n            }\n        }\n    }\n\n    // list\
    \ elements are decreasing\n    if l[0] > l[len(l)-1] {\n        for i := 0; i\
    \ < len(l)-1; i++ {\n            if l[i] < l[i+1] {\n                return false\n\
    \            }\n        }\n    }\n\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    prev :=\
    \ l[0]\n    sig := 0\n    for _, elem := range l[1:] {\n        if elem == prev\
    \ {\n            continue\n        }\n        if sig == 0 {\n            sig =\
    \ elem - prev\n        } else if sig * (elem - prev) < 0 {\n            return\
    \ false\n        }\n        prev = elem\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    increasing\
    \ := l[0] < l[1]\n    for i := 2; i < len(l); i++ {\n        if increasing &&\
    \ l[i-1] > l[i] {\n            return false\n        }\n        if !increasing\
    \ && l[i-1] < l[i] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    sign :=\
    \ 0\n    for i := 1; i < len(l); i++ {\n        if l[i] == l[i-1] {\n        \
    \    continue\n        }\n        if sign == 0 {\n            sign = 1\n     \
    \       if l[i] < l[i-1] {\n                sign = -1\n            }\n       \
    \ }\n        if sign == 1 && l[i] < l[i-1] {\n            return false\n     \
    \   }\n        if sign == -1 && l[i] > l[i-1] {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    inc :=\
    \ true\n    dec := true\n    for i := 1; i < len(l); i++ {\n        if l[i] >=\
    \ l[i-1] {\n            dec = false\n        }\n        if l[i] <= l[i-1] {\n\
    \            inc = false\n        }\n    }\n    return inc || dec\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpdmhwfw8k_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpdmhwfw8k_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    for i :=\
    \ 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            increasing = false\n\
    \        }\n        if l[i] > l[i-1] {\n            decreasing = false\n     \
    \   }\n    }\n    return increasing || decreasing\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    for i :=\
    \ 0; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            increasing\
    \ = false\n        }\n        if l[i] < l[i + 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    up := false\n    down := false\n    var prev int\n    for\
    \ i, v := range l {\n        if i == 0 {\n            prev = v\n            continue\n\
    \        }\n        if prev < v {\n            up = true\n        } else if prev\
    \ > v {\n            down = true\n        }\n        if up && down {\n       \
    \     return false\n        }\n        prev = v\n    }\n    return true\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    order := true // Asumme increasing\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] < l[i-1] {\n            order = false\n            break\n\
    \        }\n    }\n    if order {\n        return true\n    }\n    order = true\
    \ // Assume decreasing\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1]\
    \ {\n            order = false\n            break\n        }\n    }\n    return\
    \ order\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    length := len(l)\n    if length <= 1 {\n        return true\n\
    \    }\n    increasing := l[0] < l[1]\n    for i := 1; i < length; i++ {\n   \
    \     if increasing {\n            if l[i-1] > l[i] {\n                return\
    \ false\n            }\n        } else {\n            if l[i-1] < l[i] {\n   \
    \             return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    is_ascending\
    \ := l[0] < l[1]\n    for i := 1; i < len(l) - 1; i++ {\n        if is_ascending\
    \ {\n            if l[i] > l[i + 1] {\n                return false\n        \
    \    }\n        } else {\n            if l[i] < l[i + 1] {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var inc, dec bool\n    for i := 0; i < len(l) - 1; i++ {\n\
    \        if l[i] < l[i + 1] {\n            inc = true\n        } else if l[i]\
    \ > l[i + 1] {\n            dec = true\n        }\n        if inc && dec {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    i := 0\n    j := len(l) - 1\n    for i < j {\n        if\
    \ l[i] != l[j] {\n            break\n        }\n        i++\n        j--\n   \
    \ }\n    if i == j {\n        return true\n    }\n    if l[i] < l[j] {\n     \
    \   for i = 0; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n     \
    \           return false\n            }\n        }\n    } else {\n        for\
    \ i = 0; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n           \
    \     return false\n            }\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ > l[1] {\n        for i := 0; i < len(l) - 1; i++ {\n            if l[i] < l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 0; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestMonotonic(t *testing.T) {\n \
    \ candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpnt_ittkl_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpnt_ittkl_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnt_ittkl_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnt_ittkl_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpnt_ittkl_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpnt_ittkl_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    increase\
    \ := l[0] < l[1]\n    for i := 1; i < len(l) - 1; i++ {\n        if l[i] > l[i\
    \ + 1] && increase {\n            return false\n        }\n        if l[i] < l[i\
    \ + 1] && !increase {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    // first\
    \ two elements tell us if we are increasing or decreasing\n    increasing := l[0]\
    \ < l[1]\n    for i := 1; i < len(l)-1; i++ {\n        // if decreasing\n    \
    \    if !increasing {\n            if l[i] < l[i+1] {\n                return\
    \ false\n            }\n        } else {\n            if l[i] > l[i+1] {\n   \
    \             return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    isIncreasing\
    \ := l[0] < l[1]\n    for i := 2; i < len(l); i++ {\n        if isIncreasing {\n\
    \            if l[i-1] > l[i] {\n                return false\n            }\n\
    \        } else {\n            if l[i-1] < l[i] {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074711
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    a := l[0]\n    b := l[1]\n    sign := (b - a) > 0\n    for\
    \ _, e := range l[2:] {\n        if (e - b) * sign < 0 {\n            return false\n\
    \        }\n        b = e\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvru84i6v_test.go:20:12: invalid operation: (e - b) * sign (mismatched
    types int and bool)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    for i :=\
    \ 0; i < len(l) - 1; i++ {\n        if l[i] == l[i + 1] {\n            continue\n\
    \        }\n        first := l[i] > l[i + 1]\n        for j := i + 1; j < len(l)\
    \ - 1; j++ {\n            if l[j] == l[j + 1] {\n                continue\n  \
    \          }\n            second := l[j] > l[j + 1]\n            if first != second\
    \ {\n                return false\n            }\n        }\n        return true\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    // Determine\
    \ whether we're increasing or decreasing\n    direction := 1\n    if l[0] > l[1]\
    \ {\n        direction = -1\n    }\n    for i := 1; i < len(l); i++ {\n      \
    \  if l[i] * direction < l[i-1] * direction {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    res := true\n    increasing := l[0] < l[1]\n    for i, j\
    \ := 0, 1; j < len(l); i, j = i+1, j+1 {\n        if increasing && l[i] > l[j]\
    \ {\n            return false\n        }\n        if !increasing && l[i] < l[j]\
    \ {\n            return false\n        }\n    }\n    return res\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    c := 0\n    for i := 0; i < len(l) - 1; i++ {\n        if\
    \ l[i] == l[i + 1] {\n            continue\n        }\n        if l[i] < l[i +\
    \ 1] {\n            if c == -1 {\n                return false\n            }\n\
    \            c = 1\n        } else {\n            if c == 1 {\n              \
    \  return false\n            }\n            c = -1\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var (\n        inc = true\n        dec = true\n    )\n  \
    \  for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n            inc\
    \ = false\n        }\n        if l[i] > l[i-1] {\n            dec = false\n  \
    \      }\n    }\n    return inc || dec\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increase := true\n    decrease := true\n    for i, v := range\
    \ l {\n        if i > 0 {\n            if v < l[i-1] {\n                increase\
    \ = false\n            }\n            if v > l[i-1] {\n                decrease\
    \ = false\n            }\n        }\n    }\n    return increase || decrease\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    fmt.Println(l)\n    // see if last element is greater or\
    \ less than first\n    if l[len(l)-1] > l[0] {\n        // monotonically increasing\n\
    \        return increasing(l)\n    } else if l[len(l)-1] < l[0] {\n        //\
    \ monotonically decreasing\n        return decreasing(l)\n    } else {\n     \
    \   // else not monotonic\n        return false\n    }\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd4d2ah7w_test.go:20:16: undefined: increasing

    /tmp/tmpd4d2ah7w_test.go:23:16: undefined: decreasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := (l[0] < l[1])\n    decreasing := (l[0] > l[1])\n\
    \    for i := 1; i < len(l) - 1; i++ {\n        if increasing && (l[i] > l[i +\
    \ 1]) {\n            return false\n        }\n        if decreasing && (l[i] <\
    \ l[i + 1]) {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var increasing bool\n    var decreasing bool\n    for i :=\
    \ 0; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            increasing\
    \ = true\n        } else if l[i] < l[i + 1] {\n            decreasing = true\n\
    \        }\n    }\n    return increasing && decreasing\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpai4yyfbe_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpai4yyfbe_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpai4yyfbe_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmpai4yyfbe_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpai4yyfbe_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpai4yyfbe_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpai4yyfbe_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpai4yyfbe_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    var isIncreasing\
    \ bool\n    isIncreasing = l[0] < l[1]\n    for i := 1; i < len(l) - 1; i++ {\n\
    \        if isIncreasing {\n            if l[i] > l[i + 1] {\n               \
    \ return false\n            }\n        } else {\n            if l[i] < l[i + 1]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var direction bool = false\n\n    for i := 0; i < len(l)\
    \ - 1; i++ {\n        if l[i] < l[i + 1] {\n            if direction == false\
    \ {\n                direction = true\n            } else if direction == true\
    \ {\n                if l[i] > l[i + 1] {\n                    return false\n\
    \                }\n            }\n        } else if l[i] > l[i + 1] {\n     \
    \       if direction == false {\n                direction = false\n         \
    \   } else if direction == false {\n                if l[i] < l[i + 1] {\n   \
    \                 return false\n                }\n            }\n        }\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp1haq3jr1_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp1haq3jr1_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    asc := true\n    desc := true\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] < l[i-1] {\n            asc = false\n        }\n    \
    \    if l[i] > l[i-1] {\n            desc = false\n        }\n    }\n    return\
    \ asc || desc\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var increasing, decreasing bool\n    increasing = decreasing\
    \ = true\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n\
    \            increasing = false\n        }\n        if l[i] < l[i + 1] {\n   \
    \         decreasing = false\n        }\n    }\n    return increasing || decreasing\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpvdg016a0_test.go:17:29: expected ''=='', found ''=''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074713
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    ldirection\
    \ := 0\n    for i := 1; i < len(l); i++ {\n        direction := l[i] - l[i-1]\n\
    \        if direction > 0 {\n            if ldirection == 0 {\n              \
    \  ldirection = 1\n            } else if ldirection == -1 {\n                return\
    \ false\n            }\n        } else if direction < 0 {\n            if ldirection\
    \ == 0 {\n                ldirection = -1\n            } else if ldirection ==\
    \ 1 {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    direction\
    \ := 1\n    if l[0] > l[1] {\n        direction = -1\n    }\n    for i := 1; i\
    \ < len(l) - 1; i++ {\n        if direction * (l[i] - l[i + 1]) < 0 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpt05gh17x_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpt05gh17x_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpt05gh17x_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpt05gh17x_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpt05gh17x_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    switch {\n    case len(l) <= 1:\n        return true\n  \
    \  case l[0] < l[1]:\n        for i := 1; i < len(l) - 1; i++ {\n            if\
    \ l[i] > l[i + 1] {\n                return false\n            }\n        }\n\
    \    case l[0] > l[1]:\n        for i := 1; i < len(l) - 1; i++ {\n          \
    \  if l[i] < l[i + 1] {\n                return false\n            }\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var increasing bool\n    for i := 0; i < len(l) - 1; i++\
    \ {\n        if l[i] < l[i + 1] {\n            increasing = true\n           \
    \ break\n        } else if l[i] > l[i + 1] {\n            increasing = false\n\
    \            break\n        }\n    }\n    for i := 0; i < len(l) - 1; i++ {\n\
    \        if increasing && l[i] > l[i + 1] {\n            return false\n      \
    \  } else if !increasing && l[i] < l[i + 1] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    for i := 0; i < len(l)-1; i++ {\n        if (l[i] > l[i+1]\
    \ && l[i+1] >= l[i+2]) || (l[i] < l[i+1] && l[i+1] <= l[i+2]) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4]\
    \ with length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpkgxzkv7x_test.go:17\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpkgxzkv7x_test.go:33\
    \ +0x8c5\ntesting.tRunner(0xc000199040, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp1b0d2b5j_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp1b0d2b5j_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var direction int\n    if l[1] > l[0] {\n        direction\
    \ = 1\n    } else if l[1] < l[0] {\n        direction = -1\n    } else {\n   \
    \     direction = 0\n    }\n    for i := 1; i < len(l) - 1; i++ {\n        if\
    \ direction == 0 {\n            if l[i+1] > l[i] {\n                direction\
    \ = 1\n            } else if l[i+1] < l[i] {\n                direction = -1\n\
    \            }\n        } else if direction == 1 {\n            if l[i+1] < l[i]\
    \ {\n                return false\n            }\n        } else if direction\
    \ == -1 {\n            if l[i+1] > l[i] {\n                return false\n    \
    \        }\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    direction := \"\"\n    for i := 1; i < len(l); i++ {\n  \
    \      switch {\n        case l[i] > l[i-1]:\n            if direction == \"down\"\
    \ {\n                return false\n            }\n            direction = \"up\"\
    \n        case l[i] < l[i-1]:\n            if direction == \"up\" {\n        \
    \        return false\n            }\n            direction = \"down\"\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var (\n        len = len(l)\n        m bool\n    )\n    if\
    \ len == 0 {\n        return true\n    }\n    for i := 1; i < len; i++ {\n   \
    \     if l[i-1] > l[i] {\n            if m == true {\n                return false\n\
    \            }\n            m = false\n        } else if l[i-1] < l[i] {\n   \
    \         if m == false {\n                return false\n            }\n     \
    \       m = true\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpbn8pgdsc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpbn8pgdsc_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpbn8pgdsc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp1b0d2b5j_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp1b0d2b5j_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    ln := len(l)\n    if ln < 2 {\n        return true\n    }\n\
    \    // Check if increasing.\n    l0 := l[0]\n    for i := 1; i < ln; i++ {\n\
    \        if l[i] < l0 {\n            break\n        }\n        l0 = l[i]\n   \
    \ }\n    if l0 == l[ln-1] {\n        return true\n    }\n    // Check if decreasing.\n\
    \    l0 = l[0]\n    for i := 1; i < ln; i++ {\n        if l[i] > l0 {\n      \
    \      break\n        }\n        l0 = l[i]\n    }\n    if l0 == l[ln-1] {\n  \
    \      return true\n    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    increasing\
    \ := l[0] < l[1]\n    decreasing := l[0] > l[1]\n    for i := 1; i < len(l) -\
    \ 1; i++ {\n        if increasing && l[i] > l[i + 1] {\n            return false\n\
    \        }\n        if decreasing && l[i] < l[i + 1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // if l is empty, return false\n    if len(l) == 0 {\n  \
    \      return false\n    }\n    // is increasing?\n    increasing := false\n \
    \   // is decreasing?\n    decreasing := false\n    for i := 0; i < len(l) - 1;\
    \ i++ {\n        // if l[i] == l[i+1], continue\n        if l[i] == l[i+1] {\n\
    \            continue\n        }\n        // if l[i] > l[i+1], set decreasing\
    \ = true\n        if l[i] > l[i+1] {\n            decreasing = true\n        }\n\
    \        // if l[i] < l[i+1], set increasing = true\n        if l[i] < l[i+1]\
    \ {\n            increasing = true\n        }\n        // if increasing and decreasing\
    \ are both true, return false\n        if increasing && decreasing {\n       \
    \     return false\n        }\n    }\n    // return true\n    return true\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074714
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        return monotonic_inc(l)\n    } else if l[0] > l[1] {\n   \
    \     return monotonic_dec(l)\n    } else {\n        return monotonic(l[1:])\n\
    \    }\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgg89m84g_test.go:20:16: undefined: monotonic_inc

    /tmp/tmpgg89m84g_test.go:22:16: undefined: monotonic_dec

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var direction int\n    if l[0] < l[len(l)-1] {\n        direction\
    \ = 1\n    } else {\n        direction = -1\n    }\n    for i := 1; i < len(l);\
    \ i++ {\n        if (l[i-1] - l[i]) * direction < 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp97pjtgqq_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp97pjtgqq_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp97pjtgqq_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp97pjtgqq_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp97pjtgqq_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var prev int = l[0]\n    var prevDiff int = 0\n    var thisDiff\
    \ int\n    for _, v := range l[1:] {\n        thisDiff = v - prev\n        if\
    \ prevDiff != 0 && thisDiff != 0 && prevDiff != thisDiff {\n            return\
    \ false\n        }\n        prev = v\n        prevDiff = thisDiff\n    }\n   \
    \ return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpa00d85ot_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpa00d85ot_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpa00d85ot_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__6 (0.00s)\n        tmpa00d85ot_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074715
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    increasing\
    \ := l[0] < l[1]\n    for i := 1; i < len(l) - 1; i++ {\n        if increasing\
    \ {\n            if l[i] > l[i + 1] {\n                return false\n        \
    \    }\n        } else {\n            if l[i] < l[i + 1] {\n                return\
    \ false\n            }\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074589
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    cur :=\
    \ l[0]\n    increasing := true\n    decreasing := true\n    for _, n := range\
    \ l[1:] {\n        if n > cur {\n            decreasing = false\n        } else\
    \ if n < cur {\n            increasing = false\n        }\n        cur = n\n \
    \   }\n    return increasing || decreasing\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074715
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var up bool\n    for i := 0; i < len(l) - 1; i++ {\n    \
    \    if up && l[i] > l[i + 1] {\n            return false\n        }\n       \
    \ if !up && l[i] < l[i + 1] {\n            return false\n        }\n        if\
    \ l[i] != l[i + 1] {\n            up = l[i] < l[i + 1]\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpg_j6unlz_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpg_j6unlz_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpg_j6unlz_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    inc :=\
    \ l[0] <= l[1]\n    for i := 1; i < len(l) - 1; i++ {\n        if (inc && l[i]\
    \ > l[i+1]) || (!inc && l[i] < l[i+1]) {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l); i++ {\n            if l[i-1] > l[i]\
    \ {\n                return false\n            }\n        }\n    } else {\n  \
    \      for i := 1; i < len(l); i++ {\n            if l[i-1] < l[i] {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    var prev\
    \ int\n    var first = true\n    var increasing = false\n    for _, e := range\
    \ l {\n        if first {\n            first = false\n            prev = e\n \
    \           continue\n        }\n        if e == prev {\n            continue\n\
    \        }\n        if increasing {\n            if e < prev {\n             \
    \   return false\n            }\n        } else {\n            if e > prev {\n\
    \                return false\n            }\n        }\n        increasing =\
    \ !increasing\n        prev = e\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpk3x850sg_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpk3x850sg_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpk3x850sg_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpk3x850sg_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpk3x850sg_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    for i, v := range l {\n        if i > 0 {\n            //\
    \ Check if l[i] is not bigger than l[i-1]\n            if v > l[i-1] {\n     \
    \           // If l[i] is bigger than previous element\n                // We\
    \ need to make sure that all the values are bigger than previous ones.\n     \
    \           for j := range l {\n                    if l[j] < l[j-1] {\n     \
    \                   return false\n                    }\n                }\n \
    \           } else if v < l[i-1] {\n                // If l[i] is smaller than\
    \ previous element\n                // We need to make sure that all the values\
    \ are smaller than previous ones.\n                for j := range l {\n      \
    \              if l[j] > l[j-1] {\n                        return false\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\npanic: runtime error: index out of range\
    \ [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001e0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001e0000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.monotonic(...)\n\t/tmp/tmpeg7e7985_test.go:23\n\
    command-line-arguments_test.TestMonotonic(0x0?)\n\t/tmp/tmpeg7e7985_test.go:48\
    \ +0xb07\ntesting.tRunner(0xc000183380, 0x528f40)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    ln := len(l)\n    if ln < 2 {\n        return true\n    }\n\
    \    for i := 1; i < ln; i++ {\n        if l[i] > l[i-1] {\n            for j\
    \ := i+1; j < ln; j++ {\n                if l[j] < l[j-1] {\n                \
    \    return false\n                }\n            }\n            return true\n\
    \        } else if l[i] < l[i-1] {\n            for j := i+1; j < ln; j++ {\n\
    \                if l[j] > l[j-1] {\n                    return false\n      \
    \          }\n            }\n            return true\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // If the list is empty, return True\n    if len(l) <= 1\
    \ {\n        return true\n    }\n\n    // Specify the direction of change\n  \
    \  // -1 is decreasing\n    // 1 is increasing\n    change := l[1] - l[0]\n\n\
    \    // Iterate through the list\n    for i := 2; i < len(l); i++ {\n        //\
    \ If the difference of the current element and the last element is\n        //\
    \ not equal to the direction of change, return False\n        if l[i] - l[i-1]\
    \ != change {\n            return false\n        }\n    }\n\n    // If we did\
    \ not find any differences, return True\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmph5rs94rc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmph5rs94rc_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmph5rs94rc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmph5rs94rc_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmph5rs94rc_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    for i, j\
    \ := 0, 1; j < len(l); i, j = i+1, j+1 {\n        if l[i] > l[j] {\n         \
    \   increasing = false\n        }\n        if l[i] < l[j] {\n            decreasing\
    \ = false\n        }\n    }\n    return increasing || decreasing\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    d := l[1]\
    \ - l[0]\n    for i := 1; i < len(l); i++ {\n        if (l[i] - l[i-1]) * d <\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ > l[1] {\n        for i := 0; i < len(l) - 1; i++ {\n            if l[i] < l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 0; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    is_increasing\
    \ := l[0] < l[1]\n    for i := 2; i < len(l); i++ {\n        if is_increasing\
    \ && l[i - 1] > l[i] {\n            return false\n        }\n        if !is_increasing\
    \ && l[i - 1] < l[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    count := len(l)\n    if count <= 1 {\n        return true\n\
    \    }\n    if l[0] < l[1] {\n        for i := 1; i < count - 1; i++ {\n     \
    \       if l[i] > l[i + 1] {\n                return false\n            }\n  \
    \      }\n    } else {\n        for i := 1; i < count - 1; i++ {\n           \
    \ if l[i] < l[i + 1] {\n                return false\n            }\n        }\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    inc :=\
    \ false\n    dec := false\n    for i := 1; i < len(l); i++ {\n        if l[i]\
    \ > l[i-1] {\n            inc = true\n        } else if l[i] < l[i-1] {\n    \
    \        dec = true\n        }\n        if inc && dec {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // Determine if list is increasing or decreasing\n    increasing\
    \ := l[0] < l[len(l)-1]\n    // Add all elements to list\n    for i := 1; i <\
    \ len(l); i++ {\n        // Check if the list is strictly increasing, or strictly\
    \ decreasing\n        if (increasing && l[i-1] > l[i]) || (!increasing && l[i-1]\
    \ < l[i]) {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    l_len := len(l)\n    if l_len <= 1 {\n        return true\n\
    \    }\n\n    if l[0] <= l[1] {\n        for i:=1; i<l_len-1; i++ {\n        \
    \    if l[i] > l[i+1] {\n                return false\n            }\n       \
    \ }\n    } else {\n        for i:=1; i<l_len-1; i++ {\n            if l[i] < l[i+1]\
    \ {\n                return false\n            }\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    for i := 1; i < len(l); i++ {\n        if l[i] < l[i-1] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp1m8dej73_test.go:44: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp1m8dej73_test.go:44:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0]\
    \ > l[1] {\n        for i := 2; i < len(l); i++ {\n            if l[i-1] > l[i]\
    \ {\n                continue\n            } else {\n                return false\n\
    \            }\n        }\n    } else {\n        for i := 2; i < len(l); i++ {\n\
    \            if l[i-1] < l[i] {\n                continue\n            } else\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmp9kmnref2_test.go:59: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp9kmnref2_test.go:59:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    increasing\
    \ := true\n    decreasing := true\n    for i := 1; i < len(l); i++ {\n       \
    \ if l[i] < l[i-1] {\n            increasing = false\n        }\n        if l[i]\
    \ > l[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    i := 1\n\
    \    d := 1\n    if l[0] > l[1] {\n        d = -1\n    }\n    for i < len(l) {\n\
    \        if l[i] * d < l[i-1] * d {\n            return false\n        }\n   \
    \     i++\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n \
    \ candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var m bool\n    for i := 1; i < len(l); i++ {\n        if\
    \ m {\n            if l[i-1] > l[i] {\n                return false\n        \
    \    }\n        } else {\n            if l[i-1] < l[i] {\n                return\
    \ false\n            }\n        }\n        m = !m\n    }\n    return true\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp1o8vemxd_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp1o8vemxd_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp1o8vemxd_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__6 (0.00s)\n        tmp1o8vemxd_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    increasing\
    \ := true\n    decreasing := true\n    for i, j := 0, 1; j < len(l); i, j = i+1,\
    \ j+1 {\n        if l[i] >= l[j] {\n            increasing = false\n        }\n\
    \        if l[i] <= l[j] {\n            decreasing = false\n        }\n    }\n\
    \    return increasing || decreasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpcdlxiass_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpcdlxiass_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    inc :=\
    \ true\n    dec := true\n    for i := 1; i < len(l); i++ {\n        inc = inc\
    \ && l[i] >= l[i-1]\n        dec = dec && l[i] <= l[i-1]\n    }\n    return inc\
    \ || dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var len = len(l)\n    if len < 2 {\n        return true\n\
    \    }\n    var i = 1\n    var increasing = l[i] > l[i-1]\n    for ; i < len;\
    \ i++ {\n        if increasing {\n            if l[i] < l[i-1] {\n           \
    \     return false\n            }\n        } else {\n            if l[i] > l[i-1]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074716
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    var (\n\
    \        isMono = true\n        a      = l[0]\n        b      = l[1]\n    )\n\
    \    for i := 2; i < len(l); i++ {\n        switch a {\n        case b:\n    \
    \        a = b\n            b = l[i]\n        case b > a:\n            if b <\
    \ l[i] {\n                a = b\n                b = l[i]\n            } else\
    \ {\n                isMono = false\n                break\n            }\n  \
    \      case b < a:\n            if b > l[i] {\n                a = b\n       \
    \         b = l[i]\n            } else {\n                isMono = false\n   \
    \             break\n            }\n        }\n    }\n    return isMono\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa3xebbl1_test.go:29:14: cannot convert b > a (untyped bool value) to int

    /tmp/tmpa3xebbl1_test.go:37:14: cannot convert b < a (untyped bool value) to int

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074716
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var d int\n    for i, v := range l {\n        if i == 0 {\n\
    \            continue\n        }\n        if v - l[i-1] > 0 {\n            if\
    \ d < 0 {\n                return false\n            }\n            d = 1\n  \
    \      } else if v - l[i-1] < 0 {\n            if d > 0 {\n                return\
    \ false\n            }\n            d = -1\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // To be monotonic, the difference between each element and\
    \ the one before\n    // it must be the same sign.\n    // If there are less than\
    \ 2 elements, can't be monotonic.\n    if len(l) < 2 {\n        return false\n\
    \    }\n    // Get the first difference.\n    diff := l[1] - l[0]\n    // Check\
    \ if each pair of elements has a difference of the same sign.\n    for i := 2;\
    \ i < len(l); i++ {\n        newDiff := l[i] - l[i-1]\n        if (diff < 0 &&\
    \ newDiff > 0) || (diff > 0 && newDiff < 0) {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // l[0] > l[1] > ... > l[len(l)-1]\n    var decreasing bool\n\
    \    // l[0] < l[1] < ... < l[len(l)-1]\n    var increasing bool\n    decreasing\
    \ = true\n    increasing = true\n    for i := 1; i < len(l); i++ {\n        if\
    \ l[i] < l[i-1] {\n            increasing = false\n        }\n        if l[i]\
    \ > l[i-1] {\n            decreasing = false\n        }\n    }\n    return decreasing\
    \ || increasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074717
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp1b0d2b5j_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp1b0d2b5j_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    idx :=\
    \ 1\n    var min, max bool\n    for idx < len(l) {\n        min = min || l[idx]\
    \ < l[idx-1]\n        max = max || l[idx] > l[idx-1]\n        if min && max {\n\
    \            return false\n        }\n        idx++\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ <= l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] >\
    \ l[i + 1] {\n                return false\n            }\n        }\n    } else\
    \ {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074589
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    decreasing := false\n    increasing := false\n    for i :=\
    \ 0; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            decreasing\
    \ = true\n        } else if l[i] < l[i + 1] {\n            increasing = true\n\
    \        }\n\n        if decreasing && increasing {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074719
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        return increasing(l)\n    } else if l[0] > l[1] {\n      \
    \  return decreasing(l)\n    } else {\n        return monotonic(l[1:])\n    }\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpez92wj0n_test.go:20:16: undefined: increasing

    /tmp/tmpez92wj0n_test.go:22:16: undefined: decreasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074719
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ > l[1] {\n        for i := 1; i < len(l); i++ {\n            if l[i] >= l[i-1]\
    \ {\n                return false\n            }\n        }\n    } else {\n  \
    \      for i := 1; i < len(l); i++ {\n            if l[i] <= l[i-1] {\n      \
    \          return false\n            }\n        }\n    }\n    return true\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmp9mfwje98_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmp9mfwje98_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    for i, val\
    \ := range l {\n        if i < len(l) - 1 {\n            if val < l[i+1] {\n \
    \               decreasing = false\n            } else if val > l[i+1] {\n   \
    \             increasing = false\n            }\n        }\n    }\n    return\
    \ increasing || decreasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // First make a copy of the input array, since sort.Slice\
    \ will\n    // modify it\n    c := make([]int, len(l))\n    copy(c, l)\n    //\
    \ Sort the copy\n    sorted := make([]int, len(c))\n    copy(sorted, c)\n    sort.Slice(sorted,\
    \ func(i, j int) bool { return sorted[i] < sorted[j] })\n    // Now check if the\
    \ original array is monotonically increasing or\n    // decreasing\n    if l[0]\
    \ == sorted[0] {\n        return reflect.DeepEqual(l, sorted)\n    } else {\n\
    \        return reflect.DeepEqual(l, sorted[0:len(sorted)])\n    }\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmprag0mw08_test.go:23:5: undefined: sort

    /tmp/tmprag0mw08_test.go:27:16: undefined: reflect

    /tmp/tmprag0mw08_test.go:29:16: undefined: reflect

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    var mon\
    \ bool = true\n    direction := 0\n    for i := 1; i < len(l); i++ {\n       \
    \ if l[i] == l[i-1] {\n            continue\n        }\n        if l[i] > l[i-1]\
    \ {\n            if direction == 0 {\n                direction = 1\n        \
    \    } else if direction == -1 {\n                mon = false\n              \
    \  break\n            }\n        } else {\n            if direction == 0 {\n \
    \               direction = -1\n            } else if direction == 1 {\n     \
    \           mon = false\n                break\n            }\n        }\n   \
    \ }\n    return mon\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    i := 0\n\
    \    for j := 1; j < len(l); j++ {\n        if l[j] == l[i] {\n            continue\n\
    \        }\n        if l[j] > l[i] {\n            break\n        }\n        if\
    \ l[j] < l[i] {\n            return false\n        }\n    }\n    i = len(l) -\
    \ 1\n    for j := len(l) - 2; j >= 0; j-- {\n        if l[j] == l[i] {\n     \
    \       continue\n        }\n        if l[j] < l[i] {\n            break\n   \
    \     }\n        if l[j] > l[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpf_f_7xs8_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmpf_f_7xs8_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpf_f_7xs8_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmpf_f_7xs8_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    if (l[0]\
    \ < l[1]) {\n        for i := 0; i < len(l) - 1; i++ {\n            if l[i] >\
    \ l[i + 1] {\n                return false\n            }\n        }\n    } else\
    \ {\n        for i := 0; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 2; i < len(l); i++ {\n            if l[i-1] > l[i]\
    \ {\n                return false\n            }\n        }\n    } else {\n  \
    \      for i := 2; i < len(l); i++ {\n            if l[i-1] < l[i] {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var increasing, decreasing bool\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] > l[i-1] {\n            increasing = true\n        }\
    \ else if l[i] < l[i-1] {\n            decreasing = true\n        }\n        if\
    \ increasing && decreasing {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    n := len(l)\n\
    \    if n == 0 {\n        return true\n    }\n    for i := 1; i < n; i++ {\n \
    \       if l[i-1] < l[i] {\n            decreasing = false\n        }\n      \
    \  if l[i-1] > l[i] {\n            increasing = false\n        }\n    }\n    return\
    \ increasing || decreasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    n := len(l)\n    if n <= 1 {\n        return true\n    }\n\
    \    var direction int\n    for i := 1; i < n; i++ {\n        if l[i] > l[i-1]\
    \ {\n            if direction != 0 && direction != 1 {\n                return\
    \ false\n            }\n            direction = 1\n        } else if l[i] < l[i-1]\
    \ {\n            if direction != 0 && direction != -1 {\n                return\
    \ false\n            }\n            direction = -1\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    inc := true\n    dec := true\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] < l[i-1] {\n            inc = false\n        }\n    \
    \    if l[i] > l[i-1] {\n            dec = false\n        }\n    }\n    return\
    \ inc || dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    len_l := len(l)\n    if len_l <= 1 {\n        return true\n\
    \    }\n\n    // Determine the trend of the list first.\n    trend := l[0] < l[1]\n\
    \n    for i := 1; i < len_l - 1; i++ {\n        if trend && l[i] > l[i + 1] {\n\
    \            return false\n        } else if !trend && l[i] < l[i + 1] {\n   \
    \         return false\n        }\n    }\n\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    l_len := len(l)\n    if l_len < 2 {\n        return true\n\
    \    }\n    prev := l[0]\n    pos_incr := true\n    neg_incr := true\n    for\
    \ i := 1; i < l_len; i++ {\n        pos_incr = pos_incr && l[i] >= prev\n    \
    \    neg_incr = neg_incr && l[i] <= prev\n        prev = l[i]\n    }\n    return\
    \ pos_incr || neg_incr\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate :=\
    \ monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    direction := l[1] - l[0]\n    for i := 0; i < len(l)-1; i++\
    \ {\n        if l[i+1]-l[i] > 0 && direction < 0 {\n            return false\n\
    \        } else if l[i+1]-l[i] < 0 && direction > 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // your code here\n    if l == nil || len(l) == 0 {\n   \
    \     return false\n    }\n    order := 0 // 0: init; 1: inc; -1: dec\n    for\
    \ i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            if order\
    \ == -1 {\n                return false\n            }\n            order = 1\n\
    \        } else if l[i] < l[i-1] {\n            if order == 1 {\n            \
    \    return false\n            }\n            order = -1\n        }\n    }\n \
    \   return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp1b0d2b5j_test.go:39: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp1b0d2b5j_test.go:39:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    inc := true\n    dec := true\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] > l[i-1] {\n            dec = false\n        }\n    \
    \    if l[i] < l[i-1] {\n            inc = false\n        }\n    }\n    return\
    \ inc || dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    switch {\n    case len(l) <= 1:\n        return true\n  \
    \  case l[0] < l[1]:\n        for i := 1; i < len(l); i++ {\n            if l[i-1]\
    \ > l[i] {\n                return false\n            }\n        }\n    case l[0]\
    \ > l[1]:\n        for i := 1; i < len(l); i++ {\n            if l[i-1] < l[i]\
    \ {\n                return false\n            }\n        }\n    default:\n  \
    \      return monotonic(l[1:])\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    for i :=\
    \ 1; i < len(l); i++ {\n        if l[i-1] > l[i] {\n            for j := i; j\
    \ < len(l); j++ {\n                if l[j-1] < l[j] {\n                    return\
    \ false\n                }\n            }\n            return true\n        }\
    \ else if l[i-1] < l[i] {\n            for j := i; j < len(l); j++ {\n       \
    \         if l[j-1] > l[j] {\n                    return false\n             \
    \   }\n            }\n            return true\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    state := 0 // 0 == unset, 1 == positive, 2 == negative\n\
    \    for i := 1; i < len(l); i++ {\n        switch {\n        case l[i] > l[i-1]:\n\
    \            if state == 2 {\n                return false\n            }\n  \
    \          state = 1\n        case l[i] < l[i-1]:\n            if state == 1 {\n\
    \                return false\n            }\n            state = 2\n        }\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return isIncreasing(l) || isDecreasing(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpodq2n9t6_test.go:16:12: undefined: isIncreasing

    /tmp/tmpodq2n9t6_test.go:16:31: undefined: isDecreasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074720
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    inc :=\
    \ false\n    dec := false\n    c := l[0]\n    for _, v := range l[1:] {\n    \
    \    if c == v {\n            continue\n        }\n        if c < v {\n      \
    \      inc = true\n        } else {\n            dec = true\n        }\n     \
    \   if inc && dec {\n            return false\n        }\n        c = v\n    }\n\
    \    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074720
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    n := len(l)\n    if n <= 1 {\n        return true\n    }\n\
    \    // increasing \n    if l[0] < l[n-1] {\n        for i := 1; i < n; i++ {\n\
    \            if l[i] < l[i-1] {\n                return false\n            }\n\
    \        }\n    } else {\n        for i := 1; i < n; i++ {\n            if l[i]\
    \ > l[i-1] {\n                return false\n            }\n        }\n    }\n\
    \    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    increasing\
    \ := l[0] < l[1]\n    for i := 2; i < len(l); i++ {\n        // Return false if\
    \ either way differs\n        if increasing && l[i-1] > l[i] || !increasing &&\
    \ l[i-1] < l[i] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var mono bool\n    if len(l) == 0 {\n        return true\n\
    \    }\n    prev := l[0]\n    for _, num := range l[1:] {\n        if prev ==\
    \ num {\n            continue\n        }\n        if prev < num {\n          \
    \  if mono && (prev > num) {\n                return false\n            }\n  \
    \          mono = true\n        } else {\n            if mono && (prev < num)\
    \ {\n                return false\n            }\n            mono = false\n \
    \       }\n        prev = num\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp6nyjoh0v_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__5 (0.00s)\n        tmp6nyjoh0v_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    return\
    \ l[0] < l[1] && monotonic(l[1:]) || l[0] > l[1] && monotonic(l[1:])\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpg6dovwds_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpg6dovwds_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpg6dovwds_test.go:42: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpg6dovwds_test.go:42:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    is_inc := true\n    is_dec := true\n    for i, v := range\
    \ l {\n        if i > 0 {\n            if v < l[i-1] {\n                is_inc\
    \ = false\n            }\n            if v > l[i-1] {\n                is_dec\
    \ = false\n            }\n        }\n    }\n    return is_inc || is_dec\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    for i := 0; i < len(l) - 1; i++ {\n        // first find\
    \ slope\n        if l[i] < l[i+1] {\n            return increasing(l, i+1)\n \
    \       } else if l[i] > l[i+1] {\n            return decreasing(l, i+1)\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyesy6wc7_test.go:19:20: undefined: increasing

    /tmp/tmpyesy6wc7_test.go:21:20: undefined: decreasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    d := l[1]\
    \ - l[0]\n    for i := 2; i < len(l); i++ {\n        if (l[i] - l[i-1]) * d <\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 3 {\n        return true\n    }\n    if l[0]\
    \ > l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // 0: no slope. 1: up, -1: down\n    slope := 0\n    for\
    \ i := 1; i < len(l); i++ {\n        curr := l[i]\n        prev := l[i-1]\n  \
    \      if curr > prev {\n            if slope == -1 {\n                return\
    \ false\n            }\n            slope = 1\n        } else if curr < prev {\n\
    \            if slope == 1 {\n                return false\n            }\n  \
    \          slope = -1\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    prev :=\
    \ l[0]\n    increasing := true\n    for _, i := range l[1:] {\n        if i <\
    \ prev {\n            increasing = false\n            break\n        }\n     \
    \   prev = i\n    }\n    if increasing {\n        return true\n    }\n    for\
    \ _, i := range l[1:] {\n        if i > prev {\n            return false\n   \
    \     }\n        prev = i\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    direction\
    \ := l[1] - l[0]\n    for i := 0; i < len(l) - 1; i++ {\n        if direction\
    \ == 0 {\n            direction = l[i + 1] - l[i]\n            continue\n    \
    \    }\n        if breaksDirection(direction, l[i], l[i + 1]) {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu7zplort_test.go:25:12: undefined: breaksDirection

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    trend :=\
    \ 0\n    for i := 1; i < len(l); i++ {\n        if trend == 0 {\n            trend\
    \ = l[i] - l[i-1]\n        } else if trend < 0 && l[i] - l[i-1] > 0 {\n      \
    \      return false\n        } else if trend > 0 && l[i] - l[i-1] < 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    monotonicType\
    \ := 0\n    prev := l[0]\n    for _, current := range l[1:] {\n        if prev\
    \ < current {\n            if monotonicType == 0 {\n                monotonicType\
    \ = 1\n            } else if monotonicType == -1 {\n                return false\n\
    \            }\n        } else if prev > current {\n            if monotonicType\
    \ == 0 {\n                monotonicType = -1\n            } else if monotonicType\
    \ == 1 {\n                return false\n            }\n        }\n        prev\
    \ = current\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    var order\
    \ int\n    for i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n       \
    \     if order == -1 {\n                return false\n            }\n        \
    \    order = 1\n        } else if l[i] < l[i-1] {\n            if order == 1 {\n\
    \                return false\n            }\n            order = -1\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    var prev\
    \ int\n    for _, i := range l {\n        if prev > i {\n            increasing\
    \ = false\n        }\n        if prev < i {\n            decreasing = false\n\
    \        }\n        prev = i\n    }\n    return increasing || decreasing\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpswmtr56u_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpswmtr56u_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    max, min\
    \ := l[0], l[0]\n    for _, e := range l {\n        if e > max {\n           \
    \ max = e\n        }\n        if e < min {\n            min = e\n        }\n \
    \   }\n    return max == l[len(l)-1] || min == l[len(l)-1]\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmp2veisrfc_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    diff :=\
    \ l[1] - l[0]\n    for i := 1; i < len(l) - 1; i++ {\n        if diff * (l[i+1]\
    \ - l[i]) < 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074721
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return increasing(l) || decreasing(l)\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy3vcdoho_test.go:16:12: undefined: increasing

    /tmp/tmpy3vcdoho_test.go:16:29: undefined: decreasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    max, min := l[0], l[0]\n    n := len(l)\n    for i:=1; i<n;\
    \ i++ {\n        if l[i] > max {\n            max = l[i]\n        } else if l[i]\
    \ < min {\n            min = l[i]\n        } else {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmpxab_mdgn_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpxab_mdgn_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    s := l[0]\n    inc := true\n    dec := true\n    for _, n\
    \ := range l {\n        if n > s {\n            dec = false\n        } else if\
    \ n < s {\n            inc = false\n        }\n        s = n\n    }\n    return\
    \ inc || dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    len := len(l)\n    inc := (l[len-1] - l[0]) > 0\n\n    for\
    \ i := 1; i < len; i++ {\n        if (l[i-1] - l[i]) > 0 && inc {\n          \
    \  return false\n        }\n        if (l[i-1] - l[i]) < 0 && !inc {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074721
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    dir := false // false=u, true=d\n    for i := 1; i < len(l);\
    \ i++ {\n        if dir == false && l[i] < l[i-1] { return false }\n        if\
    \ dir == true && l[i] > l[i-1] { return false }\n        if l[i] != l[i-1] { dir\
    \ = !dir }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp_w_j02ch_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp_w_j02ch_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp_w_j02ch_test.go:45: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmp_w_j02ch_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmp_w_j02ch_test.go:45: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__6 (0.00s)\n        tmp_w_j02ch_test.go:45:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074722
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    isIncreasing\
    \ := l[0] < l[1]\n    isDecreasing := l[0] > l[1]\n    for i, j := 0, 1; j < len(l);\
    \ i, j = i+1, j+1 {\n        if (isIncreasing && l[i] > l[j]) || (isDecreasing\
    \ && l[i] < l[j]) {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074722
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    increasing\
    \ := l[0] < l[1]\n    decreasing := l[0] > l[1]\n    if increasing || decreasing\
    \ {\n        for i := 2; i < len(l); i++ {\n            if increasing && l[i-1]\
    \ > l[i] {\n                return false\n            }\n            if decreasing\
    \ && l[i-1] < l[i] {\n                return false\n            }\n        }\n\
    \        return true\n    }\n    return false\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmp3bqircdj_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074723
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    inc := true\n    dec := true\n    for i := 1; i < len(l);\
    \ i++ {\n        inc = inc && l[i-1] <= l[i]\n        dec = dec && l[i-1] >= l[i]\n\
    \    }\n    return inc || dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074723
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // direction is 1 if list is monotonically increasing, -1\
    \ if it is monotonically decreasing, or 0 if it is not monotonic.\n    direction\
    \ := 0\n    for i := 1; i < len(l); i++ {\n        // compare this to previous\
    \ item\n        diff := l[i] - l[i-1]\n        if diff == 0 {\n            continue\
    \ // no change; keep going\n        } else if direction == 0 {\n            //\
    \ first non-zero diff; set direction to 1 or -1\n            direction = diff\n\
    \        } else if diff > 0 && direction < 0 {\n            // found a change\
    \ in direction from increasing to decreasing\n            return false\n     \
    \   } else if diff < 0 && direction > 0 {\n            // found a change in direction\
    \ from decreasing to increasing\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074723
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    rising := false\n    falling := false\n    for i := 1; i\
    \ < len(l); i++ {\n        if l[i-1] < l[i] {\n            rising = true\n   \
    \     } else if l[i-1] > l[i] {\n            falling = true\n        }\n     \
    \   if rising && falling {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074723
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    t := false\n    if len(l) < 3 {\n        return true\n  \
    \  }\n    if l[0] < l[1] {\n        t = true\n    }\n    for i := 2; i < len(l);\
    \ i++ {\n        if t && l[i-1] > l[i] {\n            return false\n        }\n\
    \        if !t && l[i-1] < l[i] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // Dummy values to avoid out of bound error.\n    l = append(l,\
    \ l[len(l)-1], l[len(l)-1])\n    for i := 1; i < len(l)-1; i++ {\n        // Elements\
    \ are monotonically increasing.\n        if l[i-1] < l[i] && l[i] < l[i+1] {\n\
    \            continue\n        }\n        // Elements are monotonically decreasing.\n\
    \        if l[i-1] > l[i] && l[i] > l[i+1] {\n            continue\n        }\n\
    \        return false\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpjohimm85_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpjohimm85_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpjohimm85_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpjohimm85_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpjohimm85_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpjohimm85_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := l[0] < l[1]\n    for i := 1; i < len(l)-1;\
    \ i++ {\n        if increasing && l[i] > l[i+1] {\n            return false\n\
    \        } else if !increasing && l[i] < l[i+1] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 2; i < len(l); i++ {\n            if l[i] < l[i-1]\
    \ {\n                return false\n            }\n        }\n    } else {\n  \
    \      for i := 2; i < len(l); i++ {\n            if l[i] > l[i-1] {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var direction int\n    for i := 1; i < len(l); i++ {\n  \
    \      switch {\n        case l[i-1] < l[i]:\n            switch direction {\n\
    \            case 0:\n                direction = 1\n            case -1:\n  \
    \              return false\n            }\n        case l[i-1] > l[i]:\n    \
    \        switch direction {\n            case 0:\n                direction =\
    \ -1\n            case 1:\n                return false\n            }\n     \
    \   }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var direction bool\n    for i := 0; i < len(l) - 1; i++ {\n\
    \        if l[i] == l[i + 1] {\n            // Do nothing\n        } else if l[i]\
    \ < l[i + 1] {\n            if direction && direction != true {\n            \
    \    return false\n            }\n            direction = true\n        } else\
    \ {\n            if direction && direction != false {\n                return\
    \ false\n            }\n            direction = false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    diff :=\
    \ l[1] - l[0]\n    for i := 1; i < len(l) - 1; i++ {\n        thisDiff := l[i\
    \ + 1] - l[i]\n        if thisDiff * diff < 0 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    last := l[0]\n    inc := true\n    dec := true\n    for _,\
    \ e := range l[1:] {\n        if e < last {\n            inc = false\n       \
    \ }\n        if e > last {\n            dec = false\n        }\n        last =\
    \ e\n    }\n    return inc || dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n \
    \ candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    sign :=\
    \ 0\n    for i := 1; i < len(l); i++ {\n        if (l[i-1] < l[i] && sign <= 0)\
    \ || (l[i-1] > l[i] && sign >= 0) {\n            sign = sign + 1\n        } else\
    \ if (l[i-1] < l[i] && sign >= 0) || (l[i-1] > l[i] && sign <= 0) {\n        \
    \    sign = sign - 1\n        } else {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmpmfvu3h12_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpmfvu3h12_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__5\
    \ (0.00s)\n        tmpmfvu3h12_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpmfvu3h12_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0]\
    \ <= l[1] {\n        for i := 0; i < len(l) - 1; i++ {\n            if l[i] >\
    \ l[i + 1] {\n                return false\n            }\n        }\n    } else\
    \ {\n        for i := 0; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1]\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    lastDiff := l[1] - l[0]\n    for i := 2; i < len(l); i++\
    \ {\n        diff := l[i] - l[i-1]\n        if diff*lastDiff < 0 {\n         \
    \   return false\n        }\n        lastDiff = diff\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    l1 := make([]int,\
    \ len(l)-1)\n    for i := 0; i < len(l)-1; i++ {\n        l1[i] = l[i+1] - l[i]\n\
    \    }\n    firstSign := sign(l1[0])\n    for _, v := range l1 {\n        if sign(v)\
    \ != firstSign {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp51sk5uhv_test.go:23:18: undefined: sign

    /tmp/tmp51sk5uhv_test.go:25:12: undefined: sign

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074723
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074589
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    monotonic := false\n    for i := 1; i < len(l); i++ {\n \
    \       if l[i] > l[i-1] {\n            if monotonic {\n                return\
    \ false\n            }\n            monotonic = true\n        } else if l[i] <\
    \ l[i-1] {\n            if !monotonic {\n                return false\n      \
    \      }\n            monotonic = false\n        }\n    }\n    return true\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp7ccskxri_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp7ccskxri_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__2\
    \ (0.00s)\n        tmp7ccskxri_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestMonotonic/test_num__3 (0.00s)\n        tmp7ccskxri_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__4\
    \ (0.00s)\n        tmp7ccskxri_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__6 (0.00s)\n        tmp7ccskxri_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // First determine if the sequence is increasing or decreasing.\n\
    \    positive, negative := false, false\n    previous := l[0]\n    for _, current\
    \ := range l[1:] {\n        if current > previous {\n            positive = true\n\
    \        } else if current < previous {\n            negative = true\n       \
    \ }\n        previous = current\n    }\n    return !(positive && negative)\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var i, j int\n    var dir string\n\n    if len(l) < 2 {\n\
    \        return true\n    }\n\n    i = l[0]\n    j = l[1]\n\n    if i < j {\n\
    \        dir = \"asc\"\n    } else if i > j {\n        dir = \"desc\"\n    } else\
    \ {\n        return false\n    }\n\n    for _, n := range l[1:] {\n        if\
    \ dir == \"asc\" && n < i {\n            return false\n        }\n        if dir\
    \ == \"desc\" && n > i {\n            return false\n        }\n        i = n\n\
    \    }\n\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpcs1eo0ib_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    for i :=\
    \ 0; i < len(l) - 1; i++ {\n        if l[i] > l[i + 1] {\n            increasing\
    \ = false\n        }\n        if l[i] < l[i + 1] {\n            decreasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074711
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    sign :=\
    \ 0\n    for i := 1; i < len(l); i++ {\n        if l[i] != l[i-1] {\n        \
    \    if sign == 0 {\n                sign = l[i] - l[i-1]\n            } else\
    \ if sign * (l[i] - l[i-1]) < 0 {\n                return false\n            }\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074589
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    direction\
    \ := 0\n    for i := 1; i < len(l); i++ {\n        switch {\n        case l[i]\
    \ > l[i-1]:\n            if direction < 0 {\n                return false\n  \
    \          }\n            direction = 1\n        case l[i] < l[i-1]:\n       \
    \     if direction > 0 {\n                return false\n            }\n      \
    \      direction = -1\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    direction\
    \ := 0\n    for i := 1; i < len(l); i++ {\n        if direction == 0 {\n     \
    \       if l[i] < l[i-1] {\n                direction = -1\n            } else\
    \ if l[i] > l[i-1] {\n                direction = 1\n            }\n        }\
    \ else if (direction == 1 && l[i] < l[i-1]) || (direction == -1 && l[i] > l[i-1])\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074724
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return isMonotonicallyIncreasing(l) || isMonotonicallyDecreasing(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpijq920bz_test.go:16:12: undefined: isMonotonicallyIncreasing

    /tmp/tmpijq920bz_test.go:16:44: undefined: isMonotonicallyDecreasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074724
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    direction\
    \ := l[1] - l[0]\n    if direction == 0 {\n        return monotonic(l[1:])\n \
    \   }\n    for i := 2; i < len(l); i++ {\n        if direction * (l[i] - l[i-1])\
    \ < 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074725
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    switch {\n    case len(l) == 0:\n        return true\n  \
    \  case len(l) == 1:\n        return true\n    case len(l) == 2:\n        return\
    \ l[0] <= l[1]\n    }\n\n    if l[0] <= l[1] {\n        // Increasing\n      \
    \  for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i + 1] {\n     \
    \           return false\n            }\n        }\n    } else {\n        // Decreasing\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074725
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    for i :=\
    \ 0; i < len(l) - 1; i++ {\n        if l[i] < l[i + 1] {\n            decreasing\
    \ = false\n        }\n        if l[i] > l[i + 1] {\n            increasing = false\n\
    \        }\n    }\n    return increasing || decreasing\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074725
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    less := true\n    greater := true\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] < l[i-1] {\n            less = false\n        }\n   \
    \     if l[i] > l[i-1] {\n            greater = false\n        }\n    }\n    return\
    \ less || greater\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074589
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    delta := l[1] - l[0]\n    for i := 2; i < len(l); i++ {\n\
    \        if delta < 0 && l[i] - l[i-1] > 0 {\n            return false\n     \
    \   }\n        if delta > 0 && l[i] - l[i-1] < 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    direction := 0\n    length := len(l)\n    for i := 0; i <\
    \ length-1; i++ {\n        if l[i] == l[i+1] {\n            continue\n       \
    \ }\n        if direction == 0 {\n            direction = l[i] - l[i+1]\n    \
    \    } else if l[i] - l[i+1] != direction {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmp9si7y943_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmp9si7y943_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp9si7y943_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp9si7y943_test.go:51:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmp9si7y943_test.go:51: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    inc := true\n    dec := true\n    for i := 1; i < len(l);\
    \ i++ {\n        if l[i] < l[i-1] {\n            inc = false\n        }\n    \
    \    if l[i] > l[i-1] {\n            dec = false\n        }\n    }\n    return\
    \ inc || dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074719
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    a := l[0]\n\
    \    flag := 0\n    for i := 1; i < len(l); i++ {\n        if l[i] > a {\n   \
    \         if flag == -1 {\n                return false\n            }\n     \
    \       flag = 1\n        } else if l[i] < a {\n            if flag == 1 {\n \
    \               return false\n            }\n            flag = -1\n        }\n\
    \        a = l[i]\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    increasing\
    \ := l[0] < l[1]\n    for i := 1; i < len(l) - 1; i++ {\n        var diff1 = l[i]\
    \ - l[i - 1]\n        var diff2 = l[i + 1] - l[i]\n        if (increasing && diff1\
    \ < 0) || (!increasing && diff1 > 0) {\n            return false\n        }\n\
    \        if diff1 * diff2 < 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    is_decreasing\
    \ := l[0] > l[1]\n    is_increasing := l[0] < l[1]\n    for i := 1; i < len(l)\
    \ - 1; i++ {\n        if is_decreasing && l[i] < l[i+1] {\n            return\
    \ false\n        }\n        if is_increasing && l[i] > l[i+1] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074589
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    ascending\
    \ := l[0] <= l[1]\n    for i := 2; i < len(l); i++ {\n        if ascending &&\
    \ l[i-1] > l[i] {\n            return false\n        }\n        if !ascending\
    \ && l[i-1] < l[i] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    decreasing := true\n    increasing := true\n    for i :=\
    \ 0; i < len(l) - 1; i++ {\n        if decreasing && l[i] < l[i + 1] {\n     \
    \       decreasing = false\n        }\n        if increasing && l[i] > l[i + 1]\
    \ {\n            increasing = false\n        }\n    }\n    return decreasing ||\
    \ increasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074726
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    diff :=\
    \ l[1] - l[0]\n    if diff == 0 {\n        return false\n    }\n    for i := 2;\
    \ i < len(l); i++ {\n        tmp := l[i] - l[i-1]\n        if tmp * diff < 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpg4ctf2_6_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074726
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc\
    \ TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpm94f4ta7_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpm94f4ta7_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpm94f4ta7_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpm94f4ta7_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpm94f4ta7_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpm94f4ta7_test.go:40:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    var increase,\
    \ decrease bool\n    for i := 1; i < len(l); i++ {\n        if l[i] == l[i-1]\
    \ {\n            continue\n        }\n        if l[i] > l[i-1] {\n           \
    \ increase = true\n        } else {\n            decrease = true\n        }\n\
    \        if increase && decrease {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    decreasing := false\n    increasing := false\n    last :=\
    \ l[0]\n    for _, v := range l[1:] {\n        if v < last {\n            increasing\
    \ = true\n        } else if v > last {\n            decreasing = true\n      \
    \  }\n        last = v\n    }\n    return increasing == false || decreasing ==\
    \ false\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    is_inc := true\n    is_dec := true\n    for i := 0; i < len(l)\
    \ - 1; i++ {\n        if l[i] > l[i + 1] {\n            is_inc = false\n     \
    \   }\n        if l[i] < l[i + 1] {\n            is_dec = false\n        }\n \
    \   }\n    return is_inc || is_dec\n}\n\nfunc TestMonotonic(t *testing.T) {\n\
    \  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 2
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    if l[0]\
    \ > l[1] {\n        return isDecreasing(l)\n    }\n    return isIncreasing(l)\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6kdgd5rj_test.go:20:16: undefined: isDecreasing

    /tmp/tmp6kdgd5rj_test.go:22:12: undefined: isIncreasing

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    size := len(l)\n    if size <= 1 {\n        return true\n\
    \    }\n    if l[0] < l[1] {\n        // increasing\n        for i := 1; i < size;\
    \ i++ {\n            if l[i-1] > l[i] {\n                return false\n      \
    \      }\n        }\n    } else {\n        // decreasing\n        for i := 1;\
    \ i < size; i++ {\n            if l[i-1] < l[i] {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    isIncreasing\
    \ := l[0] < l[1]\n    for i := 2; i < len(l); i++ {\n        if isIncreasing &&\
    \ l[i-1] > l[i] {\n            return false\n        }\n        if !isIncreasing\
    \ && l[i-1] < l[i] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074726
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    n := len(l)\n    return (n < 2) || (\n        (l[0] > l[1])\
    \ && monotonic(l[1:]) ||\n        (l[0] < l[1]) && monotonic(l[1:])\n    )\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp273tt1k8_test.go:19:42: expected '')'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074725
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    var monotonic bool\n    for i := 1; i < len(l); i++ {\n \
    \       if l[i] == l[i-1] {\n            continue\n        }\n        if !monotonic\
    \ {\n            monotonic = true\n            if l[i] < l[i-1] {\n          \
    \      l[i-1], l[i] = l[i], l[i-1]\n            }\n        } else {\n        \
    \    if l[i] < l[i-1] {\n                return false\n            }\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpn2r8sxwy_test.go:55: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpn2r8sxwy_test.go:55:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l) - 1; i++ {\n            if l[i] > l[i\
    \ + 1] {\n                return false\n            }\n        }\n    } else {\n\
    \        for i := 1; i < len(l) - 1; i++ {\n            if l[i] < l[i + 1] {\n\
    \                return false\n            }\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074589
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    var test\
    \ func(i, i1 int) bool\n    if l[0] < l[1] {\n        test = func(i, i1 int) bool\
    \ { return i <= i1 }\n    } else {\n        test = func(i, i1 int) bool { return\
    \ i >= i1 }\n    }\n    for i := 0; i < len(l)-1; i++ {\n        if !test(l[i],\
    \ l[i+1]) {\n            return false\n        }\n    }\n    return true\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    i := 1\n\
    \    dir := l[i] - l[i-1]\n    for i < len(l) {\n        if (l[i] - l[i-1]) *\
    \ dir < 0 {\n            return false\n        }\n        i++\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074726
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    isAscending := true\n    isDescending := true\n    if len(l)\
    \ < 2 {\n        return true\n    }\n    for i := 1; i < len(l); i++ {\n     \
    \   if l[i] < l[i-1] {\n            isAscending = false\n        }\n        if\
    \ l[i] > l[i-1] {\n            isDescending = false\n        }\n    }\n    return\
    \ isAscending || isDescending\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    if l[0]\
    \ < l[1] {\n        for i := 1; i < len(l); i++ {\n            if l[i-1] > l[i]\
    \ {\n                return false\n            }\n        }\n    } else {\n  \
    \      for i := 1; i < len(l); i++ {\n            if l[i-1] < l[i] {\n       \
    \         return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074589
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    increasing\
    \ := true\n    decreasing := true\n    for i := 1; i < len(l); i++ {\n       \
    \ if l[i] < l[i-1] {\n            increasing = false\n        }\n        if l[i]\
    \ > l[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074716
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    return false\n}\n\nfunc TestMonotonic(t *testing.T) {\n \
    \ candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__0\
    \ (0.00s)\n        tmpnt_ittkl_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__1 (0.00s)\n        tmpnt_ittkl_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmpnt_ittkl_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmpnt_ittkl_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__6\
    \ (0.00s)\n        tmpnt_ittkl_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__7 (0.00s)\n        tmpnt_ittkl_test.go:39:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074711
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    monotonic := true\n    if len(l) == 1 {\n        return monotonic\n\
    \    }\n    for idx, e := range l {\n        switch idx {\n        case 0:\n \
    \           continue\n        case 1:\n            if e > l[idx-1] {\n       \
    \         continue\n            } else {\n                monotonic = false\n\
    \            }\n        default:\n            if e > l[idx-1] && l[idx-1] > l[idx-2]\
    \ {\n                continue\n            } else if e < l[idx-1] && l[idx-1]\
    \ < l[idx-2] {\n                continue\n            } else {\n             \
    \   monotonic = false\n            }\n        }\n    }\n    return monotonic\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__3\
    \ (0.00s)\n        tmp8zh1efux_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestMonotonic/test_num__4 (0.00s)\n        tmp8zh1efux_test.go:63:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmp8zh1efux_test.go:63: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    // Compare\
    \ all elements with next one.\n    direction := l[1] - l[0]\n    for i := 1; i\
    \ < len(l) - 1; i++ {\n        if direction * (l[i + 1] - l[i]) < 0 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    n := len(l)\n    if n < 2 {\n        return true\n    }\n\
    \    dir := l[0] < l[1]\n    for i := 1; i < n - 1; i++ {\n        if dir != (l[i]\
    \ < l[i + 1]) {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := true\n    decreasing := true\n    for i, _\
    \ := range l {\n        if i == 0 {\n            continue\n        }\n       \
    \ if l[i] < l[i-1] {\n            increasing = false\n        }\n        if l[i]\
    \ > l[i-1] {\n            decreasing = false\n        }\n    }\n    return increasing\
    \ || decreasing\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    for i :=\
    \ 0; i < len(l) - 1; i++ {\n        if l[i] < l[i + 1] {\n            for j :=\
    \ i + 1; j < len(l) - 1; j++ {\n                if l[j] > l[j + 1] {\n       \
    \             return false\n                }\n            }\n            return\
    \ true\n        } else if l[i] > l[i + 1] {\n            for j := i + 1; j < len(l)\
    \ - 1; j++ {\n                if l[j] < l[j + 1] {\n                    return\
    \ false\n                }\n            }\n            return true\n        }\n\
    \    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate\
    \ := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074727
- exit_code: 1
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    isMono :=\
    \ false\n    sign := l[1] - l[0]\n    for i := 1; i < len(l); i++ {\n        if\
    \ (l[i] - l[i-1]) * sign < 0 {\n            return false\n        }\n        if\
    \ (l[i] - l[i-1]) * sign > 0 {\n            isMono = true\n        }\n    }\n\
    \    return isMono\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestMonotonic (0.00s)\n    --- FAIL: TestMonotonic/test_num__7\
    \ (0.00s)\n        tmpg1m7p19e_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    increasing := l[0] <= l[len(l)-1]\n    for i := 1; i < len(l);\
    \ i++ {\n        prev := l[i-1]\n        curr := l[i]\n        if increasing {\n\
    \            if curr < prev {\n                return false\n            }\n \
    \       } else {\n            if curr > prev {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // Check for empty list and list of single element\n    if\
    \ len(l) < 2 {\n        return true\n    }\n\n    // Check for increasing order\n\
    \    isIncreasing := true\n    for i := 1; i < len(l); i++ {\n        if l[i]\
    \ < l[i-1] {\n            isIncreasing = false\n            break\n        }\n\
    \    }\n\n    // Check for decreasing order\n    isDecreasing := true\n    for\
    \ i := 1; i < len(l); i++ {\n        if l[i] > l[i-1] {\n            isDecreasing\
    \ = false\n            break\n        }\n    }\n\n    // If neither increasing\
    \ or decreasing, false\n    if !isIncreasing && !isDecreasing {\n        return\
    \ false\n    }\n\n    return true\n}\n\nfunc TestMonotonic(t *testing.T) {\n \
    \ candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    var increasing,\
    \ decreasing bool\n    var prev int\n    for _, v := range l {\n        if prev\
    \ == 0 {\n            prev = v\n            continue\n        }\n        if v\
    \ > prev {\n            increasing = true\n        } else if v < prev {\n    \
    \        decreasing = true\n        }\n        if increasing && decreasing {\n\
    \            return false\n        }\n        prev = v\n    }\n    return true\n\
    }\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n\
    \     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual:\
    \ candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4,\
    \ 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}),\
    \ expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected:\
    \ false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true\
    \ },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // will keep track of the increasing or decreasing state\n\
    \    increasing := -1\n    for i := 1; i < len(l); i++ {\n        // initial value,\
    \ so we ignore and continue\n        if increasing == -1 {\n            if l[i]\
    \ > l[i-1] {\n                increasing = 1\n            } else if l[i] < l[i-1]\
    \ {\n                increasing = 0\n            }\n            continue\n   \
    \     }\n        // if l[i] > l[i-1]\n        if increasing == 1 {\n         \
    \   if l[i] < l[i-1] {\n                return false\n            }\n        }\
    \ else {\n            if l[i] > l[i-1] {\n                return false\n     \
    \       }\n        }\n    }\n    return true\n}\n\nfunc TestMonotonic(t *testing.T)\
    \ {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1,\
    \ 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1, 2, 4, 20}),\
    \ expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}), expected:\
    \ false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected: true },\n\
    \     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     { actual: candidate([]int{1,\
    \ 2, 3, 4, 5, 60}), expected: true },\n     { actual: candidate([]int{9, 9, 9,\
    \ 9}), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    // total numbers\n    n := len(l)\n    // compare previous\
    \ and current values\n    previous := l[0]\n    // determine if up or down\n \
    \   up := l[1] > previous\n    for i := 1; i < n; i++ {\n        // compare current\
    \ with previous\n        if up {\n            if l[i] < previous {\n         \
    \       return false\n            }\n        } else {\n            if l[i] > previous\
    \ {\n                return false\n            }\n        }\n        // set previous\
    \ to current\n        previous = l[i]\n    }\n    return true\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) < 2 {\n        return true\n    }\n    diff :=\
    \ l[1] - l[0]\n    for i := 2; i < len(l); i++ {\n        if (l[i] - l[i-1]) *\
    \ diff < 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual:\
    \ candidate([]int{1, 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1,\
    \ 20, 4, 10}), expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}),\
    \ expected: true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true\
    \ },\n     { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n\
    \     { actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     {\
    \ actual: candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    dec :=\
    \ true\n    inc := true\n    for i := 1; i < len(l); i++ {\n        if l[i] >\
    \ l[i-1] {\n            dec = false\n        }\n        if l[i] < l[i-1] {\n \
    \           inc = false\n        }\n    }\n    return dec || inc\n}\n\nfunc TestMonotonic(t\
    \ *testing.T) {\n  candidate := monotonic\n\ttype test struct {\n\t\tactual  \
    \ interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]int{1, 2, 4, 10}), expected: true },\n     { actual: candidate([]int{1,\
    \ 2, 4, 20}), expected: true },\n     { actual: candidate([]int{1, 20, 4, 10}),\
    \ expected: false },\n     { actual: candidate([]int{4, 1, 0, -10}), expected:\
    \ true },\n     { actual: candidate([]int{4, 1, 1, 0}), expected: true },\n  \
    \   { actual: candidate([]int{1, 2, 3, 2, 5, 60}), expected: false },\n     {\
    \ actual: candidate([]int{1, 2, 3, 4, 5, 60}), expected: true },\n     { actual:\
    \ candidate([]int{9, 9, 9, 9}), expected: true },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074727
- exit_code: 0
  program: "package monotonic_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true is list elements are monotonically increasing or decreasing.\n\
    // >>> monotonic([]int{1, 2, 4, 20})\n// true\n// >>> monotonic([]int{1, 20, 4,\
    \ 10})\n// false\n// >>> monotonic([]int{4, 1, 0, -10})\n// true\nfunc monotonic(l\
    \ []int) bool {\n    if len(l) <= 1 {\n        return true\n    }\n    is_increasing\
    \ := l[0] < l[1]\n    for i := 2; i < len(l); i++ {\n        if is_increasing\
    \ && l[i - 1] > l[i] {\n            return false\n        }\n        if !is_increasing\
    \ && l[i - 1] < l[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestMonotonic(t *testing.T) {\n  candidate := monotonic\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{1, 2, 4, 10}), expected:\
    \ true },\n     { actual: candidate([]int{1, 2, 4, 20}), expected: true },\n \
    \    { actual: candidate([]int{1, 20, 4, 10}), expected: false },\n     { actual:\
    \ candidate([]int{4, 1, 0, -10}), expected: true },\n     { actual: candidate([]int{4,\
    \ 1, 1, 0}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 2, 5,\
    \ 60}), expected: false },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 60}),\
    \ expected: true },\n     { actual: candidate([]int{9, 9, 9, 9}), expected: true\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074727
