language: go_test.go
name: HumanEval_147_get_max_triples
results:
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    total_triples\
    \ := 0\n    // fmt.Println(n)\n    for index, _ := range make([]int, n) {\n  \
    \      // fmt.Println(index)\n        if (index + 1) * (index + 1) - (index +\
    \ 1) + 1 == index + 1 {\n            fmt.Println(index)\n            continue\n\
    \        }\n        for second_index, _ := range make([]int, n) {\n          \
    \  if second_index <= index {\n                continue\n            }\n     \
    \       if (second_index + 1) * (second_index + 1) - (second_index + 1) + 1 ==\
    \ second_index + 1 {\n                fmt.Println(second_index)\n            \
    \    continue\n            }\n            for third_index, _ := range make([]int,\
    \ n) {\n                if third_index <= second_index {\n                   \
    \ continue\n                }\n                if (third_index + 1) * (third_index\
    \ + 1) - (third_index + 1) + 1 == third_index + 1 {\n                    fmt.Println(third_index)\n\
    \                    continue\n                }\n                triple_sum :=\
    \ (index + 1) * (index + 1) - (index + 1) + 1 + (second_index + 1) * (second_index\
    \ + 1) - (second_index + 1) + 1 + (third_index + 1) * (third_index + 1) - (third_index\
    \ + 1) + 1\n                if triple_sum % 3 == 0 {\n                    total_triples++\n\
    \                }\n            }\n        }\n    }\n    return total_triples\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "0\n0\n0\n0\n--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp7tq3kyy2_test.go:69: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp7tq3kyy2_test.go:69:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp7tq3kyy2_test.go:69: expected '%!s(int=36)', got '%!s(int=21)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp7tq3kyy2_test.go:69:\
    \ expected '%!s(int=53361)', got '%!s(int=51216)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ your code here\n    a := make([]int, n)\n    for i:=0; i<n; i++ {\n        a[i]\
    \ = i*i - i + 1\n    }\n    cnt := 0\n    for i:=0; i<n-2; i++ {\n        for\
    \ j:=i+1; j<n-1; j++ {\n            for k:=j+1; k<n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n               \
    \ }\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmprdqtx559_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n <= 3 {\n        return 0\n    }\n    c := n - 2\n    return c * (c + 1) /\
    \ 2\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6aeqxcof_test.go:42: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6aeqxcof_test.go:42:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp6aeqxcof_test.go:42: expected '%!s(int=53361)', got '%!s(int=4851)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    c :=\
    \ 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n    \
    \        for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    c++\n           \
    \     }\n            }\n        }\n    }\n    return c\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp830asm4w_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp830asm4w_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp830asm4w_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.012s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    triples := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    triples++\n                }\n\
    \            }\n        }\n    }\n    return triples\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpwqhxaq9g_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n <= 2 {\n        return 0\n    }\n    var a []int\n    for i := 1; i <= n;\
    \ i++ {\n        a = append(a, i * i - i + 1)\n    }\n    m := make(map[int]int)\n\
    \    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n\
    \            m[a[i] + a[j]] += 1\n        }\n    }\n    count := 0\n    for i\
    \ := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n         \
    \   for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    count += m[a[k]]\n                }\n          \
    \  }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpuq4asbu7_test.go:61: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpuq4asbu7_test.go:61:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpuq4asbu7_test.go:61: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpuq4asbu7_test.go:61:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    arr := make([]int, n)\n    for i:=0; i<n;\
    \ i++ {\n        arr[i] = i*i - i + 1\n    }\n    return get_max_triples_inner(arr,\
    \ 0, len(arr))\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpchx9rbmv_test.go:26:12: undefined: get_max_triples_inner

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n <= 0 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 0;\
    \ i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    cnt := 0\n    for i :=\
    \ 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    cnt++\n                }\n            }\n        }\n    }\n\
    \    return cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpm6ingkmd_test.go:55: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n-2; i++ {\n\
    \        for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ res int\n    var cnt [3]int\n    cnt[0] = 1\n    for i := 1; i < n; i++ {\n\
    \        v := i * i - i + 1\n        if v % 3 == 0 {\n            res += cnt[0]\n\
    \        }\n        cnt[v % 3]++\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp0vel7x47_test.go:48: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp0vel7x47_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=6)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp0vel7x47_test.go:48: expected '%!s(int=53361)', got '%!s(int=561)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    ans\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    ans += 1\n  \
    \              }\n            }\n        }\n    }\n    return ans\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp66lg353w_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp66lg353w_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp66lg353w_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ max_triples int = 0\n    var a = make([]int, n)\n    // set a\n    for i :=\
    \ 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    // judge a\n  \
    \  for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n          \
    \  for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    max_triples++\n                }\n            }\n \
    \       }\n    }\n    return max_triples\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    c :=\
    \ make([]int, 4)\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n\
    \        c[a % 3]++\n    }\n    var result int\n    for i := 0; i < 3; i++ {\n\
    \        result += c[i] * (c[i] - 1) / 2\n    }\n    return result\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpv413y6xd_test.go:47: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpv413y6xd_test.go:47:\
    \ expected '%!s(int=4)', got '%!s(int=7)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpv413y6xd_test.go:47: expected '%!s(int=36)', got '%!s(int=24)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpv413y6xd_test.go:47:\
    \ expected '%!s(int=53361)', got '%!s(int=2739)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    res := 0\n    // \u524D\u7F00\u548C\n\
    \    sum := make([]int, n)\n    sum[0] = 1\n    for i := 1; i < n; i++ {\n   \
    \     sum[i] = sum[i-1] + i*i - i + 1\n    }\n    for i := 0; i < n; i++ {\n \
    \       for j := i+1; j < n; j++ {\n            if (sum[j] - sum[i]) % 3 == 0\
    \ {\n                for k := j+1; k < n; k++ {\n                    if (sum[k]\
    \ - sum[j]) % 3 == 0 {\n                        res += 1\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return res\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpjrx51yfm_test.go:59: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpjrx51yfm_test.go:59:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpjrx51yfm_test.go:59: expected '%!s(int=36)', got '%!s(int=6)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpjrx51yfm_test.go:59:\
    \ expected '%!s(int=53361)', got '%!s(int=16896)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    var result int\n   \
    \ for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n         \
    \   for k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    result++\n                }\n            }\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074126
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    triples\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if ((i * i - i + 1)\
    \ + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    m :=\
    \ make(map[int]int)\n    for i := 1; i <= n; i++ {\n        m[i * i - i + 1] =\
    \ i\n    }\n    cnt := 0\n    for i := 1; i <= n; i++ {\n        for j := i +\
    \ 1; j <= n; j++ {\n            r := m[i * i - i + 1] + m[j * j - j + 1]\n   \
    \         r %= 3\n            if r == 0 {\n                r = 3\n           \
    \ }\n            if _, ok := m[r]; ok {\n                cnt++\n            }\n\
    \        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpzuh7zpxb_test.go:55: expected '%!s(int=1)', got '%!s(int=7)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpzuh7zpxb_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpzuh7zpxb_test.go:55: expected '%!s(int=36)', got '%!s(int=30)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpzuh7zpxb_test.go:55:\
    \ expected '%!s(int=53361)', got '%!s(int=3300)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    // for i := 1; i <=\
    \ n; i++ {\n    //     fmt.Printf(\"%d \", a[i-1])\n    // }\n    // fmt.Println()\n\
    \    ret := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    ret++\n                }\n         \
    \   }\n        }\n    }\n    return ret\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ n * (n - 1) * (n - 2) / 6\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n \
    \ candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpil37k_tp_test.go:38: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpil37k_tp_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpil37k_tp_test.go:38: expected '%!s(int=36)', got '%!s(int=120)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpil37k_tp_test.go:38:\
    \ expected '%!s(int=53361)', got '%!s(int=161700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    cnt := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n                }\n  \
    \          }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ create the list a\n    var a []int\n    for i := 1; i <= n; i++ {\n        a\
    \ = append(a, i * i - i + 1)\n    }\n    var count int\n    for i := 0; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n               \
    \     count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp8zcbsb83_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp8zcbsb83_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp8zcbsb83_test.go:53: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp8zcbsb83_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    list\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        list[i-1] = i * i\
    \ - i + 1\n    }\n    fmt.Println(list)\n    count := 0\n    for i := 0; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if (list[i] + list[j] + list[k]) % 3 == 0 {\n    \
    \                count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    cnt\
    \ := 0\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] =\
    \ i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n                }\n  \
    \          }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpn7gzvz4s_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ result int = 0\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n    \
    \    a[i] = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if a[i] + a[j] + a[k] % 3 == 0 {\n                    result++\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpthzfzxvx_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpthzfzxvx_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpthzfzxvx_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpthzfzxvx_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.006s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    m :=\
    \ n / 3\n    if m > 0 {\n        return m * (m + 1) / 2\n    } else {\n      \
    \  return 0\n    }\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmprt4k96ac_test.go:43: expected '%!s(int=4)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmprt4k96ac_test.go:43:\
    \ expected '%!s(int=36)', got '%!s(int=6)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmprt4k96ac_test.go:43: expected '%!s(int=53361)', got '%!s(int=561)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074297
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    cnt, sum := 0,\
    \ 0\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n        sum\
    \ += a[i-1]\n        if i >= 3 {\n            if sum % 3 == 0 {\n            \
    \    cnt++\n            }\n            sum -= a[i-3]\n        }\n    }\n    return\
    \ cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpt24j32gu_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpt24j32gu_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpt24j32gu_test.go:53: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpt24j32gu_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.008s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Your code here\n    if n < 3 {\n        return 0\n    }\n    a := make([]int,\
    \ n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n \
    \   res := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++\
    \ {\n            for k := j+1; k < n; k++ {\n                // fmt.Println(a[i],\
    \ a[j], a[k])\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n          \
    \          res += 1\n                }\n            }\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    sum_cache\
    \ := make(map[int]int)\n    sum_cache[0] = 1\n    count := 0\n    sum := 0\n \
    \   for i := 1; i <= n; i++ {\n        sum += i * i - i + 1\n        if sum %\
    \ 3 == 0 {\n            if times, ok := sum_cache[sum / 3]; ok {\n           \
    \     count += times\n            }\n        }\n        sum_cache[sum]++\n   \
    \ }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpf9lhy2p4_test.go:51: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpf9lhy2p4_test.go:51:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpf9lhy2p4_test.go:51: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpf9lhy2p4_test.go:51:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpyvo_bq79_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpyvo_bq79_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpyvo_bq79_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpckb6zgvk_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpckb6zgvk_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpckb6zgvk_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    a := make([]int, n+1)\n    for i := 1; i <= n; i++ {\n      \
    \  a[i] = i * i - i + 1\n    }\n    for i := 1; i <= n; i++ {\n        for j :=\
    \ i+1; j <= n; j++ {\n            for k := j+1; k <= n; k++ {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n         \
    \       }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    var cnt int\n    for i := 0; i < n - 2; i++ {\n        for j := i\
    \ + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n          \
    \      if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n       \
    \         }\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp4otv_6gj_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n       \
    \     for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    sum,\
    \ count := 0, 0\n    for i := 1; i <= n; i++ {\n        sum += i * i - i + 1\n\
    \        if sum % 3 == 0 {\n            count++\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmphxmv9_jx_test.go:45: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmphxmv9_jx_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmphxmv9_jx_test.go:45: expected '%!s(int=36)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmphxmv9_jx_test.go:45:\
    \ expected '%!s(int=53361)', got '%!s(int=33)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    var result int\n    for i := 0; i < n; i++ {\n        for j := i +\
    \ 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result++\n            \
    \    }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpabyrfccx_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ n * (n - 1) * (n - 2) / 6;\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpph4ib29l_test.go:38: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpph4ib29l_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpph4ib29l_test.go:38: expected '%!s(int=36)', got '%!s(int=120)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpph4ib29l_test.go:38:\
    \ expected '%!s(int=53361)', got '%!s(int=161700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ The number of all triples (a[i], a[j], a[k]) is n * (n - 1) * (n - 2) / 6.\n\
    \    var result int\n    if n > 3 {\n        result = n * (n - 1) * (n - 2) /\
    \ 6\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp_vir2p9v_test.go:43: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp_vir2p9v_test.go:43:\
    \ expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp_vir2p9v_test.go:43: expected '%!s(int=36)', got '%!s(int=120)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp_vir2p9v_test.go:43:\
    \ expected '%!s(int=53361)', got '%!s(int=161700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i +\
    \ 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpaad143g7_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    var sum int\n    for i := 1; i < n - 1; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n        \
    \        sum = i*i - i + 1 + j*j - j + 1 + k*k - k + 1\n                if sum\
    \ % 3 == 0 {\n                    count++\n                }\n            }\n\
    \        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i:=1; i<=n; i++ {\n        a[i-1] = i*i - i + 1\n  \
    \  }\n    fmt.Println(a)\n    cnt := 0\n    for i:=0; i<n-2; i++ {\n        for\
    \ j:=i+1; j<n-1; j++ {\n            for k:=j+1; k<n; k++ {\n                if\
    \ (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n               \
    \ }\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            if (i * i - i + 1 + j * j - j + 1) % 3 == 0 {\n                count++\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmplwtcipkw_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmplwtcipkw_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmplwtcipkw_test.go:46: expected '%!s(int=36)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmplwtcipkw_test.go:46:\
    \ expected '%!s(int=53361)', got '%!s(int=528)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    var count int\n    a = make([]int, n)\n    for i := 1; i <= n;\
    \ i++ {\n        a[i-1] = i * i - i + 1\n    }\n    for i := 0; i < n-2; i++ {\n\
    \        for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    result := make([]int, n)\n    for i :=\
    \ 0; i < n; i++ {\n        result[i] = i * i - i + 1\n    }\n    count := 0\n\
    \    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n\
    \            for k := j + 1; k < n; k++ {\n                if result[i] + result[j]\
    \ + result[k] % 3 == 0 {\n                    count++\n                }\n   \
    \         }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpopdweyuk_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpopdweyuk_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpopdweyuk_test.go:55: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpopdweyuk_test.go:55:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    cnt := 0\n    for i :=\
    \ 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    cnt++\n                }\n            }\n        }\n    }\n\
    \    return cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp_ng6lho1_test.go:55: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Create a list\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n     \
    \   a[i] = i * i - i + 1\n    }\n    var sum int\n    var count int\n    // Calculate\
    \ the number of possible triplets\n    for i := 0; i < n - 2; i++ {\n        for\
    \ j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0 {\n  \
    \                  count += 1\n                }\n            }\n        }\n \
    \   }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpw2cba8am_test.go:56: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    cnt := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1;\
    \ j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n               \
    \ sum := a[i] + a[j] + a[k]\n                if sum % 3 == 0 {\n             \
    \       cnt++\n                }\n            }\n        }\n    }\n    return\
    \ cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Initialize the list a with length n.\n    a := make([]int, n)\n    count :=\
    \ 0\n    // Calculate the value of a[i]\n    for i := 1; i <= n; i++ {\n     \
    \   a[i-1] = i * i - i + 1\n    }\n    // For each triple, check if it satisfies\
    \ the condition.\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i] + a[j]\
    \ + a[k] % 3 == 0 {\n                    count++\n                }\n        \
    \    }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp82g0043l_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp82g0043l_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp82g0043l_test.go:55: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp82g0043l_test.go:55:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n-2; i++ {\n\
    \        for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    triple := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    triple += 1\n                }\n\
    \            }\n        }\n    }\n    return triple\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpmwt74t29_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpmwt74t29_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpmwt74t29_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpmwt74t29_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    res\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            if ((i * i - i + 1) + (j * j - j + 1)) % 3 == 0 {\n             \
    \   res++\n            }\n        }\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmprlx43dlx_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmprlx43dlx_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmprlx43dlx_test.go:46: expected '%!s(int=36)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmprlx43dlx_test.go:46:\
    \ expected '%!s(int=53361)', got '%!s(int=528)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i*i - i + 1 + j*j\
    \ - j + 1 + k*k - k + 1) % 3 == 0 {\n                    result++\n          \
    \      }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpve_8mbry_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpve_8mbry_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpve_8mbry_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ check for edge cases\n    if n <= 2 {\n        return 0\n    }\n\n    count\
    \ := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if ((i * i - i\
    \ + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmprmv69afl_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    cnt\
    \ := 0\n    // use 3 pointers\n    for i := 1; i < n - 1; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n        \
    \        if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n     \
    \               cnt++\n                }\n            }\n        }\n    }\n  \
    \  return cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    cnt := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n                }\n  \
    \          }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpsvyfvjr1_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    const\
    \ max_len = 1000000\n    count := 0\n    var a [max_len]int\n    for i := 1; i\
    \ <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n    for i := 1; i <= n - 2;\
    \ i++ {\n        for j := i + 1; j <= n - 1; j++ {\n            for k := j + 1;\
    \ k <= n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n        \
    \            count++\n                }\n            }\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    res\
    \ := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    res++\n \
    \               }\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp8a9qyy0v_test.go:48: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //a[i]\
    \ = (i - 1) * (i - 1) + (i - 1) + 1 = i * i - i + 1\n    cnt := 0\n    for j :=\
    \ 2; j < n; j++ {\n        for k := j + 1; k <= n; k++ {\n            if (j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0 {\n                cnt++\n            }\n\
    \        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp4pungecv_test.go:47: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp4pungecv_test.go:47:\
    \ expected '%!s(int=36)', got '%!s(int=3)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp4pungecv_test.go:47: expected '%!s(int=53361)', got '%!s(int=528)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a, max int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            a = i * i - i + 1 + j * j - j + 1\n            for k := j\
    \ + 1; k <= n; k++ {\n                if (a + k * k - k + 1) % 3 == 0 {\n    \
    \                max++\n                }\n            }\n        }\n    }\n \
    \   return max\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    triples\
    \ := 0\n    var i, j, k int\n    for i = 1; i < n - 1; i++ {\n        ai := i\
    \ * i - i + 1\n        for j = i + 1; j < n; j++ {\n            aj := j * j -\
    \ j + 1\n            for k = j + 1; k <= n; k++ {\n                ak := k * k\
    \ - k + 1\n                if ai + aj + ak == 0 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp7vizue4c_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp7vizue4c_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp7vizue4c_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp7vizue4c_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    i :=\
    \ 1\n    j := 2\n    k := 3\n    a := []int{}\n    result := 0\n    for i <= n\
    \ {\n        a = append(a, i * i - i + 1)\n        i++\n    }\n    fmt.Println(a)\n\
    \    for i, v := range a {\n        for j, w := range a {\n            if j >\
    \ i {\n                for k, x := range a {\n                    if k > j {\n\
    \                        if v + w + x % 3 == 0 {\n                           \
    \ result++\n                        }\n                    }\n               \
    \ }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzurgzuut_test.go:20:5: j declared but not used

    /tmp/tmpzurgzuut_test.go:21:5: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        arr[i-1] = i * i -\
    \ i + 1\n    }\n    fmt.Println(arr)\n    num := 0\n    for i := 0; i < n-2; i++\
    \ {\n        for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++\
    \ {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n              \
    \      num++\n                }\n            }\n        }\n    }\n    return num\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    result := 0\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    result++\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //1\
    \ \u2264 n \u2264 5*10^5\n    if n > 500000 {\n        return 0\n    }\n    a\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i\
    \ + 1\n    }\n    res := 0\n    m := make(map[int]int)\n    for i := 1; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            k := a[i] + a[j]\n\
    \            if k % 3 == 0 {\n                k /= 3\n                if v, ok\
    \ := m[k]; ok {\n                    res += v\n                }\n           \
    \ }\n        }\n        for j := 0; j < i; j++ {\n            m[a[i] + a[j]]++\n\
    \        }\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpvwogbnp6_test.go:62: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpvwogbnp6_test.go:62:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpvwogbnp6_test.go:62: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpvwogbnp6_test.go:62:\
    \ expected '%!s(int=53361)', got '%!s(int=176)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    m :=\
    \ make(map[int]int)\n    m[0] = 0\n    m[1] = 0\n    m[2] = 0\n    for i := 3;\
    \ i <= n; i++ {\n        //get one\n        if (i % 3 == 0) {\n            m[i]\
    \ = m[i - 1] + 1\n        } else {\n            m[i] = m[i - 1]\n        }\n \
    \       // get more\n        for j := i - 1; j >= 0; j-- {\n            if ((i\
    \ * i - i + 1) % 3 != 0) {\n                continue\n            }\n        \
    \    for k := j - 1; k >= 0; k-- {\n                if ((i * i - i + 1) % 3 !=\
    \ 0) {\n                    continue\n                }\n                if ((j\
    \ * j - j + 1) % 3 != 0) {\n                    continue\n                }\n\
    \                if ((k * k - k + 1) % 3 != 0) {\n                    continue\n\
    \                }\n                if ((i * i - i + 1) + (j * j - j + 1) + (k\
    \ * k - k + 1)) % 3 == 0 {\n                    m[i] += 1\n                }\n\
    \            }\n        }\n    }\n    fmt.Println(m)\n    return m[n]\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[0:0 1:0 2:0 3:1 4:1 5:1]\nmap[0:0 1:0 2:0 3:1 4:1 5:1 6:2]\nmap[0:0\
    \ 1:0 2:0 3:1 4:1 5:1 6:2 7:2 8:3 9:4 10:4]\nmap[0:0 1:0 2:0 3:1 4:1 5:1 6:2 7:2\
    \ 8:3 9:4 10:4 11:7 12:8 13:8 14:14 15:15 16:15 17:25 18:26 19:26 20:41 21:42\
    \ 22:42 23:63 24:64 25:64 26:92 27:93 28:93 29:129 30:130 31:130 32:175 33:176\
    \ 34:176 35:231 36:232 37:232 38:298 39:299 40:299 41:377 42:378 43:378 44:469\
    \ 45:470 46:470 47:575 48:576 49:576 50:696 51:697 52:697 53:833 54:834 55:834\
    \ 56:987 57:988 58:988 59:1159 60:1160 61:1160 62:1350 63:1351 64:1351 65:1561\
    \ 66:1562 67:1562 68:1793 69:1794 70:1794 71:2047 72:2048 73:2048 74:2324 75:2325\
    \ 76:2325 77:2625 78:2626 79:2626 80:2951 81:2952 82:2952 83:3303 84:3304 85:3304\
    \ 86:3682 87:3683 88:3683 89:4089 90:4090 91:4090 92:4525 93:4526 94:4526 95:4991\
    \ 96:4992 97:4992 98:5488 99:5489 100:5489]\n--- FAIL: TestGet_Max_Triples (0.00s)\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpkqjezz2v_test.go:71:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpkqjezz2v_test.go:71: expected '%!s(int=36)', got '%!s(int=4)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpkqjezz2v_test.go:71:\
    \ expected '%!s(int=53361)', got '%!s(int=5489)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    count := 0\n    nums := make([]int, n)\n\
    \    var sum int\n    for i := 0; i < n; i++ {\n        nums[i] = i * i - i +\
    \ 1\n        sum += nums[i]\n    }\n    for i := 0; i < n; i++ {\n        for\
    \ j := i + 1; j < n; j++ {\n            if (sum - nums[i] - nums[j]) % 3 == 0\
    \ {\n                count++\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpoagrc295_test.go:55: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpoagrc295_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=8)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpoagrc295_test.go:55: expected '%!s(int=36)', got '%!s(int=21)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpoagrc295_test.go:55:\
    \ expected '%!s(int=53361)', got '%!s(int=2211)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    cnt\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                s := i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1\n                if s % 3 == 0 {\n         \
    \           cnt++\n                }\n            }\n        }\n    }\n    return\
    \ cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    max_triples\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    max_triples++\n\
    \                }\n            }\n        }\n    }\n    return max_triples\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpq9fm9yx8_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    result := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    result += 1\n                }\n\
    \            }\n        }\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp7onk6qap_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp7onk6qap_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp7onk6qap_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp7onk6qap_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    result\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    result++\n  \
    \              }\n            }\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp9ms2yrqx_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp9ms2yrqx_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp9ms2yrqx_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpqin7d2vu_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpqin7d2vu_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpqin7d2vu_test.go:38: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpqin7d2vu_test.go:38:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    list\
    \ := make([]int, n)\n    for i := 1; i <= n; i++ {\n        list[i-1] = i * i\
    \ - i + 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for\
    \ j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n         \
    \       if (list[i] + list[j] + list[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    // a = [1, 3, 7, 13, 21] => a[i] = i*i\
    \ - i + 1\n    // => a[i] = 2*i*i - i + 1 = (2*i-1)*i + 1\n    // => a[i] + a[j]\
    \ + a[k] = (2*i-1)*i + 1 + (2*j-1)*j + 1 + (2*k-1)*k + 1\n    // => a[i] + a[j]\
    \ + a[k] = 6*i*j*k - i*j - i*k - j*k + i + j + k\n    // => a[i] + a[j] + a[k]\
    \ = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i] + a[j] + a[k]\
    \ = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i] + a[j] + a[k]\
    \ = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i] + a[j] + a[k]\
    \ = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i] + a[j] + a[k]\
    \ = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i] + a[j] + a[k]\
    \ = 6*i*j*k - 3*(i*j + i*k + j*k) + 3*(i + j + k)\n    // => a[i] + a[j] + a[k]\
    \ = 6*i*j*k - 3*(i*j\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpivl7uz7__test.go:33:6: expected ''('', found TestGet_Max_Triples

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074299
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ n*(n-1)*(n-2)/6\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpr0dy775t_test.go:38: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpr0dy775t_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpr0dy775t_test.go:38: expected '%!s(int=36)', got '%!s(int=120)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpr0dy775t_test.go:38:\
    \ expected '%!s(int=53361)', got '%!s(int=161700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074301
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpqin7d2vu_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpqin7d2vu_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpqin7d2vu_test.go:38: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpqin7d2vu_test.go:38:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ i, j, k, count int = 0, 0, 0, 0\n    var a = make([]int, n, n)\n    for i =\
    \ 0; i < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    for i = 0; i < n -\
    \ 2; i++ {\n        for j = i + 1; j < n - 1; j++ {\n            for k = j + 1;\
    \ k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n         \
    \           count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpokqogowr_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074301
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Method 1: Time Limit Exceeded\n    // sum := 0\n    // count := 0\n    // for\
    \ i := 1; i < n - 1; i++ {\n    //     for j := i + 1; j < n; j++ {\n    //  \
    \       for k := j + 1; k <= n; k++ {\n    //             sum = i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1\n    //             if sum % 3 == 0 {\n    //\
    \                 count++\n    //             }\n    //         }\n    //    \
    \ }\n    // }\n    // return count\n\n    // Method 2: see https://quizlet.com/302827456/cs-hackerrank-get-max-triples-flash-cards/\n\
    \    // TODO:\n\n    // Method 3:\n    count := 0\n    for i := 1; i < n - 1;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            sum := (i * i - i +\
    \ 1) + (j * j - j + 1)\n            if sum % 3 == 0 {\n                count +=\
    \ n - j\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpvkyhfs9e_test.go:66: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpvkyhfs9e_test.go:66:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpvkyhfs9e_test.go:66: expected '%!s(int=36)', got '%!s(int=9)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpvkyhfs9e_test.go:66:\
    \ expected '%!s(int=53361)', got '%!s(int=17424)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    count := 0\n    if n <= 2 {\n        return count\n\
    \    }\n    a := make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] =\
    \ i * i - i + 1\n    }\n    fmt.Println(a)\n    for k := 2; k < n; k++ {\n   \
    \     for j := 1; j < k; j++ {\n            for i := 0; i < j; i++ {\n       \
    \         if a[i] + a[j] + a[k] % 3 == 0 {\n                    count++\n    \
    \            }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 1 3 7 13]\n[1 1 3 7 13 21]\n[1 1 3 7 13 21 31 43 57 73]\n[1 1 3 7 13\
    \ 21 31 43 57 73 91 111 133 157 183 211 241 273 307 343 381 421 463 507 553 601\
    \ 651 703 757 813 871 931 993 1057 1123 1191 1261 1333 1407 1483 1561 1641 1723\
    \ 1807 1893 1981 2071 2163 2257 2353 2451 2551 2653 2757 2863 2971 3081 3193 3307\
    \ 3423 3541 3661 3783 3907 4033 4161 4291 4423 4557 4693 4831 4971 5113 5257 5403\
    \ 5551 5701 5853 6007 6163 6321 6481 6643 6807 6973 7141 7311 7483 7657 7833 8011\
    \ 8191 8373 8557 8743 8931 9121 9313 9507 9703]\n--- FAIL: TestGet_Max_Triples\
    \ (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0 (0.00s)\n        tmphqywsq3z_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmphqywsq3z_test.go:57: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmphqywsq3z_test.go:57:\
    \ expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmphqywsq3z_test.go:57: expected '%!s(int=53361)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ triples int\n    var a []int\n    var i, j, k int\n    var sum int\n    for\
    \ i=1; i<=n; i++ {\n        a = append(a, i*i-i+1)\n    }\n    for i=0; i<n-2;\
    \ i++ {\n        for j=i+1; j<n-1; j++ {\n            for k=j+1; k<n; k++ {\n\
    \                sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0 {\n\
    \                    triples++\n                }\n            }\n        }\n\
    \    }\n    return triples\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ result = 0\n    // a = [1, 3, 7, 13, 21]\n    if n >= 3 {\n        result =\
    \ n - 2\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpuf9p3j1u_test.go:43: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpuf9p3j1u_test.go:43:\
    \ expected '%!s(int=36)', got '%!s(int=8)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpuf9p3j1u_test.go:43: expected '%!s(int=53361)', got '%!s(int=98)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 2 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    if n <= 2 {\n      \
    \  return 0\n    }\n    maxTriples := 0\n    for i := 0; i < n-2; i++ {\n    \
    \    for j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n  \
    \              if a[i] + a[j] + a[k] % 3 == 0 {\n                    maxTriples++\n\
    \                }\n            }\n        }\n    }\n    return maxTriples\n}\n\
    \nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpuqgq8ivw_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpuqgq8ivw_test.go:58:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpuqgq8ivw_test.go:58: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpuqgq8ivw_test.go:58:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    var triples int\n    start, end := 0,\
    \ n-1\n    if n%3 == 0 {\n        start = 1\n    }\n    for i := start; i < end-1;\
    \ i++ {\n        triples += (end - i - 1)\n    }\n    return triples\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpmu92jf_v_test.go:49: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpmu92jf_v_test.go:49:\
    \ expected '%!s(int=4)', got '%!s(int=6)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpmu92jf_v_test.go:49: expected '%!s(int=53361)', got '%!s(int=4851)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n"
  timestamp: 1660074303
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 2 {\n        return 0\n    }\n    // t[i] stands for the number of elements\
    \ in a[1:i] that is a[j] (1 \u2264 j \u2264 i)\n    // and a[j] % 3 = 0, so sum\
    \ of a[j] is a multiple of 3.\n    t := make([]int, n + 1)\n    // f[i] stands\
    \ for the number of elements in a[1:i] that is a[j] (1 \u2264 j \u2264 i)\n  \
    \  // and a[j] % 3 = 1, so sum of a[j] is a multiple of 3.\n    f := make([]int,\
    \ n + 1)\n    // s[i] stands for the number of elements in a[1:i] that is a[j]\
    \ (1 \u2264 j \u2264 i)\n    // and a[j] % 3 = 2, so sum of a[j] is a multiple\
    \ of 3.\n    s := make([]int, n + 1)\n    ans := 0\n    // T[i] stands for the\
    \ number of triples among a[1:i] that a[i] can join.\n    T := make([]int, n +\
    \ 1)\n    for i := 1; i <= n; i++ {\n        // Calculate a[i]\n        ai :=\
    \ i * i - i + 1\n        // Calculate the sum of a[i] with all numbers in a[1:i-1]\n\
    \        t[i] = t[i - 1]\n        f[i] = f[i - 1]\n        s[i] = s[i - 1]\n \
    \       if ai % 3 == 0 {\n            t[i]++\n        } else if ai % 3 == 1 {\n\
    \            f[i]++\n        } else {\n            s[i]++\n        }\n       \
    \ // Calculate T[i]\n        T[i] = (t[i] - 1) * (t[i] - 2) / 2 +\n          \
    \     t[i] * (f[i] + s[i]) +\n               (f[i] - 1) * (f[i] - 2) / 2 +\n \
    \              f[i] * s[i\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmlxy6pgz_test.go:52:26: expected '']'', found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpzagb9725_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpzagb9725_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpzagb9725_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpzagb9725_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074303
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    // fmt.Println(a)\n    cnt := 0\n    for i := 0; i < n - 2; i++ {\n\
    \        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                \
    \    cnt++\n                }\n            }\n        }\n    }\n    return cnt\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkcow87ir_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074303
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    var res int\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    res++\n                }\n  \
    \          }\n        }\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074303
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ i, j, k, count int\n    for i = 1; i < n; i++ {\n        for j = i + 1; j <\
    \ n; j++ {\n            for k = j + 1; k < n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpqz6y6dl2_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpqz6y6dl2_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpqz6y6dl2_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074303
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if i + j + k % 3 ==\
    \ 0 {\n                    count++\n                }\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpdond6r_1_test.go:48: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpdond6r_1_test.go:48:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpdond6r_1_test.go:48: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpdond6r_1_test.go:48:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074303
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n \
    \               }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074126
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    num_triples\
    \ := 0\n    a := make([]int, n)\n    // init a[]\n    for i := 0; i < n; i++ {\n\
    \        a[i] = i * i - i + 1\n    }\n    for i := 0; i < n - 2; i++ {\n     \
    \   for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n\
    \                if a[i] + a[j] + a[k] % 3 == 0 {\n                    num_triples++\n\
    \                }\n            }\n        }\n    }\n    return num_triples\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp7e8r3j_i_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp7e8r3j_i_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp7e8r3j_i_test.go:53: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp7e8r3j_i_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074303
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    triples\
    \ := 0\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    triples += 1\n              \
    \  }\n            }\n        }\n    }\n    return triples\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074303
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    s :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        s[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (s[i]\
    \ + s[j] + s[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074303
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    var sum3 = 0\n    for i := 0; i < n; i++ {\n        for j\
    \ := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    sum3 += 1\n  \
    \              }\n            }\n        }\n    }\n    return sum3\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074303
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count = 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074303
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    maxTriples := 0\n    var a [1000000]int\n\
    \    for i := 1; i <= n; i++ {\n        a[i] = i * i - i + 1\n    }\n    for i\
    \ := 1; i <= n; i++ {\n        for j := i + 1; j <= n; j++ {\n            for\
    \ k := j + 1; k <= n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ {\n                    maxTriples++\n                }\n            }\n    \
    \    }\n    }\n    return maxTriples\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660074303
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    var result = 0\n    for i := 1; i <= n; i++ {\n    \
    \    a[i-1] = i * i - i + 1\n    }\n    for i := 0; i < n-2; i++ {\n        for\
    \ j := i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    result += 1\n\
    \                }\n            }\n        }\n    }\n    return result\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074303
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    return get_max_triples_of_array(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpebl3ql65_test.go:23:12: undefined: get_max_triples_of_array

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074302
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074303
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ (n - 1) * (n - 2) / 2\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp9z4ztshl_test.go:38: expected '%!s(int=1)', got '%!s(int=6)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp9z4ztshl_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp9z4ztshl_test.go:38: expected '%!s(int=53361)', got '%!s(int=4851)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074303
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ return n / 3\n    // sum of 1 2 ... n equals n(n+1)/2\n    // sum of 1 3 5 ...\
    \ 2n-1 is (n/2)(2n-1), n = even\n    // sum of 1 3 5 ... 2n-2 is (n/2)(2n-1),\
    \ n = odd\n    // sum of 1 4 7 ... 3n-3 is (n/3)(3n-2), n = 3a\n    // sum of\
    \ 1 4 7 ... 3n-2 is (n/3)(3n-2), n = 3a+1\n    // sum of 1 4 7 ... 3n-1 is (n/3)(3n-2),\
    \ n = 3a+2\n    return (n / 3) * (n - 1)\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpm5o2ly2m_test.go:45: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpm5o2ly2m_test.go:45:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpm5o2ly2m_test.go:45: expected '%!s(int=36)', got '%!s(int=27)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpm5o2ly2m_test.go:45:\
    \ expected '%!s(int=53361)', got '%!s(int=3267)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074304
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int = make([]int, n)\n    //1 \u2264 n \u2264 100\n    if n < 1 || n > 100\
    \ {\n        return 0\n    }\n    // initialize a[]\n    for i := 0; i < n; i++\
    \ {\n        a[i] = i * i - i + 1\n    }\n    fmt.Println(a)\n    count := 0\n\
    \    // loop\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 1 3 7 13]\n[1 1 3 7 13 21]\n[1 1 3 7 13 21 31 43 57 73]\n[1 1 3 7 13\
    \ 21 31 43 57 73 91 111 133 157 183 211 241 273 307 343 381 421 463 507 553 601\
    \ 651 703 757 813 871 931 993 1057 1123 1191 1261 1333 1407 1483 1561 1641 1723\
    \ 1807 1893 1981 2071 2163 2257 2353 2451 2551 2653 2757 2863 2971 3081 3193 3307\
    \ 3423 3541 3661 3783 3907 4033 4161 4291 4423 4557 4693 4831 4971 5113 5257 5403\
    \ 5551 5701 5853 6007 6163 6321 6481 6643 6807 6973 7141 7311 7483 7657 7833 8011\
    \ 8191 8373 8557 8743 8931 9121 9313 9507 9703]\n--- FAIL: TestGet_Max_Triples\
    \ (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0 (0.00s)\n        tmpyw19c5cq_test.go:59:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074304
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Note: only 1, 4, 7, 13, 16, 19 is a multiple of 3,\n    // so, we count the\
    \ number of a[i] to these number,\n    // and count the number of a[i]+a[j] to\
    \ be multiple of 3.\n    cnt_i := 0\n    cnt_ij := 0\n    for i := 1; i <= n;\
    \ i++ {\n        if i * i - i + 1 % 3 == 0 {\n            cnt_i++\n        }\n\
    \        for j := i + 1; j <= n; j++ {\n            if (i * i - i + 1 + j * j\
    \ - j + 1) % 3 == 0 {\n                cnt_ij++\n            }\n        }\n  \
    \  }\n    return cnt_i * cnt_ij\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpghyzlsa3_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpghyzlsa3_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpghyzlsa3_test.go:53: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpghyzlsa3_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074304
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                sum := i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1\n                if sum % 3 == 0 {\n       \
    \             count += 1\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpf7ud93ec_test.go:49: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpf7ud93ec_test.go:49:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpf7ud93ec_test.go:49: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074304
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ []int{}\n    for i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n\
    \    }\n    fmt.Println(a)\n    cnt := 0\n    for i := 0; i < len(a); i++ {\n\
    \        for j := i + 1; j < len(a); j++ {\n            for k := j + 1; k < len(a);\
    \ k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                \
    \    cnt += 1\n                }\n            }\n        }\n    }\n    return\
    \ cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074304
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    count := 0\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    count++\n                }\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpmzyskwtq_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpmzyskwtq_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpmzyskwtq_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpmzyskwtq_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074304
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ out int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            k := j + 1\n            if k >= n {\n                break\n    \
    \        }\n            if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0 {\n                out += 1\n            }\n        }\n    }\n    return\
    \ out\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpb20hy9_u_test.go:50: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpb20hy9_u_test.go:50:\
    \ expected '%!s(int=36)', got '%!s(int=4)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpb20hy9_u_test.go:50: expected '%!s(int=53361)', got '%!s(int=1024)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074304
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    num := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i + 1;\
    \ j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n               \
    \ if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    num += 1\n         \
    \       }\n            }\n        }\n    }\n    return num\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpu38797wf_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    count := 0\n    for i := 0; i < n; i++ {\n        a[i] =\
    \ i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmphlk8gx_2_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Initialize a to the list of length n.\n    a := make([]int, n)\n    a[0] = 1\n\
    \n    // Generate the value of a[i]\n    for i := 1; i < n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n\n    // Calculate the result\n    var result int\n\
    \    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n        \
    \    for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3\
    \ == 0 {\n                    result++\n                }\n            }\n   \
    \     }\n    }\n\n    return result\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp9_wjfqm2_test.go:59: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074305
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    res := 0\n    for i := 1; i < n - 1; i++ {\n     \
    \   for j := i + 1; j < n; j++ {\n            for k := j + 1; k <= n; k++ {\n\
    \                if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n\
    \                    res++\n                }\n            }\n        }\n    }\n\
    \    return res\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int = make([]int, n)\n    // create list a\n    for i := 1; i <= n; i++\
    \ {\n        a[i-1] = i * i - i + 1\n    }\n    // calculate number of triples\n\
    \    var count int = 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    count++\n                }\n \
    \           }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp6tzb9r79_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp6tzb9r79_test.go:54:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp6tzb9r79_test.go:54: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp6tzb9r79_test.go:54:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpqin7d2vu_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpqin7d2vu_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpqin7d2vu_test.go:38: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpqin7d2vu_test.go:38:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074300
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    maxTriples\
    \ := 0\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    maxTriples++\n              \
    \  }\n            }\n        }\n    }\n    return maxTriples\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074305
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n\
    \        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for i := 0; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074305
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Make a\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    // For each triple, do a[i] + a[j] + a[k] % 3 ==\
    \ 0\n    count := 0\n    for i := 0; i < n; i++ {\n        for j := i+1; j < n;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    cnt := 0\n    for i := 0; i < n; i++ {\n        a[i] = i\
    \ * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if a[i]\
    \ + a[j] + a[k] % 3 == 0 {\n                    cnt++\n                }\n   \
    \         }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpm11g0rb1_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpm11g0rb1_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpm11g0rb1_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpm11g0rb1_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074305
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    l :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        l[i-1] = i * i - i +\
    \ 1\n    }\n    counter := 0\n    for i := 0; i < n; i++ {\n        for j := i\
    \ + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n              \
    \  if (l[i] + l[j] + l[k]) % 3 == 0 {\n                    counter++\n       \
    \         }\n            }\n        }\n    }\n    return counter\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ n * (n - 1) * (n - 2) / 6\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n \
    \ candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpil37k_tp_test.go:38: expected '%!s(int=1)', got '%!s(int=10)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpil37k_tp_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=20)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpil37k_tp_test.go:38: expected '%!s(int=36)', got '%!s(int=120)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpil37k_tp_test.go:38:\
    \ expected '%!s(int=53361)', got '%!s(int=161700)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074295
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ l []int\n    for i := 1; i <= n; i++ {\n        l = append(l, i * i - i + 1)\n\
    \    }\n    m := 0\n    for i := 0; i < len(l); i++ {\n        for j := i + 1;\
    \ j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n         \
    \       if (l[i] + l[j] + l[k]) % 3 == 0 {\n                    m++\n        \
    \        }\n            }\n        }\n    }\n    return m\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074305
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ counter int = 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                  \
    \  counter++\n                }\n            }\n        }\n    }\n    return counter\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074305
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i:=1; i<=n; i++ {\n        a[i-1] = i*i - i + 1\n\
    \    }\n    count := 0\n    for i:=0; i<n-2; i++ {\n        for j:=i+1; j<n-1;\
    \ j++ {\n            for k:=j+1; k<n; k++ {\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n                    count++\n                }\n         \
    \   }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpgb6s9dxv_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpgb6s9dxv_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpgb6s9dxv_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpgb6s9dxv_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074305
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i +\
    \ 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n       \
    \         }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpaad143g7_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074298
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ result int\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    result +=\
    \ 1\n                }\n            }\n        }\n    }\n    return result\n}\n\
    \nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpasr5jqwe_test.go:48: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074305
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    cnt\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    cnt++\n   \
    \             }\n            }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074305
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    answer\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    answer++\n\
    \                }\n            }\n        }\n    }\n    return answer\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074306
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    count := 0\n    for\
    \ i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n       \
    \     for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074126
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n\
    \        a[i-1] = i * i - i + 1\n    }\n    fmt.Println(a)\n    cnt := 0\n   \
    \ for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n         \
    \   for k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0 {\n                    cnt++\n                }\n            }\n        }\n\
    \    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074306
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    fmt.Println(a)\n    count := 0\n    for i := 0; i < n - 2; i++ {\n\
    \        for j := i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n                  \
    \  count++\n                }\n            }\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 1 3 7 13]\n[1 1 3 7 13 21]\n[1 1 3 7 13 21 31 43 57 73]\n[1 1 3 7 13\
    \ 21 31 43 57 73 91 111 133 157 183 211 241 273 307 343 381 421 463 507 553 601\
    \ 651 703 757 813 871 931 993 1057 1123 1191 1261 1333 1407 1483 1561 1641 1723\
    \ 1807 1893 1981 2071 2163 2257 2353 2451 2551 2653 2757 2863 2971 3081 3193 3307\
    \ 3423 3541 3661 3783 3907 4033 4161 4291 4423 4557 4693 4831 4971 5113 5257 5403\
    \ 5551 5701 5853 6007 6163 6321 6481 6643 6807 6973 7141 7311 7483 7657 7833 8011\
    \ 8191 8373 8557 8743 8931 9121 9313 9507 9703]\n--- FAIL: TestGet_Max_Triples\
    \ (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0 (0.00s)\n        tmpywvzvqum_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpywvzvqum_test.go:53: expected '%!s(int=4)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpywvzvqum_test.go:53:\
    \ expected '%!s(int=36)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpywvzvqum_test.go:53: expected '%!s(int=53361)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074306
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ a = []int{}\n    // for i := 1; i <= n; i++ {\n    //     a = append(a, i *\
    \ i - i + 1)\n    // }\n    // fmt.Println(a)\n    // max := 0\n    // for i :=\
    \ 0; i < n - 2; i++ {\n    //     for j := i + 1; j < n - 1; j++ {\n    //   \
    \      for k := j + 1; k < n; k++ {\n    //             if (a[i] + a[j] + a[k])\
    \ % 3 == 0 {\n    //                 max++\n    //             }\n    //     \
    \    }\n    //     }\n    // }\n    // return max\n    // \u4E0A\u8FF0\u8D85\u65F6\
    \n    // \u53C2\u8003\uFF1Ahttps://www.codewars.com/kata/5b5a9b5f1e08e76c61000018/solutions/csharp\n\
    \    max := 0\n    for i := 1; i <= n; i++ {\n        for j := i + 1; j <= n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                if (i * i\
    \ - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    max++\n\
    \                }\n            }\n        }\n    }\n    return max\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074307
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    cnt := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n                }\n  \
    \          }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074307
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    var c int\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    c++\n                }\n    \
    \        }\n        }\n    }\n    return c\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := []int{1}\n    for i := 1; i < n; i++ {\n        arr = append(arr, i * i -\
    \ i + 1)\n    }\n    fmt.Println(arr)\n    count := 0\n    for i := 0; i < n;\
    \ i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k <\
    \ n; k++ {\n                if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n       \
    \             count++\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[1 1 3 7 13]\n[1 1 3 7 13 21]\n[1 1 3 7 13 21 31 43 57 73]\n[1 1 3 7 13\
    \ 21 31 43 57 73 91 111 133 157 183 211 241 273 307 343 381 421 463 507 553 601\
    \ 651 703 757 813 871 931 993 1057 1123 1191 1261 1333 1407 1483 1561 1641 1723\
    \ 1807 1893 1981 2071 2163 2257 2353 2451 2551 2653 2757 2863 2971 3081 3193 3307\
    \ 3423 3541 3661 3783 3907 4033 4161 4291 4423 4557 4693 4831 4971 5113 5257 5403\
    \ 5551 5701 5853 6007 6163 6321 6481 6643 6807 6973 7141 7311 7483 7657 7833 8011\
    \ 8191 8373 8557 8743 8931 9121 9313 9507 9703]\n--- FAIL: TestGet_Max_Triples\
    \ (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0 (0.00s)\n        tmpnl1daq0c_test.go:53:\
    \ expected '%!s(int=1)', got '%!s(int=4)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074307
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ res int\n    a := []int{}\n    for i := 1; i <= n; i++ {\n        a = append(a,\
    \ i * i - i + 1)\n    }\n    for i := 0; i < n - 2; i++ {\n        for j := i\
    \ + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n          \
    \      if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    res++\n       \
    \         }\n            }\n        }\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ n / 3\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpnn0kat91_test.go:38: expected '%!s(int=4)', got '%!s(int=2)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpnn0kat91_test.go:38:\
    \ expected '%!s(int=36)', got '%!s(int=3)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpnn0kat91_test.go:38: expected '%!s(int=53361)', got '%!s(int=33)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    // a[i] = i * i - i + 1\n    left, right\
    \ := 1, 3\n    result := 0\n    for left < n - 2 {\n        for right < n && (right\
    \ * right - right + 1) - (left * left - left + 1) < 3 {\n            right++\n\
    \        }\n        if right < n {\n            result += (right - left - 1)\n\
    \        }\n        left++\n    }\n    return result\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpwokrlmbc_test.go:53: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpwokrlmbc_test.go:53:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpwokrlmbc_test.go:53: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ max int = 0\n    // i < j < k\n    for i := 1; i < n; i++ {\n        for j :=\
    \ i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n         \
    \           max++\n                }\n            }\n        }\n    }\n    return\
    \ max\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpojt4_t2i_test.go:49: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpojt4_t2i_test.go:49:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpojt4_t2i_test.go:49: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ res int\n    return res\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp9exyv3bk_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp9exyv3bk_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp9exyv3bk_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp9exyv3bk_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    fmt.Println(a)\n    // 1. get all possible pairs\n    pairs := make([][2]int,\
    \ 0)\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n   \
    \         pairs = append(pairs, [2]int{i, j})\n        }\n    }\n    fmt.Println(pairs)\n\
    \    // 2. check all possible combinations\n    res := 0\n    for _, pair := range\
    \ pairs {\n        if (a[pair[0]] + a[pair[1]]) % 3 == 0 {\n            for k\
    \ := pair[1] + 1; k < n; k++ {\n                if (a[pair[0]] + a[pair[1]] +\
    \ a[k]) % 3 == 0 {\n                    res++\n                }\n           \
    \ }\n        }\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: '[1 1 3 7 13]

    [[0 1] [0 2] [0 3] [0 4] [1 2] [1 3] [1 4] [2 3] [2 4] [3 4]]

    [1 1 3 7 13 21]

    [[0 1] [0 2] [0 3] [0 4] [0 5] [1 2] [1 3] [1 4] [1 5] [2 3] [2 4] [2 5] [3 4]
    [3 5] [4 5]]

    [1 1 3 7 13 21 31 43 57 73]

    [[0 1] [0 2] [0 3] [0 4] [0 5] [0 6] [0 7] [0 8] [0 9] [1 2] [1 3] [1 4] [1 5]
    [1 6] [1 7] [1 8] [1 9] [2 3] [2 4] [2 5] [2 6] [2 7] [2 8] [2 9] [3 4] [3 5]
    [3 6] [3 7] [3 8] [3 9] [4 5] [4 6] [4 7] [4 8] [4 9] [5 6] [5 7] [5 8] [5 9]
    [6 7] [6 8] [6 9] [7 8] [7 9] [8 9]]

    [1 1 3 7 13 21 31 43 57 73 91 111 133 157 183 211 241 273 307 343 381 421 463
    507 553 601 651 703 757 813 871 931 993 1057 1123 1191 1261 1333 1407 1483 1561
    1641 1723 1807 1893 1981 2071 2163 2257 2353 2451 2551 2653 2757 2863 2971 3081
    3193 3307 3423 3541 3661 3783 3907 4033 4161 4291 4423 4557 4693 4831 4971 5113
    5257 5403 5551 5701 5853 6007 6163 6321 6481 6643 6807 6973 7141 7311 7483 7657
    7833 8011 8191 8373 8557 8743 8931 9121 9313 9507 9703]

    [[0 1] [0 2] [0 3] [0 4] [0 5] [0 6] [0 7] [0 8] [0 9] [0 10] [0 11] [0 12] [0
    13] [0 14] [0 15] [0 16] [0 17] [0 18] [0 19] [0 20] [0 21] [0 22] [0 23] [0 24]
    [0 25] [0 26] [0 27] [0 28] [0 29] [0 30] [0 31] [0 32] [0 33] [0 34] [0 35] [0
    36] [0 37] [0 38] [0 39] [0 40] [0 41] [0 42] [0 43] [0 44] [0 45] [0 46] [0 47]
    [0 48] [0 49] [0 50] [0 51] [0 52] [0 53] [0 54] [0 55] [0 56] [0 57] [0 58] [0
    59] [0 60] [0 61] [0 62] [0 63] [0 64] [0 65] [0 66] [0 67] [0 68] [0 69] [0 70]
    [0 71] [0 72] [0 73] [0 74] [0 75] [0 76] [0 77] [0 78] [0 79] [0 80] [0 81] [0
    82] [0 83] [0 84] [0 85] [0 86] [0 87] [0 88] [0 89] [0 90] [0 91] [0 92] [0 93]
    [0 94] [0 95] [0 96] [0 97] [0 98] [0 99] [1 2] [1 3] [1 4] [1 5] [1 6] [1 7]
    [1 8] [1 9] [1 10] [1 11] [1 12] [1 13] [1 14] [1 15] [1 16] [1 17] [1 18] [1
    19] [1 20] [1 21] [1 22] [1 23] [1 24] [1 25] [1 26] [1 27] [1 28] [1 29] [1 30]
    [1 31] [1 32] [1 33] [1 34] [1 35] [1 36] [1 37] [1 38] [1 39] [1 40] [1 41] [1
    42] [1 43] [1 44] [1 45] [1 46] [1 47] [1 48] [1 49] [1 50] [1 51] [1 52] [1 53]
    [1 54] [1 55] [1 56] [1 57] [1 58] [1 59] [1 60] [1 61] [1 62] [1 63] '
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ result, count int\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n\
    \        a[i-1] = i * i - i + 1\n    }\n    for j := 1; j < n-1; j++ {\n     \
    \   for k := j+1; k < n; k++ {\n            if (a[j-1] + a[k-1]) % 3 == 0 {\n\
    \                result = a[j-1] + a[k-1]\n                for i := 0; i < j;\
    \ i++ {\n                    if (a[i] + result) % 3 == 0 {\n                 \
    \       count++\n                    }\n                }\n            }\n   \
    \     }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpo1f128df_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpo1f128df_test.go:55:\
    \ expected '%!s(int=4)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpo1f128df_test.go:55: expected '%!s(int=36)', got '%!s(int=4)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpo1f128df_test.go:55:\
    \ expected '%!s(int=53361)', got '%!s(int=5984)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074126
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    count := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count += 1\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [1000]int\n    // calculate a\n    for i := 1; i <= n; i++ {\n        a[i]\
    \ = i * i - i + 1\n    }\n    cnt := 0\n    for i := 1; i <= n; i++ {\n      \
    \  for j := i + 1; j <= n; j++ {\n            for k := j + 1; k <= n; k++ {\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n\
    \                }\n            }\n        }\n    }\n    return cnt\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    cnt := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    cnt += 1\n                }\n\
    \            }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a [3]int\n    var count int\n    for i := 1; i <= n; i++ {\n        a[i % 3]\
    \ = i * i - i + 1\n        if i > 2 && (a[i % 3] + a[(i - 1) % 3] + a[(i - 2)\
    \ % 3]) % 3 == 0 {\n            count++\n        }\n    }\n    return count\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpxlwpc5a0_test.go:46: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpxlwpc5a0_test.go:46:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpxlwpc5a0_test.go:46: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpxlwpc5a0_test.go:46:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    max\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    max++\n     \
    \           }\n            }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmplyf3q6m9_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmplyf3q6m9_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmplyf3q6m9_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 0; i\
    \ < n; i++ {\n        a[i] = i * i - i + 1\n    }\n    var count int\n    for\
    \ i := 0; i < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n       \
    \     for k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpw5cqeo4w_test.go:55: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    triple\
    \ := make([]int, n, n)\n    for i := 1; i <= n; i++ {\n        triple[i-1] = i\
    \ * i - i + 1\n    }\n    fmt.Println(triple)\n    count := 0\n    for i := 0;\
    \ i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for k := j+1;\
    \ k < n; k++ {\n                if (triple[i] + triple[j] + triple[k]) % 3 ==\
    \ 0 {\n                    count++\n                }\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ cnt int\n    arr := make([]int, n)\n    for i := 1; i <= n; i++ {\n        arr[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (arr[i]\
    \ + arr[j] + arr[k]) % 3 == 0 {\n                    cnt++\n                }\n\
    \            }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    max := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1;\
    \ j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    max++\n                }\n  \
    \          }\n        }\n    }\n    return max\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    triples := 0\n    for i := 0; i < n-2; i++ {\n        for j :=\
    \ i+1; j < n-1; j++ {\n            for k := j+1; k < n; k++ {\n              \
    \  if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    triples++\n       \
    \         }\n            }\n        }\n    }\n    return triples\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074308
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    sum\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (k * k - k + 1 +\
    \ j * j - j + 1 + i * i - i + 1) % 3 == 0 {\n                    sum += 1\n  \
    \              }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpi1ba7mx4_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpi1ba7mx4_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpi1ba7mx4_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074308
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    count++\n                }\n\
    \            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074309
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    arr := make([]int, n)\n    for i:=0; i<n; i++ {\n        arr[i] =\
    \ i*i - i + 1\n    }\n    for i:=0; i<n-2; i++ {\n        for j:=i+1; j<n-1; j++\
    \ {\n            for k:=j+1; k<n; k++ {\n                if (arr[i] + arr[j] +\
    \ arr[k]) % 3 == 0 {\n                    count++\n                }\n       \
    \     }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmptt1v0bdo_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074309
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ total int = 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            sum := (i * i - i + 1) + (j * j - j + 1)\n           \
    \ if (sum % 3 == 0) {\n                fmt.Println(\"Sum of 1 \", i, \" and \"\
    , j, \" is divisible by 3\")\n                total++\n            }\n       \
    \ }\n    }\n    return total\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: 'Sum of 1  2  and  5  is divisible by 3

    Sum of 1  2  and  5  is divisible by 3

    Sum of 1  2  and  8  is divisible by 3

    Sum of 1  5  and  8  is divisible by 3

    Sum of 1  2  and  5  is divisible by 3

    Sum of 1  2  and  8  is divisible by 3

    Sum of 1  2  and  11  is divisible by 3

    Sum of 1  2  and  14  is divisible by 3

    Sum of 1  2  and  17  is divisible by 3

    Sum of 1  2  and  20  is divisible by 3

    Sum of 1  2  and  23  is divisible by 3

    Sum of 1  2  and  26  is divisible by 3

    Sum of 1  2  and  29  is divisible by 3

    Sum of 1  2  and  32  is divisible by 3

    Sum of 1  2  and  35  is divisible by 3

    Sum of 1  2  and  38  is divisible by 3

    Sum of 1  2  and  41  is divisible by 3

    Sum of 1  2  and  44  is divisible by 3

    Sum of 1  2  and  47  is divisible by 3

    Sum of 1  2  and  50  is divisible by 3

    Sum of 1  2  and  53  is divisible by 3

    Sum of 1  2  and  56  is divisible by 3

    Sum of 1  2  and  59  is divisible by 3

    Sum of 1  2  and  62  is divisible by 3

    Sum of 1  2  and  65  is divisible by 3

    Sum of 1  2  and  68  is divisible by 3

    Sum of 1  2  and  71  is divisible by 3

    Sum of 1  2  and  74  is divisible by 3

    Sum of 1  2  and  77  is divisible by 3

    Sum of 1  2  and  80  is divisible by 3

    Sum of 1  2  and  83  is divisible by 3

    Sum of 1  2  and  86  is divisible by 3

    Sum of 1  2  and  89  is divisible by 3

    Sum of 1  2  and  92  is divisible by 3

    Sum of 1  2  and  95  is divisible by 3

    Sum of 1  2  and  98  is divisible by 3

    Sum of 1  5  and  8  is divisible by 3

    Sum of 1  5  and  11  is divisible by 3

    Sum of 1  5  and  14  is divisible by 3

    Sum of 1  5  and  17  is divisible by 3

    Sum of 1  5  and  20  is divisible by 3

    Sum of 1  5  and  23  is divisible by 3

    Sum of 1  5  and  26  is divisible by 3

    Sum of 1  5  and  29  is divisible by 3

    Sum of 1  5  and  32  is divisible by 3

    Sum of 1  5  and  35  is divisible by 3

    Sum of 1  5  and  38  is divisible by 3

    Sum of 1  5  and  41  is divisible by 3

    Sum of 1  5  and  44  is divisible by 3

    Sum of 1  5  and  47  is divisible by 3

    Sum of 1  5  and  50  is divisible by 3

    Sum of 1  5  an'
  timestamp: 1660074309
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    arr\
    \ := make([]int, n)\n    var i int\n    for i = 0; i < n; i++ {\n        arr[i]\
    \ = i * i - i + 1\n    }\n    count := 0\n    for i = 0; i < n; i++ {\n      \
    \  for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n  \
    \              if (arr[i] + arr[j] + arr[k]) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpkzcrc__4_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074309
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    count++\n   \
    \             }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp77zz_i65_test.go:52: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074309
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    count += 1\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074309
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ get_max_triples_helper(1, 1, n)\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpy53euf22_test.go:19:12: undefined: get_max_triples_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++\
    \ {\n            for k := j + 1; k < n; k++ {\n                if ai, aj, ak :=\
    \ i * i - i + 1, j * j - j + 1, k * k - k + 1; (ai + aj + ak) % 3 == 0 {\n   \
    \                 count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmphwm_2i7p_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmphwm_2i7p_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmphwm_2i7p_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074310
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    // fmt.Println(a)\n\
    \    counter := 0\n    for i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1;\
    \ j++ {\n            for k := j+1; k < n; k++ {\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0 {\n                    counter += 1\n                }\n  \
    \          }\n        }\n    }\n    return counter\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074310
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if ((i*i-i+1) + (j*j-j+1)\
    \ + (k*k-k+1)) % 3 == 0 {\n                    count++\n                }\n  \
    \          }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpjn97ql21_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpjn97ql21_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074126
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i\
    \ + 1\n    }\n    fmt.Println(a)\n    ans := 0\n    for i := 0; i < n; i++ {\n\
    \        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++\
    \ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    ans++\n\
    \                }\n            }\n        }\n    }\n    return ans\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074310
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a = make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i -\
    \ i + 1\n    }\n    fmt.Println(a)\n    var ans int\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                \
    \    ans++\n                }\n            }\n        }\n    }\n    return ans\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074310
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n;\
    \ j++ {\n            for k := j + 1; k <= n; k++ {\n                a := i * i\
    \ - i + 1\n                b := j * j - j + 1\n                c := k * k - k\
    \ + 1\n                if (a + b + c) % 3 == 0 {\n                    count++\n\
    \                }\n            }\n        }\n    }\n    return count\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    res\
    \ := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                if (i * i - i + 1 +\
    \ j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    res++\n     \
    \           }\n            }\n        }\n    }\n    return res\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpy4yf7wgo_test.go:48: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    return\
    \ (n-1)*(n-2)*(n-3)/6\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpivhjg879_test.go:38: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpivhjg879_test.go:38:\
    \ expected '%!s(int=4)', got '%!s(int=10)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpivhjg879_test.go:38: expected '%!s(int=36)', got '%!s(int=84)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpivhjg879_test.go:38:\
    \ expected '%!s(int=53361)', got '%!s(int=156849)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074310
- exit_code: 2
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    fmt.Println(a)\n    return get_triples(a)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4c4n3e24_test.go:24:12: undefined: get_triples

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074310
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n <= 2 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1;\
    \ i <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    sum := 0\n    for\
    \ i := 0; i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for\
    \ k := j+1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    sum++\n                }\n            }\n        }\n    }\n\
    \    return sum\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ 1. Generate the list.\n    a := make([]int, n)\n    for i := 1; i <= n; i++\
    \ {\n        a[i-1] = i * i - i + 1\n    }\n    // 2. Get all the combinations\
    \ of i, j, k.\n    var triples [][]int\n    for i := 0; i < n; i++ {\n       \
    \ for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n; k++ {\n   \
    \             if (a[i] + a[j] + a[k]) % 3 == 0 {\n                    triples\
    \ = append(triples, []int{a[i], a[j], a[k]})\n                }\n            }\n\
    \        }\n    }\n    // 3. Count the number of triples with maximum sums.\n\
    \    var max int\n    for _, t := range triples {\n        sum := t[0] + t[1]\
    \ + t[2]\n        if sum > max {\n            max = sum\n        }\n    }\n  \
    \  var count int\n    for _, t := range triples {\n        sum := t[0] + t[1]\
    \ + t[2]\n        if sum == max {\n            count++\n        }\n    }\n   \
    \ return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.01s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmptqogeh_r_test.go:69: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmptqogeh_r_test.go:69:\
    \ expected '%!s(int=36)', got '%!s(int=1)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmptqogeh_r_test.go:69: expected '%!s(int=53361)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    triples\
    \ := 0\n    s := make([]int, n)\n    for i := 1; i <= n; i++ {\n        s[i-1]\
    \ = i * i - i + 1\n    }\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if s[i]\
    \ + s[j] + s[k] % 3 == 0 {\n                    triples++\n                }\n\
    \            }\n        }\n    }\n    return triples\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpgqacr7hf_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpgqacr7hf_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpgqacr7hf_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpgqacr7hf_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    var a []int\n    for i := 1; i <= n; i++ {\n     \
    \   a = append(a, i * i - i + 1)\n    }\n    var count int\n    for i := 0; i\
    \ < n - 2; i++ {\n        for j := i + 1; j < n - 1; j++ {\n            for k\
    \ := j + 1; k < n; k++ {\n                if a[i] + a[j] + a[k] % 3 == 0 {\n \
    \                   count += 1\n                }\n            }\n        }\n\
    \    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpyi13vf7g_test.go:53: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpyi13vf7g_test.go:53:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpyi13vf7g_test.go:53: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpyi13vf7g_test.go:53:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    count := 0\n    for i := 0; i < n - 2; i++ {\n        for j := i +\
    \ 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n            \
    \    sum := a[i] + a[j] + a[k]\n                if sum % 3 == 0 {\n          \
    \          count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpulilplvt_test.go:53: expected '%!s(int=1)', got '%!s(int=4)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074310
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 1; i <= n; i++ {\n        a[i-1] = i * i - i +\
    \ 1\n    }\n    cnt := 0\n    for i := 0; i < n; i++ {\n        for j := i + 1;\
    \ j < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0 {\n                    cnt++\n                }\n  \
    \          }\n        }\n    }\n    return cnt\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074307
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    if n < 3 {\n        return count\n    }\n    a := make([]int, n)\n\
    \    a[0] = 1\n    for i := 1; i < n; i++ {\n        a[i] = a[i-1] + 2*i\n   \
    \ }\n    for i := 0; i < n; i++ {\n        for j := i+1; j < n; j++ {\n      \
    \      for k := j+1; k < n; k++ {\n                if a[i] + a[j] + a[k] % 3 ==\
    \ 0 {\n                    count++\n                }\n            }\n       \
    \ }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n\
    \  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpq8__gmef_test.go:56: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpq8__gmef_test.go:56:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpq8__gmef_test.go:56: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpq8__gmef_test.go:56:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074310
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    a :=\
    \ make([]int, n)\n    for i := 0; i < n; i++ {\n        a[i] = i * i - i + 1\n\
    \    }\n    var count int\n    for i := 0; i < n - 2; i++ {\n        for j :=\
    \ i + 1; j < n - 1; j++ {\n            for k := j + 1; k < n; k++ {\n        \
    \        if a[i] + a[j] + a[k] % 3 == 0 {\n                    count++\n     \
    \           }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmp933vobfi_test.go:52: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmp933vobfi_test.go:52:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmp933vobfi_test.go:52: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmp933vobfi_test.go:52:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074311
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n \
    \           for k := j + 1; k < n; k++ {\n                sum := i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1\n                if sum % 3 == 0 {\n       \
    \             count++\n                }\n            }\n        }\n    }\n  \
    \  return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpr2x88b13_test.go:49: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpr2x88b13_test.go:49:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpr2x88b13_test.go:49: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Your code here\n    var triples [][]int\n    for i := 1; i <= n; i++ {\n   \
    \     for j := i+1; j <= n; j++ {\n            for k := j+1; k <= n; k++ {\n \
    \               if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0 {\n                \
    \    triples = append(triples, []int{i, j, k})\n                }\n          \
    \  }\n        }\n    }\n    return len(triples)\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.012s\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ count int = 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j <\
    \ n; j++ {\n            for k := j + 1; k <= n; k++ {\n                if ((i\
    \ * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n             \
    \       count++\n                }\n            }\n        }\n    }\n    return\
    \ count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ a []int\n    var triples int\n    if n < 3 {\n        return 0\n    }\n    for\
    \ i := 1; i <= n; i++ {\n        a = append(a, i * i - i + 1)\n    }\n    for\
    \ i := 0; i < n; i++ {\n        for j := i + 1; j < n; j++ {\n            for\
    \ k := j + 1; k < n; k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n\
    \                    triples++\n                }\n            }\n        }\n\
    \    }\n    return triples\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074311
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    return -1\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpso3es1b3_test.go:39: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpso3es1b3_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=-1)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpso3es1b3_test.go:39: expected '%!s(int=36)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpso3es1b3_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    count\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                val := i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1\n                if val % 3 == 0 {\n     \
    \               count++\n                }\n            }\n        }\n    }\n\
    \    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ Write your code here\n    a := make([]int, n)\n    for i := 1; i <= n; i++ {\n\
    \        a[i-1] = i * i - i + 1\n    }\n    res := 0\n    for i := 0; i < n; i++\
    \ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1; k < n;\
    \ k++ {\n                if (a[i] + a[j] + a[k]) % 3 == 0 {\n                \
    \    res++\n                }\n            }\n        }\n    }\n    return res\n\
    }\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 4 },\n     { actual: candidate(10), expected: 36 },\n\
    \     { actual: candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074311
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    var cnt, sum int\n    for i := 1; i <\
    \ n; i++ {\n        for j := i + 1; j < n; j++ {\n            for k := j + 1;\
    \ k < n; k++ {\n                sum = (i * i - i + 1) + (j * j - j + 1) + (k *\
    \ k - k + 1)\n                if sum % 3 == 0 {\n                    cnt++\n \
    \               }\n            }\n        }\n    }\n    return cnt\n}\n\nfunc\
    \ TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmpqqb00roe_test.go:52: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmpqqb00roe_test.go:52:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmpqqb00roe_test.go:52: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074311
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ tripleCount int = 0\n    for i := 1; i < n; i++ {\n        for j := i + 1; j\
    \ < n; j++ {\n            for k := j + 1; k < n; k++ {\n                if ((i\
    \ * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0 {\n             \
    \       tripleCount += 1\n                }\n            }\n        }\n    }\n\
    \    return tripleCount\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__1\
    \ (0.00s)\n        tmp8fxzn3h4_test.go:48: expected '%!s(int=4)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__2 (0.00s)\n        tmp8fxzn3h4_test.go:48:\
    \ expected '%!s(int=36)', got '%!s(int=21)'\n    --- FAIL: TestGet_Max_Triples/test_num__3\
    \ (0.00s)\n        tmp8fxzn3h4_test.go:48: expected '%!s(int=53361)', got '%!s(int=51216)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    var a [1000]int\n    for i := 1; i <=\
    \ n; i++ {\n        a[i] = i * i - i + 1\n    }\n    var count int\n    for i\
    \ := 1; i <= n - 2; i++ {\n        for j := i + 1; j <= n - 1; j++ {\n       \
    \     for k := j + 1; k <= n; k++ {\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0 {\n                    count++\n                }\n            }\n  \
    \      }\n    }\n    return count\n}\n\nfunc TestGet_Max_Triples(t *testing.T)\
    \ {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual:\
    \ candidate(10), expected: 36 },\n     { actual: candidate(100), expected: 53361\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    var\
    \ nums = make([]int, n)\n    for i := 1; i <= n; i++ {\n        nums[i-1] = i\
    \ * i - i + 1\n    }\n    fmt.Println(nums)\n    var cnt int\n    for i := 0;\
    \ i < n-2; i++ {\n        for j := i+1; j < n-1; j++ {\n            for k := j+1;\
    \ k < n; k++ {\n                if (nums[i] + nums[j] + nums[k]) % 3 == 0 {\n\
    \                    cnt++\n                }\n            }\n        }\n    }\n\
    \    return cnt\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate :=\
    \ get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    triples\
    \ := 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    triples++\n\
    \                }\n            }\n        }\n    }\n    return triples\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074311
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    //\
    \ TODO\n    return 0\n}\n\nfunc TestGet_Max_Triples(t *testing.T) {\n  candidate\
    \ := get_max_triples\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(5), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 4 },\n     { actual: candidate(10),\
    \ expected: 36 },\n     { actual: candidate(100), expected: 53361 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpi3ibfzr5_test.go:39: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpi3ibfzr5_test.go:39:\
    \ expected '%!s(int=4)', got '%!s(int=0)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpi3ibfzr5_test.go:39: expected '%!s(int=36)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpi3ibfzr5_test.go:39:\
    \ expected '%!s(int=53361)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074311
- exit_code: 0
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    c :=\
    \ 0\n    for i := 1; i < n - 1; i++ {\n        for j := i + 1; j < n; j++ {\n\
    \            for k := j + 1; k <= n; k++ {\n                if (i * i - i + 1\
    \ + j * j - j + 1 + k * k - k + 1) % 3 == 0 {\n                    c++\n     \
    \           }\n            }\n        }\n    }\n    return c\n}\n\nfunc TestGet_Max_Triples(t\
    \ *testing.T) {\n  candidate := get_max_triples\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(5), expected: 1 },\n     { actual: candidate(6), expected: 4 },\n\
    \     { actual: candidate(10), expected: 36 },\n     { actual: candidate(100),\
    \ expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660074311
- exit_code: 1
  program: "package get_max_triples_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// You are given a positive integer n. You have to create an integer list\
    \ a of length n.\n// For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n// Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n// and a[i] + a[j] + a[k] is a multiple of 3.\n// Example :\n// >>>\
    \ get_max_triples(5)\n// 1\n// Explanation: \n// a = [1, 3, 7, 13, 21]\n// The\
    \ only valid triple is (1, 7, 13).\nfunc get_max_triples(n int) int {\n    if\
    \ n < 3 {\n        return 0\n    }\n    a := make([]int, n)\n    for i := 1; i\
    \ <= n; i++ {\n        a[i-1] = i * i - i + 1\n    }\n    triple := 0\n    i :=\
    \ 0\n    j := 1\n    k := 2\n    for ; k < n; k++ {\n        if (a[i] + a[j] +\
    \ a[k]) % 3 == 0 {\n            triple++\n        }\n        if k == n - 1 {\n\
    \            if j == n - 2 {\n                i++\n                j = i + 1\n\
    \                k = j + 1\n            } else {\n                j++\n      \
    \          k = j + 1\n            }\n        }\n    }\n    return triple\n}\n\n\
    func TestGet_Max_Triples(t *testing.T) {\n  candidate := get_max_triples\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(5), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 4 },\n     { actual: candidate(10), expected: 36 },\n     { actual:\
    \ candidate(100), expected: 53361 },\n   }\n\n\tfor i, tc := range tests {\n\t\
    \tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGet_Max_Triples (0.00s)\n    --- FAIL: TestGet_Max_Triples/test_num__0\
    \ (0.00s)\n        tmpp7jmog79_test.go:64: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__1 (0.00s)\n        tmpp7jmog79_test.go:64:\
    \ expected '%!s(int=4)', got '%!s(int=2)'\n    --- FAIL: TestGet_Max_Triples/test_num__2\
    \ (0.00s)\n        tmpp7jmog79_test.go:64: expected '%!s(int=36)', got '%!s(int=12)'\n\
    \    --- FAIL: TestGet_Max_Triples/test_num__3 (0.00s)\n        tmpp7jmog79_test.go:64:\
    \ expected '%!s(int=53361)', got '%!s(int=2112)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074311
