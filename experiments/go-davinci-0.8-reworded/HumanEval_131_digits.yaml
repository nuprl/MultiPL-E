name: HumanEval_131_digits
language: go_test.go
prompt: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a positive integer n, return the product of the odd digits.\n// Return 0 if all\
  \ digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n"
tests: "func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
  \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
  \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
  \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // Write the body of the function here\n    var odd_digits []int\n\
    \    for _, value := range(fmt.Sprintf(\"%d\", n)) {\n        digit := int(value)\
    \ - 48\n        if digit % 2 != 0 {\n            odd_digits = append(odd_digits,\
    \ digit)\n        }\n    }\n    if len(odd_digits) == 0 {\n        return 0\n\
    \    }\n    product := 1\n    for _, value := range(odd_digits) {\n        product\
    \ *= value\n    }\n    return product\n}\n", "    r := 1\n    for n > 0 {\n  \
    \      d := n % 10\n        if d % 2 == 1 {\n            r *= d\n        }\n \
    \       n /= 10\n    }\n    return r\n}\n", "    var res int = 1\n    var tmp\
    \ int\n    for n > 0 {\n        tmp = n % 10\n        if tmp % 2 != 0 {\n    \
    \        res *= tmp\n        }\n        n /= 10\n    }\n    return res\n}\n",
  "    if n < 10 {\n        return n\n    }\n    product := 1\n    for n > 0 {\n \
    \       last_digit := n % 10\n        if last_digit % 2 != 0 {\n            product\
    \ *= last_digit\n        }\n        n /= 10\n    }\n    return product\n}\n",
  "    var product int = 1\n    for ; n > 0; n /= 10 {\n        d := n % 10\n    \
    \    if d % 2 == 1 {\n            product *= d\n        }\n    }\n    return product\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    last := n % 10\n    if last\
    \ % 2 == 1 {\n        return last * digits(n / 10)\n    }\n    return digits(n\
    \ / 10)\n}\n", "    r := 1\n    for n > 0 {\n        d := n % 10\n        if d\
    \ % 2 == 1 {\n            r *= d\n        }\n        n /= 10\n    }\n    return\
    \ r\n}\n", "    p := 1\n    for n > 0 {\n        d := n % 10\n        if d % 2\
    \ == 1 {\n            p *= d\n        }\n        n /= 10\n    }\n    return p\n\
    }\n", "    fmt.Println(n)\n    if n < 10 {\n        if n % 2 == 1 {\n        \
    \    return n\n        } else {\n            return 0\n        }\n    } else {\n\
    \        return n % 10 * digits(n / 10)\n    }\n}\n", "    //return n * n //1\n\
    \    //return n % 2 //3\n    return n % 4 //4\n}\n", "    const eol = 10 // end\
    \ of line\n\n    if n == 0 {\n        return 0\n    }\n\n    product := 1\n  \
    \  for n > 0 {\n        //\n        // Calculate the remainder, i.e. the next\
    \ lowest order digit\n        //\n        digit := n % eol\n\n        //\n   \
    \     // If digit is odd, append to the product\n        //\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        }\n\n        //\n        //\
    \ We've handled the lowest order digit, so divide by 10 to\n        // drop it\
    \ from n\n        //\n        n /= eol\n    }\n\n    return product\n}\n", " \
    \   return 0\n}\n", "    product := 1\n    for n > 0 {\n        digit := n % 10\n\
    \        if digit % 2 != 0 {\n            product *= digit\n        }\n      \
    \  n /= 10\n    }\n    return product\n}\n\ntype test ", "    var product int\
    \ = 1\n    for n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\ntype testpair ",
  "    if n <= 0 {\n        return 0\n    }\n    result := 1\n    for n > 0 {\n  \
    \      d := n % 10\n        if d % 2 != 0 {\n            result *= d\n       \
    \ }\n        n /= 10\n    }\n    return result\n}\n", "    sum := 1\n    for n\
    \ > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum\
    \ *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\n", "    var\
    \ product int = 1\n    for n > 0 {\n        mod := n % 10\n        if mod % 2\
    \ != 0 {\n            product *= mod\n        }\n        n /= 10\n    }\n    return\
    \ product\n}\n", "    prod := 1\n    for n > 0 {\n        if n % 2 == 1 {\n  \
    \          prod *= n % 10\n        }\n        n /= 10\n    }\n    return prod\n\
    }\n", "    product := 1\n    for n > 0 {\n        digit := n % 10\n        if\
    \ digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n\
    \    }\n    return product\n}\n", "    var result int = 1\n    for n > 0 {\n \
    \       digit := n % 10\n        if digit % 2 != 0 {\n            result *= digit\n\
    \        }\n        n /= 10\n    }\n    return result\n}\n", "    // start :=\
    \ time.Now()\n    nums := []int{}\n    for n > 0 {\n        nums = append(nums,\
    \ n % 10)\n        n /= 10\n    }\n    for i := 0; i < len(nums); i++ {\n    \
    \    if nums[i] % 2 == 0 {\n            nums[i] = 0\n        }\n    }\n    var\
    \ result int\n    for _, num := range nums {\n        result *= 10\n        result\
    \ += num\n    }\n    // fmt.Println(time.Since(start))\n    return result\n}\n",
  "    var odd int\n    var even int\n    for n > 0 {\n        digit := n % 10\n \
    \       if digit % 2 == 0 {\n            even++\n        } else {\n          \
    \  odd++\n        }\n        n /= 10\n    }\n    return odd * even\n}\n", "  \
    \  nums := make([]int, 0)\n    for n > 0 {\n        digit := n % 10\n        if\
    \ digit % 2 != 0 {\n            nums = append(nums, digit)\n        }\n      \
    \  n /= 10\n    }\n    fmt.Println(nums)\n    prod := 1\n    for _, num := range\
    \ nums {\n        prod *= num\n    }\n    return prod\n}\n", "    prod := 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 == 1 {\n     \
    \       prod *= digit\n        }\n        n /= 10\n    }\n    return prod\n}\n",
  "    // +++your code here+++\n    return n\n}\n", "    if n < 0 {\n        return\
    \ 0\n    }\n    result := 1\n    for n > 0 {\n        digit := n % 10\n      \
    \  if digit % 2 != 0 {\n            result *= digit\n        }\n        n /= 10\n\
    \    }\n    return result\n}\n\ntype digitsTest ", "    if n == 0 {\n        return\
    \ 0\n    }\n    odd, even := 0, 0\n    for n > 0 {\n        d := n % 10\n    \
    \    if d % 2 == 0 {\n            even += 1\n        } else {\n            odd\
    \ += 1\n        }\n        n /= 10\n    }\n    if even == 0 {\n        return\
    \ 1\n    }\n    return 0\n}\n", "    var result int = 1\n    for n > 0 {\n   \
    \     digit := n % 10\n        if digit % 2 != 0 {\n            result *= digit\n\
    \        }\n        n /= 10\n    }\n    return result\n}\n", "    var result int\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n", "    product := 1\n    if n == 0 {\n        return 0\n    }\n    for ; n\
    \ > 0; n /= 10 {\n        digit := n % 10\n        if digit % 2 == 1 {\n     \
    \       product *= digit\n        }\n    }\n    return product\n}\n", "    product\
    \ := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    var result int = 1\n    for n > 0 {\n        digit := n % 10\n    \
    \    if digit % 2 != 0 {\n            result *= digit\n        }\n        n /=\
    \ 10\n    }\n    return result\n}\n", "    product := 1\n    for n > 0 {\n   \
    \     m := n % 10\n        if m % 2 == 1 {\n            product *= m\n       \
    \ }\n        n /= 10\n    }\n    return product\n}\n", "    product := 1\n   \
    \ for n > 0 {\n        r := n % 10\n        if r % 2 != 0 {\n            product\
    \ *= r\n        }\n        n /= 10\n    }\n    return product\n}\n", "    // Insert\
    \ your code here\n    a := 0\n    b := 1\n    for n > 0 {\n        temp := n %\
    \ 10\n        if temp % 2 != 0 {\n            a = a + temp\n        } else {\n\
    \            b = 0\n        }\n        n = n / 10\n    }\n    return a * b\n}\n",
  "    p := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 == 1\
    \ {\n            p *= digit\n        }\n        n /= 10\n    }\n    return p\n\
    }\n\ntype digitsCase ", "    if n == 0 {\n        return 0\n    }\n    var p int\
    \ = 1\n    for ; n > 0; n /= 10 {\n        d := n % 10\n        if d % 2 == 1\
    \ {\n            p *= d\n        }\n    }\n    return p\n}\n", "    if n < 10\
    \ {\n        if n % 2 == 1 {\n            return n\n        } else {\n       \
    \     return 0\n        }\n    }\n    if n % 2 == 1 {\n        return n % 10 *\
    \ digits(n / 10)\n    } else {\n        return digits(n / 10)\n    }\n}\n", " \
    \   if n < 10 {\n        if n % 2 == 1 {\n            return n\n        } else\
    \ {\n            return 0\n        }\n    }\n    m := n % 10\n    if m % 2 ==\
    \ 1 {\n        return m * digits(n / 10)\n    } else {\n        return digits(n\
    \ / 10)\n    }\n}\n", "    var result int\n    result = 1\n    var i int\n   \
    \ i = n\n    for i > 0 {\n        if i % 2 != 0 {\n            result *= i % 10\n\
    \        }\n        i /= 10\n    }\n    return result\n}\n", "    prod := 1\n\
    \    for n > 0 {\n        if n % 2 == 1 {\n            prod *= n % 10\n      \
    \  }\n        n /= 10\n    }\n    return prod\n}\n", "    var res int = 1\n  \
    \  for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n       \
    \     res *= digit\n        }\n        n /= 10\n    }\n    return res\n}\n", " \
    \   digit := 1\n    if n > 0 {\n        digit = n % 10\n        n = n / 10\n \
    \       if digit % 2 == 0 {\n            digit = 0\n        }\n        return\
    \ digits(n) * digit\n    }\n    return digit\n}\n", "    // Write your code here\n\
    \    return 0\n}\n", "    var p int = 1\n    for n > 0 {\n        digit := n %\
    \ 10\n        if digit % 2 == 1 {\n            p *= digit\n        }\n       \
    \ n /= 10\n    }\n    return p\n}\n", "    // your code here\n    return 0\n}\n",
  "    sum := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 !=\
    \ 0 {\n            sum *= digit\n        }\n        n /= 10\n    }\n    return\
    \ sum\n}\n", "    product := 1\n    for n > 0 {\n        if n % 2 == 1 {\n   \
    \         product *= n % 10\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    // Initialize the result to 1, since the product of no numbers is 1.\n\
    \    result := 1\n    // Store the rest of the number in a temporary variable.\n\
    \    t := n\n    // Iterate through the digits of the number until there are no\
    \ more digits.\n    for t > 0 {\n        // Get the last digit and remove it from\
    \ the number.\n        lastDigit := t % 10\n        t = t / 10\n        // If\
    \ the digit is odd, update the result.\n        if lastDigit % 2 == 1 {\n    \
    \        result = result * lastDigit\n        }\n    }\n    return result\n}\n",
  "    var res int = 1\n    for n > 0 {\n        digit := n % 10\n        if digit\
    \ % 2 != 0 {\n            res *= digit\n        }\n        n /= 10\n    }\n  \
    \  return res\n}\n", "    var result = 1\n    for n > 0 {\n        remainder :=\
    \ n % 10\n        if remainder % 2 != 0 {\n            result *= remainder\n \
    \       }\n        n /= 10\n    }\n    return result\n}\n", "    // TODO - Add\
    \ your code here\n    return 0\n}\n", "    product := 1\n    for n > 0 {\n   \
    \     digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n", "    var result\
    \ int\n    var divider int\n    var remainder int\n    if n == 0 {\n        return\
    \ 0\n    }\n    divider = n/10\n    remainder = n%10\n    if remainder%2 != 0\
    \ {\n        result = remainder\n    }\n    for {\n        if divider == 0 {\n\
    \            break\n        }\n        remainder = divider%10\n        if remainder%2\
    \ != 0 {\n            result *= remainder\n        }\n        divider /= 10\n\
    \    }\n    return result\n}\n", "    var r int = 1\n    var d int\n    for n\
    \ > 0 {\n        d = n % 10\n        if d % 2 == 1 {\n            r *= d\n   \
    \     }\n        n /= 10\n    }\n    return r\n}\n", "    var product int = 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    if n <= 0 {\n        return 0\n    }\n    res := 1\n    odd := false\n\
    \    for n > 0 {\n        if n % 2 == 1 {\n            res *= n % 10\n       \
    \     odd = true\n        }\n        n /= 10\n    }\n    if odd {\n        return\
    \ res\n    }\n    return 0\n}\n", "    if n <= 0 {\n        return 0\n    }\n\n\
    \    result := 1\n    for n > 0 {\n        d := n % 10\n        if d % 2 != 0\
    \ {\n            result *= d\n        }\n        n /= 10\n    }\n    return result\n\
    }\n", "    // your code goes here\n    var result int\n    for ; n != 0; n /=\
    \ 10 {\n        if n % 2 != 0 {\n            result *= n % 10\n        }\n   \
    \ }\n    return result\n}\n", "    if n == 0 {\n        return 0\n    }\n\n  \
    \  result := 1\n    for n > 0 {\n        d := n % 10\n        if d % 2 != 0 {\n\
    \            result *= d\n        }\n        n /= 10\n    }\n    return result\n\
    }\n", "    sum := 1\n    for n > 0 {\n        t := n % 10\n        if t % 2 ==\
    \ 1 {\n            sum *= t\n        }\n        n /= 10\n    }\n    return sum\n\
    }\n", "    return 0\n}\n", "    if n < 0 {\n        return 0\n    }\n\n    out\
    \ := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            out *= digit\n        }\n        n /= 10\n    }\n    return out\n\
    }\n", "    var prod int = 1\n    for n > 0 {\n        dig := n % 10\n        if\
    \ dig % 2 != 0 {\n            prod *= dig\n        }\n        n /= 10\n    }\n\
    \    return prod\n}\n", "    if n < 10 {\n        if n % 2 == 1 {\n          \
    \  return n\n        } else {\n            return 0\n        }\n    }\n    if\
    \ n % 2 == 1 {\n        return n % 10 * digits(n / 10)\n    } else {\n       \
    \ return digits(n / 10)\n    }\n}\n", "    var prod int = 1\n    for n > 0 {\n\
    \        digit := n % 10\n        if digit % 2 != 0 {\n            prod *= digit\n\
    \        }\n        n /= 10\n    }\n    return prod\n}\n", "    product := 1\n\
    \    if n == 0 {\n        return 0\n    }\n\n    for n > 0 {\n        digit :=\
    \ n % 10\n        if digit % 2 != 0 {\n            product *= digit\n        }\n\
    \        n /= 10\n    }\n\n    return product\n}\n", "    if n < 10 {\n      \
    \  if n % 2 == 1 {\n            return n\n        } else {\n            return\
    \ 0\n        }\n    } else {\n        if n % 2 == 1 {\n            return (n %\
    \ 10) * digits(n / 10)\n        } else {\n            return digits(n / 10)\n\
    \        }\n    }\n}\n", "    if n == 0 {\n        return 0\n    }\n    var prod,\
    \ digit int\n    prod = 1\n    for n > 0 {\n        digit = n % 10\n        if\
    \ digit % 2 != 0 {\n            prod *= digit\n        }\n        n /= 10\n  \
    \  }\n    return prod\n}\n\ntype test ", "    var result int\n    result = 1\n\
    \    for n > 0 {\n        x := n % 10\n        if x % 2 != 0 {\n            result\
    \ *= x\n        }\n        n /= 10\n    }\n    return result\n}\n", "    if n\
    \ == 0 {\n        return 0\n    }\n\n    digit := n % 10\n    if digit % 2 ==\
    \ 0 {\n        return digits(n / 10)\n    }\n\n    rest := digits(n / 10)\n  \
    \  if rest == 0 {\n        return digit\n    }\n    return digit * rest\n}\n",
  "\tproduct := 1\n\tfor n > 0 {\n\t\tdigit := n % 10\n\t\tif digit % 2 != 0 {\n\t\
    \t\tproduct *= digit\n\t\t}\n\t\tn /= 10\n\t}\n\treturn product\n}\n", "    //\
    \ Fill in the missing code, do not change anything else\n    if n == 0 {\n   \
    \     return 0\n    }\n\n    if n % 2 == 0 {\n        return digits(n / 10)\n\
    \    }\n\n    return (n % 10) * digits(n / 10)\n}\n", "    product := 1\n    for\
    \ n > 0 {\n        m := n % 10\n        if m % 2 == 1 {\n            product *=\
    \ m\n        }\n        n /= 10\n    }\n    return product\n}\n", "    result\
    \ := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    m := n % 10\n    if m % 2\
    \ == 1 {\n        return m * digits(n / 10)\n    }\n    return digits(n / 10)\n\
    }\n", "    // Your code here\n    return 0\n}\n", "    n2 := n\n    var product\
    \ int = 1\n    for n > 0 {\n        if n % 2 != 0 {\n            product *= n\
    \ % 10\n        }\n        n /= 10\n    }\n    if product == 1 {\n        return\
    \ 0\n    }\n    return product\n}\n", "    sum := 1\n    for n > 0 {\n       \
    \ digit := n % 10\n        if digit % 2 != 0 {\n            sum *= digit\n   \
    \     }\n        n /= 10\n    }\n    return sum\n}\n", "    var res int = 1\n\
    \    for n > 0 {\n        d := n % 10\n        if d % 2 != 0 {\n            res\
    \ *= d\n        }\n        n /= 10\n    }\n    return res\n}\n", "    var r int\
    \ = 1\n    for n > 0 {\n        if (n % 2 == 1) {\n            r *= n % 10\n \
    \       }\n        n /= 10\n    }\n    return r\n}\n", "    if n == 0 {\n    \
    \    return 0\n    }\n    digit := n % 10\n    if digit % 2 == 0 {\n        return\
    \ digits(n / 10)\n    }\n    return digits(n / 10) * digit\n}\n", "    // 1) declare\
    \ an odd_digits variable\n    // 2) declare a variable to represent the \"current\"\
    \ digit you are on\n    // 3) move from left to right, getting each digit:\n \
    \   //    3a) check if digit % 2 != 0, if so, add to odd_digits variable\n   \
    \ // 4) return odd_digits\n    return 0\n}\n", "    // Fill me in!\n    return\
    \ n\n}\n", "    product := 1\n    for n > 0 {\n        digit := n % 10\n     \
    \   if digit % 2 != 0 {\n            product *= digit\n        }\n        n /=\
    \ 10\n    }\n    return product\n}\n", "    res := 1\n    for n > 0 {\n      \
    \  digit := n % 10\n        if digit % 2 != 0 {\n            res *= digit\n  \
    \      }\n        n /= 10\n    }\n    return res\n}\n", "    product := 1\n  \
    \  for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n       \
    \     product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    var product int = 1\n    for n > 0 {\n        d := n % 10\n       \
    \ if d % 2 != 0 {\n            product *= d\n        }\n        n /= 10\n    }\n\
    \    return product\n}\n", "    if n < 0 {\n        return 0\n    }\n    product\
    \ := 1\n    for n > 0 {\n        lastDigit := n % 10\n        if lastDigit % 2\
    \ != 0 {\n            product *= lastDigit\n        }\n        n /= 10\n    }\n\
    \    return product\n}\n", "\tstr := fmt.Sprintf(\"%d\", n)\n\tproduct := 1\n\t\
    for _, c := range str {\n\t\td := int(c) - '0'\n\t\tif d % 2 == 1 {\n\t\t\tproduct\
    \ *= d\n\t\t}\n\t}\n\treturn product\n}\n", "    if n <= 0 {\n        return 0\n\
    \    }\n\n    result := 1\n    for n > 0 {\n        digit := n % 10\n        if\
    \ digit % 2 != 0 {\n            result *= digit\n        }\n        n /= 10\n\
    \    }\n    return result\n}\n", "    var prod int = 1\n    for n > 0 {\n    \
    \    digit := n % 10\n        if digit % 2 != 0 {\n            prod *= digit\n\
    \        }\n        n /= 10\n    }\n    return prod\n}\n", "\tvar product int\
    \ = 1\n\tfor n > 0 {\n\t\tdigit := n % 10\n\t\tif digit % 2 != 0 {\n\t\t\tproduct\
    \ *= digit\n\t\t}\n\t\tn /= 10\n\t}\n\treturn product\n}\n", "    var product\
    \ = 1\n    for n > 0 {\n        var digit = n % 10\n        if digit % 2 == 1\
    \ {\n            product *= digit\n        }\n        n /= 10\n    }\n    return\
    \ product\n}\n", "\tvar result int\n\tfor n != 0 {\n\t\tdigit := n % 10\n\t\t\
    if digit % 2 != 0 {\n\t\t\tresult *= digit\n\t\t}\n\t\tn /= 10\n\t}\n\treturn\
    \ result\n}\n", "    if n < 0 {\n        return 0\n    }\n    currentProduct :=\
    \ 1\n    remainder := n\n    for remainder > 0 {\n        nextDigit := remainder\
    \ % 10\n        if nextDigit % 2 == 1 {\n            currentProduct *= nextDigit\n\
    \        }\n        remainder /= 10\n    }\n    return currentProduct\n}\n", " \
    \   return 0\n}\n", "    r := 1\n    for n > 0 {\n        if d := n % 10; d %\
    \ 2 != 0 {\n            r *= d\n        }\n        n /= 10\n    }\n    return\
    \ r\n}\n", "    result := 1\n    for n > 0 {\n        digit := n % 10\n      \
    \  if digit % 2 != 0 {\n            result *= digit\n        }\n        n /= 10\n\
    \    }\n    return result\n}\n", "    oddProduct := 1\n    for n > 0 {\n     \
    \   digit := n % 10\n        if digit % 2 == 1 {\n            oddProduct *= digit\n\
    \        }\n        n /= 10\n    }\n    return oddProduct\n}\n", "    sum := 1\n\
    \    for n > 0 {\n        d := n % 10\n        if d % 2 == 1 {\n            sum\
    \ *= d\n        }\n        n /= 10\n    }\n    return sum\n}\n", "    product\
    \ := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    if n % 2 == 1 {\n       \
    \ return (n % 10) * digits(n / 10)\n    }\n    return digits(n / 10)\n}\n", " \
    \   prod := 1\n    temp := n\n    for temp > 0 {\n        digit := temp % 10\n\
    \        if digit % 2 != 0 {\n            prod *= digit\n        }\n        temp\
    \ /= 10\n    }\n    return prod\n}\n", "    // Your code here\n    return 0\n\
    }\n", "    var result int = 1\n    for n > 0 {\n        digit := n % 10\n    \
    \    if digit % 2 != 0 {\n            result *= digit\n        }\n        n /=\
    \ 10\n    }\n    return result\n}\n", "    var r int = 1\n    for n > 0 {\n  \
    \      d := n % 10\n        if d % 2 == 1 {\n            r *= d\n        }\n \
    \       n /= 10\n    }\n    return r\n}\n", "    odd_digits := []int{}\n    for\
    \ n > 0 {\n        if (n % 10) % 2 != 0 {\n            odd_digits = append(odd_digits,\
    \ n % 10)\n        }\n        n /= 10\n    }\n    prod := 1\n    for _, val :=\
    \ range odd_digits {\n        prod *= val\n    }\n    return prod\n}\n", "   \
    \ // Replace the code below\n    return 0\n}\n", "    nStr := fmt.Sprintf(\"%d\"\
    , n)\n    prod := 1\n    for _, char := range nStr {\n        digit := char -\
    \ '0'\n        if digit & 1 == 1 {\n            prod *= int(digit)\n        }\n\
    \    }\n    return prod\n}\n", "    var product int = 1\n    for n > 0 {\n   \
    \     i := n % 10\n        if i % 2 != 0 {\n            product *= i\n       \
    \ }\n        n /= 10\n    }\n    return product\n}\n", "    if n == 0 {\n    \
    \    return 0\n    }\n\n    digit := n % 10\n    if digit % 2 == 0 {\n       \
    \ return digits(n / 10)\n    }\n\n    return digit * digits(n / 10)\n}\n", " \
    \   out := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 !=\
    \ 0 {\n            out *= digit\n        }\n        n /= 10\n    }\n    return\
    \ out\n}\n", "    count := 0\n    sum := 1\n    for n > 0 {\n        digit :=\
    \ n % 10\n        if digit % 2 != 0 {\n            count++\n            sum *=\
    \ digit\n        }\n        n /= 10\n    }\n    if count == 0 {\n        return\
    \ 0\n    }\n    return sum\n}\n", "    var (\n        result, digit int\n    )\n\
    \    for n > 0 {\n        digit = n % 10\n        if digit % 2 != 0 {\n      \
    \      result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n", "    if n < 0 {\n        return 0\n    }\n\n    var product int = 1\n  \
    \  for n > 0 {\n        last := n % 10\n        if last % 2 != 0 {\n         \
    \   product *= last\n        }\n        n /= 10\n    }\n\n    return product\n\
    }\n", "    var result = 1\n    for n > 0 {\n        digit := n % 10\n        if\
    \ digit % 2 != 0 {\n            result *= digit\n        }\n        n /= 10\n\
    \    }\n    return result\n}\n", "    var product int = 1\n    for n > 0 {\n \
    \       digit := n % 10\n        if digit % 2 != 0 {\n            product *= digit\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n", "    var product\
    \ int = 1\n    for n > 0 {\n        if n % 2 == 1 {\n            product *= n\
    \ % 10\n        }\n        n /= 10\n    }\n    return product\n}\n", "    result\
    \ := 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n", "    return n\n}\n", "    // your code here\n    var val int\n    for i\
    \ := range(n) {\n        if(n[i] % 2 != 0) {\n            val = val * n[i]\n \
    \       }\n    }\n    return val\n}\n", "    // your code here\n    return 0\n\
    }\n", "    // TODO: implement this function\n    n_remainder := 0\n    n_quotient\
    \ := 0\n    product := 1\n    for n > 0 {\n        n_remainder = n % 10\n    \
    \    n = n / 10\n        if n_remainder % 2 != 0 {\n            product = product\
    \ * n_remainder\n        }\n    }\n    return product\n}\n", "    // your code\
    \ here\n    return 0\n}\n", "\treturn 0\n}\n", "    return 1\n}\n", "    if n\
    \ / 10 == 0 {\n        if n % 2 == 1 {\n            return n\n        } else {\n\
    \            return 0\n        }\n    } else {\n        if n % 2 == 1 {\n    \
    \        return n % 10 * digits(n / 10)\n        } else {\n            return\
    \ digits(n / 10)\n        }\n    }\n}\n", "    product := 1\n    for n > 0 {\n\
    \        digit := n % 10\n        if digit % 2 != 0 {\n            product *=\
    \ digit\n        }\n        n /= 10\n    }\n    return product\n}\n", "    var\
    \ odd = 0\n    for n > 0 {\n        var d = n % 10\n        if d % 2 == 1 {\n\
    \            odd *= 10\n            odd += d\n        }\n        n /= 10\n   \
    \ }\n    var result = 1\n    for odd > 0 {\n        result *= odd % 10\n     \
    \   odd /= 10\n    }\n    return result\n}\n", "    // >>> for i in range(1,6):\n\
    \    // ...     print(i)\n    // ...\n    // 1\n    // 2\n    // 3\n    // 4\n\
    \    // 5\n    product := 1\n    for n > 0 {\n        digit := n % 10\n      \
    \  if digit % 2 == 1 {\n            product *= digit\n        }\n        n /=\
    \ 10\n    }\n    return product\n}\n", "    odd_digits := []int{1, 3, 5, 7, 9}\n\
    \    product := 1\n    for n > 0 {\n        digit := n % 10\n        n /= 10\n\
    \        if contains(odd_digits, digit) {\n            product *= digit\n    \
    \    }\n    }\n    return product\n}\n", "    if n < 10 {\n        return n\n\
    \    }\n\n    result := digits(n / 10)\n    if n % 2 == 1 {\n        result *=\
    \ n % 10\n    }\n    return result\n}\n", "    if n < 0 {\n        n = -n\n  \
    \  }\n    if n < 10 {\n        return 0\n    }\n    m := 1\n    for n > 0 {\n\
    \        a := n % 10\n        if a % 2 == 1 {\n            m *= a\n        }\n\
    \        n /= 10\n    }\n    return m\n}\n", "    var prod int = 1\n    for {\n\
    \        digit := n % 10\n        if digit % 2 == 1 {\n            prod *= digit\n\
    \        }\n        n /= 10\n        if n == 0 {\n            break\n        }\n\
    \    }\n    return prod\n}\n", "    // --- Place code between here... ---\n  \
    \  digits := []int{}\n    for n > 0 {\n        digits = append(digits, n % 10)\n\
    \        n /= 10\n    }\n    product := 1\n    for _, num := range digits {\n\
    \        if num % 2 != 0 {\n            product *= num\n        }\n    }\n   \
    \ if product == 1 {\n        return 0\n    }\n    return product\n    // --- ...and\
    \ here ---\n}\n", "    var res int = 1\n    for n > 0 {\n        tmp := n % 10\n\
    \        if tmp % 2 != 0 {\n            res *= tmp\n        }\n        n /= 10\n\
    \    }\n    return res\n}\n\ntype testCase ", "    // YOUR CODE HERE\n    return\
    \ 0\n}\n", "    digits := make([]int, 0)\n    product := 1\n    for n > 0 {\n\
    \        last_digit := n % 10\n        digits = append(digits, last_digit)\n \
    \       n = n / 10\n    }\n    for _, digit := range digits {\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        }\n    }\n    return product\n\
    }\n", "    var r int = 1\n    for n > 0 {\n        if n % 2 == 1 {\n         \
    \   r *= n % 10\n        }\n        n /= 10\n    }\n    return r\n}\n", "    if\
    \ n == 0 {\n        return 0\n    }\n    var prod int = 1\n    for n > 0 {\n \
    \       d := n % 10\n        if d % 2 == 1 {\n            prod *= d\n        }\n\
    \        n /= 10\n    }\n    return prod\n}\n\ntype testpair ", "    var product\
    \ int = 1\n    for n > 0 {\n        r := n % 10\n        if r % 2 != 0 {\n   \
    \         product *= r\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    // your code goes here\n    return 0\n}\n", "    res := 1\n    for\
    \ n > 0 {\n        n, d := n/10, n%10\n        if d%2 != 0 {\n            res\
    \ *= d\n        }\n    }\n    return res\n}\n", "    divisor := 1\n    ret :=\
    \ 1\n    for {\n        cur_digit := (n / divisor) % 10\n        if cur_digit\
    \ == 0 {\n            break\n        } else if cur_digit % 2 == 1 {\n        \
    \    ret *= cur_digit\n        }\n        divisor *= 10\n    }\n    return ret\n\
    }\n", "    product := 1\n    for n > 0 {\n        digit := n % 10\n        if\
    \ digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n\
    \    }\n    return product\n}\n", "    product := 1\n    if n == 0 {\n       \
    \ return 0\n    }\n    for n > 0 {\n        remainder := n % 10\n        if remainder\
    \ % 2 != 0 {\n            product *= remainder\n        }\n        n /= 10\n \
    \   }\n    return product\n}\n", "    return 0\n}\n", "    var product int = 1\n\
    \    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n     \
    \       product *= digit\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    odd_digits := 1\n    for n > 0 {\n        digit := n % 10\n       \
    \ if digit % 2 == 1 {\n            odd_digits *= digit\n        }\n        n /=\
    \ 10\n    }\n    return odd_digits\n}\n", "    total := 1\n    for n > 0 {\n \
    \       digit := n % 10\n        if digit % 2 != 0 {\n            total *= digit\n\
    \        }\n        n /= 10\n    }\n    return total\n}\n", "    var result int\
    \ = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n\
    \            result *= digit\n        }\n        n /= 10\n    }\n    return result\n\
    }\n", "    res := 1\n    for n > 0 {\n        if n % 2 == 1 {\n            res\
    \ *= n % 10\n        }\n        n /= 10\n    }\n    return res\n}\n", "    var\
    \ product int = 1\n    for n > 0 {\n        digit := n % 10\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n    }\n\
    \    return product\n}\n\ntype Test ", "    odd := true\n    product := 1\n  \
    \  for n > 0 {\n        digit := n % 10\n        if odd {\n            product\
    \ *= digit\n        }\n        odd = !odd\n        n /= 10\n    }\n    return\
    \ product\n}\n", "    var res int\n    for n > 0 {\n        d := n % 10\n    \
    \    if d % 2 != 0 {\n            res = res * 10 + d\n        }\n        n /=\
    \ 10\n    }\n    return res\n}\n", "    prod := 1\n    for n > 0 {\n        digit\
    \ := n % 10\n        if digit % 2 == 1 {\n            prod *= digit\n        }\n\
    \        n /= 10\n    }\n    return prod\n}\n\ntype TestCase ", "    // Fill in\
    \ your code here.\n    var product int = 1\n    for n > 0 {\n        rem := n\
    \ % 10\n        if rem % 2 != 0 {\n            product *= rem\n        }\n   \
    \     n /= 10\n    }\n    return product\n}\n", "    // your code here\n    return\
    \ 0\n}\n", "    r := 1\n    for n > 0 {\n        m := n % 10\n        if m % 2\
    \ == 1 {\n            r *= m\n        }\n        n /= 10\n    }\n    return r\n\
    }\n", "    product := 1\n    for n > 0 {\n        if (n % 2) == 1 {\n        \
    \    product *= n % 10\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    product := 1\n    for n > 0 {\n        if n % 2 == 1 {\n          \
    \  product *= n % 10\n        }\n        n /= 10\n    }\n    return product\n\
    }\n", "    var val int\n    for n > 0 {\n        digit := n % 10\n        if digit\
    \ % 2 != 0 {\n            val *= digit\n        }\n        n /= 10\n    }\n  \
    \  return val\n}\n", "    prod := 1\n    for n > 0 {\n        if n % 2 == 1 {\n\
    \            prod *= n % 10\n        }\n        n /= 10\n    }\n    return prod\n\
    }\n", "    res := 1\n    for n > 0 {\n        d := n % 10\n        if d % 2 !=\
    \ 0 {\n            res *= d\n        }\n        n /= 10\n    }\n    return res\n\
    }\n", "    sum := 1\n    for n > 0 {\n        a := n % 10\n        if a % 2 !=\
    \ 0 {\n            sum *= a\n        }\n        n /= 10\n    }\n    return sum\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    // if the current digit is\
    \ odd, multiply it with the product of odd digits\n    // in the number remaining\
    \ after removing the current digit\n    if n % 2 != 0 {\n        return (n % 10)\
    \ * digits(n / 10)\n    }\n    // if the current digit is even, just return the\
    \ product of odd digits\n    // in the number remaining after removing the current\
    \ digit\n    return digits(n / 10)\n}\n", "    out := 1\n    if n == 0 {\n   \
    \     return 0\n    }\n    for n > 0 {\n        digit := n % 10\n        if digit\
    \ % 2 != 0 {\n            out *= digit\n        }\n        n /= 10\n    }\n  \
    \  return out\n}\n", "    if n == 0 {\n        return 0\n    }\n    if n % 2 ==\
    \ 1 {\n        return n % 10 * digits(n / 10)\n    }\n    return digits(n / 10)\n\
    }\n", "    digit := n % 10\n    product := digit\n    if digit % 2 == 0 {\n  \
    \      product = 0\n    }\n    quotient := n / 10\n    if quotient > 0 {\n   \
    \     product *= digits(quotient)\n    }\n    return product\n}\n", "    sum :=\
    \ 1\n    num := n\n    for num > 0 {\n        if num % 2 != 0 {\n            sum\
    \ *= num % 10\n        }\n        num /= 10\n    }\n    return sum\n}\n", "  \
    \  if n < 0 {\n        return 0\n    }\n    result := 1\n    for ; n > 0; n /=\
    \ 10 {\n        if n % 2 == 1 {\n            result *= n % 10\n        }\n   \
    \ }\n    return result\n}\n", "    if n == 0 {\n        return 0\n    }\n    var\
    \ remainder = n % 10\n    if remainder % 2 == 0 {\n        return digits(n / 10)\n\
    \    }\n    return remainder * digits(n / 10)\n}\n", "    count := 0\n    prod\
    \ := 1\n    for n > 0 {\n        cur := n % 10\n        if cur % 2 != 0 {\n  \
    \          prod *= cur\n            count++\n        }\n        n /= 10\n    }\n\
    \    if count > 0 {\n        return prod\n    }\n    return 0\n}\n", "    r :=\
    \ 1\n    for n > 0 {\n        if n % 2 == 1 {\n            r *= n % 10\n     \
    \   }\n        n /= 10\n    }\n    return r\n}\n", "    // Insert your code here\
    \ //\n    return 0\n}\n", "    // iterate through the numbers\n    // create a\
    \ string to hold values \n    var s string\n    s = \"\"\n    // create a string\
    \ of the numbers inputed\n    for i := n; i > 0; i = i / 10 {\n        s = string(i\
    \ % 10) + s\n    }\n    return s\n}\n", "    fmt.Println(n)\n    odd_digits :=\
    \ []int{}\n    if n / 10 == 0 {\n        if n % 2 == 1 {\n            return n\n\
    \        } else {\n            return 0\n        }\n    }\n    for i := 10; i\
    \ <= n; i *= 10 {\n        digit := (n / i) % 10\n        if digit % 2 == 1 {\n\
    \            odd_digits = append(odd_digits, digit)\n        }\n    }\n    fmt.Println(odd_digits)\n\
    \    if len(odd_digits) == 0 {\n        return 0\n    }\n    sum := 1\n    for\
    \ _, v := range odd_digits {\n        sum *= v\n    }\n    return sum\n}\n", " \
    \   var product int = 1\n    for n > 0 {\n        d := n % 10\n        if d %\
    \ 2 != 0 {\n            product *= d\n        }\n        n /= 10\n    }\n    return\
    \ product\n}\n", "\tr := 1\n\tfor n > 0 {\n\t\tm := n % 10\n\t\tif m % 2 == 1\
    \ {\n\t\t\tr *= m\n\t\t}\n\t\tn /= 10\n\t}\n\treturn r\n}\n", "    var product\
    \ int = 1\n    for n > 0 {\n        digit := n % 10\n        if digit % 2 != 0\
    \ {\n            product *= digit\n        }\n        n /= 10\n    }\n    return\
    \ product\n}\n", "    product := 1\n    for ; n > 0; n /= 10 {\n        if n %\
    \ 2 == 1 {\n            product *= n % 10\n        }\n    }\n    return product\n\
    }\n", "    // Create a variable for the odd numbers\n    var odds int\n    //\
    \ Loop through all the digits\n    for n > 0 {\n        // Find the value of the\
    \ current digit\n        remainder := n % 10\n        // Determine if the digit\
    \ is odd\n        if remainder % 2 != 0 {\n            // If the digit is odd,\
    \ add the digit to the odd numbers variable\n            odds = odds * 10 + remainder\n\
    \        }\n        // Remove the current digit from the number\n        n = n\
    \ / 10\n    }\n    // Return the value of the odd numbers variable\n    return\
    \ odds\n}\n", "    if n < 10 {\n        return n % 2\n    }\n    prod := 1\n \
    \   for n > 0 {\n        digit := n % 10\n        if digit % 2 == 1 {\n      \
    \      prod *= digit\n        }\n        n /= 10\n    }\n    return prod\n}\n",
  "    if n == 0 {\n        return 0\n    }\n\n    digit := n % 10\n    if digit %\
    \ 2 == 0 {\n        return digits(n / 10)\n    } else {\n        return digit\
    \ * digits(n / 10)\n    }\n}\n", "    if n / 10 == 0 {\n        if n % 2 == 1\
    \ {\n            return n\n        } else {\n            return 0\n        }\n\
    \    } else {\n        if n % 2 == 1 {\n            return digits(n / 10) * (n\
    \ % 10)\n        } else {\n            return digits(n / 10)\n        }\n    }\n\
    }\n", "    // Write your code here\n    // Good luck!\n    var res int = 1\n \
    \   for n > 0 {\n        if (n % 10) % 2 != 0 {\n            res *= n % 10\n \
    \       }\n        n /= 10\n    }\n    return res\n}\n", "    product := 1\n \
    \   for n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10\n    \
    \    }\n        n /= 10\n    }\n    return product\n}\n", "    var product int\
    \ = 1\n    for n > 0 {\n        r := n % 10\n        if r % 2 != 0 {\n       \
    \     product *= r\n        }\n        n /= 10\n    }\n    return product\n}\n",
  "    if n == 0 {\n        return 0\n    }\n    var prod int = 1\n    var m int =\
    \ n\n    var digit int\n    for m > 0 {\n        digit = m % 10\n        if digit\
    \ % 2 == 1 {\n            prod *= digit\n        }\n        m /= 10\n    }\n \
    \   return prod\n}\n", "    var res, rem int\n    var oddDigits, evenDigits bool\n\
    \    for n > 0 {\n        rem = n % 10\n        if rem % 2 == 0 {\n          \
    \  evenDigits = true\n        } else {\n            oddDigits = true\n       \
    \     res *= rem\n        }\n        n /= 10\n    }\n    if oddDigits && evenDigits\
    \ {\n        return res\n    }\n    return 0\n}\n", "    p := 1\n    for ; n >\
    \ 0; n /= 10 {\n        if d := n % 10; d % 2 != 0 {\n            p *= d\n   \
    \     }\n    }\n    return p\n}\n\ntype Test ", "    var digits []int\n    var\
    \ result int = 1\n    for n > 0 {\n        digit := n % 10\n        if digit %\
    \ 2 != 0 {\n            digits = append(digits, digit)\n        }\n        n /=\
    \ 10\n    }\n    for _, digit := range digits {\n        result *= digit\n   \
    \ }\n    return result\n}\n", "    // Write your solution here.\n    return 0\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    return (n % 10) * digits(n\
    \ / 10)\n}\n", "    if n < 10 {\n        if n % 2 == 1 {\n            return n\n\
    \        } else {\n            return 0\n        }\n    }\n    digit := n % 10\n\
    \    if digit % 2 == 1 {\n        return digit * digits(n / 10)\n    } else {\n\
    \        return digits(n / 10)\n    }\n}\n", "    product := 1\n    for n > 0\
    \ {\n        n, r := n/10, n%10\n        if r%2 == 1 {\n            product *=\
    \ r\n        }\n    }\n    return product\n}\n", "    res := 1\n    for n > 0\
    \ {\n        if (n % 10) % 2 != 0 {\n            res *= n % 10\n        }\n  \
    \      n /= 10\n    }\n    return res\n}\n", "    product := 1\n    for n > 0\
    \ {\n        digit := n % 10\n        if digit % 2 != 0 {\n            product\
    \ *= digit\n        }\n        n /= 10\n    }\n    return product\n}\n", "   \
    \ var result int = 1\n    for ; n > 0; n /= 10 {\n        if n % 2 == 1 {\n  \
    \          result *= n % 10\n        }\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
