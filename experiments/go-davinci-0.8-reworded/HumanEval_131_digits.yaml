name: HumanEval_131_digits
language: go_test.go
prompt: "package digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a positive integer n, return the product of the odd digits.\n// Return 0 if all\
  \ digits are even.\n// For example:\n// >>> digits(1)\n// 1\n// >>> digits(4)\n\
  // 0\n// >>> digits(235)\n// 15\nfunc digits(n int) int {\n"
tests: "func TestDigits(t *testing.T) {\n  candidate := digits\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(5), expected: 5 },\n     { actual: candidate(54), expected:\
  \ 5 },\n     { actual: candidate(120), expected: 1 },\n     { actual: candidate(5014),\
  \ expected: 5 },\n     { actual: candidate(98765), expected: 315 },\n     { actual:\
  \ candidate(5576543), expected: 2625 },\n     { actual: candidate(2468), expected:\
  \ 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
  \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // Write the body of the function here\n    var odd_digits []int\n\
    \    for _, value := range(fmt.Sprintf(\"%d\", n)) {\n        digit := int(value)\
    \ - 48\n        if digit % 2 != 0 {\n            odd_digits = append(odd_digits,\
    \ digit)\n        }\n    }\n    if len(odd_digits) == 0 {\n        return 0\n\
    \    }\n    product := 1\n    for _, value := range(odd_digits) {\n        product\
    \ *= value\n    }\n    return product\n}\n", "    r := 1\n    for n > 0 {\n  \
    \      d := n % 10\n        if d % 2 == 1 {\n            r *= d\n        }\n \
    \       n /= 10\n    }\n    return r\n}\n", "    var res int = 1\n    var tmp\
    \ int\n    for n > 0 {\n        tmp = n % 10\n        if tmp % 2 != 0 {\n    \
    \        res *= tmp\n        }\n        n /= 10\n    }\n    return res\n}\n",
  "    if n < 10 {\n        return n\n    }\n    product := 1\n    for n > 0 {\n \
    \       last_digit := n % 10\n        if last_digit % 2 != 0 {\n            product\
    \ *= last_digit\n        }\n        n /= 10\n    }\n    return product\n}\n",
  "    var product int = 1\n    for ; n > 0; n /= 10 {\n        d := n % 10\n    \
    \    if d % 2 == 1 {\n            product *= d\n        }\n    }\n    return product\n\
    }\n", "    if n == 0 {\n        return 0\n    }\n    last := n % 10\n    if last\
    \ % 2 == 1 {\n        return last * digits(n / 10)\n    }\n    return digits(n\
    \ / 10)\n}\n", "    r := 1\n    for n > 0 {\n        d := n % 10\n        if d\
    \ % 2 == 1 {\n            r *= d\n        }\n        n /= 10\n    }\n    return\
    \ r\n}\n", "    p := 1\n    for n > 0 {\n        d := n % 10\n        if d % 2\
    \ == 1 {\n            p *= d\n        }\n        n /= 10\n    }\n    return p\n\
    }\n", "    fmt.Println(n)\n    if n < 10 {\n        if n % 2 == 1 {\n        \
    \    return n\n        } else {\n            return 0\n        }\n    } else {\n\
    \        return n % 10 * digits(n / 10)\n    }\n}\n", "    //return n * n //1\n\
    \    //return n % 2 //3\n    return n % 4 //4\n}\n", "    const eol = 10 // end\
    \ of line\n\n    if n == 0 {\n        return 0\n    }\n\n    product := 1\n  \
    \  for n > 0 {\n        //\n        // Calculate the remainder, i.e. the next\
    \ lowest order digit\n        //\n        digit := n % eol\n\n        //\n   \
    \     // If digit is odd, append to the product\n        //\n        if digit\
    \ % 2 != 0 {\n            product *= digit\n        }\n\n        //\n        //\
    \ We've handled the lowest order digit, so divide by 10 to\n        // drop it\
    \ from n\n        //\n        n /= eol\n    }\n\n    return product\n}\n", " \
    \   return 0\n}\n", "    product := 1\n    for n > 0 {\n        digit := n % 10\n\
    \        if digit % 2 != 0 {\n            product *= digit\n        }\n      \
    \  n /= 10\n    }\n    return product\n}\n\ntype test ", "    var product int\
    \ = 1\n    for n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10\n\
    \        }\n        n /= 10\n    }\n    return product\n}\n\ntype testpair ",
  "    if n <= 0 {\n        return 0\n    }\n    result := 1\n    for n > 0 {\n  \
    \      d := n % 10\n        if d % 2 != 0 {\n            result *= d\n       \
    \ }\n        n /= 10\n    }\n    return result\n}\n", "    sum := 1\n    for n\
    \ > 0 {\n        digit := n % 10\n        if digit % 2 != 0 {\n            sum\
    \ *= digit\n        }\n        n /= 10\n    }\n    return sum\n}\n", "    var\
    \ product int = 1\n    for n > 0 {\n        mod := n % 10\n        if mod % 2\
    \ != 0 {\n            product *= mod\n        }\n        n /= 10\n    }\n    return\
    \ product\n}\n", "    prod := 1\n    for n > 0 {\n        if n % 2 == 1 {\n  \
    \          prod *= n % 10\n        }\n        n /= 10\n    }\n    return prod\n\
    }\n", "    product := 1\n    for n > 0 {\n        digit := n % 10\n        if\
    \ digit % 2 != 0 {\n            product *= digit\n        }\n        n /= 10\n\
    \    }\n    return product\n}\n", "    var result int = 1\n    for n > 0 {\n \
    \       digit := n % 10\n        if digit % 2 != 0 {\n            result *= digit\n\
    \        }\n        n /= 10\n    }\n    return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
