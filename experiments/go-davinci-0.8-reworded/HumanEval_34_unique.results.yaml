language: go_test.go
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    var r []int\n    for _, v := range l {\n   \
    \     if _, ok := m[v]; !ok {\n            m[v] = true\n            r = append(r,\
    \ v)\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp5qyljbdc_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    found := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc6aqj5m8_test.go:12:27: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074906
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := []int{}\n    for _, i := range l {\n        if !inList(result,\
    \ i) {\n            result = append(result, i)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4wbjhya3_test.go:14:13: undefined: inList

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var uniqueElements []int\n    m := make(map[int]int)\n    for _, element\
    \ := range l {\n        if _, ok := m[element]; !ok {\n            m[element]\
    \ = element\n            uniqueElements = append(uniqueElements, element)\n  \
    \      }\n    }\n    return uniqueElements\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpuiy97lmd_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    u := make([]int, 0, len(l))\n    m := make(map[int]bool)\n\n    for _, v\
    \ := range l {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n   \
    \         u = append(u, v)\n        }\n    }\n\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpxunui14h_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Add the values to a map and then build a new list\n    m := make(map[int]bool)\n\
    \    var u []int\n    for _, x := range l {\n        if !m[x] {\n            m[x]\
    \ = true\n            u = append(u, x)\n        }\n    }\n    return u\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmprktm54zb_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    u := make([]int, 0)\n    for _, i := range l\
    \ {\n        if _, ok := m[i]; !ok {\n            m[i] = true\n            u =\
    \ append(u, i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpshevimn4_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    var res []int\n    for _, v := range l {\n \
    \       if _, ok := m[v]; !ok {\n            m[v] = true\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_rilq44q_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, e := range l {\n        m[e] = true\n\
    \    }\n    var uniq []int\n    for k := range m {\n        uniq = append(uniq,\
    \ k)\n    }\n    return uniq\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpv_1mph07_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    count := make(map[int]int)\n    for _, v := range l {\n        count[v] +=\
    \ 1\n    }\n    m := make(map[int]int)\n    for _, v := range l {\n        m[v]\
    \ += 1\n        if m[v] >= count[v] {\n            continue\n        }\n     \
    \   l = append(l, v)\n    }\n    return l\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpj1_ol1bg_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    r := []int{}\n    for _, e := range l {\n        if _, ok := contains(r,\
    \ e); !ok {\n            r = append(r, e)\n        }\n    }\n    return r\n}\n\
    \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppkxghid2_test.go:14:21: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var uniques []int\n    var exists bool\n    for _, e := range l {\n     \
    \   exists = false\n        for _, u := range uniques {\n            if e == u\
    \ {\n                exists = true\n                break\n            }\n   \
    \     }\n        if !exists {\n            uniques = append(uniques, e)\n    \
    \    }\n    }\n    return uniques\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpu5qoxbnd_test.go:42: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var res []int\n    var m = make(map[int]bool)\n    for _, v := range l {\n\
    \        if _, ok := m[v]; !ok {\n            m[v] = true\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpro2o30rs_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0)\n    m := make(map[int]bool)\n    for _, e := range l\
    \ {\n        if _, ok := m[e]; !ok {\n            m[e] = true\n            s =\
    \ append(s, e)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp113gbvnp_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var res []int\n    for _, n := range l {\n        if len(res) == 0 || res[len(res)-1]\
    \ != n {\n            res = append(res, n)\n        }\n    }\n    return res\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpsob4h3wr_test.go:34: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := []int{}\n    m := map[int]bool{}\n    for _, i := range l {\n \
    \       if !m[i] {\n            m[i] = true\n            unique = append(unique,\
    \ i)\n        }\n    }\n    return unique\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppevny9q0_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n    nl := []int{l[0]}\n\
    \    for _, e := range l[1:] {\n        found := false\n        for _, e2 := range\
    \ nl {\n            if e == e2 {\n                found = true\n             \
    \   break\n            }\n        }\n        if !found {\n            nl = append(nl,\
    \ e)\n        }\n    }\n    return nl\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpyyyoo2hn_test.go:44: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 0
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n    for _, i := range l {\n        if len(u) == 0 {\n      \
    \      u = append(u, i)\n        } else {\n            var inserted bool\n   \
    \         for j, v := range u {\n                if i == v {\n               \
    \     inserted = true\n                    break\n                }\n        \
    \        if i < v {\n                    u = append(u, 0)\n                  \
    \  copy(u[j+1:], u[j:])\n                    u[j] = i\n                    inserted\
    \ = true\n                    break\n                }\n            }\n      \
    \      if !inserted {\n                u = append(u, i)\n            }\n     \
    \   }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    r := []int{}\n    s := make(map[int]\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmn7_n6lk_test.go:13:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var uniqueSet = make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpva7payqn_test.go:12:34: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n\n    r := make([]int, 0,\
    \ len(l))\n    r = append(r, l[0])\n\n    for _, i := range l {\n        if r[len(r)-1]\
    \ != i {\n            r = append(r, i)\n        }\n    }\n\n    return r\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpbn3fe10l_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Insert in an empty map to get sorted unique elements\n    m := make(map[int]\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsb5g15pf_test.go:13:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074906
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    s := make([]int, 0)\n    for _, v := range l\
    \ {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n            s =\
    \ append(s, v)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpih3hcive_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074907
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    u := make([]int, 0, len(l))\n    m := make(map[int]bool)\n\n    for _, val\
    \ := range l {\n        if _, ok := m[val]; !ok {\n            m[val] = true\n\
    \            u = append(u, val)\n        }\n    }\n\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptuar5mkg_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    result := make([]int, 0, len(m))\n    for k := range m {\n       \
    \ result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpnc4kzgts_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    uniqueMap := make(map[int]bool)\n    for _, v := range l {\n        uniqueMap[v]\
    \ = true\n    }\n    result := make([]int, 0, len(uniqueMap))\n    for k := range\
    \ uniqueMap {\n        result = append(result, k)\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp2p3fz2fv_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    uniques := make([]int, 0)\n    for _, e := range\
    \ l {\n        if _, ok := m[e]; !ok {\n            m[e] = true\n            uniques\
    \ = append(uniques, e)\n        }\n    }\n    return uniques\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmplamuri9r_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    u := make([]int, 0, len(l))\n\
    \    m := make(map[int]bool)\n    for _, e := range l {\n        if _, ok := m[e];\
    \ !ok {\n            m[e] = true\n            u = append(u, e)\n        }\n  \
    \  }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpajtk3h3n_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    u := make([]int, 0, len(l))\n\
    \    seen := make(map[int]bool)\n    u = append(u, l[0])\n    seen[l[0]] = true\n\
    \    for _, i := range l[1:] {\n        if !seen[i] {\n            u = append(u,\
    \ i)\n            seen[i] = true\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpyr2g__hl_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    u := make([]int, 0, len(l))\n    m := make(map[int]bool)\n\n    for _, val\
    \ := range l {\n        if _, ok := m[val]; !ok {\n            m[val] = true\n\
    \            u = append(u, val)\n        }\n    }\n\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptuar5mkg_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    var result []int\n    result\
    \ = append(result, l[0])\n    for _, i := range l {\n        var alreadyInserted\
    \ bool\n        for _, j := range result {\n            if i == j {\n        \
    \        alreadyInserted = true\n                break\n            }\n      \
    \  }\n        if !alreadyInserted {\n            result = append(result, i)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpo4od53qo_test.go:45: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    unique_list := make([]int, len(m))\n    i := 0\n    for k := range\
    \ m {\n        unique_list[i] = k\n        i++\n    }\n    return unique_list\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpnv930s38_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // we need a map\n    m := make(map[int]bool)\n    for _, v := range l {\n\
    \        // map key is bool and value is int\n        m[v] = true\n    }\n   \
    \ var u []int\n    for k := range m {\n        u = append(u, k)\n    }\n    return\
    \ u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp7wa40nni_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := make([]int, 0)\n    for _, n := range l {\n        if !contains(unique,\
    \ n) {\n            unique = append(unique, n)\n        }\n    }\n    return unique\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpe9mewb27_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // We assume that the slice is sorted\n    m := make(map[int]bool)\n    for\
    \ _, n := range l {\n        m[n] = true\n    }\n    sl := make([]int, len(m))\n\
    \    i := 0\n    for k := range m {\n        sl[i] = k\n        i++\n    }\n \
    \   return sl\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpo2oouxl4_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    c := make(map[int]bool)\n    a := make([]int, 0)\n    for _, v := range l\
    \ {\n        if _, ok := c[v]; !ok {\n            c[v] = true\n            a =\
    \ append(a, v)\n        }\n    }\n    return a\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpptz3ownc_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    var result []int\n    result\
    \ = append(result, l[0])\n    for _, value := range l {\n        unique := true\n\
    \        for _, resultValue := range result {\n            if value == resultValue\
    \ {\n                unique = false\n                break\n            }\n  \
    \      }\n        if unique {\n            result = append(result, value)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp12u7gx70_test.go:45: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, val := range l {\n        m[val] = true\n\
    \    }\n    var ret []int\n    for key, _ := range m {\n        ret = append(ret,\
    \ key)\n    }\n    return ret\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpzi_zdg6a_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 0
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    // Sort the list\n    for\
    \ i := range l {\n        for j := i + 1; j < len(l); j++ {\n            if l[i]\
    \ > l[j] {\n                l[i], l[j] = l[j], l[i]\n            }\n        }\n\
    \    }\n    // Get unique elements\n    j := 0\n    for i := 1; i < len(l); i++\
    \ {\n        if l[j] != l[i] {\n            j++\n            l[j] = l[i]\n   \
    \     }\n    }\n    return l[:j+1]\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074910
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sort.Ints(l)\n    last := l[0]\n    unique := []int{last}\n    for _, x :=\
    \ range l[1:] {\n        if x != last {\n            unique = append(unique, x)\n\
    \            last = x\n        }\n    }\n    return unique\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpu2nzby8h_test.go:12:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, x := range l {\n        m[x] = true\n\
    \    }\n    n := make([]int, len(m))\n    for x, _ := range m {\n        n = append(n,\
    \ x)\n    }\n    return n\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpuqb2rdup_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var res []int\n    for _, i := range l {\n        for _, j := range res {\n\
    \            if i == j {\n                goto next\n            }\n        }\n\
    \        res = append(res, i)\n    next:\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmph8g3o038_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := []int{}\n    for _, val := range l {\n        if !contains(unique,\
    \ val) {\n            unique = append(unique, val)\n        }\n    }\n    return\
    \ unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuq5zmgsw_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    var u []int\n    for k := range m {\n        u = append(u, k)\n  \
    \  }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpox9hx4qz_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    ret := []int{}\n    for _, v := range l {\n        found := false\n     \
    \   for _, v2 := range ret {\n            if v == v2 {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            ret = append(ret, v)\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpt_w50rcp_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var r []int\n    // Make a map where key is value of the slice\n    // and\
    \ value is the index of slice\n    m := make(map[int]int)\n    for _, v := range\
    \ l {\n        m[v] = 1\n    }\n    // Just add map keys to the slice\n    for\
    \ k := range m {\n        r = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppi4lqqkk_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    count := 0\n    for i := 1;\
    \ i < len(l); i++ {\n        if l[i-1] != l[i] {\n            count++\n      \
    \      l[count] = l[i]\n        }\n    }\n    return l[:count+1]\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpxlt49ot3_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n    unique_elements := []int{l[0]}\n\
    \    for _, elem := range l[1:] {\n        if elem != unique_elements[len(unique_elements)-1]\
    \ {\n            unique_elements = append(unique_elements, elem)\n        }\n\
    \    }\n    return unique_elements\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvkb1ffv4_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074910
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var r []int\n    for _, i := range l {\n        if !in(r, i) {\n        \
    \    r = append(r, i)\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpflfmtxg2_test.go:14:13: undefined: in

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074911
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    u := make([]int, 0, len(l))\n\
    \    for _, v := range l {\n        if len(u) == 0 || u[len(u)-1] != v {\n   \
    \         u = append(u, v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpjptj9xzh_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074911
- exit_code: 0
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := []int{}\n    // Insertion sort\n    for _, v := range l {\n   \
    \     i := 0\n        for ; i < len(unique); i++ {\n            if v <= unique[i]\
    \ {\n                break\n            }\n        }\n        if i == len(unique)\
    \ {\n            unique = append(unique, v)\n        } else if v != unique[i]\
    \ {\n            unique = append(unique, 0)\n            copy(unique[i+1:], unique[i:])\n\
    \            unique[i] = v\n        }\n    }\n    return unique\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074911
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    m := make(map[int]bool)\n\
    \    ul := make([]int, 0)\n    for _, i := range l {\n        if _, ok := m[i];\
    \ !ok {\n            m[i] = true\n            ul = append(ul, i)\n        }\n\
    \    }\n    return ul\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp4ttjoxsy_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074911
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    sl := []int{}\n    uniques := []int{}\n    for _, e := range l {\n      \
    \  sl = append(sl, e)\n    }\n    for _, e := range sl {\n        if !contains(uniques,\
    \ e) {\n            uniques = append(uniques, e)\n        }\n    }\n    return\
    \ uniques\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbalic3ld_test.go:18:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074911
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    fmt.Println(\"Printing l : \", l)\n    var s = make([]int, len(l))\n    copy(s,\
    \ l)\n    sort.Ints(s)\n    fmt.Println(\"Printing s : \", s)\n    fmt.Println(\"\
    Printing s[0 : len(s)-1] : \", s[0 : len(s)-1])\n    var last int\n    var r =\
    \ s[:0]\n    for _, n := range s {\n        if n != last {\n            r = append(r,\
    \ n)\n        }\n        last = n\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpneoidega_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074911
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    var res []int\n    for _, v := range l {\n\
    \        if !seen[v] {\n            seen[v] = true\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptuwdr_85_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 0
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Sort the given list\n    s := make([]int, len(l))\n    copy(s, l)\n  \
    \  for i := 0; i < len(s) - 1; i++ {\n        for j := i + 1; j < len(s); j++\
    \ {\n            if s[i] > s[j] {\n                temp := s[i]\n            \
    \    s[i] = s[j]\n                s[j] = temp\n            }\n        }\n    }\n\
    \n    // Remove duplicates\n    var result []int\n    result = append(result,\
    \ s[0])\n    for i := 1; i < len(s); i++ {\n        if s[i] != s[i - 1] {\n  \
    \          result = append(result, s[i])\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    h := make(map[int]bool)\n    for _, i := range l {\n        h[i] = true\n\
    \    }\n    r := make([]int, len(h))\n    i := 0\n    for k, _ := range h {\n\
    \        r[i] = k\n        i++\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp7ser45yg_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n\
    \            if l[i] == l[j] {\n                l = append(l[:j], l[j+1:]...)\n\
    \                j--\n            }\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpxdkkh5t0_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    l = append(l[:0:0], l...) // copy the slice so we don't modify the original\n\
    \    if len(l) < 2 {\n        return l\n    }\n    for i := 0; i < len(l) - 1;\
    \ i++ {\n        for j := i + 1; j < len(l); j++ {\n            if l[i] == l[j]\
    \ {\n                l = append(l[:j], l[j+1:]...)\n                j--\n    \
    \        }\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmps_wsn0os_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var output []int\n    for _, v := range l {\n        found := false\n   \
    \     for _, o := range output {\n            if v == o {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            output = append(output, v)\n        }\n    }\n    return output\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpu11r39gg_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    d := make(map[int]bool)\n    for _, n := range l {\n        d[n] = true\n\
    \    }\n    nl := make([]int, 0, len(d))\n    for k, _ := range d {\n        nl\
    \ = append(nl, k)\n    }\n    return nl\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_88tb4fq_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 0
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var (\n        i   int\n        j   int\n        k   int\n        t   int\n\
    \        tmp int\n    )\n\n    for i = 0; i < len(l)-1; i++ {\n        for j =\
    \ i + 1; j < len(l); j++ {\n            if l[i] > l[j] {\n                tmp\
    \ = l[i]\n                l[i] = l[j]\n                l[j] = tmp\n          \
    \  }\n        }\n    }\n\n    for i = 0; i < len(l)-1; i++ {\n        if l[i]\
    \ == l[i+1] {\n            k = i\n            for k < len(l)-1 {\n           \
    \     t = l[k]\n                l[k] = l[k+1]\n                l[k+1] = t\n  \
    \              k++\n            }\n            l = l[:len(l)-1]\n            i--\n\
    \        }\n    }\n\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    r := []int{}\n    for _, x := range l {\n        for _, y := range r {\n\
    \            if x == y {\n                continue\n            }\n        }\n\
    \        r = append(r, x)\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp36jysj49_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    r := make([]int, 0)\n    for _, e := range l\
    \ {\n        if !m[e] {\n            m[e] = true\n            r = append(r, e)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmphawdhaqo_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var output []int\n    for _, v := range l {\n        found := false\n   \
    \     for _, v2 := range output {\n            if v == v2 {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            output = append(output, v)\n        }\n    }\n    return output\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpwxviu7fd_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var r []int\n    for _, i := range l {\n        if len(r) == 0 {\n      \
    \      r = append(r, i)\n        } else {\n            if i == r[len(r)-1] {\n\
    \                continue\n            } else {\n                r = append(r,\
    \ i)\n            }\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmplvnvy66h_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    result := []int{}\n    for _, v := range l {\n        if contains(result,\
    \ v) {\n            continue\n        }\n        result = append(result, v)\n\
    \    }\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo12fksvt_test.go:14:12: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    i := 0\n    for _, v := range l {\n        if l[i] != v {\n            i++\n\
    \            l[i] = v\n        }\n    }\n    return l[:i+1]\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp0te29qnh_test.go:35: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v :=\
    \ range l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpcu3fnnqi_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n    for _, e := range l {\n        if !contains(u, e) {\n  \
    \          u = append(u, e)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9m8isp1o_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074845
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n    for _, v := range l {\n        if !isIn(u, v) {\n      \
    \      u = append(u, v)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsjwpfe9f_test.go:14:13: undefined: isIn

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    r := make([]int, 0)\n    for _, e := range l\
    \ {\n        if _, exists := m[e]; !exists {\n            m[e] = true\n      \
    \      r = append(r, e)\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp5_esg66l_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    r := make([]int, 0, len(m))\n    for k, _ := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpl5lnr0xv_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    dict := make(map[int]bool)\n    res := make([]int, 0)\n    for _, num :=\
    \ range l {\n        if _, ok := dict[num]; !ok {\n            dict[num] = true\n\
    \            res = append(res, num)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp3wwdm4yj_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074913
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var uniq []int\n    for _, v := range l {\n        if !contains(uniq, v)\
    \ {\n            uniq = append(uniq, v)\n        }\n    }\n    return uniq\n}\n\
    \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplhvpzdlr_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074782
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    u := make([]int, 0)\n    for _, x := range l\
    \ {\n        if _, y := m[x]; !y {\n            m[x] = true\n            u = append(u,\
    \ x)\n        }\n    }\n    return u\n}\n\n//\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp3xk035bj_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var newl []int\n    for _, x := range l {\n        found := false\n     \
    \   for _, y := range newl {\n            if x == y {\n                found =\
    \ true\n                break\n            }\n        }\n        if !found {\n\
    \            newl = append(newl, x)\n        }\n    }\n    return newl\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp1fev55r5_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    r := []int{}\n    for _, v := range l {\n        r = insert(r, v)\n    }\n\
    \    return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjyg_dzsa_test.go:14:13: undefined: insert

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074913
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n\
    \            if l[i] == l[j] {\n                l = append(l[:j], l[j+1:]...)\n\
    \                j--\n            }\n        }\n    }\n    return l\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpxdkkh5t0_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    uniq := []int{}\n    for _, el := range l {\n\
    \        if _, ok := m[el]; !ok {\n            m[el] = true\n            uniq\
    \ = append(uniq, el)\n        }\n    }\n    return uniq\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp3c07mvzt_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := make([]int, 0)\n    unique_set := make(map[int]bool)\n    for _,\
    \ i := range l {\n        if _, ok := unique_set[i]; !ok {\n            unique\
    \ = append(unique, i)\n            unique_set[i] = true\n        }\n    }\n  \
    \  return unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp344eo3ka_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var n []int\n    for _, v := range l {\n        if len(n) == 0 {\n      \
    \      n = append(n, v)\n        } else {\n            for i, w := range n {\n\
    \                if v == w {\n                    break\n                }\n \
    \               if i == len(n)-1 {\n                    n = append(n, v)\n   \
    \             }\n            }\n        }\n    }\n    return n\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpo5h17i2s_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var result []int\n    for _, v := range l {\n        if !contains(result,\
    \ v) {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyh06qede_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    uniqueList := make([]int, 0, len(m))\n    for key := range m {\n \
    \       uniqueList = append(uniqueList, key)\n    }\n    return uniqueList\n}\n\
    \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpe9avzrpm_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    res := make([]int, 0, len(m))\n    for k := range m {\n        res\
    \ = append(res, k)\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpd4lwcx6t_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    u := make([]int, 0, len(l))\n\
    \    var prev int\n    for _, v := range l {\n        if prev != v {\n       \
    \     u = append(u, v)\n        }\n        prev = v\n    }\n    return u\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpsl8k3pl__test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    var result []int\n    for\
    \ _, n := range l {\n        for _, n2 := range result {\n            if n ==\
    \ n2 {\n                continue\n            }\n        }\n        result = append(result,\
    \ n)\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpsmdh7_bf_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    uniq := []int{}\n    for _, e := range l {\n        isUniq := true\n    \
    \    for _, u := range uniq {\n            if e == u {\n                isUniq\
    \ = false\n                break\n            }\n        }\n        if isUniq\
    \ {\n            uniq = append(uniq, e)\n        }\n    }\n    return uniq\n}\n\
    \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp4q9jp4l6_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074914
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // TODO implement this function\n\n    uniqueMap := make(map[int]bool)\n\
    \    for _, num := range l {\n        uniqueMap[num] = true\n    }\n\n    uniqueSlice\
    \ := make([]int, 0, len(uniqueMap))\n    for key := range uniqueMap {\n      \
    \  uniqueSlice = append(uniqueSlice, key)\n    }\n\n    return uniqueSlice\n}\n\
    \nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpzanpu8d8_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    uniq := make([]int, 0, len(m))\n    for k := range m {\n        uniq\
    \ = append(uniq, k)\n    }\n    return uniq\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpr3uf8ejh_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Your code here\n\n    return l\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_gc47opu_test.go:30: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    r := make([]int, 0, len(m))\n    for k, _ := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpl5lnr0xv_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var unique []int\n    for _, i := range l {\n        found := false\n   \
    \     for _, u := range unique {\n            if i == u {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            unique = append(unique, i)\n        }\n    }\n    return unique\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp9wr11lo5_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    u := make([]int, 0, len(m))\n    for k := range m {\n        u = append(u,\
    \ k)\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp3mv3myzc_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n    for _, elem := range l {\n        if !contains(u, elem)\
    \ {\n            u = append(u, elem)\n        }\n    }\n    return u\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpf82qmcwd_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    uniq := make([]int, 0, len(m))\n    for k := range m {\n        uniq\
    \ = append(uniq, k)\n    }\n    return uniq\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpr3uf8ejh_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    u := make([]int, 0, len(l))\n    m := make(map[int]bool)\n\n    for _, val\
    \ := range l {\n        if _, ok := m[val]; !ok {\n            m[val] = true\n\
    \            u = append(u, val)\n        }\n    }\n\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptuar5mkg_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    res := make([]int, 0)\n    for _, v := range l {\n        found := false\n\
    \        for _, r := range res {\n            if v == r {\n                found\
    \ = true\n                break\n            }\n        }\n        if !found {\n\
    \            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp61dsjvfr_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0)\n    for _, v := range l {\n        for _, sV := range\
    \ s {\n            if v == sV {\n                break\n            }\n      \
    \      s = append(s, v)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpgsbr5gya_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    ul := []int{}\n    for _, x := range l {\n        if len(ul) == 0 {\n   \
    \         ul = append(ul, x)\n        } else {\n            i := 0\n         \
    \   found := false\n            for ; i < len(ul); i++ {\n                if ul[i]\
    \ == x {\n                    found = true\n                    break\n      \
    \          }\n            }\n            if !found {\n                ul = append(ul,\
    \ x)\n            }\n        }\n    }\n    return ul\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpuhl8o_tm_test.go:46: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, num := range l {\n        m[num] = true\n\
    \    }\n    var unique []int\n    for k := range m {\n        unique = append(unique,\
    \ k)\n    }\n    return unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpyo2s0quc_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    sorted := make([]int, 0)\n    for _, v := range\
    \ l {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n            sorted\
    \ = append(sorted, v)\n        }\n    }\n    return sorted\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp3h378a2b_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Set\n    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpts5442es_test.go:13:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074914
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    r := make([]int, 0)\n    for _, n := range l\
    \ {\n        if !m[n] {\n            m[n] = true\n            r = append(r, n)\n\
    \        }\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp2oyl_hzu_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    ret := []int{}\n    seen := map[int]bool{}\n    for _, val := range l {\n\
    \        if _, ok := seen[val]; !ok {\n            ret = append(ret, val)\n  \
    \          seen[val] = true\n        }\n    }\n    return ret\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpavkhzfyg_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, e := range l {\n        m[e] = true\n\
    \    }\n    u := make([]int, 0, len(m))\n    for k := range m {\n        u = append(u,\
    \ k)\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp3wi6l429_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    res := make([]int, 0)\n    for _, item := range\
    \ l {\n        if _, ok := m[item]; !ok {\n            m[item] = true\n      \
    \      res = append(res, item)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptxh42wke_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074915
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0)\n    m := make(map[int]bool)\n    for _, k := range l\
    \ {\n        if _, ok := m[k]; !ok {\n            m[k] = true\n            s =\
    \ append(s, k)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpkvti15bo_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074916
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    result := make([]int, 0, len(m))\n    for k := range m {\n       \
    \ result = append(result, k)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpnc4kzgts_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    n := len(l)\n    if n == 0 {\n        return l\n    }\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, 0,\
    \ len(m))\n    for k := range m {\n        u = append(u, k)\n    }\n    return\
    \ u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpw1jp6bi3_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074916
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    var u []int\n    for _, i := range l {\n   \
    \     if _, ok := m[i]; !ok {\n            m[i] = true\n            u = append(u,\
    \ i)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp4en6l6vo_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074916
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    var result []int\n    for _, num := range\
    \ l {\n        if _, found := seen[num]; !found {\n            seen[num] = true\n\
    \            result = append(result, num)\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpy4vp9uum_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074916
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var (\n        seen map[int]bool\n        result []int\n    )\n    seen =\
    \ make(map[int]bool)\n    for _, value := range l {\n        if !seen[value] {\n\
    \            seen[value] = true\n            result = append(result, value)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpuyvltp27_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074916
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    //return nil\n    r := make([]int, 0)\n    for _, i := range l {\n      \
    \  if sliceContains(r, i) {\n            continue\n        }\n        r = append(r,\
    \ i)\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4t3gksns_test.go:15:12: undefined: sliceContains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074916
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    u := make([]int, 0, len(m))\n    for k := range m {\n        u = append(u,\
    \ k)\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate :=\
    \ unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp3mv3myzc_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, i := range l {\n        m[i] = true\n\
    \    }\n    var u []int\n    for i := range m {\n        u = append(u, i)\n  \
    \  }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpg8k7y2aq_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074916
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // TODO: implement\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpthuczgra_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\n\
    FAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    r := []int{}\n    for _, x := range l {\n        exists := false\n      \
    \  for _, y := range r {\n            if x == y {\n                exists = true\n\
    \                break\n            }\n        }\n        if !exists {\n     \
    \       r = append(r, x)\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpt_vuymj0_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074916
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Map of each element's count\n    m := make(map[int]int)\n    // Unique\
    \ elements\n    var u []int\n    for _, x := range l {\n        // Increment the\
    \ count\n        m[x]++\n        // Have we seen this element before?\n      \
    \  if m[x] == 1 {\n            // No, add it to the list\n            u = append(u,\
    \ x)\n        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmprg8gx_i9_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    res := make([]int, 0)\n    var prev int\n    for _, v := range l {\n    \
    \    if prev != v {\n            res = append(res, v)\n            prev = v\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp9da7znah_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0)\n    m := make(map[int]bool)\n    for _, i := range l\
    \ {\n        if _, ok := m[i]; !ok {\n            m[i] = true\n            s =\
    \ append(s, i)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpxw4fbbz7_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    r := make([]int, 0)\n    for _, v := range l\
    \ {\n        if _, ok := m[v]; !ok {\n            m[v] = true\n            r =\
    \ append(r, v)\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpl9hw22h3_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    unique := make([]int, 0, len(m))\n    for k := range m {\n       \
    \ unique = append(unique, k)\n    }\n    return unique\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpy841qvxy_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := []int{}\n    m := map[int]bool{}\n    for _, n := range l {\n \
    \       if _, exists := m[n]; !exists {\n            m[n] = true\n           \
    \ unique = append(unique, n)\n        }\n    }\n    return unique\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpg5509mpu_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n    m := make(map[int]bool)\n\
    \    for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, len(m))\n\
    \    for k, _ := range m {\n        u = append(u, k)\n    }\n    sort.Ints(u)\n\
    \    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3n9o17ol_test.go:23:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074917
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var r []int\n    for _, e := range l {\n        if !contains(r, e) {\n  \
    \          r = append(r, e)\n        }\n    }\n    return r\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmufo55cg_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := []int{}\n    m := map[int]bool{}\n    for _, v := range l {\n      \
    \  if _, exists := m[v]; !exists {\n            m[v] = true\n            s = append(s,\
    \ v)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t *testing.T) {\n \
    \ candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpghoml_y1_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var u []int\n\n    for _, v := range l {\n        if !contains(u, v) {\n\
    \            u = append(u, v)\n        }\n    }\n\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpaffza96t_test.go:15:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    return nil\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpq70l04vn_test.go:28: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    uniqueSlice := make([]int, 0)\n    uniqueMap := make(map[int]int)\n    for\
    \ _, e := range l {\n        if _, ok := uniqueMap[e]; !ok {\n            uniqueMap[e]\
    \ = 1\n            uniqueSlice = append(uniqueSlice, e)\n        }\n    }\n  \
    \  return uniqueSlice\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpvk622v4y_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0)\n    m := make(map[int]bool)\n    for _, v := range l\
    \ {\n        _, found := m[v]\n        if !found {\n            m[v] = true\n\
    \            s = append(s, v)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpnjtm_7fo_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Todo: Replace this, implement the function\n    return []int{}\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpkxakhinc_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074918
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    // Some sort of unique algorithm\n\
    \    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp1u_heshp_test.go:32: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074918
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // TODO\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpdnzz5ml2_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074918
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    u := make([]int, 0)\n    for _, n := range l\
    \ {\n        if !m[n] {\n            m[n] = true\n            u = append(u, n)\n\
    \        }\n    }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpy29fp4ty_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    return nil\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpq70l04vn_test.go:28: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074917
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, n := range l {\n        m[n] = true\n\
    \    }\n    var result []int\n    for k := range m {\n        result = append(result,\
    \ k)\n    }\n    return result\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpi5hoxdig_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // 0) Prepare an empty dictionary\n    d := make(map[int]bool)\n    // 1)\
    \ Loop through the list\n    for _, e := range l {\n        // 1.1) Add items\
    \ to the dictionary\n        d[e] = true\n    }\n    // 2) Convert the dictionary\
    \ to list\n    // >>> unique([]int{5, 3, 5, 2, 3, 3, 9, 0, 123})\n    // []int{0,\
    \ 2, 3, 5, 9, 123}\n    result := make([]int, 0, len(d))\n    for k, _ := range\
    \ d {\n        result = append(result, k)\n    }\n    return result\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpyhppub36_test.go:42: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, n := range l {\n        m[n] = true\n\
    \    }\n    nl := make([]int, len(m))\n    i := 0\n    for k, _ := range m {\n\
    \        nl[i] = k\n        i++\n    }\n    return nl\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmplw47uwna_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, x := range l {\n        m[x] = true\n\
    \    }\n    unique := make([]int, 0, len(m))\n    for k := range m {\n       \
    \ unique = append(unique, k)\n    }\n    return unique\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpezelmz2i_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    return l\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpzx3_lvwl_test.go:28: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // TODO\n    return []int{}\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpdnzz5ml2_test.go:29: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074918
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, x := range l {\n        m[x] = true\n\
    \    }\n    n := make([]int, len(m))\n    i := 0\n    for k := range m {\n   \
    \     n[i] = k\n        i++\n    }\n    return n\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpd9nfmdve_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var found = make(map[int]bool)\n    var unique = make([]int, 0)\n    for\
    \ _, v := range l {\n        if _, ok := found[v]; !ok {\n            found[v]\
    \ = true\n            unique = append(unique, v)\n        }\n    }\n    return\
    \ unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp2xhxyze3_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, x := range l {\n        m[x] = true\n\
    \    }\n    var r []int\n    for k, _ := range m {\n        r = append(r, k)\n\
    \    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmponypxgoi_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0)\
    \ %!s(int=123) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var ul []int\n    var set = make(map[int]bool)\n    for _, v := range l {\n\
    \        if _, ok := set[v]; !ok {\n            set[v] = true\n            ul\
    \ = append(ul, v)\n        }\n    }\n    return ul\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_9bpveww_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    var r = make([]int, 0, len(l))\n\
    \    var last = l[0]\n    r = append(r, last)\n    for _, el := range l[1:] {\n\
    \        if el != last {\n            r = append(r, el)\n            last = el\n\
    \        }\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp3nqr47zv_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    unique := []int{}\n    for _, i := range\
    \ l {\n        if _, ok := seen[i]; !ok {\n            seen[i] = true\n      \
    \      unique = append(unique, i)\n        }\n    }\n    return unique\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp_8yjx4jy_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    res := []int{}\n    var last int\n    var flag bool\n    for _, v := range\
    \ l {\n        flag = true\n        for _, v2 := range res {\n            if v\
    \ == v2 {\n                flag = false\n                break\n            }\n\
    \        }\n        if flag {\n            res = append(res, v)\n        }\n \
    \   }\n    for i := 0; i < len(res)-1; i++ {\n        for j := i + 1; j < len(res);\
    \ j++ {\n            if res[i] > res[j] {\n                last = res[i]\n   \
    \             res[i] = res[j]\n                res[j] = last\n            }\n\
    \        }\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := make([]int, 0)\n    for _, v := range l {\n        // Loop over\
    \ unique elements\n        for i, u := range unique {\n            if v == u {\n\
    \                // Found equal elements, skip further actions\n             \
    \   break\n            }\n            if i == len(unique) - 1 {\n            \
    \    // No more elements, add to unique\n                unique = append(unique,\
    \ v)\n            }\n        }\n        if len(unique) == 0 {\n            //\
    \ List is empty, add to unique\n            unique = append(unique, v)\n     \
    \   }\n    }\n    return unique\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate\
    \ := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpoqjc0l91_test.go:46: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    var res []int\n    for k := range m {\n        res = append(res, k)\n\
    \    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppl3aqsj6_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    seen := make(map[int]bool)\n    result := make([]int, 0)\n    for _, v :=\
    \ range l {\n        if seen[v] {\n            continue\n        }\n        seen[v]\
    \ = true\n        result = append(result, v)\n    }\n    return result\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpcu3fnnqi_test.go:37: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074912
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    keys := make(map[int]bool)\n    var list []int\n    for _, entry := range\
    \ l {\n        if _, value := keys[entry]; !value {\n            keys[entry] =\
    \ true\n            list = append(list, entry)\n        }\n    }\n    return list\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpw_sdcd_c_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074920
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, n := range l {\n        m[n] = true\n\
    \    }\n    result := make([]int, 0, len(m))\n    for n, _ := range m {\n    \
    \    result = append(result, n)\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpqus_3wcg_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074920
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    keys := make(map[int]bool)\n    list := []int{}\n    for _, entry := range\
    \ l {\n        if _, value := keys[entry]; !value {\n            keys[entry] =\
    \ true\n            list = append(list, entry)\n        }\n    }\n    return list\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp5817a07q_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074920
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return []int{}\n    }\n    sort(l)\n    result\
    \ := []int{l[0]}\n    for i := 1; i < len(l); i++ {\n        if l[i] != l[i-1]\
    \ {\n            result = append(result, l[i])\n        }\n    }\n    return result\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplvouadyf_test.go:15:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) == 0 {\n        return l\n    }\n    m := make(map[int]\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1fl50ypr_test.go:15:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    u := make([]int, 0, len(l))\n    for _, v := range l {\n        if len(u)\
    \ == 0 {\n            u = append(u, v)\n        } else {\n            for _, v2\
    \ := range u {\n                if v == v2 {\n                    break\n    \
    \            }\n                if v != v2 && v2 == u[len(u)-1] {\n          \
    \          u = append(u, v)\n                }\n            }\n        }\n   \
    \ }\n    return u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp2ayz3x89_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074920
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := []int{}\n    seen := map[int]bool{}\n    for _, i := range l {\n\
    \        if !seen[i] {\n            unique = append(unique, i)\n            seen[i]\
    \ = true\n        }\n    }\n    return unique\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptx97noa7_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074920
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, x := range l {\n        m[x] = true\n\
    \    }\n    var r []int\n    for x := range m {\n        r = append(r, x)\n  \
    \  }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp95u1d778_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=0) %!s(int=123) %!s(int=5) %!s(int=3)\
    \ %!s(int=2) %!s(int=9)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074920
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // Insertion sort with a twist, since we only need to append to the\n   \
    \ // returned list if we haven't already seen the element before, we\n    // can\
    \ just keep track of what we have already seen.\n    sorted := make([]int, 0,\
    \ len(l))\n    seen := make(map[int]bool)\n    for _, elem := range l {\n    \
    \    _, exists := seen[elem]\n        if !exists {\n            seen[elem] = true\n\
    \            sorted = append(sorted, elem)\n        }\n    }\n    return sorted\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpnaodpck5_test.go:40: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    ret := []int{}\n    for _, e := range l {\n        if !contains(ret, e) {\n\
    \            ret = append(ret, e)\n        }\n    }\n    return ret\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphj4ko9qp_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, i := range l {\n        m[i] = true\n\
    \    }\n    r := make([]int, len(m))\n    i := 0\n    for k := range m {\n   \
    \     r[i] = k\n        i++\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpociyy04o_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)\
    \ %!s(int=5) %!s(int=3)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074781
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var ul []int\n    for _, v := range l {\n        contains := false\n    \
    \    for _, v2 := range ul {\n            if v == v2 {\n                contains\
    \ = true\n                break\n            }\n        }\n        if !contains\
    \ {\n            ul = append(ul, v)\n        }\n    }\n    return ul\n}\n\nfunc\
    \ TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmplwzac44v_test.go:41: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0)\n    for _, x := range l {\n        if len(s) == 0 {\n\
    \            s = append(s, x)\n        } else {\n            for _, y := range\
    \ s {\n                if x == y {\n                    break\n              \
    \  }\n                if x > y {\n                    continue\n             \
    \   }\n                s = append(s, x)\n            }\n        }\n    }\n   \
    \ return s\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptu3atvqq_test.go:44: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=2)\
    \ %!s(int=3) %!s(int=3) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0) %!s(int=0)\
    \ %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) < 2 {\n        return l\n    }\n    m := make(map[int]bool)\n \
    \   for _, v := range l {\n        m[v] = true\n    }\n    u := make([]int, 0,\
    \ len(m))\n    for k := range m {\n        u = append(u, k)\n    }\n    return\
    \ u\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmprgzm1o57_test.go:39: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    uniq := make([]int, 0)\n    for _, i := range l {\n        if !contains(uniq,\
    \ i) {\n            uniq = append(uniq, i)\n        }\n    }\n    return uniq\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcntu1irh_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    if len(l) < 2 {\n        return l\n    }\n    for i := 1; i < len(l); i++\
    \ {\n        for j := i - 1; j >= 0; j-- {\n            if l[i] > l[j] {\n   \
    \             break\n            }\n            if l[i] == l[j] {\n          \
    \      l = append(l[:i], l[i+1:]...)\n                i--\n                break\n\
    \            }\n        }\n    }\n    return l\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpspbyego2_test.go:43: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=5) %!s(int=2)\
    \ %!s(int=3) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    s := make([]int, 0)\n    for _, e := range l {\n        if !inSlice(e, s)\
    \ {\n            s = append(s, e)\n        }\n    }\n    return s\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpybn0r7_9_test.go:14:13: undefined: inSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    var res []int\n    for _, val := range l {\n\
    \        if !m[val] {\n            m[val] = true\n            res = append(res,\
    \ val)\n        }\n    }\n    return res\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpbqsuniet_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    newList := []int{}\n    for _, elem := range l {\n        if !intInSlice(elem,\
    \ newList) {\n            newList = append(newList, elem)\n        }\n    }\n\
    \    return newList\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4qp9a8_r_test.go:14:13: undefined: intInSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    result := make([]int, 0)\n    for _, x := range\
    \ l {\n        if _, ok := m[x]; !ok {\n            m[x] = true\n            result\
    \ = append(result, x)\n        }\n    }\n    return result\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpbn0sxzxw_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    unique := make([]int, 0)\n    m := make(map[int]bool)\n    for _, v := range\
    \ l {\n        if !m[v] {\n            m[v] = true\n            unique = append(unique,\
    \ v)\n        }\n    }\n    return unique\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmppep4upxf_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var ul []int\n    for _, v := range l {\n        for _, uv := range ul {\n\
    \            if v == uv {\n                goto next\n            }\n        }\n\
    \        ul = append(ul, v)\n        next:\n    }\n    return ul\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmp8_iowuxu_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    u := make([]int, 0, len(l))\n    m := make(map[int]bool)\n\n    for _, val\
    \ := range l {\n        if _, ok := m[val]; !ok {\n            m[val] = true\n\
    \            u = append(u, val)\n        }\n    }\n\n    return u\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmptuar5mkg_test.go:38: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074909
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, x := range l {\n        m[x] = true\n\
    \    }\n    r := make([]int, 0, len(m))\n    for k, _ := range m {\n        r\
    \ = append(r, k)\n    }\n    return r\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpd168cxfx_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=123) %!s(int=5) %!s(int=3) %!s(int=2)\
    \ %!s(int=9) %!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    uniq := []int{}\n    seen := map[int]bool{}\n    for _, n := range l {\n\
    \        if _, ok := seen[n]; !ok {\n            uniq = append(uniq, n)\n    \
    \        seen[n] = true\n        }\n    }\n    return uniq\n}\n\nfunc TestUnique(t\
    \ *testing.T) {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpxcgbfsbp_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]bool)\n    for _, v := range l {\n        m[v] = true\n\
    \    }\n    uniq := make([]int, 0, len(m))\n    for i := range m {\n        uniq\
    \ = append(uniq, i)\n    }\n    return uniq\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpqcjdwgwh_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=9) %!s(int=0) %!s(int=123) %!s(int=5)\
    \ %!s(int=3) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    // O(n) time, O(n) space\n    m := make(map[int]\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwvigx60f_test.go:13:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    newlist := []int{}\n    for _, v := range l {\n        if !inSlice(v, newlist)\
    \ {\n            newlist = append(newlist, v)\n        }\n    }\n    return newlist\n\
    }\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsf6n9676_test.go:14:13: undefined: inSlice

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    fmt.Println(\"Unique\", l)\n    m := make(map[int]bool)\n    n := make([]int,\
    \ 0)\n    for _, v := range l {\n        if m[v] == false {\n            m[v]\
    \ = true\n            n = append(n, v)\n        }\n    }\n    return n\n}\n\n\
    func TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0,\
    \ 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "Unique [5 3 5 2 3 3 9 0 123]\n--- FAIL: TestUnique (0.00s)\n    --- FAIL:\
    \ TestUnique/test_num__0 (0.00s)\n        tmpdwf67fxe_test.go:37: expected '[%!s(int=0)\
    \ %!s(int=2) %!s(int=3) %!s(int=5) %!s(int=9) %!s(int=123)]', got '[%!s(int=5)\
    \ %!s(int=3) %!s(int=2) %!s(int=9) %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    m := make(map[int]\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpib_ndw7g_test.go:12:23: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074844
- exit_code: 2
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var uniq []int\n    for _, elem := range l {\n        if !contains(uniq,\
    \ elem) {\n            uniq = append(uniq, elem)\n        }\n    }\n    return\
    \ uniq\n}\n\nfunc TestUnique(t *testing.T) {\n  candidate := unique\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]int{5, 3, 5, 2, 3, 3, 9, 0, 123}), expected:\
    \ []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsbl8wsys_test.go:14:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074921
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    var nl []int\n    m := make(map[int]bool)\n    for _, v := range l {\n  \
    \      if _, ok := m[v]; !ok {\n            m[v] = true\n            nl = append(nl,\
    \ v)\n        }\n    }\n    return nl\n}\n\nfunc TestUnique(t *testing.T) {\n\
    \  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpi98q60c8_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    xs := make([]int, 0)\n    ys := make(map[int]bool)\n    for _, x := range\
    \ l {\n        if !ys[x] {\n            xs = append(xs, x)\n            ys[x]\
    \ = true\n        }\n    }\n    return xs\n}\n\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestUnique (0.00s)\n    --- FAIL: TestUnique/test_num__0 (0.00s)\n\
    \        tmpiabs9qxa_test.go:36: expected '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=5)\
    \ %!s(int=9) %!s(int=123)]', got '[%!s(int=5) %!s(int=3) %!s(int=2) %!s(int=9)\
    \ %!s(int=0) %!s(int=123)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074922
- exit_code: 1
  program: "package unique_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
    \ Return sorted unique elements in a list\n// >>> unique([]int{5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123})\n// []int{0, 2, 3, 5, 9, 123}\nfunc unique(l []int) []int {\n\
    \    uniq := make([]int, 0)\n    u := map[int]\nfunc TestUnique(t *testing.T)\
    \ {\n  candidate := unique\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), expected: []int{0, 2, 3, 5, 9, 123} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmphfr82jds_test.go:13:18: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074921
