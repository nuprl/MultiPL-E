name: HumanEval_153_Strongest_Extension
language: go_test.go
prompt: "package Strongest_Extension_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// You will be given the name of a class (a string) and a list of extensions.\n\
  // The extensions are to be used to load additional classes to the class. The\n\
  // strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  // letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n// You should find the strongest extension and return a string in this \n//\
  \ format: ClassName.StrongestExtensionName.\n// If there are two or more extensions\
  \ with the same strength, you should\n// choose the one that comes first in the\
  \ list.\n// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n//\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension(\"my_class\"\
  , []string{\"AA\", \"Be\", \"CC\"})\n// \"my_class.AA\"\nfunc Strongest_Extension(class_name\
  \ string, extensions []string) string {\n"
tests: "func TestStrongest_Extension(t *testing.T) {\n  candidate := Strongest_Extension\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(\"Watashi\", []string{\"tEN\", \"\
  niNE\", \"eIGHt8OKe\"}), expected: \"Watashi.eIGHt8OKe\" },\n     { actual: candidate(\"\
  Boku123\", []string{\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"}), expected:\
  \ \"Boku123.YEs.WeCaNe\" },\n     { actual: candidate(\"__YESIMHERE\", []string{\"\
  t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"}), expected:\
  \ \"__YESIMHERE.NuLl__\" },\n     { actual: candidate(\"K\", []string{\"Ta\", \"\
  TAR\", \"t234An\", \"cosSo\"}), expected: \"K.TAR\" },\n     { actual: candidate(\"\
  __HAHA\", []string{\"Tab\", \"123\", \"781345\", \"-_-\"}), expected: \"__HAHA.123\"\
  \ },\n     { actual: candidate(\"YameRore\", []string{\"HhAas\", \"okIWILL123\"\
  , \"WorkOut\", \"Fails\", \"-_-\"}), expected: \"YameRore.okIWILL123\" },\n    \
  \ { actual: candidate(\"finNNalLLly\", []string{\"Die\", \"NowW\", \"Wow\", \"WoW\"\
  }), expected: \"finNNalLLly.WoW\" },\n     { actual: candidate(\"_\", []string{\"\
  Bb\", \"91245\"}), expected: \"_.Bb\" },\n     { actual: candidate(\"Sp\", []string{\"\
  671235\", \"Bb\"}), expected: \"Sp.671235\" },\n   }\n\n\tfor i, tc := range tests\
  \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif\
  \ fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\t\
  t.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    var strongest string\n    var strongest_strength float64\n    for\
    \ _, extension := range extensions {\n        extension_strength := calculate_strength(extension)\n\
    \        if extension_strength > strongest_strength {\n            strongest =\
    \ extension\n            strongest_strength = extension_strength\n        }\n\
    \    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest)\n}\n", "    //\
    \ Your code here\n    return \"\"\n}\n", "    // your code here\n    return \"\
    \"\n}\n", "    var current_strength float64\n    var strongest_strength float64\n\
    \    var strongest_extension string\n    for _, extension := range extensions\
    \ {\n        current_strength = extension_strength(extension)\n        if current_strength\
    \ > strongest_strength {\n            strongest_strength = current_strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"\
    %s.%s\", class_name, extensions[0])\n}\n", "  // your code here\n  return \"\"\
    \n}\n", "    // your code here\n    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    return class_name\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    // YOUR CODE HERE\n    return \"\"\n}\n", "    var\
    \ strongest string\n    max := 0.0\n    for _, x := range extensions {\n     \
    \   c := float64(len(x))\n        u := 0\n        for _, char := range x {\n \
    \           if (char >= 'A' && char <= 'Z') {\n                u++\n         \
    \   }\n        }\n        strength := float64(u) / c\n        if strength > max\
    \ {\n            max = strength\n            strongest = x\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, strongest)\n}\n", "    // your\
    \ code here\n    return \"my_class.AA\"\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    //Your code goes here\n    return \"\"\n}\n", "    // Your\
    \ code goes here\n    return \"my_class.AA\"\n}\n", "    // Write your code here\n\
    \    return \"\"\n}\n", "    // var strongest_extension string\n    strongest_extension\
    \ := \"\"\n    strongest_strength := -1.0\n    for _, extension := range extensions\
    \ {\n        strength := float64(num_uppercase(extension)) - float64(num_lowercase(extension))\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n", "   \
    \ // YOUR CODE HERE\n    return \"my_class.AA\"\n}\n", "    if len(extensions)\
    \ == 0 {\n        return class_name\n    }\n    max_ext := extensions[0]\n   \
    \ max_str := strength(max_ext)\n    for _, ext := range extensions[1:] {\n   \
    \     str := strength(ext)\n        if str > max_str {\n            max_ext =\
    \ ext\n            max_str = str\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, max_ext)\n}\n", "    // your code here\n    if len(extensions)\
    \ == 0 {\n        return class_name\n    }\n    var strongest float64 = 0\n  \
    \  var index int = 0\n    for i, val := range extensions {\n        var strength\
    \ float64 = 0\n        for _, v := range val {\n            if v >= 'A' && v <=\
    \ 'Z' {\n                strength++\n            } else if v >= 'a' && v <= 'z'\
    \ {\n                strength--\n            }\n        }\n        if i == 0 {\n\
    \            strongest = strength\n            index = i\n        } else if strongest\
    \ < strength {\n            strongest = strength\n            index = i\n    \
    \    }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, extensions[index])\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    // Write your code here\n\
    \    return \"\"\n}\n", "    var strongest string\n    var strongest_strength\
    \ float64\n    for _, extension := range extensions {\n        upper := 0\n  \
    \      lower := 0\n        for _, r := range extension {\n            if r >=\
    \ 'A' && r <= 'Z' {\n                upper += 1\n            } else if r >= 'a'\
    \ && r <= 'z' {\n                lower += 1\n            }\n        }\n      \
    \  strength := float64(upper) - float64(lower)\n        if strength > strongest_strength\
    \ {\n            strongest = extension\n            strongest_strength = strength\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest)\n\
    }\n", "\t// your code here\n    if len(extensions) == 0 {\n        return class_name\n\
    \    }\n    var class_extension = extensions[0]\n    var strongest = get_strength(class_extension)\n\
    \    for i:=1; i<len(extensions); i++ {\n        if strongest < get_strength(extensions[i])\
    \ {\n            strongest = get_strength(extensions[i])\n            class_extension\
    \ = extensions[i]\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ class_extension)\n}\n", "    // your code here\n    var class string = class_name\
    \ + \".\"\n    var strongest_extension string = extensions[0]\n    var strongest_extension_strength\
    \ float64 = ((float64)(strings.Count(strongest_extension, strings.ToUpper(strongest_extension)))\
    \ - (float64)(strings.Count(strongest_extension, strings.ToLower(strongest_extension))))\n\
    \    for i := 1; i < len(extensions); i++ {\n        var curr_extension string\
    \ = extensions[i]\n        var curr_extension_strength float64 = ((float64)(strings.Count(curr_extension,\
    \ strings.ToUpper(curr_extension))) - (float64)(strings.Count(curr_extension,\
    \ strings.ToLower(curr_extension))))\n        if curr_extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension = curr_extension\n            strongest_extension_strength\
    \ = curr_extension_strength\n        }\n    }\n    return class + strongest_extension\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    // Your code here\n\
    \    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ \"\")\n}\n", "    // Your code goes here\n    return \"\"\n}\n", "    var strongest\
    \ string\n    var strongest_strength float64\n    for _, extension := range extensions\
    \ {\n        current_strength := calculate_strength(extension)\n        if current_strength\
    \ > strongest_strength {\n            strongest = extension\n            strongest_strength\
    \ = current_strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest)\n}\n", "\tvar ratio float64 = 0\n\tvar strongest_ext string\n\t//\
    \ TODO\n\tfor _, ext := range extensions {\n\t\tif strength := ext_strength(ext);\
    \ strength > ratio {\n\t\t\tratio = strength\n\t\t\tstrongest_ext = ext\n\t\t\
    }\n\t}\n\treturn fmt.Sprintf(\"%s.%s\", class_name, strongest_ext)\n}\n", "  \
    \  // Your code here\n    return \"\"\n}\n", "\t// your code here\n    return\
    \ \"my_class.AA\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    //\
    \ your code here\n    return \"class_name.AA\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    // your code\n    return \"\"\n}\n", "\t// your code\
    \ goes here\n    strongest := \"\"\n    strength := 0.0\n    for _, extension\
    \ := range extensions {\n        strength_extension := float64(count_upper(extension))\
    \ - float64(count_lower(extension))\n        if strength_extension > strength\
    \ {\n            strength = strength_extension\n            strongest = extension\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest)\n\
    }\n", "    // Your code here\n    return \"\"\n}\n", "    if len(extensions) ==\
    \ 0 {\n        return class_name\n    }\n    strongest := extensions[0]\n    strength\
    \ := -1\n    for _, extension := range extensions {\n        s := CAP_minus_SM(extension)\n\
    \        if s > strength {\n            strength = s\n            strongest =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest)\n\
    }\n", "    // your code here\n    fmt.Println(\"Hello world!\")\n    return \"\
    \"\n}\n", "  // your code here\n  return \"\"\n}\n", "    // your code\n    return\
    \ \"my_class.AA\"\n}\n", "    var strength float64\n    var strongest string\n\
    \    var current_strength float64\n    var cap, sm int\n    for _, ext := range\
    \ extensions {\n        cap = 0\n        sm = 0\n        for _, c := range ext\
    \ {\n            if c >= 'A' && c <= 'Z' {\n                cap++\n          \
    \  } else if c >= 'a' && c <= 'z' {\n                sm++\n            }\n   \
    \     }\n        current_strength = float64(cap) - float64(sm)\n        if current_strength\
    \ > strength {\n            strength = current_strength\n            strongest\
    \ = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest)\n\
    }\n", "\tstrength := -1\n\tstrongest_name := \"\"\n\tfor _, ext := range extensions\
    \ {\n\t\tlowers := 0\n\t\tuppers := 0\n\t\t//loop through string and compare rune\
    \ to lower and upper cases.\n\t\tfor _, char := range ext {\n\t\t\tif char >=\
    \ 'a' && char <= 'z' {\n\t\t\t\tlowers += 1\n\t\t\t} else if char >= 'A' && char\
    \ <= 'Z' {\n\t\t\t\tuppers += 1\n\t\t\t}\n\t\t}\n\t\tif lowers > 0 {\n\t\t\text_strength\
    \ := float64(uppers) / float64(lowers)\n\t\t\tif ext_strength > strength {\n\t\
    \t\t\tstrength = ext_strength\n\t\t\t\tstrongest_name = ext\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn fmt.Sprintf(\"%s.%s\", class_name, strongest_name)\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    var max float64 = -1\n    var ret\
    \ string = class_name\n    var num int = len(extensions)\n    var tmp float64\n\
    \    var i int\n    for i = 0; i < num; i++ {\n        tmp = float64(get_cap(extensions[i]))\
    \ - float64(get_sm(extensions[i]))\n        if tmp > max {\n            max =\
    \ tmp\n            ret = fmt.Sprintf(\"%s.%s\", class_name, extensions[i])\n \
    \       }\n    }\n    return ret\n}\n", "    // your code\n    return \"\"\n}\n",
  "    var strongest_extension_name string\n    var strongest_extension_strength float64\n\
    \    var extension_name string\n    var extension_strength float64\n    var upper_letters_count\
    \ int\n    var lower_letters_count int\n    var strength float64\n    var i int\n\
    \    var extension string\n    var letter byte\n    var letter_count int\n   \
    \ var upper_string string\n    var lower_string string\n    var class_name_with_extension\
    \ string\n    var upper_class_name string\n    var upper_class_name_count int\n\
    \    var lower_class_name string\n    var lower_class_name_count int\n    var\
    \ class_strength float64\n    var upper_class_count int\n    var lower_class_count\
    \ int\n    for i, extension = range extensions {\n        upper_letters_count\
    \ = 0\n        lower_letters_count = 0\n        strength = 0.0\n        for _,\
    \ letter = range extension {\n            if letter >= 'A' && letter <= 'Z' {\n\
    \                upper_letters_count += 1\n            } else if letter >= 'a'\
    \ && letter <= 'z' {\n                lower_letters_count += 1\n            }\n\
    \        }\n        if lower_letters_count == 0 {\n            lower_letters_count\
    \ = 1\n        }\n        strength = float64(upper_letters_count) / float64(lower_letters_count)\n\
    \        if i == 0 {\n            strongest_extension_name = extension\n     \
    \       strongest_extension_strength = strength\n        } else if strength >\
    \ strongest_extension_strength {\n            strongest_extension_name = extension\n\
    \            strongest_extension_strength = strength\n        }\n    }\n    upper_class_name\
    \ = \"\"\n    lower_class_name = \"\"\n    for _, letter = range class_name {\n\
    \        if letter >= 'A' && letter <= 'Z' {\n            upper_class_name +=\
    \ string(letter)\n        } else if letter >= 'a' && letter <= 'z' {\n       \
    \     lower_class_name += string(letter)\n        }\n    }\n    upper_class_name_count\
    \ = len(upper_class_name)\n    lower_class_name_count = len(lower_", "    var\
    \ strongest_extension string\n    strongest_strength := 0\n    for _, extension\
    \ := range extensions {\n        if strongest_strength < cap(extension) - len(extension)\
    \ {\n            strongest_strength = cap(extension) - len(extension)\n      \
    \      strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n", "    // your code here\n    strength\
    \ := 0\n    strong_extension := \"\"\n    for _, val := range extensions {\n \
    \       count_upper, count_lower := 0, 0\n        for _, ch := range val {\n \
    \           if 'A' <= ch && ch <= 'Z' {\n                count_upper += 1\n  \
    \          } else if 'a' <= ch && ch <= 'z' {\n                count_lower +=\
    \ 1\n            }\n        }\n        if count_upper-count_lower > strength {\n\
    \            strength = count_upper-count_lower\n            strong_extension\
    \ = val\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strong_extension)\n\
    }\n", "    var res string = class_name\n    var max_cap, max_sm, cap, sm, strength\
    \ int = 0, 0, 0, 0, 0\n    for _, v := range extensions {\n        cap, sm = 0,\
    \ 0\n        for _, i := range v {\n            if i >= 'A' && i <= 'Z' {\n  \
    \              cap++\n            } else if i >= 'a' && i <= 'z' {\n         \
    \       sm++\n            }\n        }\n        strength = cap - sm\n        if\
    \ strength > max_cap - max_sm {\n            max_cap, max_sm = cap, sm\n     \
    \       res = res + \".\" + v\n        }\n    }\n    return res\n}\n", "    return\
    \ \"\"\n}\n", "    var strength_list [][]float64\n    var pos, num float64\n \
    \   for _, extension := range extensions {\n        pos, num = 0, 0\n        for\
    \ _, s := range extension {\n            if s >= 'A' && s <= 'Z' {\n         \
    \       pos++\n            } else {\n                num++\n            }\n  \
    \      }\n        strength_list = append(strength_list, []float64{pos - num, pos,\
    \ num})\n    }\n    index := 0\n    for i, s := range strength_list {\n      \
    \  if s[0] > strength_list[index][0] {\n            index = i\n        } else\
    \ if s[0] == strength_list[index][0] {\n            if s[1] > strength_list[index][1]\
    \ {\n                index = i\n            } else if s[1] == strength_list[index][1]\
    \ {\n                if s[2] < strength_list[index][2] {\n                   \
    \ index = i\n                }\n            }\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, extensions[index])\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    var strongest int\n    var strongest_extension string\n   \
    \ for _, e := range extensions {\n        if strength := len(e) - (len(e) - strings.Count(e,\
    \ \"[A-Z]\")); strength > strongest {\n            strongest = strength\n    \
    \        strongest_extension = e\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n", "    strongest_extension := \"\
    \"\n    strongest_strength := 0.0\n    for _, extension := range extensions {\n\
    \        strength := 0.0\n        for _, rune_val := range extension {\n     \
    \       if rune_val >= 'A' && rune_val <= 'Z' {\n                strength += 1.0\n\
    \            } else if rune_val >= 'a' && rune_val <= 'z' {\n                strength\
    \ -= 1.0\n            }\n        }\n        if strongest_strength < strength {\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n        }\n    }\n    if strongest_extension == \"\" {\n        return\
    \ class_name\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    var\
    \ strongest_extension, max_strength string\n    for _, extension := range extensions\
    \ {\n        var strength = fmt.Sprintf(\"%d\", strength(extension))\n       \
    \ if strength > max_strength {\n            max_strength = strength\n        \
    \    strongest_extension = extension\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension\n}\n", "    // Your code here\n    var strongest_name\
    \ string\n    strongest_strength := 0\n    for _, extension := range extensions\
    \ {\n        capital_count := 0\n        lower_count := 0\n        for _, char\
    \ := range extension {\n            if char >= 'A' && char <= 'Z' {\n        \
    \        capital_count++\n            } else if char >= 'a' && char <= 'z' {\n\
    \                lower_count++\n            }\n        }\n        strength :=\
    \ capital_count - lower_count\n        if strength > strongest_strength {\n  \
    \          strongest_strength = strength\n            strongest_name = extension\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_name)\n\
    }\n", "    // your code here\n    if len(extensions) <= 0 {\n    \treturn fmt.Sprintf(\"\
    %s.None\", class_name)\n    }\n    var max int = -1\n    var flag int = 0\n  \
    \  for index, ext := range extensions {\n    \tcap := 0\n    \tsm := 0\n    \t\
    for _, letter := range ext {\n    \t\tif letter >= 'A' && letter <= 'Z' {\n  \
    \  \t\t\tcap += 1\n    \t\t} else if letter >= 'a' && letter <= 'z' {\n    \t\t\
    \tsm += 1\n    \t\t}\n    \t}\n    \tif cap - sm > max {\n    \t\tmax = cap -\
    \ sm\n    \t\tflag = index\n    \t}\n    }\n    return fmt.Sprintf(\"%s.%s\",\
    \ class_name, extensions[flag])\n}\n", "    strongest_extension_name := \"\"\n\
    \    strongest_extension_strength := 0.0\n    for _, extension := range extensions\
    \ {\n        strength := float64(len(extension))\n        for _, c := range extension\
    \ {\n            if c >= 'A' && c <= 'Z' {\n                strength -= 1.0\n\
    \            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_name = extension\n            strongest_extension_strength\
    \ = strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension_name)\n}\n", "    // your code here\n    return \"\"\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    // Your code here\n    var (\n\
    \        total_upper, total_lower int\n        strongest_name, strongest_ext string\n\
    \        strength_ext int\n    )\n    for i := 0; i < len(extensions); i++ {\n\
    \        total_upper = 0\n        total_lower = 0\n        for j := 0; j < len(extensions[i]);\
    \ j++ {\n            if extensions[i][j] >= 'A' && extensions[i][j] <= 'Z' {\n\
    \                total_upper++\n            } else {\n                total_lower++\n\
    \            }\n        }\n        if strongest_name == \"\" {\n            strongest_name\
    \ = extensions[i]\n            strength_ext = total_upper - total_lower\n    \
    \    } else {\n            if total_upper - total_lower > strength_ext {\n   \
    \             strongest_name = extensions[i]\n                strength_ext = total_upper\
    \ - total_lower\n            }\n        }\n    }\n    strongest_ext = fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_name)\n    return strongest_ext\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension(extensions))\n}\n", "    strength := make(map[float64]string)\n\
    \    for _, value := range extensions {\n        count_upper := 0\n        count_lower\
    \ := 0\n        for _, i := range value {\n            if i >= 'A' && i <= 'Z'\
    \ {\n                count_upper++\n            } else if i >= 'a' && i <= 'z'\
    \ {\n                count_lower++\n            }\n        }\n        strength[float64(count_upper\
    \ - count_lower)] = value\n    }\n    max := 0.0\n    for k, _ := range strength\
    \ {\n        if k > max {\n            max = k\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strength[max])\n}\n", "    best_extension := extensions[0]\n\
    \    for _, extension := range extensions {\n        if compare_extensions(best_extension,\
    \ extension) < 0 {\n            best_extension = extension\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, best_extension)\n}\n", "\t// your\
    \ code here\n    var count []float64\n    var str []string\n    if len(extensions)\
    \ == 0 {\n        return class_name\n    }\n    for _, extension := range extensions\
    \ {\n        var num_up int\n        var num_down int\n        for _, x := range\
    \ extension {\n            if x >= 'A' && x <= 'Z' {\n                num_up++\n\
    \            } else if x >= 'a' && x <= 'z' {\n                num_down++\n  \
    \          }\n        }\n        count = append(count, float64(num_up - num_down))\n\
    \        str = append(str, extension)\n    }\n    max_ext := count[0]\n    max_str\
    \ := str[0]\n    for i, _ := range count {\n        if count[i] > max_ext {\n\
    \            max_ext = count[i]\n            max_str = str[i]\n        }\n   \
    \ }\n    return fmt.Sprintf(\"%s.%s\", class_name, max_str)\n}\n", "    var number_of_uppercase,\
    \ number_of_lowercase int\n    var strength, strongest_strength float64\n    var\
    \ strongest_extension string\n    for _, extension := range extensions {\n   \
    \     for _, letter := range extension {\n            switch {\n            case\
    \ letter >= 'A' && letter <= 'Z':\n                number_of_uppercase++\n   \
    \         case letter >= 'a' && letter <= 'z':\n                number_of_lowercase++\n\
    \            }\n        }\n        strength = float64(number_of_uppercase) - float64(number_of_lowercase)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension\n        }\n        number_of_uppercase,\
    \ number_of_lowercase = 0, 0\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n", "    return class_name + \".\" + calc_strongest_extension(extensions)\n\
    }\n", "    // Write your code here\n    var strongest_extension string\n    strongest_extension\
    \ = \"\"\n    var strongest_extension_strength float64\n    strongest_extension_strength\
    \ = 0\n    for i := 0; i < len(extensions); i++ {\n        extension := extensions[i]\n\
    \        extension_strength := calculate_extension_strength(extension)\n     \
    \   if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension\n            strongest_extension_strength = extension_strength\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension\n}\n",
  "    // Your code here\n    return \"my_class.AA\"\n}\n", "    var num_caps = make([]int,\
    \ len(extensions))\n    var num_smalls = make([]int, len(extensions))\n    for\
    \ i, elem := range extensions {\n        for _, letter := range elem {\n     \
    \       if byte(letter) >= byte('A') && byte(letter) <= byte('Z') {\n        \
    \        num_caps[i] += 1\n            } else if byte(letter) >= byte('a') &&\
    \ byte(letter) <= byte('z') {\n                num_smalls[i] += 1\n          \
    \  }\n        }\n    }\n    var strongest_index = 0\n    var strongest_score =\
    \ float64(num_caps[0]) - float64(num_smalls[0])\n    for i, elem := range num_caps\
    \ {\n        if float64(elem) - float64(num_smalls[i]) > strongest_score {\n \
    \           strongest_index = i\n            strongest_score = float64(elem) -\
    \ float64(num_smalls[i])\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\",\
    \ class_name, extensions[strongest_index])\n}\n", "    l := len(extensions)\n\
    \    if l == 0 {\n        return class_name\n    }\n    best := class_name + \"\
    .\" + extensions[0]\n    best_strength := strength(extensions[0])\n    for i :=\
    \ 1; i < l; i++ {\n        strength := strength(extensions[i])\n        if strength\
    \ > best_strength {\n            best = class_name + \".\" + extensions[i]\n \
    \           best_strength = strength\n        }\n    }\n    return best\n}\n",
  "    var strongest_ext string\n    strongest_strength := 0\n    for _, ext := range\
    \ extensions {\n        strength := extension_strength(ext)\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength\n        \
    \    strongest_ext = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\",\
    \ class_name, strongest_ext)\n}\n", "    // your code here\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, extensions[0])\n}\n", "    strength := 0\n    strongest_extension\
    \ := \"\"\n    for _, extension := range extensions {\n        cap := 0\n    \
    \    sm := 0\n        for _, character := range extension {\n            if character\
    \ >= 'A' && character <= 'Z' {\n                cap++\n            } else if character\
    \ >= 'a' && character <= 'z' {\n                sm++\n            }\n        }\n\
    \        if cap - sm > strength {\n            strength = cap - sm\n         \
    \   strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n", "    res := class_name + \".\"\
    \ + extensions[0]\n    strength := -200\n    for _, s := range extensions {\n\
    \        count_cap := 0\n        count_small := 0\n        for _, c := range s\
    \ {\n            if c <= 'Z' && c >= 'A' {\n                count_cap++\n    \
    \        } else if c <= 'z' && c >= 'a' {\n                count_small++\n   \
    \         }\n        }\n        if count_cap - count_small > strength {\n    \
    \        strength = count_cap - count_small\n            res = class_name + \"\
    .\" + s\n        }\n    }\n    return res\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    var strong_extension string\n    strength := 0.0\n    for _,\
    \ ext := range extensions {\n        cap_letter := 0\n        small_letter :=\
    \ 0\n        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n\
    \                cap_letter++\n            } else if c >= 'a' && c <= 'z' {\n\
    \                small_letter++\n            }\n        }\n        cur_strength\
    \ := float64(cap_letter) - float64(small_letter)\n        if cur_strength > strength\
    \ {\n            strength = cur_strength\n            strong_extension = ext\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strong_extension)\n\
    }\n", "    cap_string := make([]string, 0)\n    sm_string := make([]string, 0)\n\
    \    for i := 0; i < len(extensions); i++ {\n        cap := 0\n        sm := 0\n\
    \        for j := 0; j < len(extensions[i]); j++ {\n            if extensions[i][j]\
    \ > 'Z' {\n                sm += 1\n            } else {\n                cap\
    \ += 1\n            }\n        }\n        if cap == 0 {\n            sm_string\
    \ = append(sm_string, extensions[i])\n        } else {\n            cap_string\
    \ = append(cap_string, extensions[i])\n        }\n    }\n    if len(cap_string)\
    \ > 0 {\n        return fmt.Sprintf(\"%s.%s\", class_name, cap_string[0])\n  \
    \  } else {\n        return fmt.Sprintf(\"%s.%s\", class_name, sm_string[0])\n\
    \    }\n}\n", "    //Implement Strongest_Extension function\n    return \"my_class.AA\"\
    \n}\n", "    if len(extensions) == 0 {\n        return class_name\n    }\n   \
    \ var strongest_name string\n    var strongest_power float64\n    for _, extension\
    \ := range extensions {\n        extension_power := find_power(extension)\n  \
    \      if extension_power > strongest_power {\n            strongest_name = extension\n\
    \            strongest_power = extension_power\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_name)\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    // The strength\
    \ of the extension is as follows: Let CAP be the number\n    // of the uppercase\
    \ letters in the extension's name, and let SM be\n    // the number of lowercase\
    \ letters in the extension's name, the strength\n    // is given by the fraction\
    \ CAP - SM.\n    var strongest string\n    var strongest_strength float64\n  \
    \  var strength float64\n    var CAP int\n    var SM int\n    for _, extension\
    \ := range extensions {\n        CAP = 0\n        SM = 0\n        for _, letter\
    \ := range extension {\n            if letter >= 'A' && letter <= 'Z' {\n    \
    \            CAP++\n            } else if letter >= 'a' && letter <= 'z' {\n \
    \               SM++\n            }\n        }\n        strength = float64(CAP)\
    \ - float64(SM)\n        if strength > strongest_strength {\n            strongest\
    \ = extension\n            strongest_strength = strength\n        }\n    }\n \
    \   return fmt.Sprintf(\"%s.%s\", class_name, strongest)\n}\n", "    strength\
    \ := 0\n    for _, extension := range extensions {\n        cap := 0\n       \
    \ for _, char := range extension {\n            if char >= 'A' && char <= 'Z'\
    \ {\n                cap += 1\n            }\n        }\n        sm := len(extension)\
    \ - cap\n        if strength < cap - sm {\n            strength = cap - sm\n \
    \           class_name = class_name + \".\" + extension\n        }\n    }\n  \
    \  return class_name\n}\n", "    // your code here\n    var result float64\n \
    \   var extension_name string\n    for _, extension := range extensions {\n  \
    \      var upper, lower int\n        for _, letter := range extension {\n    \
    \        if 'A' <= letter && letter <= 'Z' {\n                upper++\n      \
    \      } else if 'a' <= letter && letter <= 'z' {\n                lower++\n \
    \           }\n        }\n        var tmp float64 = float64(upper) - float64(lower)\n\
    \        if result < tmp {\n            result = tmp\n            extension_name\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ extension_name)\n}\n", "    strongest_extension := \".\"\n    strongest_strength\
    \ := 0\n    for _, ext := range extensions {\n        // I think the following\
    \ is garbage collection.\n        if ext == \"\" {\n            continue\n   \
    \     }\n        lowercase_count := 0\n        uppercase_count := 0\n        for\
    \ _, letter := range ext {\n            // I think this is a for each loop.\n\
    \            // This is an if statement in the for loop.\n            if letter\
    \ >= 'a' && letter <= 'z' {\n                lowercase_count++\n            }\
    \ else if letter >= 'A' && letter <= 'Z' {\n                uppercase_count++\n\
    \            }\n        }\n        strength := uppercase_count - lowercase_count\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = ext\n        }\n    }\n    return\
    \ fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n", "    var (\n\
    \        strongest_extension_name string\n        highest_strength float64\n \
    \   )\n    for _, extension := range extensions {\n        strength := getStrength(extension)\n\
    \        if strength > highest_strength {\n            highest_strength = strength\n\
    \            strongest_extension_name = extension\n        }\n    }\n    return\
    \ fmt.Sprintf(\"%s.%s\", class_name, strongest_extension_name)\n}\n", "    //\
    \ your code here\n    return \"\"\n}\n", "    // your code\n}\n", "    return\
    \ \"\"\n}\n", "\tstrength := 0\n\t// Write your code here\n\treturn fmt.Sprintf(\"\
    %s.%s\", class_name, extensions[strength])\n}\n", "    return fmt.Sprintf(\"%s.%s\"\
    , class_name, strongest_extension(extensions))\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    return \"not implemented\"\n}\n", "    // your code\
    \ here\n    return \"\"\n}\n", "    max_strength := 0.0\n    name := class_name\n\
    \    for _, extension := range extensions {\n        strength := get_strength(extension)\n\
    \        if strength > max_strength {\n            max_strength = strength\n \
    \           name = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\"\
    , class_name, name)\n}\n", "    //Enter your code here.\n    return \"\"\n}\n",
  "  // your code here\n  return \"\"\n}\n", "    // your code here\n    if len(extensions)\
    \ == 0 {\n        return class_name\n    }\n    strength_map := make(map[string]float64)\n\
    \    for _, extension := range extensions {\n        lower_case := 0\n       \
    \ upper_case := 0\n        for _, char := range extension {\n            if char\
    \ >= 'a' && char <= 'z' {\n                lower_case++\n            } else if\
    \ char >= 'A' && char <= 'Z' {\n                upper_case++\n            }\n\
    \        }\n        strength_map[extension] = float64(upper_case) - float64(lower_case)\n\
    \    }\n    strongest_extension := extensions[0]\n    strongest_strength := strength_map[extensions[0]]\n\
    \    for _, extension := range extensions {\n        if strength_map[extension]\
    \ > strongest_strength {\n            strongest_extension = extension\n      \
    \      strongest_strength = strength_map[extension]\n        }\n    }\n    return\
    \ fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n", "    class_name\
    \ = fmt.Sprintf(\"%s.%s\", class_name, extensions[0])\n    var strongest_extension\
    \ = class_name\n    var strongest_extension_strength = get_string_strength(extensions[0])\n\
    \    for i := 1; i < len(extensions); i++ {\n        extension_strength := get_string_strength(extensions[i])\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = fmt.Sprintf(\"%s.%s\", class_name, extensions[i])\n            strongest_extension_strength\
    \ = extension_strength\n        }\n    }\n    return strongest_extension\n}\n",
  "    // your code here\n    return \"\"\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    // Write your\
    \ code here\n    var (\n        ext string\n        ratio, max_ratio float64\n\
    \    )\n    max_ratio = 0.0\n    for _, e := range extensions {\n        ratio\
    \ = calc_ratio(e)\n        if ratio > max_ratio {\n            max_ratio = ratio\n\
    \            ext = e\n        }\n    }\n    fmt.Println(max_ratio)\n    return\
    \ class_name + \".\" + ext\n}\n", "    max_strength := -100000.0\n    max_strength_extension\
    \ := extensions[0]\n    for _, extension := range extensions {\n        strength\
    \ := strength(extension)\n        if strength > max_strength {\n            max_strength\
    \ = strength\n            max_strength_extension = extension\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, max_strength_extension)\n}\n",
  "    var ans string = class_name\n    var strength int = 0\n    var strength_tmp\
    \ int = 0\n    var CAP int = 0\n    var SM int = 0\n    for _, extension := range\
    \ extensions {\n        CAP = 0\n        SM = 0\n        for _, c := range extension\
    \ {\n            if c >= 'A' && c <= 'Z' {\n                CAP++\n          \
    \  } else if c >= 'a' && c <= 'z' {\n                SM++\n            }\n   \
    \     }\n        strength_tmp = CAP - SM\n        if strength_tmp > strength {\n\
    \            strength = strength_tmp\n            ans = class_name + \".\" + extension\n\
    \        }\n    }\n    return ans\n}\n", "    // your code here\n    if len(extensions)\
    \ == 0 {\n        return class_name\n    }\n    max_extension := extensions[0]\n\
    \    max_strength := -1\n    for _, extension := range extensions {\n        strength\
    \ := 0\n        for _, b := range extension {\n            if b >= 'A' && b <=\
    \ 'Z' {\n                strength++\n            } else {\n                strength--\n\
    \            }\n        }\n        if strength > max_strength {\n            max_strength\
    \ = strength\n            max_extension = extension\n        }\n    }\n    return\
    \ fmt.Sprintf(\"%s.%s\", class_name, max_extension)\n}\n", "    best_extension\
    \ := \"\"\n    best_strength := -1.0\n    for _, extension := range extensions\
    \ {\n        extension_strength := 0.0\n        extension_name := \"\"\n     \
    \   for _, char := range extension {\n            if char >= 'A' && char <= 'Z'\
    \ {\n                extension_strength += 1.0\n            } else if char >=\
    \ 'a' && char <= 'z' {\n                extension_strength -= 1.0\n          \
    \  } else {\n                extension_name += string(char)\n            }\n \
    \       }\n        if extension_strength > best_strength {\n            best_strength\
    \ = extension_strength\n            best_extension = extension_name\n        }\n\
    \    }\n    return fmt.Sprintf(\"%s.%s\", class_name, best_extension)\n}\n", " \
    \   var max_strength float64 = -1\n    var best_idx int = -1\n    var strength\
    \ float64\n    for i, ext := range extensions {\n        // Compute strength\n\
    \        strength = float64(compute_strength(ext))\n        if strength > max_strength\
    \ {\n            max_strength = strength\n            best_idx = i\n        }\n\
    \    }\n    return fmt.Sprintf(\"%s.%s\", class_name, extensions[best_idx])\n\
    }\n", "    var strongest_ext string\n    var str_ext_strength int = 0\n    var\
    \ curr_ext_strength int = 0\n    var uppercase int = 0\n    var lowercase int\
    \ = 0\n    for _, extension := range extensions {\n        for _, char := range\
    \ extension {\n            if char >= 'A' && char <= 'Z' {\n                uppercase++\n\
    \            } else if char >= 'a' && char <= 'z' {\n                lowercase++\n\
    \            }\n        }\n        curr_ext_strength = uppercase - lowercase\n\
    \        if str_ext_strength < curr_ext_strength {\n            str_ext_strength\
    \ = curr_ext_strength\n            strongest_ext = extension\n        }\n    \
    \    uppercase = 0\n        lowercase = 0\n    }\n    return fmt.Sprintf(\"%s.%s\"\
    , class_name, strongest_ext)\n}\n", "    // Your code here\n    return \"\"\n\
    }\n", "    var strength float64\n    var strongestExtension string\n    if len(extensions)\
    \ == 0 {\n        return class_name\n    } else {\n        strength = findStrength(extensions[0])\n\
    \        strongestExtension = extensions[0]\n        for _, extension := range\
    \ extensions {\n            if findStrength(extension) > strength {\n        \
    \        strength = findStrength(extension)\n                strongestExtension\
    \ = extension\n            }\n        }\n    }\n    return class_name + \".\"\
    \ + strongestExtension\n}\n", "    // Write your code here\n    return \"\"\n\
    }\n", "  //Your code here\n  max_cap := 0\n  max_sm := 0\n  answer := class_name\
    \ + \".\" + extensions[0]\n  for i := 0; i < len(extensions); i++ {\n    cap_count\
    \ := 0\n    sm_count := 0\n    for j := 0; j < len(extensions[i]); j++ {\n   \
    \   if extensions[i][j] >= 'A' && extensions[i][j] <= 'Z' {\n        cap_count++\n\
    \      } else {\n        sm_count++\n      }\n    }\n    if cap_count - sm_count\
    \ > max_cap - max_sm {\n      max_cap = cap_count\n      max_sm = sm_count\n \
    \     answer = class_name + \".\" + extensions[i]\n    }\n  }\n  return answer\n\
    }\n", "    // your code\n    return \"\"\n}\n", "    var (\n        ratio float64\n\
    \        max_ratio float64\n        res string\n    )\n    if len(extensions)\
    \ == 0 {\n        return class_name\n    }\n    max_ratio = 0\n    for _, e :=\
    \ range extensions {\n        ratio = float64(Rational(e))\n        if ratio >\
    \ max_ratio {\n            max_ratio = ratio\n            res = e\n        }\n\
    \    }\n    return fmt.Sprintf(\"%s.%s\", class_name, res)\n}\n", "    // Your\
    \ code here\n    return \"\"\n}\n", "    // your code here\n    return \"\"\n\
    }\n", "    // Your code here\n    return \"\"\n}\n", "    // your code here\n\
    \    maxstrength := 0.0\n    idx := 0\n    for i, extension := range extensions\
    \ {\n        strength := 0.0\n        for _, c := range extension {\n        \
    \    if c >= 'A' && c <= 'Z' {\n                strength += 1\n            } else\
    \ {\n                strength -= 1\n            }\n        }\n        if strength\
    \ > maxstrength {\n            maxstrength = strength\n            idx = i\n \
    \       }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, extensions[idx])\n\
    }\n", "    // check if class name is empty\n    if class_name == \"\" {\n    \
    \    return \"class name is empty\"\n    }\n    // check if extensions is empty\n\
    \    if len(extensions) == 0 {\n        return \"extensions is empty\"\n    }\n\
    \    strongest_extension := extensions[0]\n    strongest_strength := 0\n    for\
    \ _, extension := range extensions {\n        strength := cap_num(extension) -\
    \ small_num(extension)\n        if strength > strongest_strength {\n         \
    \   strongest_strength = strength\n            strongest_extension = extension\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n", "    if len(extensions) == 0 {\n        return class_name\n    }\n    var\
    \ strongestExtensionIdx int\n    var strongestExtensionStrength float64\n    for\
    \ i, extension := range extensions {\n        strength := computeStrength(extension)\n\
    \        if strength > strongestExtensionStrength {\n            strongestExtensionIdx\
    \ = i\n            strongestExtensionStrength = strength\n        }\n    }\n \
    \   return fmt.Sprintf(\"%s.%s\", class_name, extensions[strongestExtensionIdx])\n\
    }\n", "    max := 0\n    max_i := 0\n    for i, extension := range extensions\
    \ {\n        strength := 0\n        for _, char := range extension {\n       \
    \     if char >= 'A' && char <= 'Z' {\n                strength++\n          \
    \  } else if char >= 'a' && char <= 'z' {\n                strength--\n      \
    \      }\n        }\n        if strength > max {\n            max = strength\n\
    \            max_i = i\n        }\n    }\n    if max_i == 0 {\n        return\
    \ fmt.Sprintf(\"%s.%s\", class_name, extensions[max_i])\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, extensions[max_i])\n}\n", "    var strongest_ext string\n\
    \    var strongest_ext_strength float64 = 0\n    for _, ext := range extensions\
    \ {\n        var cap_count int = 0\n        var sm_count int = 0\n        for\
    \ _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n               \
    \ cap_count += 1\n            } else if c >= 'a' && c <= 'z' {\n             \
    \   sm_count += 1\n            }\n        }\n        if cap_count - sm_count >\
    \ strongest_ext_strength {\n            strongest_ext = ext\n            strongest_ext_strength\
    \ = float64(cap_count - sm_count)\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_ext)\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    class_name_list\
    \ := []rune(class_name)\n    var SM = 0\n    var CAP = 0\n    for _, c := range\
    \ class_name_list {\n        if 'a' <= c && c <= 'z' {\n            SM++\n   \
    \     }\n        if 'A' <= c && c <= 'Z' {\n            CAP++\n        }\n   \
    \ }\n    var ext_name string\n    var ext_strength float64\n    var strongest_ext_name\
    \ string\n    var strongest_ext_strength float64\n    //var current_ext_strength\
    \ float64\n    for _, ext := range extensions {\n        ext_list := []rune(ext)\n\
    \        ext_strength = float64(CAP - SM)\n        for _, c := range ext_list\
    \ {\n            if 'a' <= c && c <= 'z' {\n                ext_strength -= 0.1\n\
    \            }\n            if 'A' <= c && c <= 'Z' {\n                ext_strength\
    \ += 0.1\n            }\n        }\n        if ext_strength >= strongest_ext_strength\
    \ {\n            strongest_ext_strength = ext_strength\n            strongest_ext_name\
    \ = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_ext_name)\n\
    }\n", "    // Your code here\n    return \"\"\n}\n", "    // your code\n    return\
    \ class_name\n}\n", "    // Your code here\n    var strength float64\n    var\
    \ strongest string\n    for _, v := range extensions {\n        var count_up,\
    \ count_lo int = 0, 0\n        for _, vv := range v {\n            if vv >= 'A'\
    \ && vv <= 'Z' {\n                count_up++\n            }\n            if vv\
    \ >= 'a' && vv <= 'z' {\n                count_lo++\n            }\n        }\n\
    \        new_strength := float64(count_up) - float64(count_lo)\n        if new_strength\
    \ > strength {\n            strength = new_strength\n            strongest = v\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest)\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    strongest := 0\n   \
    \ strength := 0\n    result := class_name + \".\"\n    for _, ext := range extensions\
    \ {\n        strength = 0\n        for _, c := range ext {\n            if c >=\
    \ 'A' && c <= 'Z' {\n                strength += 1\n            } else if c >=\
    \ 'a' && c <= 'z' {\n                strength -= 1\n            }\n        }\n\
    \        if strength > strongest {\n            strongest = strength\n       \
    \     result = class_name + \".\" + ext\n        }\n    }\n    return result\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    // your code here\n\
    \    return \"\"\n}\n", "    str_ext := \".\"\n    str_strength := 0\n    for\
    \ _, ext := range extensions {\n        CAP := 0\n        SM := 0\n        for\
    \ _, char := range ext {\n            switch {\n            case char >= 'A' &&\
    \ char <= 'Z':\n                CAP++\n            case char >= 'a' && char <=\
    \ 'z':\n                SM++\n            }\n        }\n        strength := CAP\
    \ - SM\n        if strength > str_strength {\n            str_ext = ext\n    \
    \        str_strength = strength\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, str_ext)\n}\n", "    s := fmt.Sprintf(\"%s.%s\", class_name,\
    \ extensions[0])\n    max_strength := strength(extensions[0])\n    for _, ext\
    \ := range extensions[1:] {\n        tmp_s := fmt.Sprintf(\"%s.%s\", class_name,\
    \ ext)\n        tmp_str := strength(ext)\n        if tmp_str > max_strength {\n\
    \            s = tmp_s\n            max_strength = tmp_str\n        }\n    }\n\
    \    return s\n}\n", "    // your code here\n    return \"\"\n}\n", "    fmt.Println(class_name)\n\
    \    fmt.Println(extensions)\n    return class_name\n}\n", "    strong_extension\
    \ := \"\"\n    strongest_strength := -1.0\n    for _, extension := range extensions\
    \ {\n        strength := calc_strength(extension)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strong_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strong_extension)\n\
    }\n", "    var strongest_extension string\n    var strongest_extension_strength\
    \ float64\n    for _, extension := range extensions {\n        var strength float64\n\
    \        cap_count := 0\n        sm_count := 0\n        for _, r := range extension\
    \ {\n            if 'A' <= r && r <= 'Z' {\n                cap_count++\n    \
    \        } else if 'a' <= r && r <= 'z' {\n                sm_count++\n      \
    \      }\n        }\n        strength = float64(cap_count) - float64(sm_count)\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n", " \
    \   // Given a class_name and a list of extensions, find the strongest extension\
    \ and\n    // return a string in this format: ClassName.StrongestExtensionName.\n\
    \    var res, max_extension string\n    var max_strength float64\n    fmt.Println(\"\
    class_name is:\", class_name)\n    fmt.Println(\"extensions are:\", extensions)\n\
    \    for _, extension := range extensions {\n        strength := get_strength(extension)\n\
    \        fmt.Println(\"extension is:\", extension, \"strength is:\", strength)\n\
    \        if strength > max_strength {\n            max_strength = strength\n \
    \           max_extension = extension\n        }\n    }\n    res = class_name\
    \ + \".\" + max_extension\n    fmt.Println(\"res is:\", res)\n    return res\n\
    }\n", "    if len(extensions) == 0 {\n        return class_name\n    }\n    strength_to_extension\
    \ := make(map[float64]string)\n    max_strength := float64(0)\n    max_strength_extension\
    \ := extensions[0]\n    for _, extension := range extensions {\n        cap :=\
    \ float64(0)\n        sm := float64(0)\n        for _, char := range extension\
    \ {\n            if char >= 'A' && char <= 'Z' {\n                cap++\n    \
    \        } else {\n                sm++\n            }\n        }\n        strength\
    \ := cap - sm\n        if strength > max_strength {\n            max_strength\
    \ = strength\n            max_strength_extension = extension\n        }\n    \
    \    if strength_to_extension[strength] == \"\" {\n            strength_to_extension[strength]\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ max_strength_extension)\n}\n", "    var strongest_extension string\n    var\
    \ strongest_extension_strength float64\n    for _, v := range extensions {\n \
    \       strength := get_strength(v)\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension = v\n            strongest_extension_strength\
    \ = strength\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest_extension)\n}\n", "    var upper, lower int\n    str := class_name\
    \ + \".\"\n    c := 0\n    for i := range extensions {\n        for _, k := range\
    \ extensions[i] {\n            if k >= 'A' && k <= 'Z' {\n                upper++\n\
    \            } else if k >= 'a' && k <= 'z' {\n                lower++\n     \
    \       }\n        }\n        if upper - lower > c {\n            c = upper -\
    \ lower\n            str += extensions[i]\n        }\n        upper, lower = 0,\
    \ 0\n    }\n    return str\n}\n", "    // your code here\n    return \"\"\n}\n",
  "    var strength float64\n    var strongest_extension string\n    strength = 0\n\
    \    for _, extension := range extensions {\n        cap_count := 0\n        sm_count\
    \ := 0\n        for _, ch := range extension {\n            if ch >= 'A' && ch\
    \ <= 'Z' {\n                cap_count += 1\n            } else if ch >= 'a' &&\
    \ ch <= 'z' {\n                sm_count += 1\n            }\n        }\n     \
    \   if float64(cap_count) - float64(sm_count) > strength {\n            strength\
    \ = float64(cap_count) - float64(sm_count)\n            strongest_extension =\
    \ extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n", "\t// Your code here\n}\n", "    strongest_strength := 0.0\n    strongest_name\
    \ := \"\"\n    strongest_name_idx := -1\n    for idx, name := range extensions\
    \ {\n        strength := get_strength(name)\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength\n            strongest_name = name\n\
    \            strongest_name_idx = idx\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_name)\n}\n", "    // Your code here\n    return\
    \ \"\"\n}\n", "\tvar sum [][]int\n\tvar max_sum int\n\tvar res string\n\tfor _,\
    \ value := range extensions {\n\t\tvar res_sum = make([]int, 2)\n\t\tfor _, c\
    \ := range value {\n\t\t\tif c >= 65 && c <= 90 {\n\t\t\t\tres_sum[0]++\n\t\t\t\
    } else {\n\t\t\t\tres_sum[1]++\n\t\t\t}\n\t\t}\n\t\tsum = append(sum, res_sum)\n\
    \t}\n\tfor i, value := range sum {\n\t\tif value[0] - value[1] > max_sum {\n\t\
    \t\tmax_sum = value[0] - value[1]\n\t\t\tres = class_name + \".\" + extensions[i]\n\
    \t\t}\n\t}\n\treturn res\n}\n", "    maxStrength := 0\n    maxStrengthExtension\
    \ := \"\"\n    for _, extension := range extensions {\n        count := 0\n  \
    \      for _, char := range extension {\n            if char >= 'A' && char <=\
    \ 'Z' {\n                count += 1\n            } else if char >= 'a' && char\
    \ <= 'z' {\n                count -= 1\n            }\n        }\n        if count\
    \ > maxStrength {\n            maxStrength = count\n            maxStrengthExtension\
    \ = extension\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ maxStrengthExtension)\n}\n", "    //return \"my_class.AA\"\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, \"AA\")\n}\n", "    strongest := 0\n    strongest_string\
    \ := \"\"\n    counter := 0\n    for _, item := range extensions {\n        uppercase\
    \ := 0\n        lowercase := 0\n        for _, letter := range item {\n      \
    \      if letter >= 'A' && letter <= 'Z' {\n                uppercase++\n    \
    \        } else if letter >= 'a' && letter <= 'z' {\n                lowercase++\n\
    \            }\n        }\n        if strongest == uppercase - lowercase {\n \
    \           if counter < strings.Index(extensions, item) {\n                strongest_string\
    \ = item\n            }\n        } else if strongest < uppercase - lowercase {\n\
    \            strongest = uppercase - lowercase\n            strongest_string =\
    \ item\n        }\n        counter++\n    }\n    return fmt.Sprintf(\"%s.%s\"\
    , class_name, strongest_string)\n}\n", "    var strongest_extension string\n \
    \   var strength_extension float64\n    var strength_max float64\n    var strength\
    \ float64\n    var caps int\n    var smalls int\n    strongest_extension = \"\"\
    \n    strength_max = -100\n    if len(extensions) > 0 {\n        for _, ext :=\
    \ range extensions {\n            caps = strings.Count(ext, strings.ToUpper(ext))\n\
    \            smalls = strings.Count(ext, strings.ToLower(ext))\n            strength\
    \ = float64(caps) - float64(smalls)\n            if strength > strength_max {\n\
    \                strength_max = strength\n                strongest_extension\
    \ = ext\n            }\n        }\n    }\n    fmt.Println(strongest_extension)\n\
    \    return class_name + \".\" + strongest_extension\n}\n", "    strongest_ext\
    \ := \"\"\n    strongest_score := 0\n    for _, val := range extensions {\n  \
    \      if score := get_score(val); score > strongest_score {\n            strongest_score\
    \ = score\n            strongest_ext = val\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_ext)\n}\n", "    var strongest_extension string\n\
    \    strongest_strength := 0.0\n    for _, extension := range extensions {\n \
    \       cap_count := 0\n        sm_count := 0\n        for _, ch := range extension\
    \ {\n            if ch >= 'A' && ch <= 'Z' {\n                cap_count++\n  \
    \          } else if ch >= 'a' && ch <= 'z' {\n                sm_count++\n  \
    \          }\n        }\n        strength := float64(cap_count) - float64(sm_count)\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength\n            strongest_extension = extension\n        }\n    }\n  \
    \  return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n", "   \
    \ var max_strength float64 = 0\n    var best_extension string = \"\"\n    for\
    \ _, extension := range extensions {\n        strength := strength(extension)\n\
    \        if strength > max_strength {\n            max_strength = strength\n \
    \           best_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, best_extension)\n}\n", "    // your code here\n    maxStrength\
    \ := float64(0)\n    maxStrengthIdx := 0\n    var strength float64\n\n    for\
    \ i, extension := range extensions {\n        strength = calcStrength(extension)\n\
    \        if strength > maxStrength {\n            maxStrength = strength\n   \
    \         maxStrengthIdx = i\n        }\n    }\n\n    fmt.Println(extensions[maxStrengthIdx])\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, extensions[maxStrengthIdx])\n}\n",
  "    if len(extensions) == 0 {\n        return class_name\n    }\n    max_diff :=\
    \ -1\n    res := extensions[0]\n    for _, ext := range extensions {\n       \
    \ diff := countUpper(ext) - countLower(ext)\n        if diff > max_diff {\n  \
    \          max_diff = diff\n            res = ext\n        }\n    }\n    return\
    \ fmt.Sprintf(\"%s.%s\", class_name, res)\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    var res string = \"\"\n    var strength float64 = 0\n    for\
    \ _, v := range extensions {\n        var cur_strength float64 = calculate_strength(v)\n\
    \        if cur_strength > strength {\n            strength = cur_strength\n \
    \           res = class_name + \".\" + v\n        }\n    }\n    return res\n}\n",
  "    var strength, highest_strength float64\n    var strongest_extension string\n\
    \    for _, extension := range extensions {\n        var CAP, SM float64\n   \
    \     for _, letter := range extension {\n            if letter >= 'A' && letter\
    \ <= 'Z' {\n                CAP++\n            } else if letter >= 'a' && letter\
    \ <= 'z' {\n                SM++\n            }\n        }\n        strength =\
    \ CAP - SM\n        if strength > highest_strength {\n            highest_strength\
    \ = strength\n            strongest_extension = extension\n        }\n    }\n\
    \    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n", " \
    \   // your code here\n    return \"\"\n}\n", "    // your code\n    return class_name\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    // ...\n    cap := 0\n\
    \    sm := 0\n    var strongest_ext string\n    for i := 0; i < len(extensions);\
    \ i++ {\n        for j := 0; j < len(extensions[i]); j++ {\n            if extensions[i][j]\
    \ >= 'A' && extensions[i][j] <= 'Z' {\n                cap++\n            } else\
    \ {\n                sm++\n            }\n        }\n        if cap - sm > 0 {\n\
    \            strongest_ext = extensions[i]\n        }\n        cap = 0\n     \
    \   sm = 0\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_ext)\n\
    }\n", "    if len(extensions) == 0 {\n        return class_name\n    }\n    //\
    \ fmt.Println(class_name)\n    var (\n        result,\n        strongest string\n\
    \        st_value int\n    )\n    for _, e := range extensions {\n        c, l\
    \ := 0, 0\n        for _, letter := range e {\n            if letter >= 'A' &&\
    \ letter <= 'Z' {\n                c += 1\n            } else {\n            \
    \    l += 1\n            }\n        }\n        // fmt.Println(c, l)\n        if\
    \ c - l > st_value {\n            st_value = c - l\n            strongest = e\n\
    \        }\n    }\n    result = fmt.Sprintf(\"%s.%s\", class_name, strongest)\n\
    \    return result\n}\n", "    strongest_extension := \"\"\n    strongest_extension_strength\
    \ := 0\n    for _, extension := range extensions {\n        extension_strength\
    \ := 0\n        for _, c := range extension {\n            switch c {\n      \
    \      case 'A'...'Z':\n                extension_strength++\n            case\
    \ 'a'...'z':\n                extension_strength--\n            }\n        }\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension\
    \ = extension\n            strongest_extension_strength = extension_strength\n\
    \        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n\
    }\n", "    // your code here\n    return fmt.Sprintf(\"%s.%s\", class_name, extensions[0])\n\
    }\n", "    // your code here\n    return \"\"\n}\n", "    // Your code here\n\
    }\n", "    return class_name + \".\" + extensions[0]\n}\n", "    // your code\
    \ here\n    return \"\"\n}\n", "    // your code here\n    return \"\"\n}\n",
  "    var strongest float64\n    var strongest_name string\n    for _, extension\
    \ := range extensions {\n        var strength float64\n        CAP, SM := 0, 0\n\
    \        for _, char := range extension {\n            if char >= 'A' && char\
    \ <= 'Z' {\n                CAP++\n            } else if char >= 'a' && char <=\
    \ 'z' {\n                SM++\n            }\n        }\n        strength = float64(CAP)\
    \ - float64(SM)\n        if strength > strongest {\n            strongest = strength\n\
    \            strongest_name = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_name)\n}\n", "    // your code here\n    return\
    \ \"\"\n}\n", "    // your code here\n    return \"\"\n}\n", "    // Your code\
    \ here\n    // fmt.Println(extensions)\n    max_strength := float64(1)\n    best_extension\
    \ := \"X\"\n    for _, extension := range extensions {\n        strength := float64(calculate_strength(extension))\n\
    \        if strength < max_strength {\n            max_strength = strength\n \
    \           best_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, best_extension)\n}\n", "    fmt.Println(class_name)\n   \
    \ // your code here\n    return \"\"\n}\n", "    mx_strength := -1\n    mx_str\
    \ := \"\"\n    for _, ext := range extensions {\n        strength := strength(ext)\n\
    \        if strength > mx_strength {\n            mx_strength = strength\n   \
    \         mx_str = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ mx_str)\n}\n", "    strongest := \"\";\n    strongest_strength := -1;\n    for\
    \ _, ext := range extensions {\n        cap_len := 0;\n        sm_len := 0;\n\
    \        for _, c := range ext {\n            if c >= 'A' && c <= 'Z' {\n    \
    \            cap_len++;\n            } else if c >= 'a' && c <= 'z' {\n      \
    \          sm_len++;\n            }\n        }\n        if cap_len - sm_len >\
    \ strongest_strength {\n            strongest = ext;\n            strongest_strength\
    \ = cap_len - sm_len;\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", class_name,\
    \ strongest);\n}\n", "    // your code here\n    return \"\"\n}\n", "    // Your\
    \ code here\n    return \"my_class.AA\"\n}\n", "    strength := 0\n    output\
    \ := \"\"\n    for _, extension := range extensions {\n        total, diff :=\
    \ 0, 0\n        for _, value := range extension {\n            total++\n     \
    \       if value >= 'A' && value <= 'Z' {\n                diff++\n          \
    \  } else {\n                diff--\n            }\n        }\n        if diff/total\
    \ > strength {\n            strength = diff/total\n            output = class_name\
    \ + \".\" + extension\n        }\n    }\n    return output\n}\n", "\t// your code\
    \ here\n    return fmt.Sprintf(\"%s.%s\", class_name, extensions[0])\n}\n", " \
    \   strongest_extension := \"\"\n    max_strength := -1.0\n    for _, v := range\
    \ extensions {\n        strength := Strength(v)\n        if strength > max_strength\
    \ {\n            max_strength = strength\n            strongest_extension = v\n\
    \        }\n    }\n    if strongest_extension == \"\" {\n        return \"\"\n\
    \    }\n    return fmt.Sprintf(\"%s.%s\", class_name, strongest_extension)\n}\n",
  "    strongest := 0\n    strongest_extension := \"\"\n    for _, extension := range\
    \ extensions {\n        lower := 0\n        upper := 0\n        for _, letter\
    \ := range extension {\n            if letter >= 'a' && letter <= 'z' {\n    \
    \            lower++\n            } else if letter >= 'A' && letter <= 'Z' {\n\
    \                upper++\n            }\n        }\n        strength := upper\
    \ - lower\n        if strength > strongest {\n            strongest = strength\n\
    \            strongest_extension = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_extension)\n}\n", "    var strongest_ext_name string\n\
    \    var strongest_ext_strength float64\n    for _, extension := range extensions\
    \ {\n        var ext_strength float64\n        for _, ch := range extension {\n\
    \            switch {\n            case ch >= 'A' && ch <= 'Z':\n            \
    \    ext_strength++\n            case ch >= 'a' && ch <= 'z':\n              \
    \  ext_strength--\n            }\n        }\n        if strongest_ext_strength\
    \ < ext_strength {\n            strongest_ext_strength = ext_strength\n      \
    \      strongest_ext_name = extension\n        }\n    }\n    return fmt.Sprintf(\"\
    %s.%s\", class_name, strongest_ext_name)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
