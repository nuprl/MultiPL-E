language: go_test.go
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 2
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return int(((1.0 + 5.0**0.5)**float64(n) - (1.0\
    \ - 5.0**0.5)**float64(n)) / (2.0**float64(n) * 5.0**0.5))\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpc59gwcco_test.go:16:29: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    /tmp/tmpc59gwcco_test.go:16:35: invalid operation: cannot indirect float64(n)
    (value of type float64)

    /tmp/tmpc59gwcco_test.go:16:60: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    /tmp/tmpc59gwcco_test.go:16:66: invalid operation: cannot indirect float64(n)
    (value of type float64)

    /tmp/tmpc59gwcco_test.go:16:104: invalid operation: cannot indirect 0.5 (untyped
    float constant)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return 0\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var f0, f1, fn int\n    f0 = 0\n    f1 = 1\n\
    \    for i := 0; i < n; i++ {\n        fn = f0 + f1\n        f0 = f1\n       \
    \ f1 = fn\n    }\n    return fn\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmplqotjrum_test.go:44: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmplqotjrum_test.go:44: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmplqotjrum_test.go:44: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmplqotjrum_test.go:44: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    p, q := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        p, q = q, p+q\n    }\n    return p\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n    case 0:\n        return 0\n\
    \    case 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return n\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpvk_za93k_test.go:36: expected '%!s(int=55)', got '%!s(int=10)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpvk_za93k_test.go:36: expected\
    \ '%!s(int=21)', got '%!s(int=8)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpvk_za93k_test.go:36: expected '%!s(int=89)', got '%!s(int=11)'\n \
    \   --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpvk_za93k_test.go:36: expected\
    \ '%!s(int=144)', got '%!s(int=12)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    var f1 = 1\n    var f2 = 1\n    var fn = 0\n    for i := 3; i <= n;\
    \ i++ {\n        fn = f1 + f2\n        f1 = f2\n        f2 = fn\n    }\n    return\
    \ fn\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    a, b := 1, 1\n    for i := 0; i < n-2; i++ {\n        a, b = b, a+b\n\
    \    }\n    return b\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n    case 0:\n        return 0\n\
    \    case 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        x, y = y, x+y\n    }\n    return x\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    fib := make([]int, n)\n    fib[0] = 1\n    fib[1]\
    \ = 1\n    for i := 2; i < n; i++ {\n        fib[i] = fib[i-1] + fib[i-2]\n  \
    \  }\n    return fib[n-1]\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 20 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000164000})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000164000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fib(...)\n\t/tmp/tmp467hqlj3_test.go:18\n\
    command-line-arguments_test.TestFib(0x0?)\n\t/tmp/tmp467hqlj3_test.go:33 +0x7e\n\
    testing.tRunner(0xc000103520, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return 1\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp3h23_r07_test.go:36: expected '%!s(int=55)', got '%!s(int=1)'\n  \
    \  --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp3h23_r07_test.go:36: expected\
    \ '%!s(int=21)', got '%!s(int=1)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp3h23_r07_test.go:36: expected '%!s(int=89)', got '%!s(int=1)'\n  \
    \  --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp3h23_r07_test.go:36: expected\
    \ '%!s(int=144)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        x, y = y, x+y\n    }\n    return x\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    fibs := make([]int, n)\n    fibs[0] = 1\n  \
    \  fibs[1] = 1\n    for i := 2; i < n; i++ {\n        fibs[i] = fibs[i-1] + fibs[i-2]\n\
    \    }\n    return fibs[n-1]\n}\n\nfunc TestFib(t *testing.T) {\n  candidate :=\
    \ fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\npanic: runtime error: index out of range [1]\
    \ with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with\
    \ length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x512440, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x512440,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.fib(...)\n\t/tmp/tmphaeifnnt_test.go:18\n\
    command-line-arguments_test.TestFib(0x0?)\n\t/tmp/tmphaeifnnt_test.go:33 +0x7e\n\
    testing.tRunner(0xc0001a01a0, 0x527d38)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return 0\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // Your code goes here.\n    return 0\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmppdznmxj4_test.go:37: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmppdznmxj4_test.go:37: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmppdznmxj4_test.go:37: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmppdznmxj4_test.go:37: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmppdznmxj4_test.go:37: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ prev1, prev2 := 1, 0\n    for i := 2; i <= n; i++ {\n        cur := prev1 +\
    \ prev2\n        prev2 = prev1\n        prev1 = cur\n    }\n\n    return prev1\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    //  TODO: implement fib\n    return 0\n}\n\n\
    func TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp5kgcj5iv_test.go:37: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmp5kgcj5iv_test.go:37: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmp5kgcj5iv_test.go:37: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmp5kgcj5iv_test.go:37: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmp5kgcj5iv_test.go:37: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    var\
    \ a, b int = 0, 1\n    for i := 2; i <= n; i++ {\n        tmp := a + b\n     \
    \   a = b\n        b = tmp\n    }\n    return b\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    f1, f2 := 0, 1\n    for i := 1; i < n; i++ {\n\
    \        f1, f2 = f2, f1 + f2\n    }\n    return f2\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ fibn := fib(n-1) + fib(n-2)\n    return fibn\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate :=\
    \ fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        x, y = y, x+y\n    }\n    return x\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return 0\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    f1,\
    \ f2 := 0, 1\n    for i := 2; i <= n; i++ {\n        f1, f2 = f2, f1 + f2\n  \
    \  }\n    return f2\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n    case 0:\n        return 0\n\
    \    case 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // Time complexity: O(n).\n    // Space complexity:\
    \ O(1).\n    // if n == 0 {\n    //     return 0\n    // }\n    // if n == 1 {\n\
    \    //     return 1\n    // }\n    // return fib(n-1) + fib(n-2)\n    // Time\
    \ complexity: O(n).\n    // Space complexity: O(1).\n    if n == 0 {\n       \
    \ return 0\n    }\n    a, b := 0, 1\n    for i := 1; i < n; i++ {\n        a,\
    \ b = b, a+b\n    }\n    return b\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // we need 2 variables to keep track of the\
    \ two previous fibonacci numbers\n    prev, prevprev := 1, 0\n    for n > 0 {\n\
    \        // the fibonacci sequence is calculated by adding the two previous numbers\n\
    \        prev, prevprev = prev+prevprev, prev\n        n--\n    }\n    return\
    \ prevprev\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // TODO: insert code here.\n    return 0\n}\n\
    \nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\t\
    actual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
    \  { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp63si15vg_test.go:37: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmp63si15vg_test.go:37: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmp63si15vg_test.go:37: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmp63si15vg_test.go:37: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmp63si15vg_test.go:37: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var a, b int = 0, 1\n    for i := 0; i < n;\
    \ i++ {\n        a, b = b, a + b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    a,\
    \ b := 1, 1\n    for i := 2; i < n; i++ {\n        b, a = a+b, b\n    }\n    return\
    \ b\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        x, y = y, x+y\n    }\n    return x\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    f := make([]int, n+1)\n    f[0] = 0\n    f[1]\
    \ = 1\n    for i := 2; i <= n; i++ {\n        f[i] = f[i-1] + f[i-2]\n    }\n\
    \    return f[n]\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ f, s := 0, 1\n    for i := 1; i < n; i++ {\n        f, s = s, f + s\n    }\n\
    \n    return s\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    f1, f2 := 0, 1\n    var f3 int\n    for i :=\
    \ 0; i < n; i++ {\n        f3 = f1 + f2\n        f1 = f2\n        f2 = f3\n  \
    \  }\n    return f3\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp62xifi1c_test.go:43: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp62xifi1c_test.go:43: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp62xifi1c_test.go:43: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp62xifi1c_test.go:43: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return 1\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp3h23_r07_test.go:36: expected '%!s(int=55)', got '%!s(int=1)'\n  \
    \  --- FAIL: TestFib/test_num__2 (0.00s)\n        tmp3h23_r07_test.go:36: expected\
    \ '%!s(int=21)', got '%!s(int=1)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmp3h23_r07_test.go:36: expected '%!s(int=89)', got '%!s(int=1)'\n  \
    \  --- FAIL: TestFib/test_num__4 (0.00s)\n        tmp3h23_r07_test.go:36: expected\
    \ '%!s(int=144)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        x, y = y, x+y\n    }\n    return x\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    prev, res := 0, 1\n    for n > 0 {\n       \
    \ prev, res = res, prev + res\n        n--\n    }\n    return res\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpwugx60nl_test.go:41: expected '%!s(int=55)', got '%!s(int=89)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpwugx60nl_test.go:41: expected\
    \ '%!s(int=21)', got '%!s(int=34)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpwugx60nl_test.go:41: expected '%!s(int=89)', got '%!s(int=144)'\n\
    \    --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpwugx60nl_test.go:41: expected\
    \ '%!s(int=144)', got '%!s(int=233)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // TODO: Fibonacci\n    return 1\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpym7ortwx_test.go:37: expected '%!s(int=55)', got '%!s(int=1)'\n  \
    \  --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpym7ortwx_test.go:37: expected\
    \ '%!s(int=21)', got '%!s(int=1)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpym7ortwx_test.go:37: expected '%!s(int=89)', got '%!s(int=1)'\n  \
    \  --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpym7ortwx_test.go:37: expected\
    \ '%!s(int=144)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate :=\
    \ fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // initialize first and second Fibonacci numbers\n\
    \    a, b := 0, 1\n    // repeat n times\n    for i := 0; i < n; i++ {\n     \
    \   // calculate next Fibonacci number and store it\n        a, b = b, a+b\n \
    \   }\n    // return the n-th Fibonacci number\n    return a\n}\n\nfunc TestFib(t\
    \ *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var fib = []int{0, 1}\n    for i := 2; i <=\
    \ n; i++ {\n        fib = append(fib, fib[i-1] + fib[i-2])\n    }\n    return\
    \ fib[n]\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate :=\
    \ fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    x, y := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        x, y = y, x+y\n    }\n    return x\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for n > 0 {\n        a, b\
    \ = b, a + b\n        n -= 1\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n    case 0:\n        return 0\n\
    \    case 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    fib := map[int]int{0: 0, 1: 1}\n    for i :=\
    \ 2; i <= n; i++ {\n        fib[i] = fib[i-1] + fib[i-2]\n    }\n    return fib[n]\n\
    }\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // WRITE ME!\n    if n == 1 {\n    \treturn\
    \ 1\n    } else if n == 2 {\n    \treturn 1\n    } else {\n    \treturn fib(n-1)\
    \ + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return 0\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // Create a closure fibonacci function.\n  \
    \  fib := func(n int) int {\n        if n < 2 {\n            return n\n      \
    \  }\n        return fib(n-1) + fib(n-2)\n    }\n    return fib(n)\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    fibs := []int{0, 1}\n    for i := 2; i <= n;\
    \ i++ {\n        fibs = append(fibs, fibs[i-1] + fibs[i-2])\n    }\n    return\
    \ fibs[n]\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    a, b := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        a, b = b, a+b\n    }\n    return a\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    f0, f1 := 0, 1\n    for i := 1; i < n; i++ {\n\
    \        f0, f1 = f1, f0 + f1\n    }\n    return f1\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n    case 0:\n        return 0\n\
    \    case 1:\n        return 1\n    }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc\
    \ TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(10), expected: 55 },\n     { actual: candidate(1), expected: 1 },\n\
    \     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    switch n {\n    case 0:\n        return 0\n\
    \    case 1:\n        return 1\n    default:\n        return fib(n-1) + fib(n-2)\n\
    \    }\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 89 },\n     { actual: candidate(12), expected: 144 },\n   }\n\n\t\
    for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    } else {\n\
    \        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    var p, q int = 0, 1\n    for i := 0; i < n;\
    \ i++ {\n        p, q = q, p + q\n    }\n    return p\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    n1, n2 := 0, 1\n    if n < 1 {\n        return\
    \ 0\n    } else if n < 3 {\n        return 1\n    }\n    for i := 2; i < n; i++\
    \ {\n        n1, n2 = n2, n1 + n2\n    }\n    return n2\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpirrh2wyt_test.go:45: expected '%!s(int=55)', got '%!s(int=34)'\n \
    \   --- FAIL: TestFib/test_num__2 (0.00s)\n        tmpirrh2wyt_test.go:45: expected\
    \ '%!s(int=21)', got '%!s(int=13)'\n    --- FAIL: TestFib/test_num__3 (0.00s)\n\
    \        tmpirrh2wyt_test.go:45: expected '%!s(int=89)', got '%!s(int=55)'\n \
    \   --- FAIL: TestFib/test_num__4 (0.00s)\n        tmpirrh2wyt_test.go:45: expected\
    \ '%!s(int=144)', got '%!s(int=89)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    p, q := 0, 1\n    for i := 0; i < n; i++ {\n\
    \        p, q = q, p+q\n    }\n    return p\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n\n   \
    \ a, b := 0, 1\n    for i := 2; i <= n; i++ {\n        a, b = b, a + b\n    }\n\
    \n    return b\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(8), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 89 },\n     { actual: candidate(12), expected: 144\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    return 0\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmpq33sh_4b_test.go:36: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmpq33sh_4b_test.go:36: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073228
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    i, j := 0, 1\n    for x := 0; x < n; x++ {\n\
    \        i, j = j, i+j\n    }\n    return i\n}\n\nfunc TestFib(t *testing.T) {\n\
    \  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10), expected:\
    \ 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(8),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual:\
    \ candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  } else {\n        return fib(n-1) + fib(n-2)\n    }\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 2 {\n        return 1\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n <= 1 {\n        return n\n    }\n    return\
    \ fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate := fib\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(10), expected: 55 },\n     { actual:\
    \ candidate(1), expected: 1 },\n     { actual: candidate(8), expected: 21 },\n\
    \     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    // TODO\n    return 0\n}\n\nfunc TestFib(t *testing.T)\
    \ {\n  candidate := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(10),\
    \ expected: 55 },\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(8), expected: 21 },\n     { actual: candidate(11), expected: 89 },\n\
    \     { actual: candidate(12), expected: 144 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestFib (0.00s)\n    --- FAIL: TestFib/test_num__0 (0.00s)\n\
    \        tmp58buxicm_test.go:37: expected '%!s(int=55)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__1 (0.00s)\n        tmp58buxicm_test.go:37: expected\
    \ '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__2 (0.00s)\n\
    \        tmp58buxicm_test.go:37: expected '%!s(int=21)', got '%!s(int=0)'\n  \
    \  --- FAIL: TestFib/test_num__3 (0.00s)\n        tmp58buxicm_test.go:37: expected\
    \ '%!s(int=89)', got '%!s(int=0)'\n    --- FAIL: TestFib/test_num__4 (0.00s)\n\
    \        tmp58buxicm_test.go:37: expected '%!s(int=144)', got '%!s(int=0)'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073231
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package fib_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return\
    \ n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n\
    // 21\nfunc fib(n int) int {\n    if n == 1 || n == 2 {\n        return 1\n  \
    \  }\n    return fib(n-1) + fib(n-2)\n}\n\nfunc TestFib(t *testing.T) {\n  candidate\
    \ := fib\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(10), expected: 55 },\n    \
    \ { actual: candidate(1), expected: 1 },\n     { actual: candidate(8), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 89 },\n     { actual: candidate(12),\
    \ expected: 144 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
