language: go_test.go
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    i := 2\n    for ; i < n; i++ {\n  \
    \      if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    for i := 3;\
    \ i < n; i += 2 {\n        if n % i == 0 {\n            return false\n       \
    \ }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n - 1; i++ {\n    \
    \    if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // TODO\n\
    \    if n == 1 {\n        return false\n    }\n    if n == 2 {\n        return\
    \ true\n    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    for i := 2; i * i <= n; i++ {\n        if n % i == 0 {\n          \
    \  return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i <= n / 2; i++ {\n    \
    \    if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 0 {\n        return false\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    // guard against number too large for int type\n    if n < -10000000000000000\
    \ {\n        return false\n    }\n    if n > 10000000000000000 {\n        return\
    \ false\n    }\n    if n == 2 {\n        return true\n    }\n    if n % 2 == 0\
    \ {\n        return false\n    }\n    for i := 3; i <= n/2; i += 2 {\n       \
    \ if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n       \
    \ if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Your\
    \ code here.\n    if n == 1 {\n        return false\n    }\n    for i := 2; i\
    \ < n; i++ {\n        if n % i == 0 {\n            return false\n        }\n \
    \   }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i < n;\
    \ i += 2 {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n\tif n ==\
    \ 1 {\n\t\treturn false\n\t}\n\n\tfor i := 2; i < n; i++ {\n\t\tif n % i == 0\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    /*\n\
    \     * Insert your code here.\n     */\n    if n == 1 {\n        return false\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Prime\
    \ numbers are only divisible by themselves and 1.\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpe4_cvwgi_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpe4_cvwgi_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpe4_cvwgi_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpe4_cvwgi_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpe4_cvwgi_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpe4_cvwgi_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for divisor := 2; divisor < n; divisor++\
    \ {\n        if n % divisor == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    var i int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    return check_prime(n, 2)\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4n6o_u3t_test.go:28:12: undefined: check_prime

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073269
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    // Check all integers up to square\
    \ root of n.\n    for i := 2; i * i <= n; i++ {\n        if n % i == 0 {\n   \
    \         return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i <= n / 2; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n       \
    \ if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3; i < n;\
    \ i += 2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i <= n - 1; i++ {\n \
    \       if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ n; i++ {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    for d := 3;\
    \ d*d <= n; d += 2 {\n        if n % d == 0 {\n            return false\n    \
    \    }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // The\
    \ most basic form of a prime is 2, the only even prime.\n    if n < 2 {\n    \
    \    return false\n    } else if n == 2 {\n        return true\n    } else if\
    \ n % 2 == 0 {\n        return false\n    }\n\n    // The rest of the primes are\
    \ odd.\n    // So, we can start at 3 and check only the odd numbers until we hit\
    \ the\n    // square root of n.\n    // Note that we add 2 to i each time to make\
    \ sure we stay odd.\n    for i := 3; i * i <= n; i += 2 {\n        if n % i ==\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n\t// Return\
    \ true if a given number is prime, and false otherwise.\n\t//\n\t// >>> is_prime(6)\n\
    \t// false\n\t// >>> is_prime(101)\n\t// true\n\t// >>> is_prime(11)\n\t// true\n\
    \t// >>> is_prime(13441)\n\t// true\n\t// >>> is_prime(61)\n\t// true\n\t// >>>\
    \ is_prime(4)\n\t// false\n\t// >>> is_prime(1)\n\t// false\n\t//\n\t// https://stackoverflow.com/questions/1801391/what-is-the-best-algorithm-for-checking-if-a-number-is-prime\n\
    \tif n < 2 {\n\t\treturn false\n\t}\n\tif n == 2 {\n\t\treturn true\n\t}\n\tif\
    \ n == 3 {\n\t\treturn true\n\t}\n\tif n%2 == 0 {\n\t\treturn false\n\t}\n\tif\
    \ n%3 == 0 {\n\t\treturn false\n\t}\n\ti := 5\n\tw := 2\n\tfor i*i <= n {\n\t\t\
    if n%i == 0 {\n\t\t\treturn false\n\t\t}\n\t\ti += w\n\t\tw = 6 - w\n\t}\n\treturn\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    d := 3\n   \
    \ for d*d <= n {\n        if n % d == 0 {\n            return false\n        }\n\
    \        d += 2\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073272
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    for i := 3;\
    \ i <= int(n / 2); i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    // Check all the numbers up to the sqrt(n)\n    for i := 2; i * i <=\
    \ n; i++ {\n        if n % i == 0 {\n            return false\n        }\n   \
    \ }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var i\
    \ int\n\n    if n == 1 {\n        return false\n    }\n\n    for i = 2; i < n;\
    \ i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n\
    \n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i * i <= n; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n\tif n <=\
    \ 1 {\n\t\treturn false\n\t}\n\n\tfor i := 2; i < n; i++ {\n\t\tif n % i == 0\
    \ {\n\t\t\treturn false\n\t\t}\n\t}\n\n\treturn true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    } else if n < 2 || n % 2 == 0 {\n        return\
    \ false\n    }\n\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n \
    \           return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    // Try all possible factors from 2\
    \ to sqrt(n) \n    for i := 2; i * i <= n; i++ {\n        if n % i == 0 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    var i int\n    for i = 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var div\
    \ int = 2\n\n    for div < n {\n        if n % div == 0 {\n            return\
    \ false\n        }\n        div += 1\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp48k2nl9z_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 0 {\n        return false\n    }\n\n    if n == 1 {\n        return false\n\
    \    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 0 {\n        return false\n    }\n    if n == 1 {\n        return false\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    if n < 9 {\n\
    \        return true\n    }\n\n    if n % 3 == 0 {\n        return false\n   \
    \ }\n\n    sqrt := n / 6\n\n    for i := 5; i <= sqrt; i += 6 {\n        if n\
    \ % i == 0 {\n            return false\n        }\n\n        if n % (i + 2) ==\
    \ 0 {\n            return false\n        }\n    }\n\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n       \
    \ if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i <= n - 1; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var result\
    \ bool\n    if n == 2 {\n        result = true\n    } else if n > 2 {\n      \
    \  for i := 2; i < n; i++ {\n            if n % i == 0 {\n                result\
    \ = false\n                break\n            } else {\n                result\
    \ = true\n            }\n        }\n    } else {\n        result = false\n   \
    \ }\n    return result\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for d\
    \ := 2; d < n; d++ {\n        if n % d == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpk2iic2st_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    for\
    \ i := 5; i * i <= n; i += 6 {\n        if n % i == 0 || n % (i + 2) == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n\
    \    }\n    for i := 3; i < n / 2; i = i + 2 {\n        if n % i == 0 {\n    \
    \        return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp907j01ox_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // First\
    \ we check if the number is less than 2. If so, it cannot be prime.\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    // We check if the number is divisible by any number less than n. If\
    \ so,\n    // it is not prime.\n    // The only exception to this is if the number\
    \ is 2.\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i * i <= n; i++ {\n \
    \       if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    if n % 2 == 0 {\n    \
    \    return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n \
    \   i := 5\n    w := 2\n    for i * i <= n {\n        if n % i == 0 {\n      \
    \      return false\n        }\n        i += w\n        w = 6 - w\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // all\
    \ numbers evenly divisible by 2 are not prime, except 2 itself\n    if n % 2 ==\
    \ 0 {\n        return n == 2\n    }\n\n    // check odd numbers greater than 2,\
    \ if we find an even divisor, then it's not prime\n    for i := 3; i < n; i +=\
    \ 2 {\n        if n % i == 0 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpd83cgy41_test.go:64: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Type\
    \ your code here\n    if n < 2 {\n        return false\n    }\n\n    if n == 2\
    \ {\n        return true\n    }\n\n    if n % 2 == 0 {\n        return false\n\
    \    }\n\n    for i := 3; i <= n; i += 2 {\n        if n % i == 0 {\n        \
    \    return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpjwjjeohh_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpjwjjeohh_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpjwjjeohh_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpjwjjeohh_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpjwjjeohh_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpjwjjeohh_test.go:71:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpjwjjeohh_test.go:71: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    i\
    \ := 5\n    for i*i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n    \
    \        return false\n        }\n        i += 6\n    }\n    return true\n}\n\n\
    func TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    isprime\
    \ := true\n    divisor := 2\n    for divisor < n {\n        if n % divisor ==\
    \ 0 {\n            isprime = false\n            break\n        }\n        divisor++\n\
    \    }\n    return isprime\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpr13002r3_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i <= n/2; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    // n should be greater than 2\n    for\
    \ i := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    } else if n < 2 || n % 2 == 0 {\n        return\
    \ false\n    }\n\n    i := 3\n    for i * i <= n {\n        if n % i == 0 {\n\
    \            return false\n        }\n        i += 2\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n\tfor i :=\
    \ 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp6ot8fvqv_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    i := 2\n    for ; i < n; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    prime := true\n    for i := 2; i <\
    \ n; i++ {\n        if n % i == 0 {\n            prime = false\n            break\n\
    \        }\n    }\n    return prime\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    }\n    if n % 2 == 0 {\n        return false\n\
    \    }\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmph96ca8uq_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    return\
    \ false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    return\
    \ false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i <= n/2; i++ {\n     \
    \   if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073276
- exit_code: 2
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var i,\
    \ y, sq int = 2, 0, 0\n    if n == 1 {\n        return false\n    } else if n\
    \ == 2 {\n        return true\n    }\n    // Find the square root of n.\n    sq\
    \ = int(n/2)\n    // Loop through the range of [2,n).\n    for i = 2; i < sq;\
    \ i++ {\n        // If the remainder of n divided by i is zero, then n is not\
    \ prime.\n        if n % i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp14pjj8rb_test.go:24:12: y declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073275
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    switch\
    \ {\n    case n == 2:\n        return true\n    case n < 2 || n % 2 == 0:\n  \
    \      return false\n    }\n    for i := 3; i * i <= n; i += 2 {\n        if n\
    \ % i == 0 {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // define\
    \ a for loop that iterates from 2 to n\n    for i := 2; i < n; i++ {\n       \
    \ // check if the remainder of n divided by i is 0\n        if n % i == 0 {\n\
    \            // if it is, return false\n            return false\n        }\n\
    \    }\n    // return true otherwise\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp97fj04i4_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n       \
    \ if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Your\
    \ code here\n    var i int\n    for i = 2; i <= n/2; i++ {\n        if n%i ==\
    \ 0 {\n            return false\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpm5tg05hs_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n\tfor i :=\
    \ 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp6ot8fvqv_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // For\
    \ a given number, check all of the numbers from 2 to n - 1.\n    // if n % i ==\
    \ 0, then return false.\n    // if n % i != 0, then return true.\n    for i :=\
    \ 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n       \
    \ }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpjshhndz6_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n == 3 {\n        return true\n    }\n    for i := 2; i < n; i++\
    \ {\n        if n % i == 0 {\n            return false\n        }\n    }\n   \
    \ return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // We\
    \ will check all numbers from 2 up to, but not including, n\n    if n <= 1 {\n\
    \        return false\n    }\n    for i := 2; i < n; i++ {\n        // If n is\
    \ divisible by anything other than 1 and itself, then it is not prime\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for d := 2; d * d <= n; d++ {\n \
    \       if n % d == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    max := n/2 + 1\n\
    \    for i := 3; i < max; i += 2 {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    for i := 2; i * i <= n; i++ {\n        if n % i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var prime\
    \ bool\n    prime = true\n    if n == 1 {\n        prime = false\n    }\n    if\
    \ n > 1 {\n        for i := 2; i < n; i++ {\n            if n % i == 0 {\n   \
    \             prime = false\n            }\n        }\n    }\n    return prime\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i <= n/2; i++ {\n     \
    \   if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i <= n / 2; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for divisor := 2; divisor < n; divisor++\
    \ {\n        if n % divisor == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i <= n / 2; i++ {\n \
    \       if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073278
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Fill\
    \ in the code here\n    return false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n\
    \  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpa9u2ct3g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpa9u2ct3g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpa9u2ct3g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpa9u2ct3g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpa9u2ct3g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpa9u2ct3g_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpa9u2ct3g_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpnb2jqpyf_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    i\
    \ := 5\n    for i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n  \
    \          return false\n        }\n        i += 6\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    // a number > 1 is prime if it has\
    \ no divisors between 2 and sqrt(n)\n    for i := 2; i * i <= n; i++ {\n     \
    \   if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    } else if n < 2 || n % 2 == 0 {\n        return\
    \ false\n    }\n\n    for i := 3; i < n; i += 2 {\n        if n % i == 0 {\n \
    \           return false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    limit := n\n    for i := 2; i < limit;\
    \ i++ {\n        if n % i == 0 {\n            return false\n        }\n      \
    \  limit = n / i\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    } else if n < 2 || n % 2 == 0 {\n        return\
    \ false\n    }\n    i := 3\n    for i * i <= n {\n        if n % i == 0 {\n  \
    \          return false\n        }\n        i += 2\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    for i := 2; i <= n / 2; i++ {\n        if n % i == 0 {\n         \
    \   return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ % 2 == 0 {\n        return false\n    }\n\n    for i := 3; i <= n / 2; i +=\
    \ 2 {\n        if n % i == 0 {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpj_12pj1d_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i <= n/2; i++ {\n     \
    \   if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n\tfor i :=\
    \ 2; i < n; i++ {\n\t\tif n % i == 0 {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp6ot8fvqv_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    var divisor int\n    for divisor\
    \ = 2; divisor < n; divisor++ {\n        if n % divisor == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n % 2 == 0 {\n        return n ==\
    \ 2\n    }\n    if n % 3 == 0 {\n        return n == 3\n    }\n    if n % 5 ==\
    \ 0 {\n        return n == 5\n    }\n    if n % 7 == 0 {\n        return n ==\
    \ 7\n    }\n    if n % 11 == 0 {\n        return n == 11\n    }\n    if n % 13\
    \ == 0 {\n        return n == 13\n    }\n    for i := 2; i * i <= n; i++ {\n \
    \       if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n - 1; i++ {\n    \
    \    if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073270
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    }\n    if n < 2 || n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i*i <= n; i += 2 {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // First\
    \ off, a single digit is not a prime.\n    if n < 10 {\n        return false\n\
    \    }\n\n    // All primes are odd, except for 2.\n    if n != 2 && n % 2 ==\
    \ 0 {\n        return false\n    }\n\n    // If we get here, we know it's odd,\
    \ so only iterate over odd divisors.\n    for i := 3; i < n; i += 2 {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpt8gio6vy_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    prime\
    \ := true\n    if n == 1 {\n        prime = false\n    } else {\n        for i\
    \ := 2; i < n; i++ {\n            if n % i == 0 {\n                prime = false\n\
    \                break\n            }\n        }\n    }\n    return prime\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    }\n    if n == 3 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    if n % 3 == 0 {\n\
    \        return false\n    }\n\n    i := 5\n    w := 2\n\n    for i * i <= n {\n\
    \        if n % i == 0 {\n            return false\n        }\n\n        i +=\
    \ w\n        w = 6 - w\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmp9teerwtm_test.go:77: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    }\n    if n < 2 || n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i * i <= n; i += 2 {\n        if n % i == 0 {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var i\
    \ int\n    for i = 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpyg42s35q_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    else if n == 2 {\n        return true\n\
    \    }\n    else if n % 2 == 0 {\n        return false\n    }\n    else {\n  \
    \      i := 3\n        limit := n / 2\n        for i <= limit {\n            if\
    \ n % i == 0 {\n                return false\n            }\n            i +=\
    \ 2\n        }\n        return true\n    }\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp7_2vfa4j_test.go:27:5: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073278
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    switch\
    \ {\n    case n <= 1:\n        return false\n    case n <= 3:\n        return\
    \ true\n    case n % 2 == 0:\n        return false\n    case n % 3 == 0:\n   \
    \     return false\n    }\n\n    for i := 5; i*i <= n; i++ {\n        if n % i\
    \ == 0 || n % (i + 2) == 0 {\n            return false\n        }\n    }\n\n \
    \   return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i < n; i++ {\n      \
    \  if n % i == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Corner\
    \ cases\n    if n <= 1 {\n        return false\n    }\n    if n <= 3 {\n     \
    \   return true\n    }\n\n    // This is checked so that we can skip\n    // middle\
    \ five numbers in below loop\n    if n % 2 == 0 || n % 3 == 0 {\n        return\
    \ false\n    }\n\n    for i := 5; i * i <= n; i = i + 6 {\n        if n % i ==\
    \ 0 || n % (i + 2) == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var ret\
    \ bool = true\n\n    if n < 2 {\n        ret = false\n    } else {\n        for\
    \ i := 2; i < n; i++ {\n            if n % i == 0 {\n                ret = false\n\
    \                break\n            }\n        }\n    }\n\n    return ret\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    var result\
    \ bool = true\n    var i int\n    for i = 2; i < n; i++ {\n        if n % i ==\
    \ 0 {\n            result = false\n            break\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpp9axr0o4_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i * i <= n; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    for d := 2; d < n; d++ {\n      \
    \  if n % d == 0 {\n            return false\n        }\n    }\n\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073279
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i * i <= n; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i *\
    \ i <= n; i += 2 {\n        if n % i == 0 {\n            return false\n      \
    \  }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073280
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 2 {\n        return true\n    } else if n < 2 || n % 2 == 0 {\n        return\
    \ false\n    }\n    for i := 3; i < n; i++ {\n        if n % i == 0 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t\
    \ *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073280
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Your\
    \ code here.\n    // Use a loop to test whether n is evenly divisible by all integers\n\
    \    // between 2 and n. If it's divisible by any of them, it's not prime.\n \
    \   //\n    // We could write this as a loop like this:\n    //\n    // for i\
    \ := 2; i < n; i++ {\n    //     if n % i == 0 {\n    //         return false\n\
    \    //     }\n    // }\n    //\n    // But we can improve this loop by realizing\
    \ that if n is not prime,\n    // it must have a divisor that's less than its\
    \ square root. So we can\n    // just iterate up to the square root of n.\n  \
    \  //\n    // for i := 2; i * i <= n; i++ {\n    //     if n % i == 0 {\n    //\
    \         return false\n    //     }\n    // }\n    //\n    // But we can improve\
    \ it even more by realizing that since we only need\n    // the square root of\
    \ n, we can just calculate that number once and use\n    // it in the loop instead\
    \ of recalculating it every time.\n    for i := 2; i * i <= n; i++ {\n       \
    \ if n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpjhrca3ms_test.go:82: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073280
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n % 2 == 0 {\n        return false\n    }\n    var i int\n    for\
    \ i = 3; i*i <= n; i += 2 {\n        if n % i == 0 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n \
    \ candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6), expected:\
    \ false },\n     { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 0 {\n        return false\n    }\n\n    count := 0\n    for i := 1; i <=\
    \ n; i++ {\n        if n % i == 0 {\n            count++\n        }\n    }\n\n\
    \    return count == 2\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // TODO:\
    \ implement me\n    return false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmp4rqz81ct_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmp4rqz81ct_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmp4rqz81ct_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmp4rqz81ct_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmp4rqz81ct_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmp4rqz81ct_test.go:53:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmp4rqz81ct_test.go:53: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__0\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__5 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__10 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpsgowozwd_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpsgowozwd_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n    for i := 2; i <= n - 1; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073273
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    i := 2\n    for i*i <= n {\n    \
    \    if n % i == 0 {\n            return false\n        }\n        i++\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    if n == 2 {\n        return true\n \
    \   }\n    if n%2 == 0 {\n        return false\n    }\n    for i := 3; i*i <=\
    \ n; i+=2 {\n        if n%i == 0 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    // Check\
    \ to see if a number is prime.\n    if n < 2 {\n        return false\n    }\n\
    \    for i := 2; i <= n/2; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    /*\n\
    \    if n == 1 {\n        return false\n    }\n    */\n    if n % 2 == 0 {\n \
    \       return false\n    }\n    if n % 3 == 0 {\n        return false\n    }\n\
    \    if n % 5 == 0 {\n        return false\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpmzft5zg2_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__7 (0.00s)\n        tmpmzft5zg2_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__11\
    \ (0.00s)\n        tmpmzft5zg2_test.go:66: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Prime/test_num__12 (0.00s)\n        tmpmzft5zg2_test.go:66:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    return\
    \ false\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__1\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__2 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__3\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__4 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__7\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Prime/test_num__8 (0.00s)\n        tmpnv6fvfp3_test.go:52:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Prime/test_num__9\
    \ (0.00s)\n        tmpnv6fvfp3_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073276
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    fmt.Printf(\"\
    n = %d\\n\", n)\n    result := true\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            result = false\n            break\n        }\n   \
    \ }\n    return result\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "n = 6\nn = 101\nn = 11\nn = 13441\nn = 61\nn = 4\nn = 1\nn = 5\nn = 11\n\
    n = 17\nn = 85\nn = 77\nn = 255379\n--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL:\
    \ TestIs_Prime/test_num__6 (0.00s)\n        tmp32v6f0vq_test.go:60: expected '%!s(bool=false)',\
    \ got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n == 2 {\n        return true\n\
    \    }\n    if n % 2 == 0 {\n        return false\n    }\n    for i := 3; i <\
    \ n; i += 2 {\n        if n % i == 0 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate :=\
    \ is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 1
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    for i\
    \ := 2; i < n; i++ {\n        if n % i == 0 {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Prime (0.00s)\n    --- FAIL: TestIs_Prime/test_num__6\
    \ (0.00s)\n        tmpsr0sszk5_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073211
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n\tif n ==\
    \ 1 {\n\t\treturn false\n\t}\n\tfor i := 2; i < n; i++ {\n\t\tif n % i == 0 {\n\
    \t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n    if n <= 3 {\n        return true\n\
    \    }\n    if n % 2 == 0 || n % 3 == 0 {\n        return false\n    }\n    i\
    \ := 5\n    for i * i <= n {\n        if n % i == 0 || n % (i + 2) == 0 {\n  \
    \          return false\n        }\n        i += 6\n    }\n    return true\n}\n\
    \nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ < 2 {\n        return false\n    }\n    for i := 2; i < n; i++ {\n        if\
    \ n % i == 0 {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(6), expected: false },\n     { actual: candidate(101),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(13441), expected: true },\n     { actual: candidate(61), expected:\
    \ true },\n     { actual: candidate(4), expected: false },\n     { actual: candidate(1),\
    \ expected: false },\n     { actual: candidate(5), expected: true },\n     { actual:\
    \ candidate(11), expected: true },\n     { actual: candidate(17), expected: true\
    \ },\n     { actual: candidate(85), expected: false },\n     { actual: candidate(77),\
    \ expected: false },\n     { actual: candidate(255379), expected: false },\n \
    \  }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\",\
    \ i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073151
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    is_prime\
    \ := true\n    if n == 1 {\n        is_prime = false\n    } else {\n        for\
    \ i := 2; i < n; i++ {\n            if n % i == 0 {\n                is_prime\
    \ = false\n                break\n            }\n        }\n    }\n    return\
    \ is_prime\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return\
    \ false\n        }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T)\
    \ {\n  candidate := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(6),\
    \ expected: false },\n     { actual: candidate(101), expected: true },\n     {\
    \ actual: candidate(11), expected: true },\n     { actual: candidate(13441), expected:\
    \ true },\n     { actual: candidate(61), expected: true },\n     { actual: candidate(4),\
    \ expected: false },\n     { actual: candidate(1), expected: false },\n     {\
    \ actual: candidate(5), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(17), expected: true },\n     { actual: candidate(85),\
    \ expected: false },\n     { actual: candidate(77), expected: false },\n     {\
    \ actual: candidate(255379), expected: false },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073276
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    d := 2\n    for d < n {\n       \
    \ if n % d == 0 {\n            return false\n        }\n        d += 1\n    }\n\
    \    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(6), expected: false },\n     {\
    \ actual: candidate(101), expected: true },\n     { actual: candidate(11), expected:\
    \ true },\n     { actual: candidate(13441), expected: true },\n     { actual:\
    \ candidate(61), expected: true },\n     { actual: candidate(4), expected: false\
    \ },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ == 1 {\n        return false\n    }\n\n    for i := 2; i <= n/2; i++ {\n   \
    \     if n % i == 0 {\n            return false\n        }\n    }\n\n    return\
    \ true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate := is_prime\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(6), expected: false },\n     { actual:\
    \ candidate(101), expected: true },\n     { actual: candidate(11), expected: true\
    \ },\n     { actual: candidate(13441), expected: true },\n     { actual: candidate(61),\
    \ expected: true },\n     { actual: candidate(4), expected: false },\n     { actual:\
    \ candidate(1), expected: false },\n     { actual: candidate(5), expected: true\
    \ },\n     { actual: candidate(11), expected: true },\n     { actual: candidate(17),\
    \ expected: true },\n     { actual: candidate(85), expected: false },\n     {\
    \ actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073281
- exit_code: 0
  program: "package is_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
    // false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n// true\n// >>>\
    \ is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>> is_prime(4)\n\
    // false\n// >>> is_prime(1)\n// false\nfunc is_prime(n int) bool {\n    if n\
    \ <= 1 {\n        return false\n    }\n\n    if n == 2 {\n        return true\n\
    \    }\n\n    if n % 2 == 0 {\n        return false\n    }\n\n    for i := 3;\
    \ i < n; i += 2 {\n        if n % i == 0 {\n            return false\n       \
    \ }\n    }\n\n    return true\n}\n\nfunc TestIs_Prime(t *testing.T) {\n  candidate\
    \ := is_prime\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(6), expected: false },\n  \
    \   { actual: candidate(101), expected: true },\n     { actual: candidate(11),\
    \ expected: true },\n     { actual: candidate(13441), expected: true },\n    \
    \ { actual: candidate(61), expected: true },\n     { actual: candidate(4), expected:\
    \ false },\n     { actual: candidate(1), expected: false },\n     { actual: candidate(5),\
    \ expected: true },\n     { actual: candidate(11), expected: true },\n     { actual:\
    \ candidate(17), expected: true },\n     { actual: candidate(85), expected: false\
    \ },\n     { actual: candidate(77), expected: false },\n     { actual: candidate(255379),\
    \ expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073281
