language: go_test.go
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Your solution here\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpi062gqwb_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpi062gqwb_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpi062gqwb_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpi062gqwb_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpi062gqwb_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpi062gqwb_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpi062gqwb_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpi062gqwb_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2p1h_e0_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    s_bytes := []byte(s)\n\
    \    for i, c := range s_bytes {\n        s_bytes[i] = c + 2 * 2\n    }\n    return\
    \ string(s_bytes)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpa4gwcaam_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpa4gwcaam_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpa4gwcaam_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n  // Write your code here\n\
    \  return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpns_mea_1_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpns_mea_1_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpns_mea_1_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpns_mea_1_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpns_mea_1_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpns_mea_1_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpns_mea_1_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpns_mea_1_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alph := []rune(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    res := \"\"\n    for _, c := range s {\n        l := rune(c)\n        for\
    \ i, r := range alph {\n            if l == r {\n                //   For each\
    \ letter of the alphabet, add two places to the \n                //   character\
    \ and then check if the letter is within the \n                //   range of the\
    \ alphabet. If it is, then append the \n                //   shifted value to\
    \ the encrypted string. If it is not, \n                //   subtract the range\
    \ of the alphabet from the shifted \n                //   value and add it to\
    \ the new encrypted string.\n                if l+2 <= 'z' {\n               \
    \     res += string(l+2)\n                } else {\n                    res +=\
    \ string(i-25+l)\n                }\n            }\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0rq0zc3f_test.go:37:35: invalid operation: i - 25 + l (mismatched types
    int and rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write code here.\n}\n\
    \nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpghc3cjj9_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ for _, c := range s {\n        result += string(c - 2 * 2)\n    }\n    return\
    \ result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3mo_0ys9_test.go:49: expected 'lm', got 'de'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3mo_0ys9_test.go:49: expected 'ewhjklnop', got ']o`bcdfgh'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3mo_0ys9_test.go:49:\
    \ expected 'kj', got 'cb'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp3mo_0ys9_test.go:49: expected 'ix', got 'ap'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp3mo_0ys9_test.go:49: expected 'jeiajeaijeiak', got 'b]asb]sab]asc'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp3mo_0ys9_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'dahhkiubneaj`'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp3mo_0ys9_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got '`tv`hijehbqdiehqbdhedqbjiheijqbdheijqbdbq_qbd'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp3mo_0ys9_test.go:49: expected 'e', got ']'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    ascii_map := make(map[string]int)\n\
    \    for i := 97; i <= 122; i++ {\n        ascii_map[string(i)] = i\n    }\n \
    \   r := \"\"\n    for _, char := range s {\n        if string(char) == \"z\"\
    \ {\n            r += \"b\"\n        } else if string(char) == \"y\" {\n     \
    \       r += \"a\"\n        } else {\n            r += string(char + 2)\n    \
    \    }\n    }\n    return r\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp9kr_rx_8_test.go:24:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // your code here\n   \
    \ return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp77bd6iog_test.go:46: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp77bd6iog_test.go:46: expected 'ewhjklnop', got 'asdfghjkl'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp77bd6iog_test.go:46:\
    \ expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp77bd6iog_test.go:46: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp77bd6iog_test.go:46: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp77bd6iog_test.go:46:\
    \ expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp77bd6iog_test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp77bd6iog_test.go:46: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"encrypt\"\n}\n\
    \nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmptms860v0_test.go:45: expected 'lm', got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmptms860v0_test.go:45: expected 'ewhjklnop', got 'encrypt'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmptms860v0_test.go:45:\
    \ expected 'kj', got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n\
    \        tmptms860v0_test.go:45: expected 'ix', got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmptms860v0_test.go:45: expected 'jeiajeaijeiak', got 'encrypt'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmptms860v0_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmptms860v0_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmptms860v0_test.go:45:\
    \ expected 'e', got 'encrypt'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Place your code here\n\
    \    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpkvoahrwi_test.go:46: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpkvoahrwi_test.go:46: expected 'ewhjklnop', got 'asdfghjkl'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpkvoahrwi_test.go:46:\
    \ expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpkvoahrwi_test.go:46: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpkvoahrwi_test.go:46: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpkvoahrwi_test.go:46:\
    \ expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpkvoahrwi_test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpkvoahrwi_test.go:46: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // your code here\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpor6yehh__test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073931
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n  var k int \n  k = len(s)\n\
    \  n := make([]byte, k)\n  for i := 0; i < k; i++ {\n    n[i] = s[i] + 2*2\n \
    \ }\n  return string(n)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpstmxu0q__test.go:51: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpstmxu0q__test.go:51:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpstmxu0q__test.go:51: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // your code here\n   \
    \ return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmprp1hhwnl_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmprp1hhwnl_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmprp1hhwnl_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmprp1hhwnl_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmprp1hhwnl_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmprp1hhwnl_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmprp1hhwnl_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmprp1hhwnl_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var enc = \"\"\n    for\
    \ _,v := range s {\n        switch v {\n            case 'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z':\n\
    \                enc += string(v + 2)\n            case 'A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z':\n\
    \                enc += string(v + 2)\n            default:\n                enc\
    \ += string(v)\n        }\n    }\n    return enc\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp0luibhvx_test.go:56: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp0luibhvx_test.go:56: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp0luibhvx_test.go:56:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp0luibhvx_test.go:56: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp0luibhvx_test.go:56: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp0luibhvx_test.go:56:\
    \ expected 'lippsqcjvmirh', got 'jgnnqo{htkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp0luibhvx_test.go:56: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fz|fnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp0luibhvx_test.go:56: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\t// Your code here\n\t// alphabets\
    \ := \"abcdefghijklmnopqrstuvwxyz\"\n\t// var result string\n\t// for _, letter\
    \ := range s {\n\t// \tindex := strings.Index(alphabets, string(letter))\n\t//\
    \ \tif index < 0 {\n\t// \t\tpanic(\"index < 0, letter \" + string(letter) + \"\
    \ not found\")\n\t// \t}\n\t// \tresult += string(alphabets[(index+4)%26])\n\t\
    // }\n\t// return result\n\tvar result []byte\n\tfor _, letter := range s {\n\t\
    \tif letter >= 97 && letter <= 122 {\n\t\t\tresult = append(result, letter+4)\n\
    \t\t} else if letter >= 65 && letter <= 90 {\n\t\t\tresult = append(result, letter+4)\n\
    \t\t} else {\n\t\t\tresult = append(result, letter)\n\t\t}\n\t}\n\treturn string(result)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpytgiqc4o_test.go:36:28: cannot use letter + 4 (value of type rune) as
    type byte in argument to append

    /tmp/tmpytgiqc4o_test.go:38:28: cannot use letter + 4 (value of type rune) as
    type byte in argument to append

    /tmp/tmpytgiqc4o_test.go:40:28: cannot use letter (variable of type rune) as type
    byte in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // s = \"hi\"\n    // alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    // shiftBy = 4\n    // s2 = \"lm\"\n \
    \   shiftBy := 4\n    var s2 string\n\n    for _, letter := range s {\n      \
    \  // fmt.Println(letter)\n        // fmt.Println(string(letter))\n        //\
    \ fmt.Println(int(letter))\n        new_letter := int(letter) + shiftBy\n    \
    \    // fmt.Println(new_letter)\n        // fmt.Println(string(new_letter))\n\
    \        s2 += string(new_letter)\n    }\n    return s2\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmppgj37bd2_test.go:36:15: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\tvar result string\n\ta :=\
    \ []byte(s)\n\tfor i := 0; i < len(a); i++ {\n\t\ta[i] = a[i] + 2*2\n\t\tresult\
    \ += string(a[i])\n\t}\n\treturn result\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpkcdx0c86_test.go:51: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpkcdx0c86_test.go:51:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpkcdx0c86_test.go:51: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    rs := []rune(s)\n    for\
    \ i, _ := range rs {\n        rs[i] = rune(rs[i] + 2 * 2)\n    }\n    return string(rs)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmp1qxukq83_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp1qxukq83_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp1qxukq83_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // write your code here\n\
    \    // return the encrypted string\n    out := \"\"\n    for _, c := range s\
    \ {\n        out += string(int(c) + (2 * 2))\n    }\n    return out\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpztf9l0yp_test.go:26:16: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    shifted := \"\"\n    for\
    \ _, value := range s {\n        shifted += string(value + 2*2)\n    }\n    return\
    \ shifted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpvxjpcg8n_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpvxjpcg8n_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpvxjpcg8n_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpmpym8vkq_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpmpym8vkq_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpmpym8vkq_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpmpym8vkq_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpmpym8vkq_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpmpym8vkq_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpmpym8vkq_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpmpym8vkq_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // your code here\n   \
    \ return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmprp1hhwnl_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmprp1hhwnl_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmprp1hhwnl_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmprp1hhwnl_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmprp1hhwnl_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmprp1hhwnl_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmprp1hhwnl_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmprp1hhwnl_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // 1. Create a variable\
    \ to hold an alphabet string\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    // 2. Create a variable for the encrypted string\n    encrypt := \"\"\n \
    \   // 3. Loop through the string to encrypt\n    for i := 0; i < len(s); i++\
    \ {\n        // 3.1 Find the alphabet index of the current letter\n        //\
    \ 3.2 Add 2 multiplied by 2 to that index\n        // 3.3 Add this letter to the\
    \ encrypted string\n        index := alphabet.indexOf(s[i])\n        encrypt +=\
    \ alphabet[(index + 4) % len(alphabet)]\n    }\n    // 4. Return the encrypted\
    \ string\n    return encrypt\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9ny1vu29_test.go:31:27: alphabet.indexOf undefined (type string has no
    field or method indexOf)

    /tmp/tmp9ny1vu29_test.go:32:9: invalid operation: encrypt += alphabet[(index +
    4) % len(alphabet)] (mismatched types string and byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var out string\n\n    for\
    \ _, char := range s {\n        out += string(char + (2 * 2))\n    }\n\n    return\
    \ out\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpj_roc07m_test.go:51: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpj_roc07m_test.go:51:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpj_roc07m_test.go:51: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    a := []rune(s)\n    for\
    \ i, r := range a {\n        a[i] = (r + (2 * 2))\n    }\n    return string(a)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpdzqnt853_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpdzqnt853_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpdzqnt853_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Put your code here\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl7kxqfbg_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // get the length of the\
    \ string\n    strLen := len(s)\n    slice := make([]string, strLen)\n    // first,\
    \ put the characters into a slice\n    for i := 0; i < strLen; i++ {\n       \
    \ // fmt.Println(string(s[i]))\n        slice[i] = string(s[i])\n    }\n    //\
    \ second, go through the slice\n    for i := 0; i < strLen; i++ {\n        //\
    \ fmt.Println(slice[i])\n        // if it is not a space, then add two to the\
    \ char\n        if slice[i] != \" \" {\n            slice[i] = string(s[i] + 2)\n\
    \        }\n    }\n    // fmt.Println(slice)\n    // return the slice as a string\n\
    \    return fmt.Sprintf(\"%v\", slice)\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpcx8gyps__test.go:63: expected 'lm', got '[j k]'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpcx8gyps__test.go:63: expected 'ewhjklnop', got '[c u f h\
    \ i j l m n]'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpcx8gyps__test.go:63:\
    \ expected 'kj', got '[i h]'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n\
    \        tmpcx8gyps__test.go:63: expected 'ix', got '[g v]'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpcx8gyps__test.go:63: expected 'jeiajeaijeiak', got '[h c\
    \ g y h c y g h c g y i]'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n   \
    \     tmpcx8gyps__test.go:63: expected 'lippsqcjvmirh', got '[j g n n q o { h\
    \ t k g p f]'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpcx8gyps__test.go:63:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got '[f z | f n o\
    \ p k n h w j o k n w h j n k j w h p o n k o p w h j n k o p w h j h w e w h\
    \ j]'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpcx8gyps__test.go:63:\
    \ expected 'e', got '[c]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2p1h_e0_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // \n    return s\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpmbb5sk6b_test.go:46: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpmbb5sk6b_test.go:46: expected 'ewhjklnop', got 'asdfghjkl'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpmbb5sk6b_test.go:46:\
    \ expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpmbb5sk6b_test.go:46: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpmbb5sk6b_test.go:46: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpmbb5sk6b_test.go:46:\
    \ expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpmbb5sk6b_test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpmbb5sk6b_test.go:46: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\t// declare a variable containing\
    \ the alphabet\n\tvar alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\t// declare\
    \ the variable that will store the result\n\tresult := \"\"\n\t// loop over the\
    \ characters in the string\n\tfor _, char := range s {\n\t\t// position is the\
    \ position of each character in the alphabet\n\t\tposition := strings.Index(alphabet,\
    \ string(char))\n\t\t// Add the position shifted by two to the result\n\t\tresult\
    \ += string(alphabet[(position+2)%26])\n\t}\n\t// return the result\n\treturn\
    \ result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgbp4453z_test.go:29:15: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var res string\n    for\
    \ _, char := range s {\n        intChar := int(char)\n        intChar += 2 * 2\n\
    \        res += string(intChar)\n    }\n    return res\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpq900lvt5_test.go:26:16: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // TODO: Implement me!\n\
    \    return \"hi\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp2x8la5v3_test.go:46: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp2x8la5v3_test.go:46: expected 'ewhjklnop', got 'hi'\n  \
    \  --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp2x8la5v3_test.go:46:\
    \ expected 'kj', got 'hi'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp2x8la5v3_test.go:46: expected 'ix', got 'hi'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp2x8la5v3_test.go:46: expected 'jeiajeaijeiak', got 'hi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp2x8la5v3_test.go:46:\
    \ expected 'lippsqcjvmirh', got 'hi'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n\
    \        tmp2x8la5v3_test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'hi'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmp2x8la5v3_test.go:46:\
    \ expected 'e', got 'hi'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ s = LowerCase(s)\n    for _, c := range s {\n        index := string(c) - 'a'\n\
    \        new_index := (index + (2 * 2)) % 26\n        result += string(new_index\
    \ + 'a')\n    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_c94blqd_test.go:23:9: undefined: LowerCase

    /tmp/tmp_c94blqd_test.go:25:18: invalid operation: string(c) - ''a'' (mismatched
    types string and untyped rune)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    newString := \"\"\n   \
    \ for _, letter := range s {\n        newString += string(letter + 2)\n    }\n\
    \    return newString\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpcnmpj9oj_test.go:49: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpcnmpj9oj_test.go:49: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpcnmpj9oj_test.go:49:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpcnmpj9oj_test.go:49: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpcnmpj9oj_test.go:49: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpcnmpj9oj_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'jgnnqo{htkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpcnmpj9oj_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fz|fnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpcnmpj9oj_test.go:49: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Implement me!\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjwn2bbtt_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Your code here\n   \
    \ return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpz2whgmem_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpz2whgmem_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpz2whgmem_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpz2whgmem_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpz2whgmem_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpz2whgmem_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpz2whgmem_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpz2whgmem_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var r string = \"\"\n \
    \   for _, c := range s {\n        r += string(int(c)+2*2)\n    }\n    return\
    \ r\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpbkciid3s_test.go:24:14: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Get the alphabet string\n\
    \    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n    // create an array of the\
    \ alphabet\n    alphabet_arr := []rune(alphabet)\n    // create an array of the\
    \ string we are encrypting\n    str_arr := []rune(s)\n    // create an empty array\
    \ of runes\n    ans := []rune{}\n    // loop through the string\n    for i:=0;\
    \ i<len(str_arr); i++ {\n        // get the index of the letter in the alphabet\n\
    \        l := string(str_arr[i])\n        l_ind := string(alphabet).indexOf(l)\n\
    \        // get the new index of the letter in the alphabet\n        new_l_ind\
    \ := l_ind + (2 * 2)\n        // if new_l_ind is greater than len(alphabet_arr)\n\
    \        if new_l_ind > len(alphabet_arr) {\n            // subtract the length\
    \ of the alphabet from the new index\n            new_l_ind = new_l_ind - len(alphabet_arr)\n\
    \        }\n        // add the letter at the new index to the answer\n       \
    \ ans = append(ans, alphabet_arr[new_l_ind])\n    }\n    // return the answer\
    \ joined back together\n    return string(ans)\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpit23hkx8_test.go:34:35: string(alphabet).indexOf undefined (type string
    has no field or method indexOf)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    const alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    const alphaL = int(len(alpha))\n    sL := len(s)\n    newString := make([]byte,\
    \ sL)\n    for i := 0; i < sL; i++ {\n        index := alphaL - 2 - strings.Index(alpha,\
    \ strings.ToLower(string(s[i])))\n        newString[i] = alpha[index]\n    }\n\
    \    return string(newString)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpnxa_5wy0_test.go:27:31: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Code goes here!\n  \
    \  return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp8bvr3_hv_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp8bvr3_hv_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp8bvr3_hv_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp8bvr3_hv_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp8bvr3_hv_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp8bvr3_hv_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp8bvr3_hv_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp8bvr3_hv_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // YOUR CODE HERE\n   \
    \ l := len(s)\n    cipher := \"\"\n    for i := 0; i < l; i++ {\n        if s[i]\
    \ >= 'a' && s[i] <= 'z' {\n            new_char := s[i] + 2\n            if new_char\
    \ > 'z' {\n                new_char = new_char - 26\n            }\n         \
    \   cipher += string(new_char)\n        } else if s[i] >= 'A' && s[i] <= 'Z' {\n\
    \            new_char := s[i] + 2\n            if new_char > 'Z' {\n         \
    \       new_char = new_char - 26\n            }\n            cipher += string(new_char)\n\
    \        } else {\n            cipher += string(s[i])\n        }\n    }\n    return\
    \ cipher\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpbj0jadyn_test.go:65: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpbj0jadyn_test.go:65: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpbj0jadyn_test.go:65:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpbj0jadyn_test.go:65: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpbj0jadyn_test.go:65: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpbj0jadyn_test.go:65:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpbj0jadyn_test.go:65: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpbj0jadyn_test.go:65: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // return \"\"\n    c :=\
    \ []byte(s)\n    for i := 0; i < len(c); i++ {\n        // fmt.Println(c[i])\n\
    \        if (c[i] >= 97 && c[i] <= 122) {\n            c[i] = c[i] + 2\n     \
    \       if (c[i] > 122) {\n                c[i] = c[i] - 26\n            }\n \
    \       }\n    }\n    return string(c)\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpl_75mhna_test.go:56: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpl_75mhna_test.go:56: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpl_75mhna_test.go:56:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpl_75mhna_test.go:56: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpl_75mhna_test.go:56: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpl_75mhna_test.go:56:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpl_75mhna_test.go:56: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpl_75mhna_test.go:56: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\tstr := \"\"\n\tfor _, v :=\
    \ range s {\n\t\tif v >= 'a' && v <= 'z' {\n\t\t\tv += 2\n\t\t\tif v > 'z' {\n\
    \t\t\t\tv -= 26\n\t\t\t}\n\t\t}\n\t\tstr += string(v)\n\t}\n\treturn str\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpyp7z5a1p_test.go:55: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpyp7z5a1p_test.go:55: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpyp7z5a1p_test.go:55:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpyp7z5a1p_test.go:55: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpyp7z5a1p_test.go:55: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpyp7z5a1p_test.go:55:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpyp7z5a1p_test.go:55: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpyp7z5a1p_test.go:55: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpmpym8vkq_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpmpym8vkq_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpmpym8vkq_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpmpym8vkq_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpmpym8vkq_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpmpym8vkq_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpmpym8vkq_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpmpym8vkq_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    new_s := \"\"\n    // range\
    \ over characters in string\n    for _, c := range s {\n        // subtract 97\
    \ from the unicode code point value to get the distance \n        // from a\n\
    \        dist := c - 97\n        new_s += string(97 + (dist + 2) % 26)\n    }\n\
    \    return new_s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpd24jn6zb_test.go:53: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpd24jn6zb_test.go:53: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpd24jn6zb_test.go:53:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpd24jn6zb_test.go:53: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpd24jn6zb_test.go:53: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpd24jn6zb_test.go:53:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpd24jn6zb_test.go:53: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpd24jn6zb_test.go:53: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // FILL ME IN\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpxthjnibu_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpxthjnibu_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpxthjnibu_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpxthjnibu_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpxthjnibu_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpxthjnibu_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpxthjnibu_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpxthjnibu_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\t// Set up alphabet\n\ta :=\
    \ []string{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"}\n\t// Create empty string\n\tencrypted :=\
    \ \"\"\n\t// Loop through each string\n\tfor _, character := range s {\n\t\t//\
    \ Loop through alphabet\n\t\tfor i, letter := range a {\n\t\t\t// Compare string\
    \ character with alphabet character\n\t\t\tif string(character) == letter {\n\t\
    \t\t\t// Add new character to encrypted string\n\t\t\t\tencrypted += a[(i+4)%len(a)]\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n\
    \  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"\
    ), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"\
    ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     {\
    \ actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"foo\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpg4kf4n_1_test.go:45: expected 'lm', got 'foo'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpg4kf4n_1_test.go:45: expected 'ewhjklnop', got 'foo'\n \
    \   --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpg4kf4n_1_test.go:45:\
    \ expected 'kj', got 'foo'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n  \
    \      tmpg4kf4n_1_test.go:45: expected 'ix', got 'foo'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpg4kf4n_1_test.go:45: expected 'jeiajeaijeiak', got 'foo'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpg4kf4n_1_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'foo'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n\
    \        tmpg4kf4n_1_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'foo'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpg4kf4n_1_test.go:45:\
    \ expected 'e', got 'foo'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var v []byte\n    for _,\
    \ char := range s {\n        n := int(char)\n        if n < 97 {\n           \
    \ v = append(v, char)\n        } else {\n            n = ((n - 97) * 2 + 2) %\
    \ 26 + 97\n            v = append(v, byte(n))\n        }\n    }\n    return string(v)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9w6eof8e_test.go:26:27: cannot use char (variable of type rune) as type
    byte in argument to append

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var i int\n    for i =\
    \ 0; i < len(s); i++ {\n        x := (s[i] - 97 + 2) % 26\n        s[i] = x +\
    \ 97\n    }\n    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpowf_9_h6_test.go:25:9: cannot assign to s[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074104
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // YOUR CODE HERE\n   \
    \ var alphabet_array string = \"abcdefghijklmnopqrstuvwxyz\"\n    var length_alphabet_array\
    \ int = len(alphabet_array)\n    var length_string int = len(s)\n    var encrypt_string\
    \ string = \"\"\n    for i := 0; i < length_string; i++ {\n        for j := 0;\
    \ j < length_alphabet_array; j++ {\n            if s[i] == alphabet_array[j] {\n\
    \                var new_index int = (j+2) * 2\n                if new_index >\
    \ 26 {\n                    new_index = new_index - 26\n                }\n  \
    \              encrypt_string = encrypt_string + string(alphabet_array[new_index])\n\
    \            }\n        }\n    }\n    return encrypt_string\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: index out of range\
    \ [26] with length 26 [recovered]\n\tpanic: runtime error: index out of range\
    \ [26] with length 26\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt({0x51f03e, 0x9})\n\t/tmp/tmpfit5862b_test.go:34\
    \ +0xe8\ncommand-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmpfit5862b_test.go:49\
    \ +0x76\ntesting.tRunner(0xc0001a01a0, 0x529008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    if len(s) == 0 {\n    \
    \    return \"\"\n    }\n    return fmt.Sprintf(\"%c\", (s[0] + 2*2)) + encrypt(s[1:])\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpfh75ha54_test.go:48: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpfh75ha54_test.go:48:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpfh75ha54_test.go:48: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074105
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ for _,r := range s {\n        result += string(r + 2*2)\n    }\n    return result\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmp0_n4pqbj_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp0_n4pqbj_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp0_n4pqbj_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var r string = \"\"\n \
    \   for _, v := range s {\n        r += string(v + 2 * 2)\n    }\n    return r\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpr2t37iis_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpr2t37iis_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpr2t37iis_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ var abc string = \"abcdefghijklmnopqrstuvwxyz\"\n    var abcRune = []rune(abc)\n\
    \    for _, v := range s {\n        if v == ' ' {\n            result += \" \"\
    \n        } else {\n            for i, v2 := range abcRune {\n               \
    \ if v == v2 {\n                    result += string(abcRune[i-4])\n         \
    \       }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: index out of range\
    \ [-4] [recovered]\n\tpanic: runtime error: index out of range [-4]\n\ngoroutine\
    \ 34 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmpvv6ttutn_test.go:31\n\
    command-line-arguments_test.TestEncrypt(0xc00019aea0?)\n\t/tmp/tmpvv6ttutn_test.go:47\
    \ +0x10df\ntesting.tRunner(0xc00019aea0, 0x529008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var ret string\n    for\
    \ _, val := range s {\n        ret += string(val + 'a' - 'i')\n    }\n    return\
    \ ret\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp4c2zjt10_test.go:49: expected 'lm', got '`a'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp4c2zjt10_test.go:49: expected 'ewhjklnop', got 'Yk\\^_`bcd'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp4c2zjt10_test.go:49:\
    \ expected 'kj', got '_^'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp4c2zjt10_test.go:49: expected 'ix', got ']l'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp4c2zjt10_test.go:49: expected 'jeiajeaijeiak', got '^Y]o^Yo]^Y]o_'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp4c2zjt10_test.go:49:\
    \ expected 'lippsqcjvmirh', got '`]ddgeq^ja]f\\'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp4c2zjt10_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got '\\pr\\defad^m`eadm^`da`m^fedaefm^`daefm^`^m[m^`'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp4c2zjt10_test.go:49: expected 'e', got 'Y'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := []rune(s)\n    for\
    \ i, j := range r {\n        if j == 122 {\n            r[i] = 98\n        } else\
    \ if j == 121 {\n            r[i] = 97\n        } else {\n            r[i] = j\
    \ + 2\n        }\n    }\n    return string(r)\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp6l5f3ptr_test.go:55: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp6l5f3ptr_test.go:55: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp6l5f3ptr_test.go:55:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp6l5f3ptr_test.go:55: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp6l5f3ptr_test.go:55: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp6l5f3ptr_test.go:55:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp6l5f3ptr_test.go:55: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp6l5f3ptr_test.go:55: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n  b := []byte(s)\n  for i :=\
    \ 0; i < len(b); i++ {\n    if b[i] == 'x' {\n      b[i] = 'a'\n    } else if\
    \ b[i] == 'y' {\n      b[i] = 'b'\n    } else if b[i] == 'z' {\n      b[i] = 'c'\n\
    \    } else {\n      b[i] += 2\n    }\n  }\n  return string(b)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp028cr88c_test.go:57: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp028cr88c_test.go:57: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp028cr88c_test.go:57:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp028cr88c_test.go:57: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp028cr88c_test.go:57: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp028cr88c_test.go:57:\
    \ expected 'lippsqcjvmirh', got 'jgnnqobhtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp028cr88c_test.go:57: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'facfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp028cr88c_test.go:57: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabets := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encrypted_s string\n    for _, s_alpha := range s {\n        var found\
    \ bool\n        for k, alpha := range alphabets {\n            if s_alpha == alpha\
    \ {\n                if k <= 24 {\n                    encrypted_s += string(alphabets[k+2])\n\
    \                } else {\n                    encrypted_s += string(alphabets[k-24])\n\
    \                }\n                found = true\n                break\n    \
    \        }\n        }\n        if !found {\n            encrypted_s += string(s_alpha)\n\
    \        }\n    }\n    return encrypted_s\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: index out of range\
    \ [26] with length 26 [recovered]\n\tpanic: runtime error: index out of range\
    \ [26] with length 26\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2({0x514620,\
    \ 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x514620, 0xc000160000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmpngym1buw_test.go:29\n\
    command-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmpngym1buw_test.go:56 +0x1328\n\
    testing.tRunner(0xc000103520, 0x52a008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Initialize an empty\
    \ string which will be the encrypted string.\n    result := \"\"\n    // Iterate\
    \ through each character in the input string.\n    for _, c := range s {\n   \
    \     // If the character is a space, put a space in the encrypted string.\n \
    \       if c == ' ' {\n            result += \" \"\n        } else {\n       \
    \     // Since the rotation is by two letters at a time, the letter\n        \
    \    // before the first letter is the last letter in the alphabet.\n        \
    \    // Set the last letter of the alphabet to the \"previous\"\n            //\
    \ letter.\n            previous := 'z'\n            // If the current letter is\
    \ the first letter in the alphabet,\n            // set the \"previous\" letter\
    \ to the last letter in the alphabet.\n            if c == 'a' {\n           \
    \     previous = 'z'\n            } else {\n                // If the current\
    \ letter is not the first letter in the alphabet,\n                // set the\
    \ \"previous\" letter to the letter two spaces before\n                // the\
    \ current letter.\n                previous = c - 2\n            }\n         \
    \   // Add the letter two spaces after the previous letter to the\n          \
    \  // encrypted string.\n            result += string(previous + 2)\n        }\n\
    \    }\n    // Return the encrypted string.\n    return result\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpppnoqssc_test.go:74: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpppnoqssc_test.go:74: expected 'ewhjklnop', got '|sdfghjkl'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpppnoqssc_test.go:74:\
    \ expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpppnoqssc_test.go:74: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpppnoqssc_test.go:74: expected 'jeiajeaijeiak', got 'f|ewf|wef|ewg'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpppnoqssc_test.go:74:\
    \ expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpppnoqssc_test.go:74: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpppnoqssc_test.go:74: expected 'e', got '|'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n  return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpace789z4_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpace789z4_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpace789z4_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpace789z4_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpace789z4_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpace789z4_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpace789z4_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpace789z4_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // WRITE YOUR CODE HERE\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp5q09ralz_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp5q09ralz_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp5q09ralz_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp5q09ralz_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp5q09ralz_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp5q09ralz_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp5q09ralz_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp5q09ralz_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encrypted string\n\
    \    for _, char := range s {\n        if (char >= 'a' && char <= 'z') {\n   \
    \         if char + 2 > 'z' {\n                encrypted += string(char + 2 -\
    \ 26)\n            } else {\n                encrypted += string(char + 2)\n \
    \           }\n        } else if (char >= 'A' && char <= 'Z') {\n            if\
    \ char + 2 > 'Z' {\n                encrypted += string(char + 2 - 26)\n     \
    \       } else {\n                encrypted += string(char + 2)\n            }\n\
    \        } else {\n            encrypted += string(char)\n        }\n    }\n \
    \   return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpxe3m6ciy_test.go:63: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpxe3m6ciy_test.go:63: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpxe3m6ciy_test.go:63:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpxe3m6ciy_test.go:63: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpxe3m6ciy_test.go:63: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpxe3m6ciy_test.go:63:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpxe3m6ciy_test.go:63: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpxe3m6ciy_test.go:63: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var res string\n    //\
    \ 2. Solve the problem\n    for _, c := range s {\n        if c >= 65 && c <=\
    \ 90 {\n            newChar := c + 4\n            if newChar > 90 {\n        \
    \        newChar = 64 + (newChar - 90)\n            }\n            res += string(newChar)\n\
    \        } else if c >= 97 && c <= 122 {\n            newChar := c + 4\n     \
    \       if newChar > 122 {\n                newChar = 96 + (newChar - 122)\n \
    \           }\n            res += string(newChar)\n        } else {\n        \
    \    res += string(c)\n        }\n    }\n    return res\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    //\n    // YOUR CODE HERE\n\
    \    //\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp940vkcc0_test.go:48: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp940vkcc0_test.go:48: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp940vkcc0_test.go:48: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp940vkcc0_test.go:48:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp940vkcc0_test.go:48: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp940vkcc0_test.go:48: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp940vkcc0_test.go:48:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp940vkcc0_test.go:48: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074107
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // NEED TO ROTATE THE ALPHABET\
    \ BY TWO LETTERS\n    // TWO LETTERS * TWO LETTERS\n    var output string\n  \
    \  for _, char := range s {\n        newChar := char + 2 * 2\n        // We should\
    \ consider a more elegant way of handling the edge cases,\n        // but this\
    \ is simple enough for now.\n        if newChar > 122 {\n            newChar =\
    \ newChar - 26\n        }\n        if newChar < 97 {\n            newChar = newChar\
    \ + 26\n        }\n        output += string(newChar)\n    }\n    return output\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var newstr string\n   \
    \ for _, v := range s {\n        newstr += string(v+4)\n    }\n    return newstr\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpn4l28vxk_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpn4l28vxk_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpn4l28vxk_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // return \"\"\n    var\
    \ res string\n    for _,x := range s {\n        res += string(x+2*2)\n    }\n\
    \    return res\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpdexuvq12_test.go:50: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpdexuvq12_test.go:50:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpdexuvq12_test.go:50: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n\n \
    \   for _, v := range s {\n        result += string(v + 2*2)\n    }\n\n    return\
    \ result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpgpbc0hol_test.go:51: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpgpbc0hol_test.go:51:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpgpbc0hol_test.go:51: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Enter code here.\n \
    \   return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpt9zd9bol_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpt9zd9bol_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpt9zd9bol_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpt9zd9bol_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpt9zd9bol_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpt9zd9bol_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpt9zd9bol_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpt9zd9bol_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074107
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := []rune(s)\n    for\
    \ i, c := range r {\n        n := c - 97\n        n = (n + 2 * 2) % 26\n     \
    \   r[i] = n + 97\n    }\n    return string(r)\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ for _, c := range s {\n        result += string(c + 2 * 2)\n    }\n    return\
    \ result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmp_qv1mdsj_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp_qv1mdsj_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp_qv1mdsj_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here.\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5xl163cf_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    e := \"\"\n    for _, value\
    \ := range s {\n        // note: you will get a byte value, so need to convert\
    \ to a string before adding to e\n        e += string(value + 2)\n    }\n    return\
    \ e\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp7wdkpmy4_test.go:50: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp7wdkpmy4_test.go:50: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp7wdkpmy4_test.go:50:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp7wdkpmy4_test.go:50: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp7wdkpmy4_test.go:50: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp7wdkpmy4_test.go:50:\
    \ expected 'lippsqcjvmirh', got 'jgnnqo{htkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp7wdkpmy4_test.go:50: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fz|fnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp7wdkpmy4_test.go:50: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    s_encrypt := \"\"\n   \
    \ for _, v := range s {\n        v = v + (2 * 2)\n        s_encrypt += string(v)\n\
    \    }\n    return s_encrypt\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmp3k9ff_bu_test.go:50: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp3k9ff_bu_test.go:50:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp3k9ff_bu_test.go:50: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074107
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var cipherText string\n\
    \    for _, char := range s {\n        cipherChar := int(char) + (2 * 2)\n   \
    \     cipherText += string(cipherChar)\n    }\n    return cipherText\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmprc7x1ud6_test.go:25:23: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074107
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Determine length of\
    \ string\n    count := len(s)\n    // Create array of size of string\n    r :=\
    \ make([]rune, count)\n    // Iterate through string and perform encoding\n  \
    \  for i, c := range s {\n        r[i] = c + '\\x02'\n    }\n    // Return encoded\
    \ string\n    return string(r)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpx6o1n6ml_test.go:54: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpx6o1n6ml_test.go:54: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpx6o1n6ml_test.go:54:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpx6o1n6ml_test.go:54: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpx6o1n6ml_test.go:54: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpx6o1n6ml_test.go:54:\
    \ expected 'lippsqcjvmirh', got 'jgnnqo{htkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpx6o1n6ml_test.go:54: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fz|fnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpx6o1n6ml_test.go:54: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074108
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // the number of letters\
    \ in the alphabet\n    const ALPHABET_LENGTH = 26\n    // the number of letters\
    \ to shift the alphabet by\n    const SHIFT_AMOUNT = 2 * 2\n    output := make([]byte,\
    \ len(s))\n    // loop through the string\n    for i, v := range s {\n       \
    \ // convert the letter to lowercase\n        v = v | 32\n        // get a new\
    \ index for the letter by adding the shift amount\n        // and subtracting\
    \ the alphabet length (to wrap around to the beginning)\n        newIndex := int(v\
    \ - 'a' + SHIFT_AMOUNT) % ALPHABET_LENGTH\n        // set the character at the\
    \ index to the new index\n        output[i] = 'a' + byte(newIndex)\n    }\n  \
    \  return string(output)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var \n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpc5xzup1m_test.go:23:1: expected ''IDENT'', found ''}''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // To get you started,\
    \ here is a \nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpqdqbpmi7_test.go:23:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var r []byte\n    for _,\
    \ c := range s {\n        r = append(r, rotate(byte(c)))\n    }\n    return string(r)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9o0xxrxr_test.go:24:23: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    for _, c := range s {\n\
    \        // Do something\n    }\n    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7tpg1ua1_test.go:22:12: c declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\ta := []byte(s)\n\tfor i :=\
    \ 0; i < len(a); i++ {\n\t\ta[i] += 2 * 2\n\t}\n\treturn string(a)\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpkeq3evrl_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpkeq3evrl_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpkeq3evrl_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\tvar ret string\n\tcharNum\
    \ := int(s[0])\n\n\tif charNum > 97 {\n\t\tret = string(charNum + 2)\n\t} else\
    \ {\n\t\tret = string(charNum + 4)\n\t}\n\n\treturn ret\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpxl1su553_test.go:26:9: conversion from int to string yields a string of
    one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpxl1su553_test.go:28:9: conversion from int to string yields a string of
    one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var rs []rune\n    for\
    \ _, v := range s {\n        newr := rune(v)\n        if newr == 120 {\n     \
    \       newr = 97\n        } else if newr == 121 {\n            newr = 98\n  \
    \      } else if newr == 122 {\n            newr = 99\n        } else {\n    \
    \        newr += 2 * 2\n        }\n        rs = append(rs, newr)\n    }\n    return\
    \ string(rs)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmp1h56x4nl_test.go:59: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp1h56x4nl_test.go:59:\
    \ expected 'lippsqcjvmirh', got 'lippsqbjvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp1h56x4nl_test.go:59: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'hachpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    r := []rune(s)\n    result := \"\"\n    var index\
    \ int\n    for _,v := range r {\n        index = 0\n        for _,w := range alphabet\
    \ {\n            if string(v) == w {\n                if index + 2*2 > 25 {\n\
    \                    result += alphabet[(index+2*2) - 26]\n                } else\
    \ {\n                    result += alphabet[index+2*2]\n                }\n  \
    \          }\n            index++\n        }\n    }\n    return result\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    str := []rune(s)\n    for\
    \ i, c := range str {\n        str[i] = c + 2*2\n    }\n    return string(str)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpg1i61kxg_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpg1i61kxg_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpg1i61kxg_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var letterCount = map[string]string{\n\
    \        \"a\": \"c\",\n        \"b\": \"d\",\n        \"c\": \"e\",\n       \
    \ \"d\": \"f\",\n        \"e\": \"g\",\n        \"f\": \"h\",\n        \"g\":\
    \ \"i\",\n        \"h\": \"j\",\n        \"i\": \"k\",\n        \"j\": \"l\",\n\
    \        \"k\": \"m\",\n        \"l\": \"n\",\n        \"m\": \"o\",\n       \
    \ \"n\": \"p\",\n        \"o\": \"q\",\n        \"p\": \"r\",\n        \"q\":\
    \ \"s\",\n        \"r\": \"t\",\n        \"s\": \"u\",\n        \"t\": \"v\",\n\
    \        \"u\": \"w\",\n        \"v\": \"x\",\n        \"w\": \"y\",\n       \
    \ \"x\": \"z\",\n        \"y\": \"a\",\n        \"z\": \"b\",\n    }\n    var\
    \ result string\n    for i := 0; i < len(s); i++ {\n        letter := string(s[i])\n\
    \        result += letterCount[letter]\n    }\n    return result\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpyx3_vhmb_test.go:78: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpyx3_vhmb_test.go:78: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpyx3_vhmb_test.go:78:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpyx3_vhmb_test.go:78: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpyx3_vhmb_test.go:78: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpyx3_vhmb_test.go:78:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpyx3_vhmb_test.go:78: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpyx3_vhmb_test.go:78: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n  return \"I DON'T KNOW\"\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpbk21bjq4_test.go:45: expected 'lm', got 'I DON'T KNOW'\n    --- FAIL:\
    \ TestEncrypt/test_num__1 (0.00s)\n        tmpbk21bjq4_test.go:45: expected 'ewhjklnop',\
    \ got 'I DON'T KNOW'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpbk21bjq4_test.go:45:\
    \ expected 'kj', got 'I DON'T KNOW'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n\
    \        tmpbk21bjq4_test.go:45: expected 'ix', got 'I DON'T KNOW'\n    --- FAIL:\
    \ TestEncrypt/test_num__4 (0.00s)\n        tmpbk21bjq4_test.go:45: expected 'jeiajeaijeiak',\
    \ got 'I DON'T KNOW'\n    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpbk21bjq4_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'I DON'T KNOW'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpbk21bjq4_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'I DON'T KNOW'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpbk21bjq4_test.go:45:\
    \ expected 'e', got 'I DON'T KNOW'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\n\
    FAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"Not implemented\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpeetmb0g1_test.go:45: expected 'lm', got 'Not implemented'\n    ---\
    \ FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpeetmb0g1_test.go:45: expected\
    \ 'ewhjklnop', got 'Not implemented'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n\
    \        tmpeetmb0g1_test.go:45: expected 'kj', got 'Not implemented'\n    ---\
    \ FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpeetmb0g1_test.go:45: expected\
    \ 'ix', got 'Not implemented'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpeetmb0g1_test.go:45: expected 'jeiajeaijeiak', got 'Not implemented'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpeetmb0g1_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'Not implemented'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpeetmb0g1_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'Not implemented'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n     \
    \   tmpeetmb0g1_test.go:45: expected 'e', got 'Not implemented'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Define the alphabet\
    \ as a string\n    alphabet := \"abcdefghijklmnopqrstuvwxyz\"\n    // Create a\
    \ variable to store the new string\n    result := \"\"\n    // Create a loop to\
    \ iterate through the string\n    for _, c := range s {\n        // Shift each\
    \ character down by 2, multiplying the shift by 2\n        result += string(alphabet[(int(c)\
    \ - 97 + 2 * 2) % 26])\n    }\n    // Return the new string\n    return result\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\tvar result string = \"\"\n\
    \tvar strSlice []string = []string{\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"}\n\tvar sMap map[string]int\
    \ = make(map[string]int)\n\tvar j int = 0\n\t\n\tfor i:= 0; i < len(strSlice);\
    \ i++ {\n\t\tsMap[strSlice[i]] = i\n\t}\n\t\n\tfor i:= 0; i < len(s); i++ {\n\t\
    \tj = sMap[string(s[i])]\n\t\tif (j > 23) {\n\t\t\tj = ((j-23)*2)%24\n\t\t} else\
    \ {\n\t\t\tj = ((j-2)*2)%24\n\t\t}\n\t\tresult += strSlice[j]\n\t}\n\t\n\treturn\
    \ result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: index out of range\
    \ [-4] [recovered]\n\tpanic: runtime error: index out of range [-4]\n\ngoroutine\
    \ 6 [running]:\ntesting.tRunner.func1.2({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt({0x51f052, 0x9})\n\t/tmp/tmp9_1sfkkl_test.go:38\
    \ +0x22f\ncommand-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmp9_1sfkkl_test.go:52\
    \ +0x76\ntesting.tRunner(0xc0001924e0, 0x529000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // create a variable to\
    \ store the result\n    var result string\n\n    // create a variable to store\
    \ the shift\n    var shift int = 2\n\n    // loop through each character in the\
    \ string\n    for _, c := range s {\n        // create a variable to store the\
    \ ascii value of the current character\n        var ascii_val int = int(c)\n\n\
    \        // if the character is lowercase\n        if ascii_val >= 97 && ascii_val\
    \ <= 122 {\n            // do the looping math from the previous homework problem\n\
    \            ascii_val = ascii_val + shift\n            for ascii_val > 122 {\n\
    \                ascii_val = ascii_val - 26\n            }\n        }\n\n    \
    \    // if the character is uppercase\n        if ascii_val >= 65 && ascii_val\
    \ <= 90 {\n            // do the looping math from the previous homework problem\n\
    \            ascii_val = ascii_val + shift\n            for ascii_val > 90 {\n\
    \                ascii_val = ascii_val - 26\n            }\n        }\n\n    \
    \    // otherwise (we are assuming it is punctuation, but it could be something\
    \ else)\n        else {\n            // do nothing\n        }\n\n        // append\
    \ the shifted character to the result\n        result = result + string(ascii_val)\n\
    \    }\n\n    // return the result\n    return result\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzgq96u5i_test.go:52:9: expected statement, found ''else''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074108
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabets := []rune(\"\
    abcdefghijklmnopqrstuvwxyz\")\n    output := []rune{}\n    for _, letter := range\
    \ s {\n        alphabetPosition := findIndex(letter, alphabets)\n        rotatedPosition\
    \ := alphabetPosition * 2\n        output = append(output, alphabets[rotatedPosition])\n\
    \    }\n    return string(output)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6epnwtr4_test.go:25:29: undefined: findIndex

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encrypted string\n\n\
    \    for _, letter := range s {\n        encrypted += string(letter + 2*2)\n \
    \   }\n\n    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpowx57cct_test.go:51: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpowx57cct_test.go:51:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpowx57cct_test.go:51: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    //create a slice with uppercase\
    \ and lowercase letters\n    var letters = []string{\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    , \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    , \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\"}\n    var rotatedSlice []string //slice to hold the\
    \ rotated letters\n    //iterate through the letters in the letters slice and\
    \ shift\n    //by 2 letters to the right. \n    for _, letter := range letters\
    \ {\n        //if the letter is the last letter in the alphabet then we\n    \
    \    //restart the iteration at the first letter of the alphabet\n        if letter\
    \ == \"z\" || letter == \"Z\" {\n            rotatedSlice = append(rotatedSlice,\
    \ \"a\")\n            rotatedSlice = append(rotatedSlice, \"A\")\n        } else\
    \ {\n            //otherwise we shift the letter two places to the right\n   \
    \         rotatedSlice = append(rotatedSlice, letter)\n            rotatedSlice\
    \ = append(rotatedSlice, letter)\n        }\n    }\n    //iterate through the\
    \ string and output the rotated letter\n    var out string\n    for _, letter\
    \ := range s {\n        //int64 to string\n        out += rotatedSlice[letter\
    \ - 97]\n    }\n    return out\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpf81brvih_test.go:68: expected 'lm', got 'de'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpf81brvih_test.go:68: expected 'ewhjklnop', got 'ajbcddeff'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpf81brvih_test.go:68:\
    \ expected 'kj', got 'dc'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpf81brvih_test.go:68: expected 'ix', got 'cj'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpf81brvih_test.go:68: expected 'jeiajeaijeiak', got 'caclcalccacld'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpf81brvih_test.go:68:\
    \ expected 'lippsqcjvmirh', got 'dcffhgmciecgb'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpf81brvih_test.go:68: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'blmbfggefckdgefkcdfedkcggfeggkcdfeggkcdckbkcd'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpf81brvih_test.go:68: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    \n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbr1zlevn_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var n int\n    var m string\n\
    \    for _, i := range s {\n        n = int(i)\n        m = fmt.Sprintf(\"%c\"\
    , n + 2 * 2)\n        fmt.Print(m)\n    }\n    return m\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "lmewhjklnopkjixjei{je{ijei{klippsq}jvmirhh|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjle---\
    \ FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n \
    \       tmpewjrynss_test.go:52: expected 'lm', got 'm'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpewjrynss_test.go:52: expected 'ewhjklnop', got 'p'\n   \
    \ --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpewjrynss_test.go:52: expected\
    \ 'kj', got 'j'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpewjrynss_test.go:52:\
    \ expected 'ix', got 'x'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n    \
    \    tmpewjrynss_test.go:52: expected 'jeiajeaijeiak', got 'k'\n    --- FAIL:\
    \ TestEncrypt/test_num__5 (0.00s)\n        tmpewjrynss_test.go:52: expected 'lippsqcjvmirh',\
    \ got 'h'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpewjrynss_test.go:52:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got 'l'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here.\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpqatm12zb_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpqatm12zb_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpqatm12zb_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpqatm12zb_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpqatm12zb_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpqatm12zb_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpqatm12zb_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpqatm12zb_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074109
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\tvar r string\n\tfor _, v\
    \ := range s {\n\t\tif v > 110 {\n\t\t\tr += string(v - 13)\n\t\t} else {\n\t\t\
    \tr += string(v + 13)\n\t\t}\n\t}\n\treturn r\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpkc1et9bg_test.go:53: expected 'lm', got 'uv'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpkc1et9bg_test.go:53: expected 'ewhjklnop', got 'nfqstuwxy'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpkc1et9bg_test.go:53:\
    \ expected 'kj', got 'ts'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpkc1et9bg_test.go:53: expected 'ix', got 'rg'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpkc1et9bg_test.go:53: expected 'jeiajeaijeiak', got 'snrjsnjrsnrjt'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpkc1et9bg_test.go:53:\
    \ expected 'lippsqcjvmirh', got 'uryybzlsevr{q'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpkc1et9bg_test.go:53: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'qkmqyz{vyshuzvyhsuyvuhs{zyvz{hsuyvz{hsushphsu'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpkc1et9bg_test.go:53: expected 'e', got 'n'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074110
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    var new_string string\n    for i := 0; i < len(s);\
    \ i++ {\n        new_string += alphabet[(26 + (int(s[i]) - 97) * 2) % 26]\n  \
    \  }\n    return new_string\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmppla981zi_test.go:50: expected 'lm', got 'oq'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmppla981zi_test.go:50: expected 'ewhjklnop', got 'akgkmosuw'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmppla981zi_test.go:50:\
    \ expected 'kj', got 'mk'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmppla981zi_test.go:50: expected 'ix', got 'im'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmppla981zi_test.go:50: expected 'jeiajeaijeiak', got 'kaiskasikaism'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmppla981zi_test.go:50:\
    \ expected 'lippsqcjvmirh', got 'oiwwcywkiqiag'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmppla981zi_test.go:50: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'guygwyaqwkooyqwokowqookaywqyaokowqyaokokoeoko'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmppla981zi_test.go:50: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074110
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    r := \"\"\n    for _,c\
    \ := range s {\n        r += string(((c-'a'+2)%26)+'a')\n    }\n    return r\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp6k88nt_1_test.go:49: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp6k88nt_1_test.go:49: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp6k88nt_1_test.go:49:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp6k88nt_1_test.go:49: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp6k88nt_1_test.go:49: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp6k88nt_1_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp6k88nt_1_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp6k88nt_1_test.go:49: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074110
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    encrypted := \"\"\n   \
    \ for _, c := range s {\n        encrypted += string(int(c) + 2 * 2)\n    }\n\
    \    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp94wal8hy_test.go:24:22: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074110
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    in := []rune(s)\n    for\
    \ i, r := range in {\n        in[i] = rotate(r)\n    }\n    return string(in)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqj4dmqdf_test.go:24:17: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074110
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // write your code here\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpq9sa5vn3_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074110
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // TODO\n    var (\n  \
    \      l, m, n int\n        s2 string\n    )\n    l = len(s)\n    for i := 0;\
    \ i < l; i++ {\n        m = int(s[i])\n        n = m - 95\n        n = n * 2\n\
    \        m = 95 + n\n        s2 = s2 + string(m)\n    }\n    return s2\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp1tsfx3pd_test.go:33:19: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\treturn \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp0ibwfrq1_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp0ibwfrq1_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp0ibwfrq1_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp0ibwfrq1_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp0ibwfrq1_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp0ibwfrq1_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp0ibwfrq1_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp0ibwfrq1_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result string\n   \
    \ for _, c := range s {\n        if c > 122 || c < 97 {\n            result +=\
    \ string(c)\n        } else {\n            result += string(c + 2)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp6g0dvk3s_test.go:53: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp6g0dvk3s_test.go:53: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp6g0dvk3s_test.go:53:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp6g0dvk3s_test.go:53: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp6g0dvk3s_test.go:53: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp6g0dvk3s_test.go:53:\
    \ expected 'lippsqcjvmirh', got 'jgnnqo{htkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp6g0dvk3s_test.go:53: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fz|fnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp6g0dvk3s_test.go:53: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074111
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\t// Hint: Use the ascii character\
    \ codes and the fmt package to\n\t// figure out how to do the encryption.\n}\n\
    \nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppouki63f_test.go:24:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var result []byte\n   \
    \ for _, v := range s {\n        result = append(result, byte(v)+byte(v%2*2))\n\
    \    }\n    return string(result)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp7uez2l2r_test.go:49: expected 'lm', got 'hk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp7uez2l2r_test.go:49: expected 'ewhjklnop', got 'cudfihjml'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp7uez2l2r_test.go:49:\
    \ expected 'kj', got 'if'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp7uez2l2r_test.go:49: expected 'ix', got 'gt'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp7uez2l2r_test.go:49: expected 'jeiajeaijeiak', got 'fcgyfcygfcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp7uez2l2r_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'hgllqo{frkgnd'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp7uez2l2r_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlonklfwhoklwfhlkhwfnolkonwfhlkonwfhfwewfh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp7uez2l2r_test.go:49: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encrypted string\n\
    \    for _, v := range s {\n        if v == 'z' {\n            encrypted += string('b')\n\
    \        } else if v == 'y' {\n            encrypted += string('a')\n        }\
    \ else {\n            encrypted += string(v + 2)\n        }\n    }\n    return\
    \ encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpq4zf76yr_test.go:55: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpq4zf76yr_test.go:55: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpq4zf76yr_test.go:55:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpq4zf76yr_test.go:55: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpq4zf76yr_test.go:55: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpq4zf76yr_test.go:55:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpq4zf76yr_test.go:55: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpq4zf76yr_test.go:55: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n  return \"\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpace789z4_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpace789z4_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpace789z4_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpace789z4_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpace789z4_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpace789z4_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpace789z4_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpace789z4_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074106
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    b := []byte(s)\n    for\
    \ i := 0; i < len(b); i++ {\n        b[i] = (b[i] - 'a' + 2*2) % 26 + 'a'\n  \
    \  }\n    return string(b)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // return string of encrypted\
    \ characters based on the rules.\n    return \"not implemented\"\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpz2alqgym_test.go:46: expected 'lm', got 'not implemented'\n    ---\
    \ FAIL: TestEncrypt/test_num__1 (0.00s)\n        tmpz2alqgym_test.go:46: expected\
    \ 'ewhjklnop', got 'not implemented'\n    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n\
    \        tmpz2alqgym_test.go:46: expected 'kj', got 'not implemented'\n    ---\
    \ FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpz2alqgym_test.go:46: expected\
    \ 'ix', got 'not implemented'\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpz2alqgym_test.go:46: expected 'jeiajeaijeiak', got 'not implemented'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpz2alqgym_test.go:46:\
    \ expected 'lippsqcjvmirh', got 'not implemented'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpz2alqgym_test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'not implemented'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n     \
    \   tmpz2alqgym_test.go:46: expected 'e', got 'not implemented'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074111
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code below\
    \ this line\n\n\n\n\n\n    // Write your code above this line\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpl1bqxy2p_test.go:29:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074111
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // code here\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpihw5hcxr_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    n := len(s)\n    t := make([]byte,\
    \ n)\n    copy(t, s)\n    for i := 0; i < n; i++ {\n        t[i] += 2 * 2\n  \
    \  }\n    return string(t)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmph0nogyrx_test.go:51: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmph0nogyrx_test.go:51:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmph0nogyrx_test.go:51: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    rotatedS := \"\"\n    for\
    \ _, char := range s {\n        rotatedS += rotate(char)\n    }\n    return rotatedS\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw2olin6j_test.go:24:21: undefined: rotate

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074111
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    s := make([]byte, len(s))\n\
    \    for i, v := range []byte(s) {\n        s[i] = v - 2 * 2\n    }\n    return\
    \ string(s)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpcp0mm8iv_test.go:22:7: no new variables on left side of :=

    /tmp/tmpcp0mm8iv_test.go:22:10: cannot use make([]byte, len(s)) (value of type
    []byte) as type string in assignment

    /tmp/tmpcp0mm8iv_test.go:24:9: cannot assign to s[i] (value of type byte)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // TODO: Implement me!\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp2bab9l74_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp2bab9l74_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp2bab9l74_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp2bab9l74_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp2bab9l74_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp2bab9l74_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp2bab9l74_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp2bab9l74_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // split string into array\
    \ of strings\n    var a []string\n    for _, char := range s {\n        a = append(a,\
    \ string(char))\n    }\n    // create index lookup map of chars\n    var m = map[string]int{\n\
    \        \"a\": 1,\n        \"b\": 2,\n        \"c\": 3,\n        \"d\": 4,\n\
    \        \"e\": 5,\n        \"f\": 6,\n        \"g\": 7,\n        \"h\": 8,\n\
    \        \"i\": 9,\n        \"j\": 10,\n        \"k\": 11,\n        \"l\": 12,\n\
    \        \"m\": 13,\n        \"n\": 14,\n        \"o\": 15,\n        \"p\": 16,\n\
    \        \"q\": 17,\n        \"r\": 18,\n        \"s\": 19,\n        \"t\": 20,\n\
    \        \"u\": 21,\n        \"v\": 22,\n        \"w\": 23,\n        \"x\": 24,\n\
    \        \"y\": 25,\n        \"z\": 26,\n    }\n    // create map of indexes to\
    \ chars\n    var m_inv = map[int]string{\n        1: \"a\",\n        2: \"b\"\
    ,\n        3: \"c\",\n        4: \"d\",\n        5: \"e\",\n        6: \"f\",\n\
    \        7: \"g\",\n        8: \"h\",\n        9: \"i\",\n        10: \"j\",\n\
    \        11: \"k\",\n        12: \"l\",\n        13: \"m\",\n        14: \"n\"\
    ,\n        15: \"o\",\n        16: \"p\",\n        17: \"q\",\n        18: \"\
    r\",\n        19: \"s\",\n        20: \"t\",\n        21: \"u\",\n        22:\
    \ \"v\",\n        23: \"w\",\n        24: \"x\",\n        25: \"y\",\n       \
    \ 26: \"z\",\n    }\n    // shift each char's index back by 2*2\n    for i, char\
    \ := range a {\n        var idx = m[char]\n        idx -= 4\n        if idx <\
    \ 1 {\n            idx += 26\n        }\n        a[\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpm56qcxsl_test.go:93:6: expected ''('', found TestEncrypt

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074111
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // YOUR CODE HERE\n   \
    \ return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpx8l5_bu5_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpx8l5_bu5_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpx8l5_bu5_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpx8l5_bu5_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpx8l5_bu5_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    l := len(s)\n    if l ==\
    \ 0 {\n        return \"\"\n    }\n    s2 := []byte(s)\n    for i := 0; i < l;\
    \ i++ {\n        s2[i] += 4\n    }\n    return string(s2)\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpmaxhty1__test.go:53: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpmaxhty1__test.go:53:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpmaxhty1__test.go:53: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // ...\n    return \"\"\
    \n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmptg8z7c99_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmptg8z7c99_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmptg8z7c99_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmptg8z7c99_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmptg8z7c99_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmptg8z7c99_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmptg8z7c99_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmptg8z7c99_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Write your code here\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpk2p1h_e0_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074102
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    bytes := []byte(s)\n  \
    \  for i := 0; i < len(bytes); i++ {\n        bytes[i] = bytes[i] + (2 * 2)\n\
    \    }\n    return string(bytes)\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpfcmk3y68_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpfcmk3y68_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpfcmk3y68_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encrypted string\n\
    \    for _,char := range s {\n        if char == 'h' {\n            encrypted\
    \ += \"j\"\n        } else if char == 'i' {\n            encrypted += \"k\"\n\
    \        } else if char == 'j' {\n            encrypted += \"l\"\n        } else\
    \ if char == 'k' {\n            encrypted += \"m\"\n        } else if char ==\
    \ 'l' {\n            encrypted += \"n\"\n        } else if char == 'm' {\n   \
    \         encrypted += \"o\"\n        } else if char == 'n' {\n            encrypted\
    \ += \"p\"\n        } else if char == 'o' {\n            encrypted += \"q\"\n\
    \        } else if char == 'p' {\n            encrypted += \"r\"\n        } else\
    \ if char == 'q' {\n            encrypted += \"s\"\n        } else if char ==\
    \ 'r' {\n            encrypted += \"t\"\n        } else if char == 's' {\n   \
    \         encrypted += \"u\"\n        } else if char == 't' {\n            encrypted\
    \ += \"v\"\n        } else if char == 'u' {\n            encrypted += \"w\"\n\
    \        } else if char == 'v' {\n            encrypted += \"x\"\n        } else\
    \ if char == 'w' {\n            encrypted += \"y\"\n        } else if char ==\
    \ 'x' {\n            encrypted += \"z\"\n        } else if char == 'y' {\n   \
    \         encrypted += \"a\"\n        } else if char == 'z' {\n            encrypted\
    \ += \"b\"\n        } else if char == 'a' {\n            encrypted += \"c\"\n\
    \        } else if char == 'b' {\n            encrypted += \"d\"\n        } else\
    \ if char == 'c' {\n            encrypted += \"e\"\n        } else if char ==\
    \ 'd' {\n            encrypted += \"f\"\n        } else if char == 'e' {\n   \
    \         encrypted += \"g\"\n        } else if char == 'f' {\n            encrypted\
    \ += \"h\"\n        } else if char == 'g' {\n            encrypted += \"i\"\n\
    \        } else {\n            encrypted += string(char)\n        }\n    }\n \
    \   return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpm_1bjaug_test.go:103: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpm_1bjaug_test.go:103: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpm_1bjaug_test.go:103:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpm_1bjaug_test.go:103: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpm_1bjaug_test.go:103: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpm_1bjaug_test.go:103:\
    \ expected 'lippsqcjvmirh', got 'jgnnqoahtkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpm_1bjaug_test.go:103: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fzbfnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpm_1bjaug_test.go:103: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmprnr7xr0q_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmprnr7xr0q_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmprnr7xr0q_test.go:45:\
    \ expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmprnr7xr0q_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmprnr7xr0q_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmprnr7xr0q_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmprnr7xr0q_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmprnr7xr0q_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\talphabet := \"abcdefghijklmnopqrstuvwxyz\"\
    \n\tresult := \"\"\n\tvar idx int\n\tvar found bool\n\tfor _, r := range s {\n\
    \t\tidx, found = indexOf(alphabet, r)\n\t\tif found {\n\t\t\tresult += string(alphabet[(idx+4)%26])\n\
    \t\t} else {\n\t\t\tresult += string(r)\n\t\t}\n\t}\n\treturn result\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_dghc1u0_test.go:27:16: undefined: indexOf

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var new_str string\n  \
    \  return new_str\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpiv3g2lpy_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpiv3g2lpy_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpiv3g2lpy_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpiv3g2lpy_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpiv3g2lpy_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpiv3g2lpy_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpiv3g2lpy_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpiv3g2lpy_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encrypted string\n\
    \    for _, i := range s {\n        val := (int(i) + 4) % int('z')\n        if\
    \ val < int('a') {\n            val += int('a')\n        }\n        encrypted\
    \ += string(val)\n    }\n    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpg7ddlr8g_test.go:28:22: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074113
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n\t// your code here\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp7d1sr61_test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    /*\n    func (r *StringReader)\
    \ Read(p []byte) (n int, err error)\n    Read reads the next len(p) bytes from\
    \ the StringReader.\n    It returns the number of bytes read and any error encountered.\n\
    \    At EOF, err will be io.EOF.\n    */\n    /*\n    type StringReader \nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpxtwuisjw_test.go:28:5: comment not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // YOUR CODE HERE\n   \
    \ return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpx8l5_bu5_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpx8l5_bu5_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpx8l5_bu5_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpx8l5_bu5_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpx8l5_bu5_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    alphabet := []string{\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"}\n    var result string\n    var index int\n    for _,\
    \ v := range s {\n        for i, x := range alphabet {\n            if string(v)\
    \ == x {\n                index = i\n                break\n            }\n  \
    \      }\n        shift := (index + 8) % 26\n        result += alphabet[shift]\n\
    \    }\n    return result\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate\
    \ := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpey4qr1z4_test.go:58: expected 'lm', got 'pq'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpey4qr1z4_test.go:58: expected 'ewhjklnop', got 'ialnoprst'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpey4qr1z4_test.go:58:\
    \ expected 'kj', got 'on'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpey4qr1z4_test.go:58: expected 'ix', got 'mb'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpey4qr1z4_test.go:58: expected 'jeiajeaijeiak', got 'nimeniemnimeo'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpey4qr1z4_test.go:58:\
    \ expected 'lippsqcjvmirh', got 'pmttwugnzqmvl'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpey4qr1z4_test.go:58: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'lfhltuvqtncpuqtcnptqpcnvutquvcnptquvcnpnckcnp'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpey4qr1z4_test.go:58: expected 'e', got 'i'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // YOUR CODE HERE\n   \
    \ return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpx8l5_bu5_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpx8l5_bu5_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpx8l5_bu5_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpx8l5_bu5_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpx8l5_bu5_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpx8l5_bu5_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Encrypts a string by\
    \ shifting every character down by two.\n    alpha := \"abcdefghijklmnopqrstuvwxyz\"\
    \n    alpha_length := len(alpha)\n    s_length := len(s)\n    res := \"\"\n  \
    \  for i := 0; i < s_length; i++ {\n        current_char := string(s[i])\n   \
    \     current_char_index := alpha.find(current_char)\n        res += string(alpha[(current_char_index\
    \ + (alpha_length / 2)) % alpha_length])\n    }\n    return res\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5h9o95eq_test.go:29:37: alpha.find undefined (type string has no field
    or method find)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074113
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var encrypted string\n\
    \    for _, r := range s {\n        if r == ' ' {\n            encrypted += string(r)\n\
    \        } else {\n            e := r + 2 * 2\n            if e > 'z' {\n    \
    \            e -= 26\n            }\n            encrypted += string(e)\n    \
    \    }\n    }\n    return encrypted\n}\n\nfunc TestEncrypt(t *testing.T) {\n \
    \ candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected:\
    \ \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\"\
    \ },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"\
    et\"), expected: \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected:\
    \ \"jeiajeaijeiak\" },\n     { actual: candidate(\"hellomyfriend\"), expected:\
    \ \"lippsqcjvmirh\" },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    fmt.Println(s)\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "hi\nasdfghjkl\ngf\net\nfaewfawefaewg\nhellomyfriend\ndxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\n\
    a\n--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpu98a2bvx_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpu98a2bvx_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpu98a2bvx_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpu98a2bvx_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpu98a2bvx_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpu98a2bvx_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpu98a2bvx_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpu98a2bvx_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\";\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpz6dlmjf2_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpz6dlmjf2_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpz6dlmjf2_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpz6dlmjf2_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpz6dlmjf2_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpz6dlmjf2_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpz6dlmjf2_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpz6dlmjf2_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"encrypt\"\n}\n\
    \nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmptms860v0_test.go:45: expected 'lm', got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmptms860v0_test.go:45: expected 'ewhjklnop', got 'encrypt'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmptms860v0_test.go:45:\
    \ expected 'kj', got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n\
    \        tmptms860v0_test.go:45: expected 'ix', got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmptms860v0_test.go:45: expected 'jeiajeaijeiak', got 'encrypt'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmptms860v0_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmptms860v0_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'encrypt'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmptms860v0_test.go:45:\
    \ expected 'e', got 'encrypt'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074102
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var enc string\n    var\
    \ count int\n    for i := 0; i < len(s); i++ {\n        count = int(s[i])\n  \
    \      count += 2 * 2\n        count -= 97\n        if count >= 26 {\n       \
    \     count = count % 26\n        }\n        enc += string(rune(count + 97))\n\
    \    }\n    return enc\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate :=\
    \ encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"golang\"\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpbtabj8j0_test.go:45: expected 'lm', got 'golang'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpbtabj8j0_test.go:45: expected 'ewhjklnop', got 'golang'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpbtabj8j0_test.go:45:\
    \ expected 'kj', got 'golang'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n\
    \        tmpbtabj8j0_test.go:45: expected 'ix', got 'golang'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpbtabj8j0_test.go:45: expected 'jeiajeaijeiak', got 'golang'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpbtabj8j0_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'golang'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpbtabj8j0_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'golang'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmpbtabj8j0_test.go:45:\
    \ expected 'e', got 'golang'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    switch {\n        case\
    \ len(s) == 0:\n            return \"\"\n        case len(s) == 1:\n         \
    \   return string( ( int(s[0]) + 2 ) % 97 )\n        default:\n            return\
    \ string( ( int(s[0]) + 2 ) % 97 ) + encrypt(s[1:])\n    }\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmpg67jcp88_test.go:26:20: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    /tmp/tmpg67jcp88_test.go:28:20: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    c := []rune(s)\n    for\
    \ i := 0; i < len(c); i++ {\n        c[i] += 2 * 2\n    }\n    return string(c)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmp1l7_r4ct_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp1l7_r4ct_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp1l7_r4ct_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    m := map[string]string{\n\
    \        \"a\": \"c\",\n        \"b\": \"d\",\n        \"c\": \"e\",\n       \
    \ \"d\": \"f\",\n        \"e\": \"g\",\n        \"f\": \"h\",\n        \"g\":\
    \ \"i\",\n        \"h\": \"j\",\n        \"i\": \"k\",\n        \"j\": \"l\",\n\
    \        \"k\": \"m\",\n        \"l\": \"n\",\n        \"m\": \"o\",\n       \
    \ \"n\": \"p\",\n        \"o\": \"q\",\n        \"p\": \"r\",\n        \"q\":\
    \ \"s\",\n        \"r\": \"t\",\n        \"s\": \"u\",\n        \"t\": \"v\",\n\
    \        \"u\": \"w\",\n        \"v\": \"x\",\n        \"w\": \"y\",\n       \
    \ \"x\": \"z\",\n        \"y\": \"a\",\n        \"z\": \"b\",\n    }\n    for\
    \ k, v := range m {\n        s = strings.Replace(s, k, v, -1)\n    }\n    return\
    \ s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_fjacvcz_test.go:51:13: undefined: strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074113
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // TODO: Implement this\
    \ function.\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3bpd0qw__test.go:23:1: missing return

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    cipher := \"qwertyuiopasdfghjklzxcvbnm\"\
    \n    encrypted := \"\"\n    for _, letter := range s {\n        if letter ==\
    \ ' ' {\n            encrypted += \" \"\n        } else {\n            encrypted\
    \ += string(cipher[letter + 2])\n        }\n    }\n    return encrypted\n}\n\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\npanic: runtime error: index out of range\
    \ [106] with length 26 [recovered]\n\tpanic: runtime error: index out of range\
    \ [106] with length 26\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.encrypt(...)\n\t/tmp/tmpa9pkjx2n_test.go:28\n\
    command-line-arguments_test.TestEncrypt(0x0?)\n\t/tmp/tmpa9pkjx2n_test.go:41 +0xde6\n\
    testing.tRunner(0xc0001924e0, 0x529008)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // write your code here\n\
    \    return \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpiozrd7p0_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpiozrd7p0_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpiozrd7p0_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmpiozrd7p0_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmpiozrd7p0_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmpiozrd7p0_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmpiozrd7p0_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmpiozrd7p0_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return s\n}\n\nfunc TestEncrypt(t\
    \ *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmprnr7xr0q_test.go:45: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmprnr7xr0q_test.go:45: expected 'ewhjklnop', got 'asdfghjkl'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmprnr7xr0q_test.go:45:\
    \ expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmprnr7xr0q_test.go:45: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmprnr7xr0q_test.go:45: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmprnr7xr0q_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmprnr7xr0q_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmprnr7xr0q_test.go:45: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074112
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"jf\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp333k3dxy_test.go:45: expected 'lm', got 'jf'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp333k3dxy_test.go:45: expected 'ewhjklnop', got 'jf'\n  \
    \  --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp333k3dxy_test.go:45:\
    \ expected 'kj', got 'jf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmp333k3dxy_test.go:45: expected 'ix', got 'jf'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmp333k3dxy_test.go:45: expected 'jeiajeaijeiak', got 'jf'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp333k3dxy_test.go:45:\
    \ expected 'lippsqcjvmirh', got 'jf'\n    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n\
    \        tmp333k3dxy_test.go:45: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'jf'\n    --- FAIL: TestEncrypt/test_num__7 (0.00s)\n        tmp333k3dxy_test.go:45:\
    \ expected 'e', got 'jf'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    c := []rune(s)\n    for\
    \ i := 0; i < len(c); i++ {\n        c[i] = c[i] + 2*2\n    }\n    return string(c)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmpduu0fi_9_test.go:49: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpduu0fi_9_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpduu0fi_9_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Do a character by character\
    \ transformation to a new string.\n    // For each character, use a rune to cast\
    \ the character to a\n    // unicode value. Then add two times two to the value.\
    \ Finally,\n    // convert the value back to a character and append it to the\n\
    \    // end of the final string.\n    // Remember that the expression rune(c)\
    \ is a type cast. The\n    // expression rune(c) + 2*2 is an operation with an\
    \ int type\n    // value. And rune(c) + 2*2 will be a rune again.\n    final :=\
    \ \"\"\n    for _, c := range s {\n        var r rune = rune(c)\n        final\
    \ += string(rune(r + 2*2))\n    }\n    return final\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmp_da3j2fi_test.go:58: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp_da3j2fi_test.go:58:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp_da3j2fi_test.go:58: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // implement function\n\
    \    return s\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpvktm98_a_test.go:46: expected 'lm', got 'hi'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpvktm98_a_test.go:46: expected 'ewhjklnop', got 'asdfghjkl'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpvktm98_a_test.go:46:\
    \ expected 'kj', got 'gf'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpvktm98_a_test.go:46: expected 'ix', got 'et'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpvktm98_a_test.go:46: expected 'jeiajeaijeiak', got 'faewfawefaewg'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpvktm98_a_test.go:46:\
    \ expected 'lippsqcjvmirh', got 'hellomyfriend'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpvktm98_a_test.go:46: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpvktm98_a_test.go:46: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    var output string\n   \
    \ for _, x := range s {\n        output += string(x + 2)\n    }\n    return output\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmpxmk8n5o8_test.go:49: expected 'lm', got 'jk'\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmpxmk8n5o8_test.go:49: expected 'ewhjklnop', got 'cufhijlmn'\n\
    \    --- FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmpxmk8n5o8_test.go:49:\
    \ expected 'kj', got 'ih'\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n   \
    \     tmpxmk8n5o8_test.go:49: expected 'ix', got 'gv'\n    --- FAIL: TestEncrypt/test_num__4\
    \ (0.00s)\n        tmpxmk8n5o8_test.go:49: expected 'jeiajeaijeiak', got 'hcgyhcyghcgyi'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmpxmk8n5o8_test.go:49:\
    \ expected 'lippsqcjvmirh', got 'jgnnqo{htkgpf'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmpxmk8n5o8_test.go:49: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'fz|fnopknhwjoknwhjnkjwhponkopwhjnkopwhjhwewhj'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmpxmk8n5o8_test.go:49: expected 'e', got 'c'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074114
- exit_code: 2
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // Code goes here.\n  \
    \  var new_string string\n    for i := 0; i < len(s); i++ {\n        var c int\
    \ = int(s[i])\n        c = c + 4\n        //fmt.Println(c)\n        if c > 109\
    \ {\n            c = c - 109 + 65\n        }\n        new_string = new_string\
    \ + string(c)\n    }\n    return new_string\n}\n\nfunc TestEncrypt(t *testing.T)\
    \ {\n  candidate := encrypt\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    hi\"), expected: \"lm\" },\n     { actual: candidate(\"asdfghjkl\"), expected:\
    \ \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected: \"kj\" },\n  \
    \   { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual: candidate(\"\
    faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual: candidate(\"\
    hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual: candidate(\"\
    dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test

    /tmp/tmp80_k_icg_test.go:31:35: conversion from int to string yields a string
    of one rune, not a string of digits (did you mean fmt.Sprint(x)?)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074114
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // YOUR CODE HERE\n\n \
    \   return \"llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll\n\
    func TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpaipzk53z_test.go:24:12: string literal not terminated

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074113
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    //YOUR CODE HERE\n    return\
    \ \"\"\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual:\
    \ candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"\
    gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\"\
    \ },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3r7ycvwm_test.go:46: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3r7ycvwm_test.go:46: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3r7ycvwm_test.go:46: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3r7ycvwm_test.go:46:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3r7ycvwm_test.go:46: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3r7ycvwm_test.go:46: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3r7ycvwm_test.go:46:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3r7ycvwm_test.go:46: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074114
- exit_code: 0
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var c []rune\n    for _, r := range s {\n        i := int(r) - 97\n    \
    \    c = append(c, rune(alphabet[(i + 2 * 2) % 26]))\n    }\n    return string(c)\n\
    }\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660074114
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    // START OMIT\n    if len(s)\
    \ < 2 {\n        return s\n    }\n\n    var out string\n    for _, v := range\
    \ s {\n        v += 2*2\n        out += string(v)\n    }\n    return out\n   \
    \ // END OMIT\n}\n\nfunc TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"hi\"), expected: \"lm\" },\n\
    \     { actual: candidate(\"asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual:\
    \ candidate(\"gf\"), expected: \"kj\" },\n     { actual: candidate(\"et\"), expected:\
    \ \"ix\" },\n     { actual: candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\"\
    \ },\n     { actual: candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\"\
    \ },\n     { actual: candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\" },\n     { actual:\
    \ candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc := range tests {\n\
    \t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n\
    \        tmp1yc2wyy4_test.go:56: expected 'jeiajeaijeiak', got 'jei{je{ijei{k'\n\
    \    --- FAIL: TestEncrypt/test_num__5 (0.00s)\n        tmp1yc2wyy4_test.go:56:\
    \ expected 'lippsqcjvmirh', got 'lippsq}jvmirh'\n    --- FAIL: TestEncrypt/test_num__6\
    \ (0.00s)\n        tmp1yc2wyy4_test.go:56: expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl',\
    \ got 'h|~hpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n    --- FAIL: TestEncrypt/test_num__7\
    \ (0.00s)\n        tmp1yc2wyy4_test.go:56: expected 'e', got 'a'\nFAIL\nFAIL\t\
    command-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074114
- exit_code: 1
  program: "package encrypt_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // Create a function encrypt that takes a string as an argument and\n// returns\
    \ a string encrypted with the alphabet being rotated. \n// The alphabet should\
    \ be rotated in a manner such that the letters \n// shift down by two multiplied\
    \ to two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
    asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
    et\")\n// \"ix\"\nfunc encrypt(s string) string {\n    return \"\"\n}\n\nfunc\
    \ TestEncrypt(t *testing.T) {\n  candidate := encrypt\n\ttype test struct {\n\t\
    \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n \
    \    { actual: candidate(\"hi\"), expected: \"lm\" },\n     { actual: candidate(\"\
    asdfghjkl\"), expected: \"ewhjklnop\" },\n     { actual: candidate(\"gf\"), expected:\
    \ \"kj\" },\n     { actual: candidate(\"et\"), expected: \"ix\" },\n     { actual:\
    \ candidate(\"faewfawefaewg\"), expected: \"jeiajeaijeiak\" },\n     { actual:\
    \ candidate(\"hellomyfriend\"), expected: \"lippsqcjvmirh\" },\n     { actual:\
    \ candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"), expected: \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    \ },\n     { actual: candidate(\"a\"), expected: \"e\" },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestEncrypt (0.00s)\n    --- FAIL: TestEncrypt/test_num__0 (0.00s)\n\
    \        tmp3253hd2n_test.go:45: expected 'lm', got ''\n    --- FAIL: TestEncrypt/test_num__1\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'ewhjklnop', got ''\n    ---\
    \ FAIL: TestEncrypt/test_num__2 (0.00s)\n        tmp3253hd2n_test.go:45: expected\
    \ 'kj', got ''\n    --- FAIL: TestEncrypt/test_num__3 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'ix', got ''\n    --- FAIL: TestEncrypt/test_num__4 (0.00s)\n     \
    \   tmp3253hd2n_test.go:45: expected 'jeiajeaijeiak', got ''\n    --- FAIL: TestEncrypt/test_num__5\
    \ (0.00s)\n        tmp3253hd2n_test.go:45: expected 'lippsqcjvmirh', got ''\n\
    \    --- FAIL: TestEncrypt/test_num__6 (0.00s)\n        tmp3253hd2n_test.go:45:\
    \ expected 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', got ''\n    --- FAIL:\
    \ TestEncrypt/test_num__7 (0.00s)\n        tmp3253hd2n_test.go:45: expected 'e',\
    \ got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073932
