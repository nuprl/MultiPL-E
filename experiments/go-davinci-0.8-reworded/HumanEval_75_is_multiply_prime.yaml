name: HumanEval_75_is_multiply_prime
language: go_test.go
prompt: "package is_multiply_prime_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n\
  )\n\n// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// >>> is_multiply_prime(30)\n// true\n// 30 = 2 * 3 * 5\n\
  func is_multiply_prime(a int) bool {\n"
tests: "func TestIs_Multiply_Prime(t *testing.T) {\n  candidate := is_multiply_prime\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(5), expected: false },\n     { actual:\
  \ candidate(30), expected: true },\n     { actual: candidate(8), expected: true\
  \ },\n     { actual: candidate(10), expected: false },\n     { actual: candidate(125),\
  \ expected: true },\n     { actual: candidate(105), expected: true },\n     { actual:\
  \ candidate(126), expected: false },\n     { actual: candidate(729), expected: false\
  \ },\n     { actual: candidate(891), expected: false },\n     { actual: candidate(1001),\
  \ expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if a <= 0 {\n        return false\n    }\n    primes := []int{}\n\
    \    prime := 2\n    for a > 1 {\n        if a % prime == 0 {\n            primes\
    \ = append(primes, prime)\n            a /= prime\n        } else {\n        \
    \    prime++\n        }\n    }\n    return len(primes) == 3\n}\n", "    return\
    \ true\n}\n", "    ...\n}\n", "    var is_prime bool = true\n    var is_multiply_prime\
    \ bool = false\n    var result int = 0\n    var i int = 2\n    var j int = 2\n\
    \    var k int = 2\n    var counter int = 0\n    for i < a {\n        for j <\
    \ a {\n            for k < a {\n                is_prime = true\n            \
    \    if i * j * k == a {\n                    is_multiply_prime = true\n     \
    \               counter++\n                    fmt.Println(counter, \"x\", i,\
    \ \"*\", j, \"*\", k, \"=\", a)\n                }\n                k++\n    \
    \        }\n            j++\n        }\n        i++\n    }\n    if is_multiply_prime\
    \ {\n        fmt.Println(\"true\")\n    } else {\n        fmt.Println(\"false\"\
    )\n    }\n    return is_multiply_prime\n}\n", "    // Your code here\n}\n", " \
    \   var (\n        count int = 0\n        prime_one, prime_two, prime_three int\n\
    \    )\n    primes := []int{2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for _, prime := range primes\
    \ {\n        if (a % prime == 0) {\n            if (count == 0) {\n          \
    \      prime_one = prime\n            } else if (count == 1) {\n             \
    \   prime_two = prime\n            } else if (count == 2) {\n                prime_three\
    \ = prime\n            }\n            count += 1\n        }\n    }\n    if (count\
    \ == 3) {\n        fmt.Printf(\"%d = %d * %d * %d\\n\", a, prime_one, prime_two,\
    \ prime_three)\n        return true\n    }\n    return false\n}\n", "    if (a\
    \ < 6) {\n        return false\n    }\n    if a % 2 == 0 {\n        return is_multiply_prime(a\
    \ / 2)\n    }\n    if a % 3 == 0 {\n        return is_multiply_prime(a / 3)\n\
    \    }\n    if a % 5 == 0 {\n        return is_multiply_prime(a / 5)\n    }\n\
    \    return true\n}\n", "\t/*\n\t\tvariable for storing prime numbers.\n\t*/\n\
    \tvar prime_numbers []int\n\t/*\n\t\tvariable that contains the result of execution.\n\
    \t*/\n\tvar result bool\n\t/*\n\t\tflag that indicates whether the number is prime\
    \ or not.\n\t*/\n\tvar flag bool\n\n\t/*\n\t\titerate over all numbers in a range.\n\
    \t*/\n\tfor i := 2; i <= a; i++ {\n\t\t/*\n\t\t\tassume that a number is prime.\n\
    \t\t*/\n\t\tflag = true\n\t\t/*\n\t\t\tcheck whether the current number is prime\
    \ or not.\n\t\t*/\n\t\tfor j := 2; j < i; j++ {\n\t\t\t/*\n\t\t\t\tif the current\
    \ number is evenly divisible\n\t\t\t\tby any other number then it is not prime.\n\
    \t\t\t*/\n\t\t\tif i % j == 0 {\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\t\t}\n\
    \t\t}\n\t\t/*\n\t\t\tif the current number is prime then add it\n\t\t\tto the\
    \ list of prime numbers.\n\t\t*/\n\t\tif flag {\n\t\t\tprime_numbers = append(prime_numbers,\
    \ i)\n\t\t}\n\t}\n\t/*\n\t\titerate over all prime numbers.\n\t*/\n\tfor i :=\
    \ 0; i < len(prime_numbers); i++ {\n\t\t/*\n\t\t\titerate over all prime numbers.\n\
    \t\t*/\n\t\tfor j := 0; j < len(prime_numbers); j++ {\n\t\t\t/*\n\t\t\t\tif the\
    \ required number is found then\n\t\t\t\tset the result to true and break\n\t\t\
    \t\tthe loop.\n\t\t\t*/\n\t\t\tif prime_numbers[i] * prime_numbers[j] == a {\n\
    \t\t\t\tresult = true\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t\treturn the\
    \ result of execution.\n\t*/\n\treturn result\n}\n\n/*\n\tHere are some examples.\n\
    */", "\tif a == 1 {\n\t\treturn false\n\t}\n\n\tfor i := 2; i < a; i++ {\n\t\t\
    if a % i == 0 {\n\t\t\t// fmt.Println(i)\n\t\t\t// no = a / i\n\t\t\t// fmt.Println(no)\n\
    \t\t\treturn is_multiply_prime(a / i)\n\t\t}\n\t}\n\treturn true\n}\n", "    for\
    \ i := 2; i < a; i++ {\n        if a % i == 0 {\n            for j := 2; j < a;\
    \ j++ {\n                if a % j == 0 {\n                    for k := 2; k <\
    \ a; k++ {\n                        if a % k == 0 {\n                        \
    \    if a == (i * j * k) {\n                                return true\n    \
    \                        }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return false\n}\n", " \
    \   // TODO\n    return false\n}\n", "    for i := 2; i < a; i++ {\n        if\
    \ a % i == 0 {\n            a = a / i\n            i = 1\n        }\n    }\n \
    \   return a == 1\n}\n", "    // Write your code here\n    return false\n}\n",
  "    return false\n}\n", "    var (\n        k = a\n        i = 2\n    )\n    for\
    \ ; i < a; i++ {\n        if a % i == 0 {\n            k = a / i\n           \
    \ break\n        }\n    }\n    if i == a {\n        return false\n    }\n    for\
    \ j := 2; j < k; j++ {\n        if k % j == 0 {\n            return false\n  \
    \      }\n    }\n    return true\n}\n", "    // TODO: write your code here\n}\n",
  "    // convert int to slice of digit\n    digit := []int{}\n    for a != 0 {\n\
    \        digit = append(digit, a % 10)\n        a /= 10\n    }\n    // slice of\
    \ prime number\n    prime := []int{2, 3, 5, 7}\n    div := []int{}\n    for _,\
    \ d := range digit {\n        for _, p := range prime {\n            if d % p\
    \ == 0 {\n                div = append(div, p)\n                break\n      \
    \      }\n        }\n    }\n    // check if last element of div is equal to first\
    \ element of div\n    if div[len(div)-1] == div[0] {\n        return true\n  \
    \  }\n    return false\n}\n", "    prime_numbers := []int{2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n\
    \    for i := 0; i < len(prime_numbers); i++ {\n        if a % prime_numbers[i]\
    \ == 0 {\n            return true\n        }\n    }\n    return false\n}\n", " \
    \   for i := 2; i < a; i++ {\n        if a % i == 0 {\n            for j := 2;\
    \ j < a; j++ {\n                if a % j == 0 {\n                    for k :=\
    \ 2; k < a; k++ {\n                        if a % k == 0 {\n                 \
    \           if a == i * j * k {\n                                return true\n\
    \                            }\n                        }\n                  \
    \  }\n                }\n            }\n        }\n    }\n    return false\n}\n",
  "    return false\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
