name: HumanEval_59_largest_prime_factor
language: go_test.go
prompt: "package largest_prime_factor_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
  \n)\n\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunc largest_prime_factor(n int) int {\n"
tests: "func TestLargest_Prime_Factor(t *testing.T) {\n  candidate := largest_prime_factor\n\
  \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
  \   tests := []test{\n     { actual: candidate(15), expected: 5 },\n     { actual:\
  \ candidate(27), expected: 3 },\n     { actual: candidate(63), expected: 7 },\n\
  \     { actual: candidate(330), expected: 11 },\n     { actual: candidate(13195),\
  \ expected: 29 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
  test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
  \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
  , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 2 {\n        return 2\n    }\n    // Must be odd.\n   \
    \ var i int = 3\n    var largest int = -1\n    for i * i <= n {\n        if n\
    \ % i == 0 {\n            largest = i\n            n /= i\n        } else {\n\
    \            i += 2\n        }\n    }\n    if n > largest {\n        largest =\
    \ n\n    }\n    return largest\n}\n", "    d := 2\n\n    for n > 1 {\n       \
    \ if n % d == 0 {\n            n /= d\n        } else {\n            d++\n   \
    \     }\n    }\n\n    return d\n}\n", "    lpf := 1\n    for i := 2; i <= n; i++\
    \ {\n        if (n % i == 0) {\n            lpf = i\n            n /= i\n    \
    \        i--\n        }\n    }\n    return lpf\n}\n", "    return -1\n}\n", " \
    \   i := 2\n    for ; i <= n; i++ {\n        if n % i == 0 {\n            break\n\
    \        }\n    }\n    // Check that the largest prime factor is not equal to\
    \ n itself.\n    if i == n {\n        return i\n    } else {\n        return largest_prime_factor(n\
    \ / i)\n    }\n}\n", "    // Solution:\n    //  divide number by primes, and the\
    \ last prime is the largest prime factor\n    //  :param n: int\n    //  :return:\
    \ int\n    //  :rtype: int\n    //  >>> largest_prime_factor(15)\n    //  5\n\
    \    //  >>> largest_prime_factor(2048)\n    //  2\n    //  >>> largest_prime_factor(13195)\n\
    \    //  29\n    // TODO: use prime generator\n    prime := 2\n    for n > 1 {\n\
    \        if n % prime == 0 {\n            n /= prime\n        } else {\n     \
    \       prime += 1\n        }\n    }\n    return prime\n}\n", "    largest_prime\
    \ := 0\n    for i := 2; i <= n; i++ {\n        if n % i == 0 {\n            largest_prime\
    \ = i\n            n /= i\n            i = 1\n        }\n    }\n    return largest_prime\n\
    }\n", "    if n == 1 {\n        return 1\n    }\n    if n % 2 == 0 {\n       \
    \ return largest_prime_factor(n / 2)\n    }\n    lpf := n\n    f := 3\n    for\
    \ f*f <= n {\n        if n % f == 0 {\n            lpf = f\n            n /= f\n\
    \        } else {\n            f += 2\n        }\n    }\n    return lpf\n}\n",
  "    for p := 3; n > p; p += 2 {\n        if n % p == 0 {\n            return largest_prime_factor(n\
    \ / p)\n        }\n    }\n    return n\n}\n", "    if n == 2 {\n        return\
    \ 2\n    }\n\n    lpf := 0\n    last_factor := 0\n    factor := 3\n    while n\
    \ > 1 {\n        if n % factor == 0 {\n            n /= factor\n            last_factor\
    \ = factor\n            lpf = last_factor\n        } else {\n            factor\
    \ += 2\n        }\n    }\n    return lpf\n}\n", "    for i := 2; i < n; i++ {\n\
    \        if n % i == 0 {\n            return largest_prime_factor(n / i)\n   \
    \     }\n    }\n    return n\n}\n", "    // Go through all ints from 3 up to sqrt(n).\n\
    \    i := 3\n    max := n/i\n    for ; i <= max; i++ {\n        if n % i == 0\
    \ {\n            return largest_prime_factor(n/i)\n        }\n    }\n    return\
    \ n\n}\n", "    // This is a brute force approach. It will try each number\n \
    \   // smaller than n and if it is a factor, it will try to\n    // divide out\
    \ any other factors.\n    // TODO: improve this algorithm\n    for i := n - 1;\
    \ i > 1; i-- {\n        if n % i == 0 {\n            if is_prime(i) {\n      \
    \          return i\n            }\n        }\n    }\n    // if we reach here,\
    \ then n is prime, so return it\n    return n\n}\n", "    var prime int\n    prime\
    \ = n\n    i := 2\n    // a prime number must be greater than 1\n    for n > 1\
    \ {\n        if n % i == 0 {\n            prime = i\n            n = n / i\n \
    \       } else {\n            i += 1\n        }\n    }\n    return prime\n}\n",
  "    // assume n is even, so start with 2\n    x := 2\n    for {\n        if n %\
    \ x == 0 {\n            // if x is a factor, then divide n by x\n            n\
    \ = n / x\n        } else {\n            // otherwise, if x is not a factor, increment\
    \ x\n            x += 1\n        }\n        // if n is a prime, then return n\n\
    \        if is_prime(n) {\n            return n\n        }\n    }\n}\n", "   \
    \ for i := 2; i < n; i++ {\n        if n % i == 0 {\n            if n / i == 1\
    \ {\n                return i\n            } else {\n                return largest_prime_factor(n\
    \ / i)\n            }\n        }\n    }\n    return n\n}\n", "    // Start by\
    \ trying to divide by 2\n    factor := 2\n    lastFactor := 1\n    for n > 1 {\n\
    \        if n % factor == 0 {\n            lastFactor = factor\n            n\
    \ = n / factor\n            for n % factor == 0 {\n                n = n / factor\n\
    \            }\n        }\n        factor = factor + 1\n    }\n    return lastFactor\n\
    }\n", "    factors := []int{}\n    for i := 2; i < n; i++ {\n        if n % i\
    \ == 0 {\n            is_prime := true\n            for j := 0; j < len(factors);\
    \ j++ {\n                if i % factors[j] == 0 {\n                    is_prime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if is_prime {\n                factors = append(factors, i)\n        \
    \    }\n        }\n    }\n    return factors[len(factors) - 1]\n}\n", "    //\
    \ Find all the factors.\n    factors := make([]int, 0)\n    p := 2\n    for p\
    \ <= n {\n        if n % p == 0 {\n            factors = append(factors, p)\n\
    \            n /= p\n        } else {\n            p += 1\n        }\n    }\n\
    \    // Find the largest prime factor.\n    largest := 1\n    for _, factor :=\
    \ range factors {\n        if factor > largest {\n            largest = factor\n\
    \        }\n    }\n    return largest\n}\n", "    return 0\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
