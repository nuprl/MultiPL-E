language: go_test.go
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    m := make(map[int][]string)\n\
    \    for _, s := range lst {\n        m[len(s)] = append(m[len(s)], s)\n    }\n\
    \    fmt.Println(m)\n    for _, k := range keys(m) {\n        result = append(result,\
    \ m[k]...)\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpdleqwzh4_test.go:30:23: undefined: keys

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, v := range\
    \ lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n    for _, v := range\
    \ m {\n        if len(v) == 1 {\n            delete(m, len(v[0]))\n        }\n\
    \    }\n    for _, v := range m {\n        for _, x := range v {\n           \
    \ fmt.Println(x)\n        }\n    }\n    return []string{}\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "d\nb\nc\na\nd\na\ndcba\nabcd\nAI\nai\nau\na\nb\nb\nc\nc\na\naaaa\nbbbb\n\
    dd\ncc\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmps_7ogcak_test.go:60: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmps_7ogcak_test.go:60:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmps_7ogcak_test.go:60: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmps_7ogcak_test.go:60:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmps_7ogcak_test.go:60: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    m := make(map[int][]string)\n\
    \    for _, e := range lst {\n        l := len(e)\n        m[l] = append(m[l],\
    \ e)\n    }\n    for k, v := range m {\n        if len(v) % 2 == 0 {\n       \
    \     res = append(res, v...)\n        }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpw7izxl59_test.go:30:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, word := range lst {\n\
    \        if len(word) % 2 == 0 {\n            res = append(res, word)\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n \
    \ candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpoirc8twu_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpoirc8twu_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpoirc8twu_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    var length_map = make(map[int][]string)\n\
    \    for _, i := range lst {\n        length_map[len(i)] = append(length_map[len(i)],\
    \ i)\n    }\n    for k, _ := range length_map {\n        if len(length_map[k])\
    \ % 2 == 0 {\n            res = append(res, length_map[k]...)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpb8kf8u8c_test.go:56: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpb8kf8u8c_test.go:56:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpb8kf8u8c_test.go:56: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpb8kf8u8c_test.go:56:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpb8kf8u8c_test.go:56: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpb8kf8u8c_test.go:56:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpb8kf8u8c_test.go:56: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    l := 0\n    if len(lst) > 0 {\n        l = len(lst[0])\n\
    \    }\n    m := make(map[int][]string)\n    for _, s := range lst {\n       \
    \ if len(s) % 2 == 0 {\n            m[len(s)] = append(m[len(s)], s)\n       \
    \ }\n    }\n    keys := make([]int, 0, len(m))\n    for k := range m {\n     \
    \   keys = append(keys, k)\n    }\n    for i := range keys {\n        for j :=\
    \ i + 1; j < len(keys); j++ {\n            if keys[i] > keys[j] {\n          \
    \      keys[i], keys[j] = keys[j], keys[i]\n            }\n        }\n    }\n\
    \    r := make([]string, 0, len(m))\n    for _, k := range keys {\n        for\
    \ i := range m[k] {\n            for j := i + 1; j < len(m[k]); j++ {\n      \
    \          if m[k][i] > m[k][j] {\n                    m[k][i], m[k][j] = m[k][j],\
    \ m[k][i]\n                }\n            }\n        }\n        r = append(r,\
    \ m[k]...)\n    }\n    return r\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpki111c1i_test.go:24:5: l declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // exclude empty list and single element list\n  \
    \  if len(lst) <= 1 {\n        return lst\n    }\n\n    var lst_sorted []string\n\
    \    var idx_sorted int\n    var lst_sum []int\n    var sum int\n    var min int\n\
    \n    // sum each element's ascii code, also get the minimum value\n    for _,\
    \ word := range lst {\n        sum = 0\n        for _, ch := range word {\n  \
    \          sum += int(ch)\n        }\n        lst_sum = append(lst_sum, sum)\n\
    \        if idx_sorted == 0 || sum < min {\n            min = sum\n        }\n\
    \    }\n\n    // extract strings with min sum\n    for idx, s := range lst_sum\
    \ {\n        if s == min {\n            lst_sorted = append(lst_sorted, lst[idx])\n\
    \        }\n    }\n\n    return lst_sorted\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpzj19el6t_test.go:76: expected '[aa]', got '[aaa]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpzj19el6t_test.go:76:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpzj19el6t_test.go:76: expected '[]', got '[a]'\n    --- FAIL:\
    \ TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzj19el6t_test.go:76: expected\
    \ '[abcd dcba]', got '[a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n\
    \        tmpzj19el6t_test.go:76: expected '[AI ai au]', got '[au]'\n    --- FAIL:\
    \ TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpzj19el6t_test.go:76: expected\
    \ '[]', got '[a a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n \
    \       tmpzj19el6t_test.go:76: expected '[cc dd aaaa bbbb]', got '[cc]'\nFAIL\n\
    FAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return []string{}\n  \
    \  }\n    fmt.Println(lst)\n    var even_lst []string\n    for _, v := range lst\
    \ {\n        if len(v) % 2 == 0 {\n            even_lst = append(even_lst, v)\n\
    \        }\n    }\n    fmt.Println(even_lst)\n    var rtn []string\n    for i\
    \ := 1; i <= len(even_lst); i++ {\n        for _, v := range even_lst {\n    \
    \        if len(v) == i {\n                rtn = append(rtn, v)\n            }\n\
    \        }\n    }\n    return rtn\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[aa a aaa]\n[aa]\n[school AI asdf b]\n[school AI asdf]\n[d b c a]\n[]\n\
    [d dcba abcd a]\n[dcba abcd]\n[AI ai au]\n[AI ai au]\n[a b b c c a]\n[]\n[aaaa\
    \ bbbb dd cc]\n[aaaa bbbb dd cc]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpak2948ke_test.go:65:\
    \ expected '[aa]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n\
    \        tmpak2948ke_test.go:65: expected '[AI asdf school]', got '[AI]'\n   \
    \ --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpak2948ke_test.go:65:\
    \ expected '[abcd dcba]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpak2948ke_test.go:65: expected '[cc dd aaaa bbbb]', got '[dd\
    \ cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if lst == nil {\n        return []string{}\n    }\n\
    \    if len(lst) == 0 {\n        return []string{}\n    }\n    result := []string{}\n\
    \    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result\
    \ = append(result, s)\n        }\n    }\n    sort_list(result)\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbpsd946o_test.go:36:5: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _,v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    sort2(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplkc92t22_test.go:30:5: undefined: sort2

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp179gefv1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp179gefv1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var output []string\n    var odd_length int\n    for\
    \ _, word := range lst {\n        if len(word) % 2 == 0 {\n            output\
    \ = append(output, word)\n        } else {\n            odd_length++\n       \
    \ }\n    }\n    if odd_length == len(lst) {\n        return []string{}\n    }\n\
    \    return output\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmptd6sxgw2_test.go:58: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmptd6sxgw2_test.go:58:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmptd6sxgw2_test.go:58: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // next we work on a copy of the argument:\n    lst_copy\
    \ := make([]string, len(lst))\n    copy(lst_copy, lst)\n    // then sort it using\
    \ bubble sort:\n    for i := 0; i < len(lst_copy); i++ {\n        for j := i +\
    \ 1; j < len(lst_copy); j++ {\n            if lst_copy[i] > lst_copy[j] {\n  \
    \              lst_copy[i], lst_copy[j] = lst_copy[j], lst_copy[i]\n         \
    \   }\n        }\n    }\n    // now we have sorted the list, we will\n    // fill\
    \ the answer variable with elements\n    // that have even length:\n    answer\
    \ := make([]string, 0)\n    for _, e := range lst_copy {\n        if len(e) %\
    \ 2 == 0 {\n            answer = append(answer, e)\n        }\n    }\n    return\
    \ answer\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp4bfk4zc4_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    l := len(lst)\n    if l == 0 {\n        return lst\n\
    \    }\n    for i := 0; i < l; i++ {\n        for j := i+1; j < l; j++ {\n   \
    \         if len(lst[i]) > len(lst[j]) {\n                lst[i], lst[j] = lst[j],\
    \ lst[i]\n            }\n        }\n    }\n    // fmt.Println(lst)\n    i := 0\n\
    \    for ; i < l; i++ {\n        if len(lst[i]) % 2 == 0 {\n            break\n\
    \        }\n    }\n    if i == l {\n        return []string{}\n    }\n    lst\
    \ = lst[i:]\n    l = len(lst)\n    for i := 0; i < l; i++ {\n        for j :=\
    \ i+1; j < l; j++ {\n            if lst[i] > lst[j] {\n                lst[i],\
    \ lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpn96j5zba_test.go:76: expected '[aa]', got '[aa aaa]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpn96j5zba_test.go:76:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var new_lst []string\n    for _, n := range lst {\n\
    \        if len(n) % 2 == 0 {\n            new_lst = append(new_lst, n)\n    \
    \    }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpai332t05_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpai332t05_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpai332t05_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    for i := 0; i < len(lst); i++ {\n        fmt.Println(lst[i])\n\
    \    }\n    return []string{}\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "aa\na\naaa\nschool\nAI\nasdf\nb\nd\nb\nc\na\nd\ndcba\nabcd\na\nAI\nai\n\
    au\na\nb\nb\nc\nc\na\naaaa\nbbbb\ndd\ncc\n--- FAIL: TestSorted_List_Sum (0.00s)\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp5il0ns7h_test.go:49:\
    \ expected '[aa]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n\
    \        tmp5il0ns7h_test.go:49: expected '[AI asdf school]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp5il0ns7h_test.go:49:\
    \ expected '[abcd dcba]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp5il0ns7h_test.go:49: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp5il0ns7h_test.go:49:\
    \ expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    count := 0\n    is_odd := true\n    ret := make([]string,\
    \ len(lst))\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n     \
    \       is_odd = false\n        } else {\n            is_odd = true\n        }\n\
    \        if !is_odd {\n            ret[count] = s\n            count++\n     \
    \   }\n    }\n    return ret[:count]\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp84urhimr_test.go:60: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp84urhimr_test.go:60:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp84urhimr_test.go:60: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var s []string\n    for _, v := range lst {\n    \
    \    if len(v) % 2 == 0 {\n            s = append(s, v)\n        }\n    }\n  \
    \  return s\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpwge3_v1k_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwge3_v1k_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpwge3_v1k_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // runtime: O(n)\n    // memory: O(n)\n\n    m :=\
    \ make(map[int][]string)\n    rs := []string{}\n\n    for _, v := range lst {\n\
    \        m[len(v)] = append(m[len(v)], v)\n    }\n\n    for k, v := range m {\n\
    \        if k % 2 == 0 {\n            for _, v2 := range v {\n               \
    \ rs = append(rs, v2)\n            }\n        }\n    }\n\n    return rs\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpsoh0xc19_test.go:64: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpsoh0xc19_test.go:64:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpsoh0xc19_test.go:64: expected '[cc dd aaaa bbbb]', got '[dd\
    \ cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var odd_lst []string\n    // odd_lst = make([]string,\
    \ len(lst))\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n     \
    \       odd_lst = append(odd_lst, v)\n        }\n    }\n    fmt.Println(odd_lst)\n\
    \    return odd_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[a aaa]\n[b]\n[d b c a]\n[d a]\n[]\n[a b b c c a]\n[]\n--- FAIL: TestSorted_List_Sum\
    \ (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpimz79fc7_test.go:54:\
    \ expected '[aa]', got '[a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpimz79fc7_test.go:54: expected '[AI asdf school]', got '[b]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmpimz79fc7_test.go:54:\
    \ expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpimz79fc7_test.go:54: expected '[abcd dcba]', got '[d a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpimz79fc7_test.go:54:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpimz79fc7_test.go:54: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpimz79fc7_test.go:54:\
    \ expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var new_lst []string\n    for _, value := range lst\
    \ {\n        if len(value) % 2 == 0 {\n            new_lst = append(new_lst, value)\n\
    \        }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8xr29r36_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8xr29r36_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8xr29r36_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    ht := make(map[int][]string)\n\
    \    for _, v := range lst {\n        v_len := len(v)\n        ht[v_len] = append(ht[v_len],\
    \ v)\n    }\n    for _, v := range ht {\n        //fmt.Println(v)\n        if\
    \ len(v) == 1 {\n            res = append(res, v[0])\n        } else {\n     \
    \       res = append(res, v[0])\n            for i := 1; i < len(v); i++ {\n \
    \               v_len := len(v[i])\n                for j := 0; j < len(res);\
    \ j++ {\n                    if v_len < len(res[j]) {\n                      \
    \  res = append(res[:j], append([]string{v[i]}, res[j:]...)...)\n            \
    \            break\n                    } else if v_len == len(res[j]) {\n   \
    \                     for k := 0; k < len(res); k++ {\n                      \
    \      if v[i] < res[k] {\n                                res = append(res[:k],\
    \ append([]string{v[i]}, res[k:]...)...)\n                                break\n\
    \                            }\n                        }\n                  \
    \      break\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n \
    \ candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp677meavk_test.go:77: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp677meavk_test.go:77:\
    \ expected '[AI asdf school]', got '[asdf b school AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp677meavk_test.go:77: expected '[]', got '[a b c d]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp677meavk_test.go:77:\
    \ expected '[abcd dcba]', got '[a abcd dcba d]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp677meavk_test.go:77: expected '[AI ai au]', got '[AI]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp677meavk_test.go:77:\
    \ expected '[]', got '[a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n\
    \        tmp677meavk_test.go:77: expected '[cc dd aaaa bbbb]', got '[cc aaaa dd]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var h map[int][]string\n    h = make(map[int][]string)\n\
    \    // var lst_int []int\n    var max_len int\n    for _, v := range lst {\n\
    \        len_v := len(v)\n        h[len_v] = append(h[len_v], v)\n        if len_v\
    \ > max_len {\n            max_len = len_v\n        }\n    }\n    var result []string\n\
    \    for i := 1; i <= max_len; i++ {\n        if _, ok := h[i]; ok {\n       \
    \     result = append(result, h[i]...)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmprtbtevzx_test.go:63: expected '[aa]', got '[a aa aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmprtbtevzx_test.go:63:\
    \ expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmprtbtevzx_test.go:63: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmprtbtevzx_test.go:63:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmprtbtevzx_test.go:63: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmprtbtevzx_test.go:63:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    l := len(lst)\n    if l <= 1 {\n        return lst\n\
    \    }\n    var odd = false\n    for i := 0; i < l; i++ {\n        if len(lst[i])%2\
    \ == 1 {\n            odd = true\n            lst = append(lst[:i], lst[i+1:]...)\n\
    \            l = len(lst)\n            i--\n        }\n    }\n    if odd {\n \
    \       for i := 0; i < l; i++ {\n            for j := 0; j < l-1; j++ {\n   \
    \             if len(lst[j]) > len(lst[j+1]) {\n                    lst[j], lst[j+1]\
    \ = lst[j+1], lst[j]\n                }\n            }\n        }\n    }\n   \
    \ return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpvjld8mv3_test.go:68: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpvjld8mv3_test.go:68:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073918
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ret []string\n    var append_map = make(map[string]bool)\n\
    \    for _, v := range lst {\n        if _, ok := append_map[v]; !ok {\n     \
    \       append_map[v] = true\n            ret = append(ret, v)\n        }\n  \
    \  }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpf1fpj4o__test.go:54: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpf1fpj4o__test.go:54:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpf1fpj4o__test.go:54: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpf1fpj4o__test.go:54:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpf1fpj4o__test.go:54: expected '[]', got '[a b c]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpf1fpj4o__test.go:54:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    even_length := map[string]bool{}\n\
    \    lst_len := len(lst)\n    for i := 0; i < lst_len; i++ {\n        // fmt.Println(len(lst[i]),\
    \ lst[i])\n        if len(lst[i]) % 2 == 0 {\n            even_length[lst[i]]\
    \ = true\n        }\n    }\n    // fmt.Println(even_length)\n    for k, _ := range\
    \ even_length {\n        result = append(result, k)\n    }\n    fmt.Println(result)\n\
    \    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[aa]\n[school AI asdf]\n[]\n[dcba abcd]\n[AI ai au]\n[]\n[aaaa bbbb dd\
    \ cc]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8ml1acgu_test.go:60: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8ml1acgu_test.go:60:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8ml1acgu_test.go:60: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO: implement this function\n    return []string{}\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpo33id30a_test.go:47: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpo33id30a_test.go:47:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpo33id30a_test.go:47: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpo33id30a_test.go:47:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpo33id30a_test.go:47: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073920
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var elems []string\n    var sum  int\n    for _, elem\
    \ := range lst {\n        if len(elem) % 2 == 0 {\n            elems = append(elems,\
    \ elem)\n        }\n    }\n    return elems\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp0m1l8tku_test.go:25:9: sum declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) <= 1 {\n        return lst\n    }\n  \
    \  left, right := 0, len(lst) - 1\n    for left < right {\n        // find first\
    \ odd left\n        for ;left < right && len(lst[left]) % 2 == 0; left++ {}\n\
    \        // find first even right\n        for ;left < right && len(lst[right])\
    \ % 2 == 1; right-- {}\n        // swap left & right\n        lst[left], lst[right]\
    \ = lst[right], lst[left]\n    }\n    if len(lst[left]) % 2 == 0 {\n        return\
    \ lst[:left]\n    }\n    return lst[:left+1]\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpx7zw4ufn_test.go:61: expected '[aa]', got '[aa a]'\n   \
    \ --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpx7zw4ufn_test.go:61:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpx7zw4ufn_test.go:61: expected '[]', got '[d]'\n    --- FAIL:\
    \ TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpx7zw4ufn_test.go:61: expected\
    \ '[abcd dcba]', got '[abcd dcba d]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpx7zw4ufn_test.go:61: expected '[AI ai au]', got '[AI ai]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpx7zw4ufn_test.go:61:\
    \ expected '[]', got '[a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n\
    \        tmpx7zw4ufn_test.go:61: expected '[cc dd aaaa bbbb]', got '[aaaa bbbb\
    \ dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073920
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, item := range\
    \ lst {\n        strLen := len(item)\n        _, ok := m[strLen]\n        if !ok\
    \ {\n            m[strLen] = []string{item}\n        } else {\n            m[strLen]\
    \ = append(m[strLen], item)\n        }\n    }\n    // sort the map by the length\n\
    \    sorted_keys := []int{}\n    for k, _ := range m {\n        sorted_keys =\
    \ append(sorted_keys, k)\n    }\n    fmt.Println(sorted_keys)\n    quicksort(sorted_keys,\
    \ 0, len(sorted_keys) - 1)\n    fmt.Println(sorted_keys)\n    sorted_list := []string{}\n\
    \    for _, k := range sorted_keys {\n        if k % 2 == 0 {\n            for\
    \ _, v := range m[k] {\n                sorted_list = append(sorted_list, v)\n\
    \            }\n        }\n    }\n    return sorted_list\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo1ie7e1q_test.go:40:5: undefined: quicksort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var lstAsc []string\n    var lstAscLeft []string\n\
    \    var lstAscRight []string\n    var mid int\n    var tempString string\n  \
    \  var oddLst []string\n    var evenLst []string\n    var sumLst []string\n\n\
    \    //even strings\n    for _, val := range lst {\n        if len(val) % 2 ==\
    \ 0 {\n            evenLst = append(evenLst, val)\n        }\n    }\n\n    //odd\
    \ strings\n    for _, val := range lst {\n        if len(val) % 2 != 0 {\n   \
    \         oddLst = append(oddLst, val)\n        }\n    }\n\n    //sorting even\
    \ strings\n    for {\n        if len(evenLst) == 1 {\n            lstAsc = append(lstAsc,\
    \ evenLst[0])\n            break\n        }\n        mid = len(evenLst) / 2\n\
    \        lstAscLeft = evenLst[:mid]\n        lstAscRight = evenLst[mid:]\n   \
    \     lstAscLeft = sorted_list_sum(lstAscLeft)\n        lstAscRight = sorted_list_sum(lstAscRight)\n\
    \        lstAsc = mergeSort(lstAscLeft, lstAscRight)\n        break\n    }\n\n\
    \    //sorting odd strings\n    for {\n        if len(oddLst) == 1 {\n       \
    \     lstAsc = append(lstAsc, oddLst[0])\n            break\n        }\n     \
    \   mid = len(oddLst) / 2\n        lstAscLeft = oddLst[:mid]\n        lstAscRight\
    \ = oddLst[mid:]\n        lstAscLeft = sorted_list_sum(lstAscLeft)\n        lstAscRight\
    \ = sorted_list_sum(lstAscRight)\n        lstAsc = mergeSort(lstAscLeft, lstAscRight)\n\
    \        break\n    }\n\n    //removing duplicates\n    for {\n        if len(lstAsc)\
    \ == 1 {\n            sumLst = append(sumLst,\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_j21qpki_test.go:81:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := []string{}\n    fmt.Println(len(lst))\n   \
    \ for i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n       \
    \     res = append(res, lst[i])\n        }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "3\n4\n4\n4\n3\n6\n4\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL:\
    \ TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpocsgm2wl_test.go:53: expected\
    \ '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpocsgm2wl_test.go:53: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpocsgm2wl_test.go:53:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073921
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    sort_in_place(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_gyb0vrs_test.go:30:5: undefined: sort_in_place

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := []string{}\n    for _, w := range lst {\n \
    \       if len(w) % 2 == 0 {\n            res = append(res, w)\n        }\n  \
    \  }\n    sort_words(res)\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxz3m3wb3_test.go:30:5: undefined: sort_words

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 0 {\n            result = append(result, word)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpshqsydrx_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpshqsydrx_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // create a map based on string length\n    m := make(map[int][]string)\n\
    \    for _, s := range lst {\n        m[len(s)] = append(m[len(s)], s)\n    }\n\
    \    // get a sorted list of string lengths\n    keys := make([]int, 0, len(m))\n\
    \    for k := range m {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n\
    \    // create a new list of strings\n    var r []string\n    for _, k := range\
    \ keys {\n        for _, s := range m[k] {\n            r = append(r, s)\n   \
    \     }\n    }\n    return r\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2lvkd9nz_test.go:34:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    sorted_list := []string{}\n    odd_list := []string{}\n\
    \    for _, str := range lst {\n        if len(str) % 2 == 0 {\n            sorted_list\
    \ = append(sorted_list, str)\n        } else {\n            odd_list = append(odd_list,\
    \ str)\n        }\n    }\n    fmt.Println(sorted_list)\n    fmt.Println(odd_list)\n\
    \    return sorted_list\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[aa]\n[a aaa]\n[school AI asdf]\n[b]\n[]\n[d b c a]\n[dcba abcd]\n[d a]\n\
    [AI ai au]\n[]\n[]\n[a b b c c a]\n[aaaa bbbb dd cc]\n[]\n--- FAIL: TestSorted_List_Sum\
    \ (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpl81hkxi9_test.go:57:\
    \ expected '[AI asdf school]', got '[school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpl81hkxi9_test.go:57: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpl81hkxi9_test.go:57:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073921
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    len_map := make(map[int][]string)\n    for _, str\
    \ := range lst {\n        key := len(str)\n        if v, ok := len_map[key]; ok\
    \ {\n            len_map[key] = append(v, str)\n        } else {\n           \
    \ len_map[key] = []string{str}\n        }\n    }\n    keys := make([]int, 0, len(len_map))\n\
    \    for k, _ := range len_map {\n        keys = append(keys, k)\n    }\n    for\
    \ k, v := range len_map {\n        for _, str := range v {\n            for i\
    \ := k; i > 0; i-- {\n                if len_map[i][0] > str {\n             \
    \       len_map[i] = append([]string{str}, len_map[i]...)\n                  \
    \  break\n                }\n            }\n        }\n    }\n    max := keys[len(keys)-1]\n\
    \    res := make([]string, 0, len(lst))\n    for i := max; i > 0; i-- {\n    \
    \    if v, ok := len_map[i]; ok {\n            res = append(res, v...)\n     \
    \   }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\npanic: runtime error: index out\
    \ of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of\
    \ range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513980,\
    \ 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513980, 0xc000014378})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sorted_list_sum({0xc0000f5d60, 0x4, 0x3?})\n\
    \t/tmp/tmpw74a04vu_test.go:40 +0x65f\ncommand-line-arguments_test.TestSorted_List_Sum(0x0?)\n\
    \t/tmp/tmpw74a04vu_test.go:65 +0x187\ntesting.tRunner(0xc0001a0340, 0x5292d0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073921
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  result := []string{}\n    lengths := []int{}\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            result = append(result, s)\n      \
    \      lengths = append(lengths, len(s))\n        }\n    }\n    if len(result)\
    \ == 0 {\n        return result\n    }\n    sort(result, lengths)\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuciqfcq2_test.go:38:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var output []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            output = append(output, v)\n      \
    \  }\n    }\n    return output\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi77gy2_d_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi77gy2_d_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi77gy2_d_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073921
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst_res := []string{}\n    d := make(map[int][]string)\n\
    \    d_keys := []int{}\n    for _, str := range lst {\n        if len(str) % 2\
    \ == 0 {\n            _, ok := d[len(str)]\n            if !ok {\n           \
    \     d[len(str)] = []string{}\n                d_keys = append(d_keys, len(str))\n\
    \            }\n            d[len(str)] = append(d[len(str)], str)\n        }\n\
    \    }\n    InsertionSort(d_keys)\n    for _, k := range d_keys {\n        InsertionSort(d[k])\n\
    \        lst_res = append(lst_res, d[k]...)\n    }\n    return lst_res\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp2hvn2mm9_test.go:37:5: undefined: InsertionSort

    /tmp/tmp2hvn2mm9_test.go:39:9: undefined: InsertionSort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Your code here.\n    m := make(map[int][]string)\n\
    \    // Assign values to m\n    for _, v := range lst {\n        m[len(v)] = append(m[len(v)],\
    \ v)\n    }\n    // Get the odd lengths\n    for k, _ := range m {\n        if\
    \ k % 2 == 1 {\n            delete(m, k)\n        }\n    }\n    // Sort each list\
    \ in each key, alphabetically\n    for _, v := range m {\n        sort(v)\n  \
    \  }\n    // Put each list in a bigger slice\n    slice := make([]string, 0)\n\
    \    for _, v := range m {\n        slice = append(slice, v...)\n    }\n    //\
    \ Sort the bigger slice by length\n    sort(slice)\n    return slice\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp75k0s5rw_test.go:38:9: undefined: sort

    /tmp/tmp75k0s5rw_test.go:46:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    for i := 0; i < len(lst); i++ {\n        for j :=\
    \ i + 1; j < len(lst); j++ {\n            if len(lst[i]) < len(lst[j]) {\n   \
    \             lst[i], lst[j] = lst[j], lst[i]\n            } else if len(lst[i])\
    \ == len(lst[j]) {\n                if lst[i] > lst[j] {\n                   \
    \ lst[i], lst[j] = lst[j], lst[i]\n                }\n            }\n        }\n\
    \    }\n    fmt.Println(lst)\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[aaa aa a]\n[school asdf AI b]\n[a b c d]\n[abcd dcba a d]\n[AI ai au]\n\
    [a a b b c c]\n[aaaa bbbb cc dd]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp9n_xebo0_test.go:58:\
    \ expected '[aa]', got '[aaa aa a]'\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9n_xebo0_test.go:58: expected '[AI asdf school]', got '[school\
    \ asdf AI b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n       \
    \ tmp9n_xebo0_test.go:58: expected '[]', got '[a b c d]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmp9n_xebo0_test.go:58: expected '[abcd dcba]', got '[abcd\
    \ dcba a d]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp9n_xebo0_test.go:58:\
    \ expected '[]', got '[a a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9n_xebo0_test.go:58: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073921
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // first sort list by length\n    sorted_by_length\
    \ := func(i, j int) bool {\n        if len(lst[i]) < len(lst[j]) {\n         \
    \   return true\n        }\n        if len(lst[i]) == len(lst[j]) {\n        \
    \    return lst[i] < lst[j]\n        }\n        return false\n    }\n    sort.Slice(lst,\
    \ sorted_by_length)\n    fmt.Println(lst)\n    // then remove strings that have\
    \ odd length\n    even_lst := make([]string, 0)\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 0 {\n            even_lst = append(even_lst,\
    \ word)\n        }\n    }\n    return even_lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp93byb2ik_test.go:34:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := make([]string, 0)\n    for _, word := range\
    \ lst {\n        if len(word) % 2 == 0 {\n            res = append(res, word)\n\
    \        }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpf8k8znms_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpf8k8znms_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpf8k8znms_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073921
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, v := range\
    \ lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n    var sorted []int\n\
    \    for k := range m {\n        sorted = append(sorted, k)\n    }\n    var result\
    \ []string\n    for _, key := range sorted {\n        for _, v := range m[key]\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp4e8n9o6j_test.go:60: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp4e8n9o6j_test.go:60:\
    \ expected '[AI asdf school]', got '[b school AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp4e8n9o6j_test.go:60: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp4e8n9o6j_test.go:60:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp4e8n9o6j_test.go:60: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp4e8n9o6j_test.go:60:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073921
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var empty []string\n    if len(lst) == 0 {\n     \
    \   return empty\n    }\n    var result = make([]string, 0)\n    odd_list := make([]string,\
    \ 0)\n    even_list := make([]string, 0)\n    for _, v := range lst {\n      \
    \  if len(v) % 2 == 0 {\n            even_list = append(even_list, v)\n      \
    \  } else {\n            odd_list = append(odd_list, v)\n        }\n    }\n  \
    \  fmt.Println(odd_list)\n    fmt.Println(even_list)\n    for i := 0; i < len(even_list);\
    \ i++ {\n        for j := i + 1; j < len(even_list); j++ {\n            if even_list[i]\
    \ > even_list[j] {\n                even_list[i], even_list[j] = even_list[j],\
    \ even_list[i]\n            }\n        }\n    }\n    for _, v := range even_list\
    \ {\n        var flag = false\n        for _, v2 := range result {\n         \
    \   if v == v2 {\n                flag = true\n                break\n       \
    \     }\n        }\n        if !flag {\n            result = append(result, v)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[a aaa]\n[aa]\n[b]\n[school AI asdf]\n[d b c a]\n[]\n[d a]\n[dcba abcd]\n\
    []\n[AI ai au]\n[a b b c c a]\n[]\n[]\n[aaaa bbbb dd cc]\n--- FAIL: TestSorted_List_Sum\
    \ (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp5h_m42t6_test.go:81:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073921
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  // sort the list by string length\n    lst = bubble_sort(lst)\n    lst = remove_duplicates(lst)\n\
    \    var res = []string{}\n    for i, v := range lst {\n        if i == 0 {\n\
    \            res = append(res, v)\n        } else {\n            if len(v) % 2\
    \ == 0 {\n                res = append(res, v)\n            }\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp07gyp_t_test.go:28:11: undefined: bubble_sort

    /tmp/tmpp07gyp_t_test.go:29:11: undefined: remove_duplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073920
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    list := []string{}\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            list = append(list, str)\n      \
    \  }\n    }\n    return list\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp__y16p5n_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp__y16p5n_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp__y16p5n_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073922
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := []string{}\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n\
    \    }\n    if len(res) == 0 {\n        return res\n    }\n    res = merge_sort(res)\n\
    \    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp07rd51r2_test.go:33:11: undefined: merge_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073922
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var a []string\n    for _, x := range lst {\n    \
    \    if len(x) % 2 == 0 {\n            a = append(a, x)\n        }\n    }\n  \
    \  return a\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpr676zyap_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpr676zyap_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpr676zyap_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073922
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    ret := []string{}\n    for _, el := range lst {\n\
    \        if len(el) % 2 == 0 {\n            ret = append(ret, el)\n        }\n\
    \    }\n    for i := 0; i < len(ret); i++ {\n        for j := i + 1; j < len(ret);\
    \ j++ {\n            if len(ret[i]) > len(ret[j]) {\n                ret[i], ret[j]\
    \ = ret[j], ret[i]\n            } else if len(ret[i]) == len(ret[j]) {\n     \
    \           if ret[i] > ret[j] {\n                    ret[i], ret[j] = ret[j],\
    \ ret[i]\n                }\n            }\n        }\n    }\n    return ret\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073922
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var out []string\n    for _, i := range lst {\n  \
    \      if len(i) % 2 == 0 {\n            out = append(out, i)\n        }\n   \
    \ }\n    return out\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmprt3o37i9_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmprt3o37i9_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmprt3o37i9_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073922
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    //lst := []string{\"ab\", \"a\", \"aaa\", \"cd\"}\n\
    \    new_lst := []string{}\n    hasil := []string{}\n    for i, _ := range lst\
    \ {\n        if len(lst[i]) % 2 == 0 {\n            new_lst = append(new_lst,\
    \ lst[i])\n        }\n    }\n    if len(new_lst) > 0 {\n        for i, _ := range\
    \ new_lst {\n            for j, _ := range new_lst {\n                if j !=\
    \ i {\n                    if len(new_lst[i]) == len(new_lst[j]) {\n         \
    \               if new_lst[i] < new_lst[j] {\n                            new_lst[i],\
    \ new_lst[j] = new_lst[j], new_lst[i]\n                        }\n           \
    \         }\n                }\n            }\n        }\n        hasil = new_lst\n\
    \    }\n    return hasil\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpf_u34dc7_test.go:68: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpf_u34dc7_test.go:68:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073922
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    ret := []string{}\n    sort_fn := func(lhs, rhs int)\
    \ bool {\n        if len(lst[lhs]) < len(lst[rhs]) {\n            return true\n\
    \        } else if len(lst[lhs]) > len(lst[rhs]) {\n            return false\n\
    \        } else {\n            return lst[lhs] < lst[rhs]\n        }\n    }\n\
    \    sort_fn.sort(len(lst))\n    for i, s := range lst {\n        if len(s) %\
    \ 2 == 0 {\n            ret = append(ret, s)\n        }\n    }\n    return ret\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo4zdwfon_test.go:34:13: sort_fn.sort undefined (type func(lhs int, rhs
    int) bool has no field or method sort)

    /tmp/tmpo4zdwfon_test.go:35:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073922
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := []string{}\n    for _, v := range lst {\n \
    \       // fmt.Println(v)\n        if len(v) % 2 == 0 {\n            res = append(res,\
    \ v)\n        }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmppnhjjb1h_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmppnhjjb1h_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmppnhjjb1h_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := []string{}\n    for _, v := range lst {\n \
    \       if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n  \
    \  }\n    for i := 0; i < len(res); i++ {\n        for j := i + 1; j < len(res);\
    \ j++ {\n            if len(res[i]) > len(res[j]) {\n                res[i], res[j]\
    \ = res[j], res[i]\n            } else if len(res[i]) == len(res[j]) {\n     \
    \           if res[i] > res[j] {\n                    res[i], res[j] = res[j],\
    \ res[i]\n                }\n            }\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073923
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO - Add your code here\n    return nil\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkz4iu25p_test.go:47: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkz4iu25p_test.go:47:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpkz4iu25p_test.go:47: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpkz4iu25p_test.go:47:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpkz4iu25p_test.go:47: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    odd := func(s string) bool {\n        return len(s)\
    \ % 2 == 1\n    }\n    even := func(s string) bool {\n        return len(s) %\
    \ 2 == 0\n    }\n    lst = filter(lst, odd)\n    lst = filter(lst, even)\n   \
    \ sort(lst)\n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n \
    \ candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpo3z84kcg_test.go:30:11: undefined: filter

    /tmp/tmpo3z84kcg_test.go:31:11: undefined: filter

    /tmp/tmpo3z84kcg_test.go:32:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073922
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) <= 1 {\n        return lst\n    }\n  \
    \  even_lst := make([]string, 0)\n    odd_lst := make([]string, 0)\n    for _,\
    \ elem := range lst {\n        if len(elem) % 2 == 0 {\n            even_lst =\
    \ append(even_lst, elem)\n        } else {\n            odd_lst = append(odd_lst,\
    \ elem)\n        }\n    }\n    even_lst = sorted_list_sum(even_lst)\n    odd_lst\
    \ = sorted_list_sum(odd_lst)\n    return append(even_lst, odd_lst...)\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "runtime: goroutine stack exceeds 1000000000-byte limit\nruntime: sp=0xc0201e0408\
    \ stack=[0xc0201e0000, 0xc0401e0000]\nfatal error: stack overflow\n\nruntime stack:\n\
    runtime.throw({0x520554?, 0x5e4ea0?})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:992\
    \ +0x71\nruntime.newstack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/stack.go:1101\
    \ +0x5cc\nruntime.morestack()\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/asm_amd64.s:547\
    \ +0x8b\n\ngoroutine 34 [running]:\nruntime.heapBitsSetType(0xc000fab040?, 0x10?,\
    \ 0x10?, 0x4fde80?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/mbitmap.go:832\
    \ +0xbcc fp=0xc0201e0418 sp=0xc0201e0410 pc=0x4149ec\nruntime.mallocgc(0x10, 0x4fde80,\
    \ 0x1)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/malloc.go:1117 +0x673\
    \ fp=0xc0201e0490 sp=0xc0201e0418 pc=0x40cc73\nruntime.growslice(0x4fde80, {0x62b7e0?,\
    \ 0x2ab4fec0d898?, 0x18?}, 0x2ab4d58ea5b8?)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/slice.go:278\
    \ +0x4ea fp=0xc0201e04f8 sp=0xc0201e0490 pc=0x44a12a\ncommand-line-arguments_test.sorted_list_sum({0xc000fad6c0?,\
    \ 0x2, 0x2ab4fec0d898?})\n\t/tmp/tmpu3rptg6n_test.go:33 +0x1bd fp=0xc0201e05c0\
    \ sp=0xc0201e04f8 pc=0x4efb1d\ncommand-line-arguments_test.sorted_list_sum({0xc000fad6a0?,\
    \ 0x2, 0x2ab4fec0d898?})\n\t/tmp/tmpu3rptg6n_test.go:37 +0x292 fp=0xc0201e0688\
    \ sp=0xc0201e05c0 pc=0x4efbf2\ncommand-line-arguments_test.sorted_list_sum({0xc000fad680?,\
    \ 0x2, 0x2ab4fec0d898?})\n\t/tmp/tmpu3rptg6n_test.go:37 +0x292 fp=0xc0201e0750\
    \ sp=0xc0201e0688 pc=0x4efbf2\ncommand-line-arguments_test.sorted_list_sum({0xc000fad660?,\
    \ 0x2, 0x2ab4fec0d898?})\n\t/tmp/tmpu3rptg6n_test.go:37 +0x292 fp=0xc0201e0818\
    \ sp=0xc0201e0750 pc=0x4efbf2\ncommand-line-arguments_test.sorted_list_sum({0xc000fad640?,\
    \ 0x2, 0x2ab4fec0d898?})\n\t/tmp/tmpu3rptg6n_test.go:37 +0x292 fp=0xc0201e08e0\
    \ sp=0xc0201e0818 pc=0x4efbf2\ncommand-line-arguments_test.sorted_list_sum({0xc000fad620?,\
    \ 0x2, 0x2ab4fec0d898?})\n\t/tmp/tmpu3rptg6n_test.go:37 +0x292 fp=0xc0201e09a8\
    \ sp=0xc0201e08e0 pc=0x4efbf2\ncommand-line-arguments_test.sorted_list_sum({0xc000fad600?,\
    \ 0x2, 0x"
  timestamp: 1660073924
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var str_length map[int][]string\n    str_length =\
    \ make(map[int][]string)\n    for _, str := range lst {\n        key := len(str)\n\
    \        if _, ok := str_length[key]; !ok {\n            str_length[key] = []string{str}\n\
    \        } else {\n            str_length[key] = append(str_length[key], str)\n\
    \        }\n    }\n    for _, strs := range str_length {\n        for i := 1;\
    \ i < len(strs); i++ {\n            for j := 0; j < len(strs)-i; j++ {\n     \
    \           if strs[j] > strs[j+1] {\n                    strs[j], strs[j+1] =\
    \ strs[j+1], strs[j]\n                }\n            }\n        }\n    }\n   \
    \ keys := make([]int, 0, len(str_length))\n    for k := range str_length {\n \
    \       keys = append(keys, k)\n    }\n    var new_lst []string\n    for i :=\
    \ 1; i < len(keys); i++ {\n        for j := 0; j < len(keys)-i; j++ {\n      \
    \      if keys[j] > keys[j+1] {\n                keys[j], keys[j+1] = keys[j+1],\
    \ keys[j]\n            }\n        }\n    }\n    for _, key := range keys {\n \
    \       new_lst = append(new_lst, str_length[key]...)\n    }\n    return new_lst\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpak90_kv0_test.go:80: expected '[aa]', got '[a aa aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpak90_kv0_test.go:80:\
    \ expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpak90_kv0_test.go:80: expected '[]', got '[a b c d]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpak90_kv0_test.go:80:\
    \ expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpak90_kv0_test.go:80: expected '[]', got '[a a b b c c]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  lst_sum := make([]string, 0)\n    for i := 0; i < len(lst); i++ {\n       \
    \ if len(lst[i]) % 2 == 0 {\n            lst_sum = append(lst_sum, lst[i])\n \
    \       }\n    }\n    sort_lst_sum := sorted_list_sum_by_len(lst_sum)\n    return\
    \ sort_lst_sum\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp_m5d7avg_test.go:33:21: undefined: sorted_list_sum_by_len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073922
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  m := make(map[int][]string)\n    min := len(lst[0])\n    max := len(lst[0])\n\
    \    for _, s := range lst {\n        l := len(s)\n        if l < min {\n    \
    \        min = l\n        }\n        if l > max {\n            max = l\n     \
    \   }\n        m[l] = append(m[l], s)\n    }\n    var result []string\n    for\
    \ i := min; i <= max; i++ {\n        temp := m[i]\n        for j := 0; j < len(temp);\
    \ j++ {\n            result = append(result, temp[j])\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp3f1a93ae_test.go:69: expected '[aa]', got '[a aa aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp3f1a93ae_test.go:69:\
    \ expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp3f1a93ae_test.go:69: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3f1a93ae_test.go:69:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp3f1a93ae_test.go:69: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp3f1a93ae_test.go:69:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    idx, idx2 := 0, 0\n    for idx < len(lst) {\n    \
    \    if len(lst[idx]) % 2 == 0 {\n            lst[idx2] = lst[idx]\n         \
    \   idx2++\n        }\n        idx++\n    }\n    lst = lst[:idx2]\n    for idx,\
    \ idx2 = 1, 0; idx < len(lst); idx++ {\n        for idx2 = idx; idx2 > 0 && len(lst[idx2])\
    \ < len(lst[idx2-1]); idx2-- {\n            lst[idx2], lst[idx2-1] = lst[idx2-1],\
    \ lst[idx2]\n        }\n    }\n    for idx, idx2 = 1, 0; idx < len(lst); idx++\
    \ {\n        for idx2 = idx; idx2 > 0 && len(lst[idx2]) == len(lst[idx2-1]) &&\
    \ lst[idx2] < lst[idx2-1]; idx2-- {\n            lst[idx2], lst[idx2-1] = lst[idx2-1],\
    \ lst[idx2]\n        }\n    }\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073923
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    list := make([]string, 0)\n    for _, s := range lst\
    \ {\n        if len(s) % 2 == 0 {\n            list = append(list, s)\n      \
    \  }\n    }\n    return list\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpig6leiat_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpig6leiat_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpig6leiat_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var rst []string\n    var map_st = make(map[string]int)\n\
    \    for _, v := range lst {\n        if _, ok := map_st[v]; !ok {\n         \
    \   if len(v) % 2 == 0 {\n                rst = append(rst, v)\n            }\n\
    \            map_st[v] = 1\n        }\n    }\n    return rst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp2pcwutci_test.go:56: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp2pcwutci_test.go:56:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp2pcwutci_test.go:56: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    l := len(lst)\n    if l ==\
    \ 0 {\n        return result\n    }\n    var lens [][]int\n    for _, s := range\
    \ lst {\n        if len(s)%2 == 0 {\n            lens = append(lens, []int{len(s),\
    \ 0})\n        }\n    }\n    // \u4ECE\u5C0F\u5230\u5927\u6392\u5E8F\n    for\
    \ i := 0; i < len(lens); i++ {\n        for j := i+1; j < len(lens); j++ {\n \
    \           if lens[i][0] > lens[j][0] {\n                lens[i], lens[j] = lens[j],\
    \ lens[i]\n            }\n        }\n    }\n    // \u76F8\u540C\u957F\u5EA6\u7684\
    \u4E0B\u6807\u5BF9\u6392\u5E8F\n    for i := 0; i < len(lens); i++ {\n       \
    \ for j := i+1; j < len(lens); j++ {\n            if lens[i][0] == lens[j][0]\
    \ {\n                lens[i][1]++\n                lens[j][1]++\n            }\n\
    \        }\n    }\n    // \u6839\u636E\u957F\u5EA6\u548C\u6392\u5E8F\u4F4D\u7F6E\
    \u751F\u6210\u5B57\u7B26\u4E32\n    var indexs []int\n    var idx int\n    for\
    \ i := 0; i < len(lens); i++ {\n        if i == 0 {\n            indexs = append(indexs,\
    \ 0)\n            idx = lens[i][1]\n        } else {\n            indexs = append(indexs,\
    \ idx)\n            idx += lens[i][1]\n        }\n    }\n    for i := 0; i < len(lens);\
    \ i++ {\n        for j := indexs[i]; j < indexs[i]+lens[i][1]+1; j++ {\n     \
    \       if len(lst[j]) == lens[i][0] {\n                result = append(result,\
    \ lst[j])\n            }\n        }\n    }\n    return result\n}\n\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\npanic: runtime error: index out\
    \ of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of\
    \ range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5137e0,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5137e0, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sorted_list_sum({0xc0000f5cf0, 0x3, 0x3?})\n\
    \t/tmp/tmptdmrmtb6_test.go:66 +0x487\ncommand-line-arguments_test.TestSorted_List_Sum(0x0?)\n\
    \t/tmp/tmptdmrmtb6_test.go:86 +0x3b2\ntesting.tRunner(0xc0001a01a0, 0x529130)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ans []string\n    lst_map := make(map[int][]string)\n\
    \    for _, v := range lst {\n        lst_map[len(v)] = append(lst_map[len(v)],\
    \ v)\n    }\n    for _, v := range lst_map {\n        if len(v) % 2 == 0 {\n \
    \           ans = append(ans, v...)\n        }\n    }\n    return ans\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp2le19z_3_test.go:56: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp2le19z_3_test.go:56:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp2le19z_3_test.go:56: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp2le19z_3_test.go:56:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp2le19z_3_test.go:56: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp2le19z_3_test.go:56:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp2le19z_3_test.go:56: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    table := make(map[int][]string)\n    // put all strings\
    \ into a table with the length of string as the key\n    for _, str := range lst\
    \ {\n        table[len(str)] = append(table[len(str)], str)\n    }\n    // sort\
    \ the string list which has the same length\n    for _, strs := range table {\n\
    \        for i := 0; i < len(strs) - 1; i++ {\n            for j := i + 1; j <\
    \ len(strs); j++ {\n                if strs[i] > strs[j] {\n                 \
    \   strs[i], strs[j] = strs[j], strs[i]\n                }\n            }\n  \
    \      }\n    }\n    // collect all sorted string lists into a list according\
    \ to the length\n    // of the string\n    sorted_lst := make([]string, 0)\n \
    \   for i := 1; i < len(lst) + 1; i++ {\n        if _, ok := table[i]; ok {\n\
    \            sorted_lst = append(sorted_lst, table[i]...)\n        }\n    }\n\
    \    return sorted_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp4byxbucu_test.go:69: expected '[aa]', got '[a aa aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp4byxbucu_test.go:69:\
    \ expected '[AI asdf school]', got '[b AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp4byxbucu_test.go:69: expected '[]', got '[a b c d]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp4byxbucu_test.go:69:\
    \ expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp4byxbucu_test.go:69: expected '[]', got '[a a b b c c]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Your code here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp67rnbcs6_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp67rnbcs6_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp67rnbcs6_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp67rnbcs6_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp67rnbcs6_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp67rnbcs6_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    ret := []string{}\n    for _, item := range lst {\n\
    \        if len(item) % 2 == 0 {\n            ret = append(ret, item)\n      \
    \  }\n    }\n    fmt.Println(ret)\n    return ret\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[aa]\n[school AI asdf]\n[]\n[dcba abcd]\n[AI ai au]\n[]\n[aaaa bbbb dd\
    \ cc]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8las9f13_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp8las9f13_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp8las9f13_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073923
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // sort.Strings(lst)\n    // lst2 := []string{}\n\
    \    // for _, s := range lst {\n    //     if len(s) % 2 == 0 {\n    //     \
    \    lst2 = append(lst2, s)\n    //     }\n    // }\n    // return lst2\n    //\
    \ return lst\n    strLen := len(lst)\n    lst2 := []string{}\n    if strLen ==\
    \ 0 {\n        return lst2\n    }\n    oddCount := 0\n    for _, v := range lst\
    \ {\n        if len(v) % 2 == 1 {\n            oddCount++\n        }\n    }\n\
    \    lst2 = make([]string, strLen - oddCount)\n    idx := 0\n    for _, v := range\
    \ lst {\n        if len(v) % 2 == 0 {\n            lst2[idx] = v\n           \
    \ idx++\n        }\n    }\n    sort.Strings(lst2)\n    return lst2\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpite0o_f8_test.go:52:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073923
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    odd_strs := []string{}\n    even_strs := []string{}\n\
    \    for _, str := range lst {\n        if len(str) % 2 == 0 {\n            even_strs\
    \ = append(even_strs, str)\n        } else {\n            odd_strs = append(odd_strs,\
    \ str)\n        }\n    }\n    // sort even_strs by word length\n    for i := 0;\
    \ i < len(even_strs); i++ {\n        for j := i+1; j < len(even_strs); j++ {\n\
    \            if len(even_strs[i]) > len(even_strs[j]) {\n                even_strs[i],\
    \ even_strs[j] = even_strs[j], even_strs[i]\n            }\n        }\n    }\n\
    \    // sort even_strs alphabetically if their lengths are equal\n    for i :=\
    \ 0; i < len(even_strs); i++ {\n        for j := i+1; j < len(even_strs); j++\
    \ {\n            if len(even_strs[i]) == len(even_strs[j]) {\n               \
    \ if even_strs[i] > even_strs[j] {\n                    even_strs[i], even_strs[j]\
    \ = even_strs[j], even_strs[i]\n                }\n            }\n        }\n\
    \    }\n    return even_strs\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073924
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst = RemoveDuplicates(lst)\n    for i := 0; i < len(lst);\
    \ i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if len(lst[i])\
    \ > len(lst[j]) {\n                lst[i], lst[j] = lst[j], lst[i]\n         \
    \   }\n        }\n    }\n    var list_sum []string\n    for i := 0; i < len(lst);\
    \ i++ {\n        if i + 1 != len(lst) {\n            if len(lst[i]) != len(lst[i\
    \ + 1]) {\n                list_sum = append(list_sum, lst[i])\n            }\n\
    \        } else {\n            list_sum = append(list_sum, lst[i])\n        }\n\
    \    }\n    return list_sum\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n \
    \ candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpapfflnvs_test.go:24:11: undefined: RemoveDuplicates

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073924
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    l := len(lst)\n    max_length\
    \ := 0\n    for i := 0; i < l; i++ {\n        if len(lst[i]) > max_length {\n\
    \            max_length = len(lst[i])\n        }\n    }\n    for i := 1; i <=\
    \ max_length; i++ {\n        if i % 2 == 0 {\n            continue\n        }\n\
    \        for j := 0; j < l; j++ {\n            if len(lst[j]) == i {\n       \
    \         result = append(result, lst[j])\n            }\n        }\n    }\n \
    \   return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpkl1aazbs_test.go:64: expected '[aa]', got '[a aaa]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpkl1aazbs_test.go:64:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpkl1aazbs_test.go:64: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkl1aazbs_test.go:64:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpkl1aazbs_test.go:64: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpkl1aazbs_test.go:64:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpkl1aazbs_test.go:64: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073924
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    sum_lst := []string{}\n    for i := 0; i < len(lst);\
    \ i++ {\n        word := lst[i]\n        if len(word) % 2 == 0 {\n           \
    \ sum_lst = append(sum_lst, word)\n        }\n    }\n    return sum_lst\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpdh30u3o9_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpdh30u3o9_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpdh30u3o9_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073924
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ll []string\n    for _, v := range lst {\n   \
    \     if len(v) % 2 == 0 {\n            ll = append(ll, v)\n        }\n    }\n\
    \    return ll\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpcxsj7g2u_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpcxsj7g2u_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpcxsj7g2u_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073924
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // create a map to store the length of each word in\
    \ input list\n    length_map := make(map[int][]string)\n    // create a list to\
    \ store the sorted input list\n    sorted_lst := make([]string, 0)\n    // walk\
    \ through the input list and put the word to the map\n    for _, s := range lst\
    \ {\n        length_map[len(s)] = append(length_map[len(s)], s)\n    }\n    //\
    \ sort the map\n    for k, v := range length_map {\n        if len(v) > 1 {\n\
    \            // sort the list\n            for i := 0; i < len(v); i++ {\n   \
    \             for j := i + 1; j < len(v); j++ {\n                    if v[i] >\
    \ v[j] {\n                        v[i], v[j] = v[j], v[i]\n                  \
    \  }\n                }\n            }\n        }\n        // merge the list\n\
    \        sorted_lst = append(sorted_lst, v...)\n    }\n    // sort the sorted\
    \ list\n    for i := 0; i < len(sorted_lst); i++ {\n        for j := i + 1; j\
    \ < len(sorted_lst); j++ {\n            if len(sorted_lst[i]) > len(sorted_lst[j])\
    \ {\n                sorted_lst[i], sorted_lst[j] = sorted_lst[j], sorted_lst[i]\n\
    \            }\n        }\n    }\n    // create a list to store the result\n \
    \   result := make([]string, 0)\n    // walk through the sorted list and pick\
    \ up the even length words to result\n    for _, s := range sorted_lst {\n   \
    \     if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp03unkijc_test.go:33:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073924
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ret []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            ret = append(ret, str)\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpgf0kr23__test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpgf0kr23__test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpgf0kr23__test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073924
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO\n    var result []string\n    for _, v :=\
    \ range lst {\n        if len(v) % 2 == 0 {\n            result = append(result,\
    \ v)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp2lyfnzd5_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp2lyfnzd5_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp2lyfnzd5_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073924
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var r []string\n    for _, s := range lst {\n    \
    \    if len(s) % 2 == 0 {\n            r = append(r, s)\n        }\n    }\n  \
    \  return r\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_3jy5v6w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_3jy5v6w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_3jy5v6w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073924
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    sum := 0\n    dict := make(map[int][]string)\n   \
    \ for _, num := range lst {\n        sum += len(num)\n        dict[len(num)] =\
    \ append(dict[len(num)], num)\n    }\n    fmt.Println(sum)\n    fmt.Println(dict)\n\
    \    return []string{}\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "6\nmap[1:[a] 2:[aa] 3:[aaa]]\n13\nmap[1:[b] 2:[AI] 4:[asdf] 6:[school]]\n\
    4\nmap[1:[d b c a]]\n10\nmap[1:[d a] 4:[dcba abcd]]\n6\nmap[2:[AI ai au]]\n6\n\
    map[1:[a b b c c a]]\n12\nmap[2:[dd cc] 4:[aaaa bbbb]]\n--- FAIL: TestSorted_List_Sum\
    \ (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpqcxz31h4_test.go:54:\
    \ expected '[aa]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n\
    \        tmpqcxz31h4_test.go:54: expected '[AI asdf school]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpqcxz31h4_test.go:54:\
    \ expected '[abcd dcba]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpqcxz31h4_test.go:54: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpqcxz31h4_test.go:54:\
    \ expected '[cc dd aaaa bbbb]', got '[]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  lst_len := len(lst)\n    sorted_lst := make([]string, 0, lst_len)\n    for\
    \ i := 0; i < lst_len; i++ {\n        if len(lst[i]) % 2 == 0 {\n            sorted_lst\
    \ = append(sorted_lst, lst[i])\n        }\n    }\n    for i := 0; i < len(sorted_lst);\
    \ i++ {\n        for j := i + 1; j < len(sorted_lst); j++ {\n            if len(sorted_lst[i])\
    \ > len(sorted_lst[j]) {\n                tmp := sorted_lst[i]\n             \
    \   sorted_lst[i] = sorted_lst[j]\n                sorted_lst[j] = tmp\n     \
    \       } else if len(sorted_lst[i]) == len(sorted_lst[j]) {\n               \
    \ if sorted_lst[i] > sorted_lst[j] {\n                    tmp := sorted_lst[i]\n\
    \                    sorted_lst[i] = sorted_lst[j]\n                    sorted_lst[j]\
    \ = tmp\n                }\n            }\n        }\n    }\n    return sorted_lst\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, v := range\
    \ lst {\n        // m[len(v)] = append(m[len(v)], v)\n        m[len(v)] = append(m[len(v)],\
    \ v)\n    }\n    fmt.Println(m)\n    // now we need to sort the odd value in the\
    \ m\n    for k, _ := range m {\n        if k % 2 != 0 {\n            delete(m,\
    \ k)\n        }\n    }\n    fmt.Println(m)\n    // now return the values of the\
    \ odd value\n    lst = []string{}\n    for _, v := range m {\n        for _, vv\
    \ := range v {\n            lst = append(lst, vv)\n        }\n    }\n    return\
    \ lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[1:[a] 2:[aa] 3:[aaa]]\nmap[2:[aa]]\nmap[1:[b] 2:[AI] 4:[asdf] 6:[school]]\n\
    map[2:[AI] 4:[asdf] 6:[school]]\nmap[1:[d b c a]]\nmap[]\nmap[1:[d a] 4:[dcba\
    \ abcd]]\nmap[4:[dcba abcd]]\nmap[2:[AI ai au]]\nmap[2:[AI ai au]]\nmap[1:[a b\
    \ b c c a]]\nmap[]\nmap[2:[dd cc] 4:[aaaa bbbb]]\nmap[2:[dd cc] 4:[aaaa bbbb]]\n\
    --- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpj4ponewd_test.go:66: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpj4ponewd_test.go:66:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpj4ponewd_test.go:66: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    sort_map := make(map[int][]string)\n    for _, item\
    \ := range lst {\n        if len(item) % 2 == 0 {\n            sort_map[len(item)]\
    \ = append(sort_map[len(item)], item)\n        }\n    }\n    fmt.Println(sort_map)\n\
    \    keys := []int{}\n    for key, _ := range sort_map {\n        keys = append(keys,\
    \ key)\n    }\n    fmt.Println(keys)\n    sort_lst := []string{}\n    for _, key\
    \ := range keys {\n        for _, item := range sort_map[key] {\n            sort_lst\
    \ = append(sort_lst, item)\n        }\n    }\n    return sort_lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[2:[aa]]\n[2]\nmap[2:[AI] 4:[asdf] 6:[school]]\n[6 2 4]\nmap[]\n[]\n\
    map[4:[dcba abcd]]\n[4]\nmap[2:[AI ai au]]\n[2]\nmap[]\n[]\nmap[2:[dd cc] 4:[aaaa\
    \ bbbb]]\n[4 2]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpf8qhv250_test.go:64: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpf8qhv250_test.go:64:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpf8qhv250_test.go:64: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    nums := map[int]int{}\n    for _, v := range lst {\n\
    \        nums[len(v)] += 1\n    }\n    fmt.Println(nums)\n    ss := []string{}\n\
    \    for _, v := range lst {\n        if nums[len(v)] % 2 == 0 {\n           \
    \ ss = append(ss, v)\n        }\n    }\n    return ss\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[1:1 2:1 3:1]\nmap[1:1 2:1 4:1 6:1]\nmap[1:4]\nmap[1:2 4:2]\nmap[2:3]\n\
    map[1:6]\nmap[2:2 4:2]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp389kv9c2_test.go:57: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp389kv9c2_test.go:57:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp389kv9c2_test.go:57: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp389kv9c2_test.go:57:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp389kv9c2_test.go:57: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp389kv9c2_test.go:57:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp389kv9c2_test.go:57: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, s := range\
    \ lst {\n        m[len(s)] = append(m[len(s)], s)\n    }\n    var keys []int\n\
    \    for k := range m {\n        keys = append(keys, k)\n    }\n    sort_ints(keys)\n\
    \    var res []string\n    for _, k := range keys {\n        if len(m[k]) > 1\
    \ {\n            sort_strings(m[k])\n        }\n        if len(m[k]) % 2 == 0\
    \ {\n            res = append(res, m[k]...)\n        }\n    }\n    return res\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9jf4_gas_test.go:32:5: undefined: sort_ints

    /tmp/tmp9jf4_gas_test.go:36:13: undefined: sort_strings

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073924
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst1 := []string{}\n    for _, item := range lst {\n\
    \        if len(item) % 2 == 0 {\n            lst1 = append(lst1, item)\n    \
    \    }\n    }\n    for i := 0; i < len(lst1); i++ {\n        for j := i+1; j <\
    \ len(lst1); j++ {\n            if len(lst1[i]) > len(lst1[j]) {\n           \
    \     lst1[i], lst1[j] = lst1[j], lst1[i]\n            } else if len(lst1[i])\
    \ == len(lst1[j]) {\n                if lst1[i] > lst1[j] {\n                \
    \    lst1[i], lst1[j] = lst1[j], lst1[i]\n                }\n            }\n \
    \       }\n    }\n    return lst1\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    r := []string{}\n    for _, v := range lst {\n   \
    \     if len(v) % 2 == 0 {\n            r = append(r, v)\n        }\n    }\n \
    \   return r\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp1gmuba66_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp1gmuba66_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp1gmuba66_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // write your code here\n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpqrext4li_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpqrext4li_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpqrext4li_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpqrext4li_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpqrext4li_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpqrext4li_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    ret := []string{}\n    for _, val := range lst {\n\
    \        if len(val) % 2 == 0 {\n            ret = append(ret, val)\n        }\n\
    \    }\n    for i := 0; i < len(ret) - 1; i++ {\n        for j := i + 1; j < len(ret);\
    \ j++ {\n            if len(ret[i]) > len(ret[j]) {\n                ret[i], ret[j]\
    \ = ret[j], ret[i]\n            } else if len(ret[i]) == len(ret[j]) {\n     \
    \           if ret[i] > ret[j] {\n                    ret[i], ret[j] = ret[j],\
    \ ret[i]\n                }\n            }\n        }\n    }\n    return ret\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // edge case 1: no lst\n    if len(lst) == 0 {\n \
    \       return lst\n    }\n    // init new lst to return, and iterating index\n\
    \    new_lst := make([]string, 0)\n    i := 0\n    // iterate each item of lst\n\
    \    for _, x := range lst {\n        // if it's a odd word, continue\n      \
    \  if len(x) % 2 == 1 {\n            continue\n        }\n        // if we have\
    \ the element in new_lst, continue\n        if i < len(new_lst) && new_lst[i]\
    \ == x {\n            continue\n        }\n        // otherwise append the new\
    \ element to the new_lst, and the i++\n        new_lst = append(new_lst, x)\n\
    \        i++\n    }\n    // return the new_lst\n    return new_lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpj69dy84a_test.go:68: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpj69dy84a_test.go:68:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpj69dy84a_test.go:68: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res = make([]string, 0)\n    for _, s := range\
    \ lst {\n        l := len(s)\n        fmt.Println(l)\n        if l % 2 == 0 {\n\
    \            res = append(res, s)\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "2\n1\n3\n6\n2\n4\n1\n1\n1\n1\n1\n1\n4\n4\n1\n2\n2\n2\n1\n1\n1\n1\n1\n1\n\
    4\n4\n2\n2\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpo3alu_mz_test.go:54: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpo3alu_mz_test.go:54:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpo3alu_mz_test.go:54: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    var duplicate_index []int\n\
    \    var temp string\n    var temp2 string\n    var flag int\n    // Set a flag\
    \ to determine if it is the first time you reach the right length\n    if len(lst)\
    \ > 0 {\n        // Loop through the list, compare words with the same length,\n\
    \        // and delete duplicate words\n        for i, item := range lst {\n \
    \           for j, item2 := range lst {\n                if i == j {\n       \
    \             continue\n                }\n                if len(item) == len(item2)\
    \ {\n                    if item < item2 {\n                        temp = item\n\
    \                        item = item2\n                        item2 = temp\n\
    \                    }\n                    duplicate_index = append(duplicate_index,\
    \ j)\n                }\n            }\n            // If flag is 0, add the current\
    \ word to the result list,\n            // and set flag to 1, otherwise continue\n\
    \            if flag == 0 {\n                result = append(result, item)\n \
    \               flag = 1\n            }\n        }\n        // Loop through the\
    \ duplicate_index list and remove duplicate words in lst\n        // according\
    \ to the order of indexes in duplicate_index\n        for i := len(duplicate_index)-1;\
    \ i >= 0; i-- {\n            temp2 = lst[duplicate_index[i]]\n            lst\
    \ = append(lst[:duplicate_index[i]], lst[duplicate_index[i]+1:]...)\n        \
    \    for j, item := range lst {\n                if temp2 == item {\n        \
    \            lst = append(lst[:j], lst[j+1:]...)\n                }\n        \
    \    }\n        }\n        // Compare each word in lst to the words in result\
    \ and append it to result,\n        // if it is not in result\n        for _,\
    \ item := range lst {\n            for _, item2 := range result {\n          \
    \      if item == item2 {\n                    break\n                }\n    \
    \            if item2 == result[len(result)-1] {\n                    result =\
    \ append(result, item)\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\npanic: runtime error: index out\
    \ of range [3] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [3] with length 1\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x514780,\
    \ 0xc0001da000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x514780, 0xc0001da000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sorted_list_sum({0xc000187d20, 0x4, 0x4})\n\
    \t/tmp/tmpocfnep5r_test.go:57 +0xa49\ncommand-line-arguments_test.TestSorted_List_Sum(0x0?)\n\
    \t/tmp/tmpocfnep5r_test.go:90 +0x250\ntesting.tRunner(0xc000198ea0, 0x52a0d0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _,str := range lst {\n \
    \       if len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpyrujj7m3_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpyrujj7m3_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpyrujj7m3_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, value := range\
    \ lst {\n        // init\n        if _, ok := m[len(value)]; !ok {\n         \
    \   m[len(value)] = []string{}\n        }\n        m[len(value)] = append(m[len(value)],\
    \ value)\n    }\n    fmt.Println(m)\n    // sorted m\n    keys := make([]int,\
    \ 0, len(m))\n    for k := range m {\n        keys = append(keys, k)\n    }\n\
    \    fmt.Println(keys)\n    //qsort(keys)\n    //fmt.Println(keys)\n    var ret\
    \ []string\n    for _, k := range keys {\n        tmp := m[k]\n        qsort(tmp)\n\
    \        ret = append(ret, tmp...)\n    }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpxswx86v0_test.go:44:9: undefined: qsort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073925
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    tmp_lst := []string{}\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            tmp_lst = append(tmp_lst, v)\n    \
    \    }\n    }\n    return tmp_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp26q_k3yk_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp26q_k3yk_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp26q_k3yk_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var out_lst []string\n    var tmp string\n    for\
    \ i := 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n           \
    \ out_lst = append(out_lst, lst[i])\n        }\n    }\n    for i := 0; i < len(out_lst);\
    \ i++ {\n        for j := i + 1; j < len(out_lst); j++ {\n            if len(out_lst[i])\
    \ > len(out_lst[j]) {\n                tmp = out_lst[i]\n                out_lst[i]\
    \ = out_lst[j]\n                out_lst[j] = tmp\n            }\n        }\n \
    \   }\n    return out_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpe0m6dmvn_test.go:62: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpe0m6dmvn_test.go:62:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // mark the odd strings\n    for i, str := range lst\
    \ {\n        if len(str)%2 == 1 {\n            lst[i] = \"XXX\"\n        }\n \
    \   }\n    // delete the odd strings\n    for i := 0; i < len(lst); i++ {\n  \
    \      if lst[i] == \"XXX\" {\n            lst = append(lst[:i], lst[i+1:]...)\n\
    \            i--\n        }\n    }\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpgsannck0_test.go:59: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpgsannck0_test.go:59:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpgsannck0_test.go:59: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  var lst_len []int\n    var tmp_map map[int][]string\n    tmp_map = make(map[int][]string)\n\
    \    for _, s := range lst {\n        n := len(s)\n        lst_len = append(lst_len,\
    \ n)\n        tmp_map[n] = append(tmp_map[n], s)\n    }\n    tmp_lst := make([]string,\
    \ 0)\n    for _, n := range lst_len {\n        tmp_lst = append(tmp_lst, tmp_map[n]...)\n\
    \    }\n    return tmp_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwue_3gey_test.go:61: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwue_3gey_test.go:61:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwue_3gey_test.go:61: expected '[]', got '[d b c a d b c\
    \ a d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n\
    \        tmpwue_3gey_test.go:61: expected '[abcd dcba]', got '[d a dcba abcd dcba\
    \ abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpwue_3gey_test.go:61:\
    \ expected '[AI ai au]', got '[AI ai au AI ai au AI ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpwue_3gey_test.go:61: expected '[]', got '[a b b c c a a\
    \ b b c c a a b b c c a a b b c c a a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpwue_3gey_test.go:61: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb aaaa bbbb dd cc dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // write your code in Go 1.4\n    return nil\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp9l2j9mii_test.go:47: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp9l2j9mii_test.go:47:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmp9l2j9mii_test.go:47: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp9l2j9mii_test.go:47:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9l2j9mii_test.go:47: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    ret := []string{}\n    for _, v := range lst {\n \
    \       if len(v) % 2 == 0 {\n            ret = append(ret, v)\n        }\n  \
    \  }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpzy4ll99w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzy4ll99w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpzy4ll99w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var lst_even, lst_odd []string\n    // sort by length\
    \ of each word\n    for _, word := range lst {\n        if len(word) % 2 == 0\
    \ {\n            lst_even = append(lst_even, word)\n        } else {\n       \
    \     lst_odd = append(lst_odd, word)\n        }\n    }\n    // remove odd length\
    \ strings from list\n    for _, word := range lst_odd {\n        for i, w := range\
    \ lst_even {\n            if word == w {\n                lst_even = append(lst_even[:i],\
    \ lst_even[i+1:]...)\n            }\n        }\n    }\n    return lst_even\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpj0g57j83_test.go:63: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpj0g57j83_test.go:63:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpj0g57j83_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, s := range\
    \ lst {\n        n := len(s)\n        if v, ok := m[n]; ok {\n            m[n]\
    \ = append(v, s)\n        } else {\n            m[n] = []string{s}\n        }\n\
    \    }\n    ans := []string{}\n    for i := 0; i < len(lst); i++ {\n        if\
    \ v, ok := m[i]; ok {\n            for _, s := range v {\n                ans\
    \ = append(ans, s)\n            }\n        }\n    }\n    return ans\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpy0we4dey_test.go:63: expected '[aa]', got '[a aa]'\n   \
    \ --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpy0we4dey_test.go:63:\
    \ expected '[AI asdf school]', got '[b AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpy0we4dey_test.go:63: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpy0we4dey_test.go:63:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpy0we4dey_test.go:63: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpy0we4dey_test.go:63:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst2 := lst\n    lst3 := []string{}\n    for i :=\
    \ 0; i < len(lst); i++ {\n        if len(lst[i]) % 2 == 0 {\n            lst2\
    \ = append(lst2, lst[i])\n        }\n    }\n    for i := 0; i < len(lst2); i++\
    \ {\n        for j := 0; j < len(lst2); j++ {\n            if len(lst2[i]) < len(lst2[j])\
    \ {\n                lst2[i], lst2[j] = lst2[j], lst2[i]\n            }\n    \
    \    }\n    }\n    i := 0\n    j := 0\n    for j < len(lst2) {\n        if len(lst2[i])\
    \ == len(lst2[j]) {\n            j++\n        } else {\n            lst3 = append(lst3,\
    \ lst2[i])\n            i = j\n        }\n    }\n    lst3 = append(lst3, lst2[i])\n\
    \    return lst3\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpw6o53vgz_test.go:71: expected '[aa]', got '[a aa aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpw6o53vgz_test.go:71:\
    \ expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpw6o53vgz_test.go:71: expected '[]', got '[d]'\n    --- FAIL:\
    \ TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpw6o53vgz_test.go:71: expected\
    \ '[abcd dcba]', got '[d abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpw6o53vgz_test.go:71: expected '[AI ai au]', got '[AI]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpw6o53vgz_test.go:71:\
    \ expected '[]', got '[a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n\
    \        tmpw6o53vgz_test.go:71: expected '[cc dd aaaa bbbb]', got '[dd aaaa]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Remove all words whose length is odd.\n    odd_indexes\
    \ := []int{}\n    for index, word := range lst {\n        if len(word) % 2 ==\
    \ 1 {\n            odd_indexes = append(odd_indexes, index)\n        }\n    }\n\
    \    for index, odd_index := range odd_indexes {\n        lst = append(lst[:odd_index\
    \ - index], lst[odd_index - index + 1:]...)\n    }\n\n    // Sort the list by\
    \ the length of each word\n    sort_list_by_length(lst)\n\n    // Sort the list\
    \ alphabetically when the length of two words are the same\n    prev_length :=\
    \ 0\n    start_index := 0\n    for index, word := range lst {\n        if prev_length\
    \ != len(word) {\n            prev_length = len(word)\n            sort_list_alphabetically(lst,\
    \ start_index, index - 1)\n            start_index = index\n        }\n    }\n\
    \    sort_list_alphabetically(lst, start_index, len(lst) - 1)\n\n    return lst\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvx3t7uf2_test.go:36:5: undefined: sort_list_by_length

    /tmp/tmpvx3t7uf2_test.go:44:13: undefined: sort_list_alphabetically

    /tmp/tmpvx3t7uf2_test.go:48:5: undefined: sort_list_alphabetically

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Write your code here\n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp31swzg_4_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp31swzg_4_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp31swzg_4_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp31swzg_4_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp31swzg_4_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp31swzg_4_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073927
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    ret := []string{}\n    for _, val := range lst {\n\
    \        if len(val) % 2 == 0 {\n            ret = append(ret, val)\n        }\n\
    \    }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpceeiuxgg_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpceeiuxgg_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpceeiuxgg_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073927
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // sort.Strings(lst)\n    odd_length_lst := []string{}\n\
    \    for _, word := range lst {\n        if len(word) % 2 == 1 {\n           \
    \ odd_length_lst = append(odd_length_lst, word)\n        }\n    }\n    // sort.Strings(odd_length_lst)\n\
    \    return odd_length_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpoog0ac9h_test.go:54: expected '[aa]', got '[a aaa]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpoog0ac9h_test.go:54:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpoog0ac9h_test.go:54: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpoog0ac9h_test.go:54:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpoog0ac9h_test.go:54: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpoog0ac9h_test.go:54:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpoog0ac9h_test.go:54: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073927
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, str := range lst {\n\
    \        if len(str) % 2 == 0 {\n            res = append(res, str)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpi9zyjys1_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpi9zyjys1_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    odd_length := func(s string) bool {\n        return\
    \ len(s) % 2 == 1\n    }\n    odd_list := make([]string, 0)\n    for _, s := range\
    \ lst {\n        if odd_length(s) {\n            odd_list = append(odd_list, s)\n\
    \        }\n    }\n    return odd_list\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp9wsw_zt4_test.go:55: expected '[aa]', got '[a aaa]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp9wsw_zt4_test.go:55:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp9wsw_zt4_test.go:55: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9wsw_zt4_test.go:55:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp9wsw_zt4_test.go:55: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp9wsw_zt4_test.go:55:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9wsw_zt4_test.go:55: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073927
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpgkv138fz_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpgkv138fz_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpgkv138fz_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073927
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst = even_length_strings(lst)\n    lst = sort_list(lst)\n\
    \    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmppva2gx8p_test.go:24:11: undefined: even_length_strings

    /tmp/tmppva2gx8p_test.go:25:11: undefined: sort_list

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073927
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    my_dict := make(map[int][]string)\n    for _, s :=\
    \ range lst {\n        k := len(s)\n        if _, ok := my_dict[k]; !ok {\n  \
    \          my_dict[k] = []string{s}\n        } else {\n            my_dict[k]\
    \ = append(my_dict[k], s)\n        }\n    }\n    for _, v := range my_dict {\n\
    \        sort.Strings(v)\n    }\n    ordered_lst := make([]string, 0)\n    ordered_int\
    \ := make([]int, 0)\n    for k, _ := range my_dict {\n        ordered_int = append(ordered_int,\
    \ k)\n    }\n    sort.Ints(ordered_int)\n    for _, k := range ordered_int {\n\
    \        if len(my_dict[k]) % 2 == 0 {\n            ordered_lst = append(ordered_lst,\
    \ my_dict[k]...)\n        }\n    }\n    return ordered_lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgf5g74hr_test.go:34:9: undefined: sort

    /tmp/tmpgf5g74hr_test.go:41:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073927
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Using brute force to solve this problem.\n    //\
    \ Time Complexity: O(N^2)\n    // Space Complexity: O(N)\n    ll := make([]string,\
    \ 0)\n    for _, v := range lst {\n        if len(v) % 2 == 0 {\n            ll\
    \ = append(ll, v)\n        }\n    }\n    // O(N log N)\n    for i := 0; i < len(ll)\
    \ - 1; i++ {\n        // O(N)\n        for j := 0; j < len(ll) - 1 - i; j++ {\n\
    \            // O(N)\n            if len(ll[j]) > len(ll[j + 1]) {\n         \
    \       t := ll[j]\n                ll[j] = ll[j + 1]\n                ll[j +\
    \ 1] = t\n            } else if len(ll[j]) == len(ll[j + 1]) {\n             \
    \   for k := 0; k < len(ll[j]); k++ {\n                    if ll[j][k] > ll[j\
    \ + 1][k] {\n                        t := ll[j]\n                        ll[j]\
    \ = ll[j + 1]\n                        ll[j + 1] = t\n                       \
    \ break\n                    }\n                }\n            }\n        }\n\
    \    }\n    return ll\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073927
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst = sort_by_length(lst)\n    i := 0\n    for i <\
    \ len(lst) {\n        if len(lst[i]) % 2 == 1 {\n            lst = append(lst[:i],\
    \ lst[i+1:]...)\n        } else {\n            i += 1\n        }\n    }\n    return\
    \ lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpyfvtunwo_test.go:24:11: undefined: sort_by_length

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073927
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var odd string\n    result := make([]string, 0)\n\
    \    for i := 0; i < len(lst); i++ {\n        odd = lst[i]\n        if len(odd)\
    \ % 2 == 0 {\n            result = append(result, odd)\n        }\n    }\n   \
    \ return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp46n91jun_test.go:54: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp46n91jun_test.go:54:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp46n91jun_test.go:54: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073927
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    result := []string{}\n\
    \    for _, str := range lst {\n        m[len(str)] = append(m[len(str)], str)\n\
    \    }\n    for key, _ := range m {\n        if key % 2 == 0 {\n            result\
    \ = append(result, m[key]...)\n        }\n    }\n    return result\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpqtccv_b6_test.go:56: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpqtccv_b6_test.go:56:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpqtccv_b6_test.go:56: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073927
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    fmt.Println(\"INPUT:\", lst)\n    // First we need\
    \ to get rid of all the strings with odd lengths\n    var new_lst []string\n \
    \   var result []string\n    for _, s := range lst {\n        // if the length\
    \ of the string is even\n        if len(s) % 2 == 0 {\n            new_lst = append(new_lst,\
    \ s)\n        }\n    }\n    // Now we have to sort the list\n    for i := 0; i\
    \ < len(new_lst) - 1; i++ {\n        for j := i + 1; j < len(new_lst); j++ {\n\
    \            if len(new_lst[i]) > len(new_lst[j]) {\n                // swap\n\
    \                new_lst[i], new_lst[j] = new_lst[j], new_lst[i]\n           \
    \ }\n        }\n    }\n    // Now we have to remove the duplicates\n    for i\
    \ := 0; i < len(new_lst) - 1; i++ {\n        if len(new_lst[i]) == len(new_lst[i\
    \ + 1]) {\n            if new_lst[i] == new_lst[i + 1] {\n                new_lst[i]\
    \ = \"\"\n            }\n        }\n    }\n    // remove all the empty strings\n\
    \    for _, s := range new_lst {\n        if s != \"\" {\n            result =\
    \ append(result, s)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "INPUT: [aa a aaa]\nINPUT: [school AI asdf b]\nINPUT: [d b c a]\nINPUT:\
    \ [d dcba abcd a]\nINPUT: [AI ai au]\nINPUT: [a b b c c a]\nINPUT: [aaaa bbbb\
    \ dd cc]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpoft811d6_test.go:79: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpoft811d6_test.go:79:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073928
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ls []string\n    // TODO\n    return ls\n}\n\n\
    func TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpe35cg0jh_test.go:48: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpe35cg0jh_test.go:48:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpe35cg0jh_test.go:48: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpe35cg0jh_test.go:48:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpe35cg0jh_test.go:48: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073928
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Find the max length.\n    var max_len int = 0\n\
    \    for _, s := range lst {\n        if len(s) > max_len {\n            max_len\
    \ = len(s)\n        }\n    }\n\n    // Make a slice of slices of strings with\
    \ the max length size.\n    var result = make([][]string, max_len)\n\n    // Put\
    \ the strings in the right place.\n    for _, s := range lst {\n        var len_s\
    \ = len(s)\n        if len_s % 2 == 0 {\n            result[len_s - 1] = append(result[len_s\
    \ - 1], s)\n        }\n    }\n\n    // Concatenate the slices in result.\n   \
    \ var concatenated []string\n    for _, s := range result {\n        if len(s)\
    \ > 0 {\n            concatenated = append(concatenated, s...)\n        }\n  \
    \  }\n\n    return concatenated\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmp3m59frw1_test.go:73: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp3m59frw1_test.go:73:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073928
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_vs0i6j0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_vs0i6j0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // do something here\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpp3icbj6b_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpp3icbj6b_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpp3icbj6b_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpp3icbj6b_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpp3icbj6b_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpp3icbj6b_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    new_lst := []string{}\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            new_lst = append(new_lst, s)\n    \
    \    }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpwsc130js_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwsc130js_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpwsc130js_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var odd_words []string\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 1 {\n            odd_words = append(odd_words,\
    \ word)\n        }\n    }\n    return odd_words\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp3z_uuolo_test.go:52: expected '[aa]', got '[a aaa]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp3z_uuolo_test.go:52:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp3z_uuolo_test.go:52: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3z_uuolo_test.go:52:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp3z_uuolo_test.go:52: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp3z_uuolo_test.go:52:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp3z_uuolo_test.go:52: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, v := range\
    \ lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n    keys := []int{}\n\
    \    for k, _ := range m {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n\
    \    i := 0\n    for _, k := range keys {\n        vals := m[k]\n        sort.Strings(vals)\n\
    \        copy(lst[i:], vals)\n        i += len(vals)\n    }\n    return lst[:i]\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmsjq5wyt_test.go:32:5: undefined: sort

    /tmp/tmpmsjq5wyt_test.go:36:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    l := len(lst)\n    if l == 0 {\n        return lst\n\
    \    }\n\n    if l == 1 {\n        return lst\n    }\n\n    var sum int\n    sum\
    \ = 0\n    for _, item := range lst {\n        sum += len(item)\n    }\n\n   \
    \ fmt.Println(sum)\n    return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "6\n13\n4\n10\n6\n6\n12\n--- FAIL: TestSorted_List_Sum (0.00s)\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmppxw0a9bk_test.go:62:\
    \ expected '[aa]', got '[aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmppxw0a9bk_test.go:62: expected '[AI asdf school]', got '[school\
    \ AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n       \
    \ tmppxw0a9bk_test.go:62: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmppxw0a9bk_test.go:62: expected '[abcd dcba]', got '[d dcba\
    \ abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmppxw0a9bk_test.go:62:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmppxw0a9bk_test.go:62: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var lst_res []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            lst_res = append(lst_res, v)\n    \
    \    }\n    }\n    return lst_res\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpmps85u2d_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpmps85u2d_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpmps85u2d_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var new_lst []string\n    var lst_len int = len(lst)\n\
    \    var i int\n    var curr_len int\n\n    for i = 0; i < lst_len; i++ {\n  \
    \      curr_len = len(lst[i])\n        if curr_len % 2 == 0 {\n            new_lst\
    \ = append(new_lst, lst[i])\n        }\n    }\n\n    quick_sort(new_lst, 0, len(new_lst)\
    \ - 1)\n\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpvq39qb6g_test.go:36:5: undefined: quick_sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Return value\n    r := []string{}\n    // Hash\
    \ table to keep track of which lengths have been added to the return\n    // value.\n\
    \    added := make(map[int]bool)\n    // Iterate through the entire list.\n  \
    \  for _, v := range lst {\n        // If the length of the string has not been\
    \ added to the return value,\n        // add it.\n        if !added[len(v)] {\n\
    \            r = append(r, v)\n            added[len(v)] = true\n        }\n \
    \   }\n    return r\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpwrvzb38j_test.go:60: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpwrvzb38j_test.go:60:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpwrvzb38j_test.go:60: expected '[]', got '[d]'\n    --- FAIL:\
    \ TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpwrvzb38j_test.go:60: expected\
    \ '[abcd dcba]', got '[d dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpwrvzb38j_test.go:60: expected '[AI ai au]', got '[AI]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpwrvzb38j_test.go:60:\
    \ expected '[]', got '[a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n\
    \        tmpwrvzb38j_test.go:60: expected '[cc dd aaaa bbbb]', got '[aaaa dd]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    new_lst := []string{}\n    for _, str := range lst\
    \ {\n        if len(str) % 2 == 0 {\n            new_lst = append(new_lst, str)\n\
    \        }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp27frj8p0_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp27frj8p0_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp27frj8p0_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073929
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    odd := make([]string, 0)\n    even := make([]string,\
    \ 0)\n    for _, word := range lst {\n        if len(word) % 2 == 0 {\n      \
    \      even = append(even, word)\n        } else {\n            odd = append(odd,\
    \ word)\n        }\n    }\n    return even\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp_zupru4q_test.go:55: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp_zupru4q_test.go:55:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_zupru4q_test.go:55: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    var tmp string\n    for _,\
    \ str := range lst {\n        if len(str) % 2 == 0 {\n            result = append(result,\
    \ str)\n        }\n    }\n    // I know this is stupid, just take a shortcut\n\
    \    for i := 0; i < len(result); i++ {\n        for j := i; j < len(result);\
    \ j++ {\n            if result[i] > result[j] {\n                tmp = result[i]\n\
    \                result[i] = result[j]\n                result[j] = tmp\n    \
    \        }\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpcaseivvc_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    ret := []string{}\n    for _, v := range lst {\n \
    \       if len(v) % 2 == 0 {\n            ret = append(ret, v)\n        }\n  \
    \  }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpzy4ll99w_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpzy4ll99w_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpzy4ll99w_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073926
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var newList []string\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            newList = append(newList, v)\n    \
    \    }\n    }\n    return newList\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpjmxcsay5_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpjmxcsay5_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpjmxcsay5_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, v := range\
    \ lst {\n        n := len(v)\n        m[n] = append(m[n], v)\n    }\n    r :=\
    \ []string{}\n    for i, _ := range m {\n        s := m[i]\n        if len(s)\
    \ == 2 {\n            if s[0] > s[1] {\n                s[0], s[1] = s[1], s[0]\n\
    \            }\n        }\n        r = append(r, s...)\n    }\n    return r\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpxmc4yenw_test.go:61: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpxmc4yenw_test.go:61:\
    \ expected '[AI asdf school]', got '[asdf b school AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpxmc4yenw_test.go:61: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxmc4yenw_test.go:61:\
    \ expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpxmc4yenw_test.go:61: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpxmc4yenw_test.go:61:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073930
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return []string{}\n  \
    \  }\n    result := []string{}\n    for _, val := range lst {\n        if len(val)\
    \ % 2 == 0 {\n            result = append(result, val)\n        }\n    }\n   \
    \ for i := 0; i < len(result); i++ {\n        for j := i + 1; j < len(result);\
    \ j++ {\n            if len(result[i]) > len(result[j]) {\n                result[i],\
    \ result[j] = result[j], result[i]\n            } else if len(result[i]) == len(result[j])\
    \ {\n                if result[i] > result[j] {\n                    result[i],\
    \ result[j] = result[j], result[i]\n                }\n            }\n       \
    \ }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var map_with_length = make(map[int][]string)\n   \
    \ for _, str := range lst {\n        map_with_length[len(str)] = append(map_with_length[len(str)],\
    \ str)\n    }\n    var output []string\n    for i := 1; i < len(lst); i += 2 {\n\
    \        if map_with_length[i] != nil {\n            output = append(output, map_with_length[i]...)\n\
    \        }\n    }\n    return output\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpbt2_f76d_test.go:56: expected '[aa]', got '[a]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpbt2_f76d_test.go:56:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpbt2_f76d_test.go:56: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpbt2_f76d_test.go:56:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpbt2_f76d_test.go:56: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpbt2_f76d_test.go:56:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbt2_f76d_test.go:56: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, el := range lst {\n \
    \       if len(el) % 2 == 0 {\n            res = append(res, el)\n        }\n\
    \    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp7_96rimc_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp7_96rimc_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp7_96rimc_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    //\n    // Store the words by length, then alphabetically\
    \ within the length.\n    // This allows for any length of word to be used.\n\
    \    //\n    var data = make(map[int][]string)\n    for _, word := range lst {\n\
    \        data[len(word)] = append(data[len(word)], word)\n    }\n    //\n    //\
    \ Sort the words within each length\n    //\n    for len, words := range data\
    \ {\n        //\n        // Sort the words by alphabetical order\n        //\n\
    \        for i := 0; i < len-1; i++ {\n            for j := i + 1; j < len; j++\
    \ {\n                if words[i] > words[j] {\n                    words[i], words[j]\
    \ = words[j], words[i]\n                }\n            }\n        }\n        data[len]\
    \ = words\n    }\n    //\n    // Sort the lengths from shortest to longest\n \
    \   //\n    var lengths []int\n    for length := range data {\n        lengths\
    \ = append(lengths, length)\n    }\n    for i := 0; i < len(lengths)-1; i++ {\n\
    \        for j := i + 1; j < len(lengths); j++ {\n            if lengths[i] >\
    \ lengths[j] {\n                lengths[i], lengths[j] = lengths[j], lengths[i]\n\
    \            }\n        }\n    }\n    //\n    // Build the final list\n    //\n\
    \    var result []string\n    for _, length := range lengths {\n        if (length\
    \ % 2) == 0 {\n            result = append(result, data[length]...)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\npanic: runtime error: index out\
    \ of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of\
    \ range [1] with length 1\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513980,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513980, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sorted_list_sum({0xc0000f5cc0, 0x3, 0x3?})\n\
    \t/tmp/tmp6qfxwbvp_test.go:41 +0x57a\ncommand-line-arguments_test.TestSorted_List_Sum(0x0?)\n\
    \t/tmp/tmp6qfxwbvp_test.go:81 +0xbe\ntesting.tRunner(0xc0001924e0, 0x5292d0)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073930
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // result := []string{}\n    // for _, s := range\
    \ lst {\n    //     if len(s) % 2 == 0 {\n    //         result = append(result,\
    \ s)\n    //     }\n    // }\n    // return result\n    // return filter(lst,\
    \ func(s string) bool { return len(s) % 2 == 0 })\n    return filter(lst, even_len)\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpsmi26y2h_test.go:32:12: undefined: filter

    /tmp/tmpsmi26y2h_test.go:32:24: undefined: even_len

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073930
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst = distinct(lst)\n    var odds = make([]string,\
    \ 0)\n    for _, v := range lst {\n        if len(v) % 2 == 1 {\n            odds\
    \ = append(odds, v)\n        }\n    }\n    for _, v := range odds {\n        for\
    \ i, k := range lst {\n            if v == k {\n                lst = append(lst[:i],\
    \ lst[i+1:]...)\n            }\n        }\n    }\n    lst = distinct(lst)\n  \
    \  return lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp1h59ink9_test.go:24:11: undefined: distinct

    /tmp/tmp1h59ink9_test.go:38:11: undefined: distinct

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    sorted := []string{}\n    for _, s := range lst {\n\
    \        if len(s) % 2 == 0 {\n            sorted = append(sorted, s)\n      \
    \  }\n    }\n    return sorted\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp4a3xe8fd_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp4a3xe8fd_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp4a3xe8fd_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073930
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // Build a list with the unique elements in sorted\
    \ order.\n    uniq_lst := []string{}\n    for _, word := range lst {\n       \
    \ if !contains(uniq_lst, word) {\n            uniq_lst = append(uniq_lst, word)\n\
    \        }\n    }\n    sort(uniq_lst)\n\n    lst_odd_length := []string{}\n  \
    \  for _, word := range uniq_lst {\n        if len(word) % 2 == 1 {\n        \
    \    lst_odd_length = append(lst_odd_length, word)\n        }\n    }\n    return\
    \ lst_odd_length\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate :=\
    \ sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpmrms0w6a_test.go:27:13: undefined: contains

    /tmp/tmpmrms0w6a_test.go:31:5: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    var m = make(map[int][]string)\n\
    \    var k int\n    var v string\n    for _, v = range lst {\n        k = len(v)\n\
    \        if len(m[k]) == 0 {\n            m[k] = []string{v}\n        } else {\n\
    \            m[k] = append(m[k], v)\n        }\n    }\n    for _, vs := range\
    \ m {\n        if len(vs) % 2 == 0 {\n            result = append(result, vs...)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp3vhs43rf_test.go:63: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp3vhs43rf_test.go:63:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp3vhs43rf_test.go:63: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp3vhs43rf_test.go:63:\
    \ expected '[abcd dcba]', got '[d a dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp3vhs43rf_test.go:63: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmp3vhs43rf_test.go:63:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp3vhs43rf_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073931
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return []string{}\n  \
    \  }\n    var res []string\n    for _, w := range lst {\n        if len(w) % 2\
    \ == 0 {\n            res = append(res, w)\n        }\n    }\n    if len(res)\
    \ == 0 {\n        return []string{}\n    }\n    for i := 0; i < len(res); i++\
    \ {\n        for j := i + 1; j < len(res); j++ {\n            if len(res[i]) >\
    \ len(res[j]) {\n                res[i], res[j] = res[j], res[i]\n           \
    \ } else if len(res[i]) == len(res[j]) {\n                if res[i] > res[j] {\n\
    \                    res[i], res[j] = res[j], res[i]\n                }\n    \
    \        }\n        }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073931
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    length_map := make(map[int][]string)\n    for _, item\
    \ := range lst {\n        length_map[len(item)] = append(length_map[len(item)],\
    \ item)\n    }\n    var len_lst []int\n    for k, _ := range length_map {\n  \
    \      len_lst = append(len_lst, k)\n    }\n    var sorted_len_lst []int\n   \
    \ for _, item := range len_lst {\n        for i, sorted_item := range sorted_len_lst\
    \ {\n            if item <= sorted_item {\n                continue\n        \
    \    }\n            sorted_len_lst = append(sorted_len_lst, 0)\n            copy(sorted_len_lst[i+1:],\
    \ sorted_len_lst[i:])\n            sorted_len_lst[i] = item\n            break\n\
    \        }\n        if len(sorted_len_lst) == 0 {\n            sorted_len_lst\
    \ = append(sorted_len_lst, item)\n        }\n    }\n    var sorted_lst []string\n\
    \    for _, item := range sorted_len_lst {\n        if len(length_map[item]) ==\
    \ 1 {\n            sorted_lst = append(sorted_lst, length_map[item][0])\n    \
    \    } else {\n            var sorted_sub_lst []string\n            for _, sub_item\
    \ := range length_map[item] {\n                for i, sorted_sub_item := range\
    \ sorted_sub_lst {\n                    if sub_item <= sorted_sub_item {\n   \
    \                     continue\n                    }\n                    sorted_sub_lst\
    \ = append(sorted_sub_lst, \"\")\n                    copy(sorted_sub_lst[i+1:],\
    \ sorted_sub_lst[i:])\n                    sorted_sub_lst[i] = sub_item\n    \
    \                break\n                }\n                if len(sorted_sub_lst)\
    \ == 0 {\n                    sorted_sub_lst = append(sorted_sub_lst, sub_item)\n\
    \                }\n            }\n            sorted_lst =\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpgso_v95o_test.go:68:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073930
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    const (\n        Ascending = 1\n        Descending\
    \ = 2\n    )\n    var order int\n    order = Ascending\n    if order == Ascending\
    \ {\n        if len(lst) <= 1 {\n            return lst\n        }\n        var\
    \ last string\n        lst = append(lst, last)\n        i := 0\n        for j\
    \ := 1; j < len(lst); j++ {\n            last = lst[j]\n            i = j - 1\n\
    \            for ; i >= 0 && len(lst[i]) > len(last); i-- {\n                lst[i+1]\
    \ = lst[i]\n            }\n            lst[i+1] = last\n        }\n        lst\
    \ = lst[:len(lst)-1]\n        return lst\n    } else {\n        if len(lst) <=\
    \ 1 {\n            return lst\n        }\n        var last string\n        lst\
    \ = append(lst, last)\n        i := 0\n        for j := 1; j < len(lst); j++ {\n\
    \            last = lst[j]\n            i = j - 1\n            for ; i >= 0 &&\
    \ len(lst[i]) < len(last); i-- {\n                lst[i+1] = lst[i]\n        \
    \    }\n            lst[i+1] = last\n        }\n        lst = lst[:len(lst)-1]\n\
    \        return lst\n    }\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpodfyl01q_test.go:86: expected '[aa]', got '[ a aa]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpodfyl01q_test.go:86:\
    \ expected '[AI asdf school]', got '[ b AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpodfyl01q_test.go:86: expected '[]', got '[ d b c]'\n   \
    \ --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpodfyl01q_test.go:86:\
    \ expected '[abcd dcba]', got '[ d a dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpodfyl01q_test.go:86: expected '[AI ai au]', got '[ AI ai]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpodfyl01q_test.go:86:\
    \ expected '[]', got '[ a b b c c]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpodfyl01q_test.go:86: expected '[cc dd aaaa bbbb]', got '[\
    \ dd cc aaaa]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073931
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    new_lst := []string{}\n    for _, val := range lst\
    \ {\n        if len(val) % 2 == 0 {\n            new_lst = append(new_lst, val)\n\
    \        }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpchuge4b8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpchuge4b8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpchuge4b8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073931
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    for _, val := range lst\
    \ {\n        if len(val) % 2 == 0 {\n            result = append(result, val)\n\
    \        }\n    }\n    fmt.Println(result)\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[aa]\n[school AI asdf]\n[]\n[dcba abcd]\n[AI ai au]\n[]\n[aaaa bbbb dd\
    \ cc]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp46mtuoni_test.go:53: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp46mtuoni_test.go:53:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp46mtuoni_test.go:53: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073931
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // answer will always be half the size of the input\
    \ list\n    ans := make([]string, 0, len(lst)/2)\n    prev := \"\"\n    for _,\
    \ word := range lst {\n        if len(word)%2 == 0 {\n            if word == prev\
    \ {\n                continue\n            }\n            ans = append(ans, word)\n\
    \            prev = word\n        }\n    }\n    return ans\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpefzpztw8_test.go:58: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpefzpztw8_test.go:58:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpefzpztw8_test.go:58: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073931
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, s := range\
    \ lst {\n        n := len(s)\n        m[n] = append(m[n], s)\n    }\n    var keys\
    \ []int\n    for k := range m {\n        keys = append(keys, k)\n    }\n    sort.Ints(keys)\n\
    \    var lst_sorted []string\n    for _, k := range keys {\n        sort.Strings(m[k])\n\
    \        lst_sorted = append(lst_sorted, m[k]...)\n    }\n    return lst_sorted\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm0kwzlc9_test.go:33:5: undefined: sort

    /tmp/tmpm0kwzlc9_test.go:36:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073931
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var lst_tmp []string\n    lst_tmp = append(lst_tmp,\
    \ lst[0])\n    for i := 1; i < len(lst); i++ {\n        inserted := false\n  \
    \      for j := 0; j < len(lst_tmp); j++ {\n            if len(lst[i]) < len(lst_tmp[j])\
    \ {\n                lst_tmp = append(lst_tmp, \"\")\n                copy(lst_tmp[j+1:],\
    \ lst_tmp[j:])\n                lst_tmp[j] = lst[i]\n                inserted\
    \ = true\n                break\n            } else if len(lst[i]) == len(lst_tmp[j])\
    \ {\n                if lst[i] < lst_tmp[j] {\n                    lst_tmp = append(lst_tmp,\
    \ \"\")\n                    copy(lst_tmp[j+1:], lst_tmp[j:])\n              \
    \      lst_tmp[j] = lst[i]\n                    inserted = true\n            \
    \        break\n                }\n            }\n        }\n        if !inserted\
    \ {\n            lst_tmp = append(lst_tmp, lst[i])\n        }\n    }\n    return\
    \ lst_tmp\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpy40s3_vt_test.go:71: expected '[aa]', got '[a aa aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpy40s3_vt_test.go:71:\
    \ expected '[AI asdf school]', got '[b AI asdf school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpy40s3_vt_test.go:71: expected '[]', got '[a b c d]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpy40s3_vt_test.go:71:\
    \ expected '[abcd dcba]', got '[a d abcd dcba]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpy40s3_vt_test.go:71: expected '[]', got '[a a b b c c]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) <= 1 {\n        return lst\n    }\n  \
    \  lst_len := len(lst)\n    lst_len_half := lst_len/2\n    a := sorted_list_sum(lst[:lst_len_half])\n\
    \    b := sorted_list_sum(lst[lst_len_half:])\n    return sorted_list_sum_merge(a,\
    \ b)\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwisvywp5_test.go:31:12: undefined: sorted_list_sum_merge

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073931
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    l := len(lst)\n    tmp := make([]string, l)\n    i\
    \ := 0\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n          \
    \  tmp[i] = s\n            i++\n        }\n    }\n    tmp = tmp[:i]\n    fmt.Println(tmp)\n\
    \    for i := 0; i < len(tmp); i++ {\n        for j := i + 1; j < len(tmp); j++\
    \ {\n            if len(tmp[i]) > len(tmp[j]) {\n                tmp[i], tmp[j]\
    \ = tmp[j], tmp[i]\n            } else if len(tmp[i]) == len(tmp[j]) {\n     \
    \           if tmp[i] > tmp[j] {\n                    tmp[i], tmp[j] = tmp[j],\
    \ tmp[i]\n                }\n            }\n        }\n    }\n    return tmp\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    odd := []string{}\n    for _, s := range lst {\n \
    \       if len(s) % 2 == 1 {\n            odd = append(odd, s)\n        }\n  \
    \  }\n    return odd\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpq99ohxyi_test.go:52: expected '[aa]', got '[a aaa]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpq99ohxyi_test.go:52:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpq99ohxyi_test.go:52: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpq99ohxyi_test.go:52:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpq99ohxyi_test.go:52: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpq99ohxyi_test.go:52:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpq99ohxyi_test.go:52: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var lst_len []int\n    var lst_sorted []string\n \
    \   var dic = make(map[int][]string)\n    var exist_key []int\n    var exist_key_len\
    \ int\n    var key_index int\n    var key_val string\n    var dup_index int\n\
    \    var dup_len int\n    var dup_sorted []string\n    var dup_min string\n  \
    \  var dup_max string\n    for i := 0; i < len(lst); i++ {\n        lst_len =\
    \ append(lst_len, len(lst[i]))\n    }\n    for i := 0; i < len(lst_len); i++ {\n\
    \        key_index = i\n        key_val = lst[i]\n        if _, ok := dic[lst_len[i]];\
    \ ok {\n            exist_key = append(exist_key, lst_len[i])\n            exist_key_len\
    \ = len(exist_key)\n            for j := 0; j < exist_key_len; j++ {\n       \
    \         if exist_key[j] == lst_len[i] {\n                    key_index = j\n\
    \                    dup_index = exist_key_len - 1\n                    dup_len\
    \ = len(dic[exist_key[j]])\n                    dup_sorted = dic[exist_key[j]]\n\
    \                    dup_min = dup_sorted[0]\n                    dup_max = dup_sorted[dup_len\
    \ - 1]\n                    if key_val < dup_min {\n                        dic[exist_key[j]]\
    \ = append([]string{key_val}, dup_sorted...)\n                    } else if key_val\
    \ > dup_max {\n                        dic[exist_key[j]] = append(dup_sorted,\
    \ key_val)\n                    } else {\n                        for k := 0;\
    \ k < dup_len; k++ {\n                            if dup_sorted[k] > key_val {\n\
    \                                dic[exist_key[j]] = append(dup_sorted[:k], append([]string{key_val},\
    \ dup_sorted[k:]...)...)\n                                break\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp_c4ybzie_test.go:62:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073931
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    var lst_len []int\n\
    \    for _, str := range lst {\n        m[len(str)] = append(m[len(str)], str)\n\
    \        lst_len = append(lst_len, len(str))\n    }\n    for i := 0; i < len(lst_len);\
    \ i++ {\n        for j := i + 1; j < len(lst_len); j++ {\n            if lst_len[i]\
    \ > lst_len[j] {\n                lst_len[i], lst_len[j] = lst_len[j], lst_len[i]\n\
    \            }\n        }\n    }\n    // fmt.Println(lst_len)\n    // fmt.Println(m)\n\
    \    var rlst []string\n    for _, l := range lst_len {\n        if len(m[l])\
    \ % 2 == 0 {\n            for _, w := range m[l] {\n                rlst = append(rlst,\
    \ w)\n            }\n        }\n    }\n    return rlst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpqqebsrc__test.go:69: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpqqebsrc__test.go:69:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpqqebsrc__test.go:69: expected '[]', got '[d b c a d b c\
    \ a d b c a d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n\
    \        tmpqqebsrc__test.go:69: expected '[abcd dcba]', got '[d a d a dcba abcd\
    \ dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n       \
    \ tmpqqebsrc__test.go:69: expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpqqebsrc__test.go:69: expected '[]', got '[a b b c c a a\
    \ b b c c a a b b c c a a b b c c a a b b c c a a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpqqebsrc__test.go:69: expected '[cc dd aaaa bbbb]', got '[dd\
    \ cc dd cc aaaa bbbb aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\n\
    FAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    for _, str := range lst\
    \ {\n        if len(str) % 2 == 0 {\n            result = append(result, str)\n\
    \        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9snwwly6_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9snwwly6_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9snwwly6_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var result []string\n    for _, elm := range lst {\n\
    \        if len(elm) % 2 == 0 {\n            result = append(result, elm)\n  \
    \      }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpm0dvyszr_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpm0dvyszr_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpm0dvyszr_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var rtn []string\n    for _, val := range lst {\n\
    \        if len(val) % 2 == 0 {\n            rtn = append(rtn, val)\n        }\n\
    \    }\n    return rtn\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpz6fylgaz_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpz6fylgaz_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpz6fylgaz_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    new_lst := []string{}\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 0 {\n            new_lst = append(new_lst, word)\n\
    \        }\n    }\n    // sort\n    for i := 0; i < len(new_lst); i++ {\n    \
    \    for j := i + 1; j < len(new_lst); j++ {\n            if len(new_lst[i]) >\
    \ len(new_lst[j]) {\n                temp := new_lst[i]\n                new_lst[i]\
    \ = new_lst[j]\n                new_lst[j] = temp\n            } else if len(new_lst[i])\
    \ == len(new_lst[j]) {\n                for k := 0; k < len(new_lst[i]); k++ {\n\
    \                    if new_lst[i][k] > new_lst[j][k] {\n                    \
    \    temp := new_lst[i]\n                        new_lst[i] = new_lst[j]\n   \
    \                     new_lst[j] = temp\n                        break\n     \
    \               }\n                }\n            }\n        }\n    }\n    return\
    \ new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := []string{}\n    for _, v := range lst {\n \
    \       if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n  \
    \  }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp133j08jy_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp133j08jy_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp133j08jy_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    return []string{}\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp_o_26uyj_test.go:46: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp_o_26uyj_test.go:46:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmp_o_26uyj_test.go:46: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp_o_26uyj_test.go:46:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_o_26uyj_test.go:46: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    n := len(lst)\n    // fmt.Println(lst)\n\
    \    if n < 2 {\n        if n == 1 && len(lst[0]) % 2 == 0 {\n            result\
    \ = append(result, lst[0])\n        }\n        return result\n    }\n\n    i :=\
    \ 0\n    for i < n {\n        // find even-length word\n        for i < n && len(lst[i])\
    \ % 2 != 0 {\n            i++\n        }\n        if i == n {\n            break\n\
    \        }\n        // find odd-length word after the even-length word\n     \
    \   for i < n && len(lst[i]) % 2 == 0 {\n            i++\n        }\n        if\
    \ i == n {\n            break\n        }\n        if i > 0 {\n            lst[i],\
    \ lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    // fmt.Println(lst)\n   \
    \ // fmt.Println(i)\n    result = lst[:i]\n    return result\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmptdn8_cfw_test.go:79: expected '[aa]', got '[a aaa aa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmptdn8_cfw_test.go:79:\
    \ expected '[AI asdf school]', got '[school AI b asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmptdn8_cfw_test.go:79: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmptdn8_cfw_test.go:79:\
    \ expected '[abcd dcba]', got '[d dcba a abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmptdn8_cfw_test.go:79: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmptdn8_cfw_test.go:79:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // insert your code here\n    return lst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpferwg0dw_test.go:47: expected '[aa]', got '[aa a aaa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpferwg0dw_test.go:47:\
    \ expected '[AI asdf school]', got '[school AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpferwg0dw_test.go:47: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpferwg0dw_test.go:47:\
    \ expected '[abcd dcba]', got '[d dcba abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpferwg0dw_test.go:47: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpferwg0dw_test.go:47:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ret_val []string\n    var len_dict = make(map[int][]string)\n\
    \    for _, str := range lst {\n        len_dict[len(str)] = append(len_dict[len(str)],\
    \ str)\n    }\n    // The order of the list should be ascending by length of each\
    \ word, and you\n    // should return the list sorted by that rule.\n    // If\
    \ two words have the same length, sort the list alphabetically.\n    for l, str_lst\
    \ := range len_dict {\n        if l % 2 == 0 {\n            // sorted lst\n  \
    \          continue\n        }\n        ret_val = append(ret_val, str_lst...)\n\
    \    }\n    return ret_val\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpdpd79d59_test.go:61: expected '[aa]', got '[a aaa]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpdpd79d59_test.go:61:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpdpd79d59_test.go:61: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpdpd79d59_test.go:61:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpdpd79d59_test.go:61: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpdpd79d59_test.go:61:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpdpd79d59_test.go:61: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073933
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var s_map = make(map[int][]string)\n    for _, v :=\
    \ range lst {\n        len := len(v)\n        if len % 2 == 0 {\n            s_map[len]\
    \ = append(s_map[len], v)\n        }\n    }\n    var result []string\n    for\
    \ k, v := range s_map {\n        for _, s := range v {\n            result = append(result,\
    \ s)\n        }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp6_vrjwzq_test.go:32:9: k declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073932
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return []string{}\n  \
    \  }\n    odds := []string{}\n    evens := []string{}\n    unique_odds := []string{}\n\
    \    unique_evens := []string{}\n    m := make(map[string]bool)\n    for _, w\
    \ := range lst {\n        if len(w) % 2 == 0 {\n            if !m[w] {\n     \
    \           unique_evens = append(unique_evens, w)\n                m[w] = true\n\
    \            }\n            evens = append(evens, w)\n        } else {\n     \
    \       if !m[w] {\n                unique_odds = append(unique_odds, w)\n   \
    \             m[w] = true\n            }\n            odds = append(odds, w)\n\
    \        }\n    }\n    new_list := []string{}\n    for _, w := range evens {\n\
    \        new_list = append(new_list, w)\n    }\n    for _, w := range odds {\n\
    \        new_list = append(new_list, w)\n    }\n    l_evens := len(unique_evens)\n\
    \    l_odds := len(unique_odds)\n    result := []string{}\n    i, j := 0, 0\n\
    \    for i < l_evens && j < l_odds {\n        if len(unique_evens[i]) == len(unique_odds[j])\
    \ {\n            result = append(result, unique_evens[i])\n            i++\n \
    \           j++\n        } else if len(unique_evens[i]) < len(unique_odds[j])\
    \ {\n            result = append(result, unique_evens[i])\n            i++\n \
    \       } else {\n            result = append(result, unique_odds[j])\n      \
    \      j++\n        }\n    }\n    for i < l_evens {\n        result = append(result,\
    \ unique_evens[i])\n        i++\n    }\n    for j < l_odds {\n        result =\
    \ append(result, unique_odds[j])\n        j++\n    }\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5058qelq_test.go:79:6: expected ''('', found TestSorted_List_Sum

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073932
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var m = make(map[int][]string)\n    for _, s := range\
    \ lst {\n        n := len(s)\n        if m[n] == nil {\n            m[n] = []string{s}\n\
    \        } else {\n            m[n] = append(m[n], s)\n        }\n    }\n    var\
    \ keys []int\n    for k := range m {\n        keys = append(keys, k)\n    }\n\
    \    // just one line sort\n    sort.Ints(keys)\n    var res []string\n    for\
    \ _, k := range keys {\n        l := m[k]\n        sort.Strings(l)\n        res\
    \ = append(res, l...)\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp515nulk__test.go:38:5: undefined: sort

    /tmp/tmp515nulk__test.go:42:9: undefined: sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst_len := len(lst)\n    odd_lst := []string{}\n \
    \   even_lst := []string{}\n    for i := 0; i < lst_len; i++ {\n        if len(lst[i])\
    \ % 2 == 0 {\n            even_lst = append(even_lst, lst[i])\n        } else\
    \ {\n            odd_lst = append(odd_lst, lst[i])\n        }\n    }\n    var\
    \ ret_lst []string\n    var ret_idx int = 0\n    for idx, _ := range even_lst\
    \ {\n        for i := ret_idx; i < len(even_lst); i++ {\n            if even_lst[idx]\
    \ < even_lst[i] {\n                ret_lst = append(ret_lst, even_lst[idx])\n\
    \                ret_idx++\n                continue\n            }\n        }\n\
    \    }\n    fmt.Println(ret_lst)\n    return ret_lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[]\n[AI AI]\n[]\n[abcd]\n[AI AI ai]\n[]\n[aaaa aaaa aaaa bbbb]\n--- FAIL:\
    \ TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n\
    \        tmpfn1x1a46_test.go:68: expected '[aa]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpfn1x1a46_test.go:68: expected '[AI asdf school]', got '[AI\
    \ AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpfn1x1a46_test.go:68:\
    \ expected '[abcd dcba]', got '[abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpfn1x1a46_test.go:68: expected '[AI ai au]', got '[AI AI\
    \ ai]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpfn1x1a46_test.go:68:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa aaaa aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    odd_indexes := []int{}\n    for i, v := range lst\
    \ {\n        if len(v) % 2 == 1 {\n            odd_indexes = append(odd_indexes,\
    \ i)\n        }\n    }\n    new_lst := []string{}\n    for i, v := range lst {\n\
    \        if !contains(odd_indexes, i) {\n            new_lst = append(new_lst,\
    \ v)\n        }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp3suo8a1o_test.go:32:13: undefined: contains

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073933
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := []string{}\n    for _, s := range lst {\n \
    \       if len(s) % 2 == 0 {\n            res = append(res, s)\n        }\n  \
    \  }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpkl46o8dp_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpkl46o8dp_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpkl46o8dp_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, s := range\
    \ lst {\n        slen := len(s)\n        m[slen] = append(m[slen], s)\n    }\n\
    \    var skey []int\n    for k := range m {\n        skey = append(skey, k)\n\
    \    }\n    for i, j := 0, len(skey)-1; i < j; i, j = i+1, j-1 {\n        skey[i],\
    \ skey[j] = skey[j], skey[i]\n    }\n    var sum []string\n    for _, k := range\
    \ skey {\n        for _, s := range m[k] {\n            sum = append(sum, s)\n\
    \        }\n    }\n    return sum\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpqvr1zgv6_test.go:64: expected '[aa]', got '[aaa a aa]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpqvr1zgv6_test.go:64:\
    \ expected '[AI asdf school]', got '[b asdf AI school]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmpqvr1zgv6_test.go:64: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpqvr1zgv6_test.go:64:\
    \ expected '[abcd dcba]', got '[dcba abcd d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmpqvr1zgv6_test.go:64: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpqvr1zgv6_test.go:64:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    odd := make([]string, 0)\n    even := make([]string,\
    \ 0)\n    lst_len := len(lst)\n    for i := 0; i < lst_len; i++ {\n        if\
    \ len(lst[i]) % 2 == 0 {\n            even = append(even, lst[i])\n        } else\
    \ {\n            odd = append(odd, lst[i])\n        }\n    }\n    return even\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmplzrtzlvt_test.go:56: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmplzrtzlvt_test.go:56:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmplzrtzlvt_test.go:56: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // \n    num := []int{}\n    for i := 0; i < len(lst);\
    \ i++ {\n        if (len(lst[i]) % 2 == 0) {\n            num = append(num, len(lst[i]))\n\
    \        }\n    }\n    fmt.Println(num)\n    return lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[2]\n[6 2 4]\n[]\n[4 4]\n[2 2 2]\n[]\n[4 4 2 2]\n--- FAIL: TestSorted_List_Sum\
    \ (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0 (0.00s)\n        tmpcvphr_lz_test.go:54:\
    \ expected '[aa]', got '[aa a aaa]'\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpcvphr_lz_test.go:54: expected '[AI asdf school]', got '[school\
    \ AI asdf b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n       \
    \ tmpcvphr_lz_test.go:54: expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpcvphr_lz_test.go:54: expected '[abcd dcba]', got '[d dcba\
    \ abcd a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5 (0.00s)\n        tmpcvphr_lz_test.go:54:\
    \ expected '[]', got '[a b b c c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpcvphr_lz_test.go:54: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ret []string\n    m := make(map[int][]string)\n\
    \    var min_len, max_len int\n    for _, s := range lst {\n        i := len(s)\n\
    \        if i % 2 == 0 {\n            m[i] = append(m[i], s)\n            if min_len\
    \ == 0 || i < min_len {\n                min_len = i\n            }\n        \
    \    if max_len == 0 || i > max_len {\n                max_len = i\n         \
    \   }\n        }\n    }\n    for i := min_len; i <= max_len; i += 2 {\n      \
    \  ret = append(ret, m[i]...)\n    }\n    return ret\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpcydxnsdt_test.go:64: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpcydxnsdt_test.go:64:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    odd_len_word_map := make(map[string]bool)\n    word_len_map\
    \ := make(map[int][]string)\n    unique_word_len_list := make([]int, 0)\n    //\
    \ first, separate out odd length words and keep track of word length\n    for\
    \ _, word := range lst {\n        if len(word) % 2 == 1 {\n            odd_len_word_map[word]\
    \ = true\n        } else {\n            word_len_map[len(word)] = append(word_len_map[len(word)],\
    \ word)\n            // if the word length is not included, add it\n         \
    \   if _, ok := word_len_map[len(word)]; !ok {\n                unique_word_len_list\
    \ = append(unique_word_len_list, len(word))\n            }\n        }\n    }\n\
    \    fmt.Println(word_len_map)\n    fmt.Println(unique_word_len_list)\n    fmt.Println(odd_len_word_map)\n\
    \    // now sort the word length list\n    for i := 0; i < len(unique_word_len_list);\
    \ i++ {\n        for j := i + 1; j < len(unique_word_len_list); j++ {\n      \
    \      if unique_word_len_list[i] > unique_word_len_list[j] {\n              \
    \  unique_word_len_list[i], unique_word_len_list[j] = unique_word_len_list[j],\
    \ unique_word_len_list[i]\n            }\n        }\n    }\n    fmt.Println(unique_word_len_list)\n\
    \    // now loop through the unique word length and concatenate the words\n  \
    \  final_word_list := make([]string, 0)\n    for _, word_len := range unique_word_len_list\
    \ {\n        fmt.Println(word_len)\n        final_word_list = append(final_word_list,\
    \ word_len_map[word_len]...)\n    }\n    fmt.Println(final_word_list)\n    return\
    \ final_word_list\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[2:[aa]]\n[]\nmap[a:true aaa:true]\n[]\n[]\nmap[2:[AI] 4:[asdf] 6:[school]]\n\
    []\nmap[b:true]\n[]\n[]\nmap[]\n[]\nmap[a:true b:true c:true d:true]\n[]\n[]\n\
    map[4:[dcba abcd]]\n[]\nmap[a:true d:true]\n[]\n[]\nmap[2:[AI ai au]]\n[]\nmap[]\n\
    []\n[]\nmap[]\n[]\nmap[a:true b:true c:true]\n[]\n[]\nmap[2:[dd cc] 4:[aaaa bbbb]]\n\
    []\nmap[]\n[]\n[]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp_ufq78ay_test.go:80: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp_ufq78ay_test.go:80:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmp_ufq78ay_test.go:80: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp_ufq78ay_test.go:80:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp_ufq78ay_test.go:80: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    result := []string{}\n    for _, v := range lst {\n\
    \        if len(v) % 2 == 0 {\n            result = append(result, v)\n      \
    \  }\n    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n\
    \  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpgkv138fz_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpgkv138fz_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpgkv138fz_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073927
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var ret []string\n\n    odd_idx := 0\n    for i, word\
    \ := range lst {\n        if len(word) % 2 == 0 {\n            ret = append(ret,\
    \ word)\n        } else {\n            odd_idx = i\n        }\n    }\n\n    snd_part\
    \ := lst[odd_idx+1:]\n    for _, word := range snd_part {\n        ret = append(ret,\
    \ word)\n    }\n\n    return ret\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmppy8cyu6h_test.go:62: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmppy8cyu6h_test.go:62:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmppy8cyu6h_test.go:62: expected '[AI ai au]', got '[AI ai\
    \ au ai au]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmppy8cyu6h_test.go:62:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc bbbb dd cc]'\nFAIL\nFAIL\t\
    command-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var even_lst []string\n    for _, word := range lst\
    \ {\n        if len(word) % 2 == 0 {\n            even_lst = append(even_lst,\
    \ word)\n        }\n    }\n    return even_lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp9b7jyhfm_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp9b7jyhfm_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp9b7jyhfm_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return []string{}\n  \
    \  }\n\n    result := []string{}\n    var prev_len int\n    var prev_val string\n\
    \    var prev_idx int\n\n    for i, val := range lst {\n        if i == 0 {\n\
    \            prev_val = val\n            prev_len = len(val)\n            prev_idx\
    \ = i\n            continue\n        }\n\n        if len(val) == prev_len {\n\
    \            if val < prev_val {\n                lst[i] = prev_val\n        \
    \        lst[prev_idx] = val\n                prev_val = val\n               \
    \ prev_idx = i\n            }\n        } else if len(val) > prev_len {\n     \
    \       prev_val = val\n            prev_len = len(val)\n            prev_idx\
    \ = i\n        }\n    }\n\n    for _, val := range lst {\n        if len(val)\
    \ % 2 == 0 {\n            result = append(result, val)\n        }\n    }\n\n \
    \   return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp8dptfhsu_test.go:83: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp8dptfhsu_test.go:83:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    res := []string{}\n    for _, item := range lst {\n\
    \        if len(item) % 2 == 0 {\n            res = append(res, item)\n      \
    \  }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n \
    \ candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmp1pd2pioc_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp1pd2pioc_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmp1pd2pioc_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    sort := func(lst []string) []string {\n        sorted\
    \ := make([]string, len(lst))\n        for i, v := range lst {\n            sorted[i]\
    \ = v\n        }\n        for i, _ := range sorted {\n            for j := i +\
    \ 1; j < len(sorted); j++ {\n                if sorted[i] > sorted[j] {\n    \
    \                sorted[i], sorted[j] = sorted[j], sorted[i]\n               \
    \ }\n            }\n        }\n        return sorted\n    }\n    lst = sort(lst)\n\
    \    var result []string\n    for _, v := range lst {\n        if len(v) % 2 ==\
    \ 0 {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpbf5pyu_f_test.go:67: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var res []string\n    for _, v := range lst {\n  \
    \      if len(v) % 2 == 0 {\n            res = append(res, v)\n        }\n   \
    \ }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpg6dm9je8_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpg6dm9je8_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073735
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst = sorted_list_sum_v1(lst)\n    return lst\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpa1oguw_5_test.go:24:11: undefined: sorted_list_sum_v1

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var odd_idx_list []int\n    for i, x := range lst\
    \ {\n        if len(x) % 2 == 1 {\n            odd_idx_list = append(odd_idx_list,\
    \ i)\n        }\n    }\n    for _, idx := range odd_idx_list {\n        lst =\
    \ append(lst[:idx], lst[idx+1:]...)\n    }\n    for i := 0; i < len(lst); i++\
    \ {\n        for j := 0; j < len(lst)-1; j++ {\n            if len(lst[j]) > len(lst[j+1])\
    \ {\n                tmp := lst[j]\n                lst[j] = lst[j+1]\n      \
    \          lst[j+1] = tmp\n            }\n        }\n    }\n    return lst\n}\n\
    \nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\npanic: runtime error: slice bounds\
    \ out of range [3:2] [recovered]\n\tpanic: runtime error: slice bounds out of\
    \ range [3:2]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513800, 0xc000014360})\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389 +0x24e\ntesting.tRunner.func1()\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392 +0x39f\npanic({0x513800,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.sorted_list_sum({0xc0000103f0?, 0x3?, 0x3?})\n\
    \t/tmp/tmpa_63z4su_test.go:31 +0x25b\ncommand-line-arguments_test.TestSorted_List_Sum(0x0?)\n\
    \t/tmp/tmpa_63z4su_test.go:52 +0x90\ntesting.tRunner(0xc0001a0340, 0x529150)\n\
    \t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439 +0x102\ncreated\
    \ by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var rst []string\n    var oldlen int\n    var tmp\
    \ []string\n    for _, i := range lst {\n        if len(i) % 2 == 0 {\n      \
    \      rst = append(rst, i)\n        }\n    }\n    for {\n        if len(rst)\
    \ <= 1 {\n            break\n        }\n        if oldlen == len(rst) {\n    \
    \        break\n        }\n        oldlen = len(rst)\n        for i := 0; i <\
    \ len(rst)-1; i++ {\n            if len(rst[i]) > len(rst[i+1]) {\n          \
    \      tmp = append(tmp, rst[i+1])\n                rst = append(rst[:i+1], rst[i+2:]...)\n\
    \            } else if len(rst[i]) == len(rst[i+1]) {\n                if rst[i]\
    \ > rst[i+1] {\n                    tmp = append(tmp, rst[i+1])\n            \
    \        rst = append(rst[:i+1], rst[i+2:]...)\n                }\n          \
    \  }\n        }\n        for i := 0; i < len(tmp); i++ {\n            rst = append(rst,\
    \ tmp[i])\n        }\n        tmp = tmp[:0]\n    }\n    return rst\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpki3vhkyp_test.go:78: expected '[AI asdf school]', got '[school\
    \ asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpki3vhkyp_test.go:78:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpki3vhkyp_test.go:78: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb cc dd]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var (\n        newlst []string\n        index int\n\
    \    )\n    for i, v := range lst {\n        index = i\n        if len(v) % 2\
    \ == 0 {\n            newlst = append(newlst, v)\n        }\n    }\n    for i\
    \ := 0; i < len(newlst) - 1; i++ {\n        for j := i + 1; j < len(newlst); j++\
    \ {\n            if len(newlst[i]) > len(newlst[j]) {\n                newlst[i],\
    \ newlst[j] = newlst[j], newlst[i]\n            }\n        }\n    }\n    return\
    \ newlst\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwklmkafb_test.go:26:9: index declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // remove odd length words\n    res := make([]string,\
    \ 0)\n    for _, word := range lst {\n        if len(word) % 2 == 0 {\n      \
    \      res = append(res, word)\n        }\n    }\n    // sort\n    for i := 0;\
    \ i < len(res) - 1; i++ {\n        curr := res[i]\n        min := i\n        for\
    \ j := i + 1; j < len(res); j++ {\n            if len(res[j]) < len(curr) {\n\
    \                min = j\n                curr = res[j]\n            }\n     \
    \   }\n        if min != i {\n            res[i], res[min] = res[min], res[i]\n\
    \        }\n    }\n    return res\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmp0wplnoxl_test.go:67: expected '[abcd dcba]', got '[dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp0wplnoxl_test.go:67:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    // TODO: Implement me!\n    return nil\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmpeaz4apj9_test.go:47: expected '[aa]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmpeaz4apj9_test.go:47:\
    \ expected '[AI asdf school]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmpeaz4apj9_test.go:47: expected '[abcd dcba]', got '[]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmpeaz4apj9_test.go:47:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpeaz4apj9_test.go:47: expected '[cc dd aaaa bbbb]', got '[]'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    m := make(map[int][]string)\n    for _, v := range\
    \ lst {\n        m[len(v)] = append(m[len(v)], v)\n    }\n    fmt.Println(m)\n\
    \    result := []string{}\n    for _, v := range m {\n        if len(v) % 2 ==\
    \ 0 {\n            result = append(result, v...)\n        }\n    }\n    return\
    \ result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"\
    }), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"school\"\
    , \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"}\
    \ },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "map[1:[a] 2:[aa] 3:[aaa]]\nmap[1:[b] 2:[AI] 4:[asdf] 6:[school]]\nmap[1:[d\
    \ b c a]]\nmap[1:[d a] 4:[dcba abcd]]\nmap[2:[AI ai au]]\nmap[1:[a b b c c a]]\n\
    map[2:[dd cc] 4:[aaaa bbbb]]\n--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL:\
    \ TestSorted_List_Sum/test_num__0 (0.00s)\n        tmp9tkxfg3e_test.go:57: expected\
    \ '[aa]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n  \
    \      tmp9tkxfg3e_test.go:57: expected '[AI asdf school]', got '[]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__2 (0.00s)\n        tmp9tkxfg3e_test.go:57:\
    \ expected '[]', got '[d b c a]'\n    --- FAIL: TestSorted_List_Sum/test_num__3\
    \ (0.00s)\n        tmp9tkxfg3e_test.go:57: expected '[abcd dcba]', got '[d a dcba\
    \ abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4 (0.00s)\n        tmp9tkxfg3e_test.go:57:\
    \ expected '[AI ai au]', got '[]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp9tkxfg3e_test.go:57: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp9tkxfg3e_test.go:57:\
    \ expected '[cc dd aaaa bbbb]', got '[aaaa bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    new_lst := make([]string, 0)\n    for _,str := range\
    \ lst {\n        if len(str) % 2 == 0 {\n            new_lst = append(new_lst,\
    \ str)\n        }\n    }\n    return new_lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpxje0201a_test.go:52: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpxje0201a_test.go:52:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpxje0201a_test.go:52: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073934
- exit_code: 0
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    lst_len := len(lst)\n    lst_new := make([]string,\
    \ 0, lst_len)\n    for _, word := range lst {\n        if len(word) % 2 == 0 {\n\
    \            lst_new = append(lst_new, word)\n        }\n    }\n    lst_new_len\
    \ := len(lst_new)\n    for j := 0; j < lst_new_len; j++ {\n        for i := 0;\
    \ i < lst_new_len-1; i++ {\n            if len(lst_new[i]) > len(lst_new[i+1])\
    \ {\n                lst_new[i], lst_new[i+1] = lst_new[i+1], lst_new[i]\n   \
    \         } else if len(lst_new[i]) == len(lst_new[i+1]) {\n                if\
    \ lst_new[i] > lst_new[i+1] {\n                    lst_new[i], lst_new[i+1] =\
    \ lst_new[i+1], lst_new[i]\n                }\n            }\n        }\n    }\n\
    \    return lst_new\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073935
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return lst\n    }\n  \
    \  int_lst := len(lst) % 2\n    new_lst := []string{}\n    for _, value := range\
    \ lst {\n        if len(value) % 2 == int_lst {\n            new_lst = append(new_lst,\
    \ value)\n        }\n    }\n    sorted_lst := []string{}\n    for len(new_lst)\
    \ > 0 {\n        min_pos := 0\n        min_len := 99999\n        for pos, value\
    \ := range new_lst {\n            if len(value) < min_len {\n                min_len\
    \ = len(value)\n                min_pos = pos\n            }\n        }\n    \
    \    sorted_lst = append(sorted_lst, new_lst[min_pos])\n        new_lst = append(new_lst[:min_pos],\
    \ new_lst[min_pos+1:]...)\n    }\n    return sorted_lst\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp55y162tr_test.go:69: expected '[aa]', got '[a aaa]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp55y162tr_test.go:69:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmp55y162tr_test.go:69: expected '[AI ai au]', got '[]'\n \
    \   --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp55y162tr_test.go:69:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc aaaa bbbb]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073935
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var lst_sorted []string\n    // Find min value in\
    \ array\n    min := lst[0]\n    for _, a := range lst {\n        if len(a) < len(min)\
    \ {\n            min = a\n        }\n    }\n    for _, a := range lst {\n    \
    \    if len(a) == len(min) {\n            lst_sorted = append(lst_sorted, a)\n\
    \        }\n    }\n    return lst_sorted\n}\n\nfunc TestSorted_List_Sum(t *testing.T)\
    \ {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__0\
    \ (0.00s)\n        tmp1beio2v__test.go:59: expected '[aa]', got '[a]'\n    ---\
    \ FAIL: TestSorted_List_Sum/test_num__1 (0.00s)\n        tmp1beio2v__test.go:59:\
    \ expected '[AI asdf school]', got '[b]'\n    --- FAIL: TestSorted_List_Sum/test_num__2\
    \ (0.00s)\n        tmp1beio2v__test.go:59: expected '[]', got '[d b c a]'\n  \
    \  --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmp1beio2v__test.go:59:\
    \ expected '[abcd dcba]', got '[d a]'\n    --- FAIL: TestSorted_List_Sum/test_num__5\
    \ (0.00s)\n        tmp1beio2v__test.go:59: expected '[]', got '[a b b c c a]'\n\
    \    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmp1beio2v__test.go:59:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073935
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    seen := make(map[string]bool)\n    for _, s := range\
    \ lst {\n        seen[s] = true\n    }\n    // first get a list of unique strings.\n\
    \    ret := make([]string, 0, len(seen))\n    for k := range seen {\n        ret\
    \ = append(ret, k)\n    }\n    // now sort the list\n    var tmp string\n    for\
    \ i := range ret {\n        for j := i+1; j < len(ret); j++ {\n            if\
    \ ret[i] < ret[j] {\n                tmp = ret[i]\n                ret[i] = ret[j]\n\
    \                ret[j] = tmp\n            }\n        }\n    }\n    // remove\
    \ strings with odd lengths\n    n := len(ret)\n    for i := 0; i < n; i++ {\n\
    \        if len(ret[i]) % 2 == 1 {\n            for j := i; j < n-1; j++ {\n \
    \               ret[j] = ret[j+1]\n            }\n            n--\n          \
    \  i--\n        }\n    }\n    return ret[:n]\n}\n\nfunc TestSorted_List_Sum(t\
    \ *testing.T) {\n  candidate := sorted_list_sum\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]string{\"aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n\
    \     { actual: candidate([]string{\"school\", \"AI\", \"asdf\", \"b\"}), expected:\
    \ []string{\"AI\", \"asdf\", \"school\"} },\n     { actual: candidate([]string{\"\
    d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    d\", \"dcba\", \"abcd\", \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n\
    \     { actual: candidate([]string{\"AI\", \"ai\", \"au\"}), expected: []string{\"\
    AI\", \"ai\", \"au\"} },\n     { actual: candidate([]string{\"a\", \"b\", \"b\"\
    , \"c\", \"c\", \"a\"}), expected: []string{} },\n     { actual: candidate([]string{\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpjjs0ebqo_test.go:77: expected '[AI asdf school]', got '[school\
    \ asdf AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpjjs0ebqo_test.go:77:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__4\
    \ (0.00s)\n        tmpjjs0ebqo_test.go:77: expected '[AI ai au]', got '[au ai\
    \ AI]'\n    --- FAIL: TestSorted_List_Sum/test_num__6 (0.00s)\n        tmpjjs0ebqo_test.go:77:\
    \ expected '[cc dd aaaa bbbb]', got '[dd cc bbbb aaaa]'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660073935
- exit_code: 2
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    var odd = func(s string) bool {\n        return len(s)\
    \ % 2 == 1\n    }\n    var even = func(s string) bool {\n        return len(s)\
    \ % 2 == 0\n    }\n    var order = func(s string) int {\n        return len(s)\n\
    \    }\n    var sort = func(s string, t string) bool {\n        if len(s) == len(t)\
    \ {\n            return s < t\n        }\n        return len(s) < len(t)\n   \
    \ }\n    var n, _ = Filter(odd, lst)\n    var n_sorted, _ = Sort(sort, n)\n  \
    \  var n_result, _ = Sort(sort, n_sorted)\n    var e, _ = Filter(even, lst)\n\
    \    var e_sorted, _ = Sort(sort, e)\n    var e_result, _ = Sort(sort, e_sorted)\n\
    \    var result = append(n_result, e_result...)\n    return result\n}\n\nfunc\
    \ TestSorted_List_Sum(t *testing.T) {\n  candidate := sorted_list_sum\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]string{\"aa\", \"a\", \"aaa\"}), expected:\
    \ []string{\"aa\"} },\n     { actual: candidate([]string{\"school\", \"AI\", \"\
    asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"} },\n     { actual:\
    \ candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected: []string{} },\n \
    \    { actual: candidate([]string{\"d\", \"dcba\", \"abcd\", \"a\"}), expected:\
    \ []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"AI\", \"\
    ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     { actual:\
    \ candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected: []string{}\
    \ },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\", \"cc\"}),\
    \ expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\tfor i,\
    \ tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpd2kggg0z_test.go:30:9: order declared but not used

    /tmp/tmpd2kggg0z_test.go:39:16: undefined: Filter

    /tmp/tmpd2kggg0z_test.go:40:23: undefined: Sort

    /tmp/tmpd2kggg0z_test.go:41:23: undefined: Sort

    /tmp/tmpd2kggg0z_test.go:42:16: undefined: Filter

    /tmp/tmpd2kggg0z_test.go:43:23: undefined: Sort

    /tmp/tmpd2kggg0z_test.go:44:23: undefined: Sort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073935
- exit_code: 1
  program: "package sorted_list_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\
    \n)\n\n// Write a function that accepts a list of strings as a parameter,\n//\
    \ deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ list with a sorted order,\n// The list is always a list of strings and never\
    \ a list of numbers,\n// and it may contain duplicates.\n// The order of the list\
    \ should be ascending by length of each word, and you\n// should return the list\
    \ sorted by that rule.\n// If two words have the same length, sort the list alphabetically.\n\
    // The function should return a list of strings in sorted order.\n// You may assume\
    \ that all words will have the same length.\n// For example:\n// >>> list_sort([]string{\"\
    aa\", \"a\", \"aaa\"})\n// []string{\"aa\"}\n// >>> list_sort([]string{\"ab\"\
    , \"a\", \"aaa\", \"cd\"})\n// []string{\"ab\", \"cd\"}\nfunc sorted_list_sum(lst\
    \ []string) []string {\n    if len(lst) == 0 {\n        return []string{}\n  \
    \  }\n    result := make([]string, 0)\n    cache := make(map[int][]string)\n \
    \   for _, v := range lst {\n        if _, ok := cache[len(v)]; !ok {\n      \
    \      cache[len(v)] = []string{v}\n        } else {\n            cache[len(v)]\
    \ = append(cache[len(v)], v)\n        }\n    }\n    for k, v := range cache {\n\
    \        if k % 2 == 0 {\n            result = append(result, v...)\n        }\n\
    \    }\n    return result\n}\n\nfunc TestSorted_List_Sum(t *testing.T) {\n  candidate\
    \ := sorted_list_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]string{\"\
    aa\", \"a\", \"aaa\"}), expected: []string{\"aa\"} },\n     { actual: candidate([]string{\"\
    school\", \"AI\", \"asdf\", \"b\"}), expected: []string{\"AI\", \"asdf\", \"school\"\
    } },\n     { actual: candidate([]string{\"d\", \"b\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"d\", \"dcba\", \"abcd\",\
    \ \"a\"}), expected: []string{\"abcd\", \"dcba\"} },\n     { actual: candidate([]string{\"\
    AI\", \"ai\", \"au\"}), expected: []string{\"AI\", \"ai\", \"au\"} },\n     {\
    \ actual: candidate([]string{\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"}), expected:\
    \ []string{} },\n     { actual: candidate([]string{\"aaaa\", \"bbbb\", \"dd\"\
    , \"cc\"}), expected: []string{\"cc\", \"dd\", \"aaaa\", \"bbbb\"} },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSorted_List_Sum (0.00s)\n    --- FAIL: TestSorted_List_Sum/test_num__1\
    \ (0.00s)\n        tmpm8uf4kbb_test.go:63: expected '[AI asdf school]', got '[school\
    \ AI asdf]'\n    --- FAIL: TestSorted_List_Sum/test_num__3 (0.00s)\n        tmpm8uf4kbb_test.go:63:\
    \ expected '[abcd dcba]', got '[dcba abcd]'\n    --- FAIL: TestSorted_List_Sum/test_num__6\
    \ (0.00s)\n        tmpm8uf4kbb_test.go:63: expected '[cc dd aaaa bbbb]', got '[aaaa\
    \ bbbb dd cc]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073935
