name: HumanEval_104_unique_digits
language: go_test.go
prompt: "package unique_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given a list of positive integers x. return a sorted list of all \n// elements\
  \ that hasn't any even digit.\n// Note: Returned list should be sorted in increasing\
  \ order.\n// For example:\n// >>> unique_digits([]int{15, 33, 1422, 1})\n// []int{1,\
  \ 15, 33}\n// >>> unique_digits([]int{152, 323, 1422, 10})\n// PATCH list\nfunc\
  \ unique_digits(x []int) []int {\n"
tests: "func TestUnique_Digits(t *testing.T) {\n  candidate := unique_digits\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate([]int{15, 33, 1422, 1}), expected: []int{1,\
  \ 15, 33} },\n     { actual: candidate([]int{152, 323, 1422, 10}), expected: []int{}\
  \ },\n     { actual: candidate([]int{12345, 2033, 111, 151}), expected: []int{111,\
  \ 151} },\n     { actual: candidate([]int{135, 103, 31}), expected: []int{31, 135}\
  \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\"\
  , i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    // Write your solution here\n    return nil\n}\n", "    list :=\
    \ []int{}\n    for _, value := range x {\n        if (hasEvenDigit(value)) {\n\
    \            list = append(list, value)\n        }\n    }\n    return list\n}\n",
  "    results := []int{}\n    for _, v := range x {\n        if hasEvenDigit(v) {\n\
    \            continue\n        }\n        results = append(results, v)\n    }\n\
    \    return results\n}\n", "    // TODO\n    return []int{}\n}\n", "    fmt.Println(\"\
    Given list: \", x)\n    ret := []int{}\n    s := \"\"\n    for _, i := range x\
    \ {\n        s = fmt.Sprintf(\"%d\", i)\n        if string(s[len(s)-1]) == \"\
    2\" ||\n           string(s[len(s)-1]) == \"4\" ||\n           string(s[len(s)-1])\
    \ == \"6\" ||\n           string(s[len(s)-1]) == \"8\" {\n            continue\n\
    \        }\n        ret = append(ret, i)\n    }\n    fmt.Println(\"Return list:\
    \ \", ret)\n    return ret\n}\n", "    m := make(map[int]int)\n    for _, v :=\
    \ range x {\n        if odd(v) {\n            m[v] = 1\n        }\n    }\n   \
    \ r := make([]int, len(m))\n    i := 0\n    for k, _ := range m {\n        r[i]\
    \ = k\n        i++\n    }\n    return r\n}\n", "    if len(x) == 0 {\n       \
    \ return x\n    }\n    for i, v := range x {\n        for v > 0 {\n          \
    \  if v % 2 == 0 {\n                x = append(x[:i], x[i+1:]...)\n          \
    \      break\n            }\n            v /= 10\n        }\n    }\n    return\
    \ x\n}\n", "    var result []int\n    for _,v := range x {\n        if !is_even_digits(v)\
    \ {\n            result = append(result, v)\n        }\n    }\n    return result\n\
    }\n", "    y := []int{}\n    for _, v := range x {\n        t := v\n        for\
    \ t != 0 {\n            if t % 2 == 0 {\n                y = append(y, v)\n  \
    \              break\n            }\n            t /= 10\n        }\n    }\n \
    \   return y\n}\n", "    if x == nil {\n        return nil\n    }\n    set :=\
    \ make(map[int]int)\n    result := make([]int, 0)\n    for _,v := range x {\n\
    \        if isContain(v) {\n            set[v] = v\n        }\n    }\n    for\
    \ _,v := range set {\n        result = append(result, v)\n    }\n    return result\n\
    }\n", "    if len(x) == 0 {\n        return []int{}\n    }\n    var y []int\n\
    \    // check each int in x\n    for _, i := range x {\n        j := i\n     \
    \   // check each digit\n        for j > 0 {\n            // even digit\n    \
    \        if j % 2 == 0 {\n                break\n            }\n            j\
    \ /= 10\n        }\n        // zero after last digit\n        if j == 0 {\n  \
    \          y = append(y, i)\n        }\n    }\n    return y\n}\n", "    var result\
    \ []int\n    for _, e := range x {\n        if !hasEvenDigit(e) {\n          \
    \  result = append(result, e)\n        }\n    }\n    //result = sort.Ints(result)\n\
    \    return result\n}\n", "    var r []int\n    for _,v := range x {\n       \
    \ for v != 0 {\n            if v % 2 == 0 {\n                break\n         \
    \   }\n            v /= 10\n        }\n        if v == 0 {\n            r = append(r,\
    \ v)\n        }\n    }\n    return r\n}\n", "    var res []int\n    for _, n :=\
    \ range x {\n        if !hasEvenDigit(n) {\n            res = append(res, n)\n\
    \        }\n    }\n    return res\n}\n", "    m := make(map[int]bool)\n    r :=\
    \ make([]int, 0)\n    for _, v := range x {\n        t := v\n        f := true\n\
    \        for t > 0 {\n            if t % 2 == 0 {\n                f = false\n\
    \                break\n            }\n            t /= 10\n        }\n      \
    \  if f {\n            m[v] = true\n        }\n    }\n    for k, _ := range m\
    \ {\n        r = append(r, k)\n    }\n    return r\n}\n", "    var r []int\n \
    \   for _, v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        r = append(r, v)\n    }\n    return r\n}\n", "    ret := []int{}\n\
    \    for _,v := range x {\n        if has_even_digit(v) {\n            continue\n\
    \        }\n        ret = append(ret, v)\n    }\n    return ret\n}\n", "    var\
    \ r []int\n    for _, v := range x {\n        if isUnique(v) {\n            r\
    \ = append(r, v)\n        }\n    }\n    return r\n}\n", "    unique := make([]int,\
    \ len(x))\n    count := 0\n    // change to range x\n    for i := 0; i < len(x);\
    \ i++ {\n        isUnique := true\n        // change to range x[i] to loop over\
    \ each digit\n        for _, digit := range x[i] {\n            // replace ==\
    \ 0 with % 2 == 0\n            if digit % 2 == 0 {\n                isUnique =\
    \ false\n                break\n            }\n        }\n        if isUnique\
    \ {\n            unique[count] = x[i]\n            count++\n        }\n    }\n\
    \    return unique[:count]\n}\n", "    // write your code here\n    return x\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
