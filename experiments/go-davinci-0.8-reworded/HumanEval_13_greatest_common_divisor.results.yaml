language: go_test.go
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    if a < b {\n        a, b = b, a\n   \
    \ }\n    for a % b != 0 {\n        a, b = b, a % b\n    }\n    return b\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073783
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Write your\
    \ code here\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp16lg4q1u_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp16lg4q1u_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp16lg4q1u_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp16lg4q1u_test.go:34:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    for b != 0 {\n        a, b = b, a % b\n\
    \    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        a, b = b, a\n    }\n    for a != 0 {\n        a, b = b % a, a\n    }\n\
    \    return b\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for b != 0 {\n        a, b = b, a % b\n    }\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n\tif a % b == 0\
    \ {\n\t\treturn b\n\t}\n\treturn greatest_common_divisor(b, a % b)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for i := b;\
    \ i > 0; i-- {\n        if a % i == 0 && b % i == 0 {\n            return i\n\
    \        }\n    }\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Fill in\
    \ your code here\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpak7_9bof_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpak7_9bof_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpak7_9bof_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpak7_9bof_test.go:34:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    //for ; a %\
    \ b != 0; {\n    //    a, b = b, a % b\n    //}\n    for b != 0 {\n        a,\
    \ b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        a, b = b, a\n    }\n    for a != 0 {\n        b, a = a, b % a\n    }\n\
    \    return b\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for a != b\
    \ {\n        if a > b {\n            a -= b\n        } else {\n            b -=\
    \ a\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    if a % b == 0 {\n        return b\n    }\n  \
    \  return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073783
- exit_code: 2
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var min, max\
    \ int\n    if a <= b {\n        min = a\n        max = b\n    } else {\n     \
    \   min = b\n        max = a\n    }\n    for i := 1; i <= min; i++ {\n       \
    \ if min % i == 0 && max % i == 0 {\n            gcd := i\n        }\n    }\n\
    \    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwym8mpz4_test.go:24:13: gcd declared but not used

    /tmp/tmpwym8mpz4_test.go:27:12: undefined: gcd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    for b != 0 {\n        a, b = b, a % b\n\
    \    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073783
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // TODO: Implement\
    \ me!\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n \
    \ candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpndx5_dk5_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpndx5_dk5_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpndx5_dk5_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpndx5_dk5_test.go:34:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var c int\n\
    \    for b != 0 {\n        c = a % b\n        a = b\n        b = c\n    }\n  \
    \  return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.007s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a ==\
    \ b {\n        return a\n    }\n    if a == 1 || b == 1 {\n        return 1\n\
    \    }\n    if a % 2 == 0 && b % 2 == 0 {\n        return 2 * greatest_common_divisor(a\
    \ / 2, b / 2)\n    }\n    if a % 2 == 0 {\n        return greatest_common_divisor(a\
    \ / 2, b)\n    }\n    if b % 2 == 0 {\n        return greatest_common_divisor(a,\
    \ b / 2)\n    }\n    if a > b {\n        return greatest_common_divisor((a - b)\
    \ / 2, b)\n    }\n    return greatest_common_divisor(a, (b - a) / 2)\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.008s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a <= 0 ||\
    \ b <= 0 {\n        return 0\n    }\n    if a > b {\n        return gcd(a, b)\n\
    \    } else {\n        return gcd(b, a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpgwi5_d7u_test.go:18:16: undefined: gcd

    /tmp/tmpgwi5_d7u_test.go:20:16: undefined: gcd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 1\n    }\n\n    if a > b {\n        for i := b; i >\
    \ 0; i-- {\n            if b % i == 0 && a % i == 0 {\n                return\
    \ i\n            }\n        }\n    } else {\n        for i := a; i > 0; i-- {\n\
    \            if b % i == 0 && a % i == 0 {\n                return i\n       \
    \     }\n        }\n    }\n\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n      \
    \  return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a % b ==\
    \ 0 {\n        return b\n    }\n    if b % a == 0 {\n        return a\n    }\n\
    \    if a > b {\n        return greatest_common_divisor(a % b, b)\n    }\n   \
    \ return greatest_common_divisor(a, b % a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var c int\n\
    \n    for b != 0 {\n        c = a % b\n        a = b\n        b = c\n    }\n\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 2
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // we need\
    \ a != 0 && b != 0\n    if a == 0 {\n        return b\n    }\n    if b == 0 {\n\
    \        return a\n    }\n    // we can assume now that both are != 0\n    if\
    \ a == b {\n        return a\n    }\n    // we can assume now that a > b\n   \
    \ if a < b {\n        a, b = b, a\n    }\n    // we can assume now that a > b\
    \ && a != b\n    for {\n        // we can assume now that a > b && a != b && b\
    \ != 0\n        q := a / b\n        r := a % b\n        if r == 0 {\n        \
    \    return b\n        }\n        a = b\n        b = r\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmphphwqtnl_test.go:32:9: q declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073782
- exit_code: 2
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var gcd int\n\
    \    a, b = qsort(a, b)\n    if a % b == 0 {\n        gcd = b\n    } else {\n\
    \        gcd = greatest_common_divisor(b, a % b)\n    }\n    return gcd\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp9wljd6qi_test.go:15:12: undefined: qsort

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073782
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a <= 0 ||\
    \ b <= 0 {\n        panic(\"Invalid input\")\n    }\n    var gcd int\n    if a\
    \ > b {\n        gcd = a\n    } else {\n        gcd = b\n    }\n    for ; gcd\
    \ > 1; gcd-- {\n        if a % gcd == 0 && b % gcd == 0 {\n            break\n\
    \        }\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073783
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return 1\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmpfs_a3dcq_test.go:33:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073784
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    for a\
    \ != b {\n        if a > b {\n            a = a - b\n        } else {\n      \
    \      b = b - a\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073784
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    r := a % b\n\
    \    if r == 0 {\n        return b\n    }\n    return greatest_common_divisor(b,\
    \ r)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073784
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    for b % a != 0 {\n \
    \       b, a = a, b % a\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073784
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var max int\n\
    \    if a > b {\n        max = a\n    } else {\n        max = b\n    }\n    for\
    \ i := max; i > 0; i-- {\n        if a % i == 0 && b % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n\n    if b == 0 {\n    \
    \    return a\n    } else {\n        return greatest_common_divisor(b, a % b)\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return a\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmprawvmzgn_test.go:33: expected '%!s(int=1)', got '%!s(int=3)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmprawvmzgn_test.go:33:\
    \ expected '%!s(int=5)', got '%!s(int=10)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmprawvmzgn_test.go:33: expected '%!s(int=7)', got '%!s(int=49)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmprawvmzgn_test.go:33:\
    \ expected '%!s(int=12)', got '%!s(int=144)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.007s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // TODO: implement\
    \ the function\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmp1appb0ec_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmp1appb0ec_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmp1appb0ec_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmp1appb0ec_test.go:34:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return 0\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpm2gy7m12_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpm2gy7m12_test.go:33:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpm2gy7m12_test.go:33: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpm2gy7m12_test.go:33:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    fmt.Printf(\"\
    a: %d, b: %d\\n\", a, b)\n    if a % b == 0 {\n        return b\n    } else {\n\
    \        return greatest_common_divisor(b, a % b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for b != 0 {\n        a, b = b, a % b\n    }\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var gcd int\n\
    \    var min int\n    if a < b {\n        min = a\n    } else {\n        min =\
    \ b\n    }\n    for i := 1; i <= min; i++ {\n        if a % i == 0 && b % i ==\
    \ 0 {\n            gcd = i\n        }\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var r, a1,\
    \ b1 int\n    a1 = a\n    b1 = b\n    if a < b {\n        a1 = b\n        b1 =\
    \ a\n    }\n    for b1 != 0 {\n        r = a1 % b1\n        a1 = b1\n        b1\
    \ = r\n    }\n    return a1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    for a != b {\n        if a > b {\n  \
    \          a -= b\n        } else {\n            b -= a\n        }\n    }\n  \
    \  return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073697
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    var result int\n    result = a % b\n    if result\
    \ == 0 {\n        return b\n    }\n    return greatest_common_divisor(b, result)\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var step int\n\
    \    if a > b {\n        step = b\n    } else {\n        step = a\n    }\n   \
    \ for i := step; i > 0; i-- {\n        if a % i == 0 && b % i == 0 {\n       \
    \     return i\n        }\n    }\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    if a < b {\n        return greatest_common_divisor(b,\
    \ a)\n    }\n    if a % b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b,\
    \ a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for b != 0 {\n        a, b = b, a % b\n    }\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n\tif b == 0 {\n\
    \t\treturn a\n\t}\n\treturn greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n      \
    \  return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return -1\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpxxdc925d_test.go:33: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpxxdc925d_test.go:33:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpxxdc925d_test.go:33: expected '%!s(int=7)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpxxdc925d_test.go:33:\
    \ expected '%!s(int=12)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n\n    if a % b == 0 {\n\
    \        return b\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b > a {\n\
    \        a, b = b, a\n    }\n    if a % b == 0 {\n        return b\n    }\n  \
    \  return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Naive algorithm:\
    \ Euclid's algorithm\n    // Ref: https://en.wikipedia.org/wiki/Euclidean_algorithm#Implementations\n\
    \    if a < b {\n        a, b = b, a\n    }\n    for a % b != 0 {\n        a,\
    \ b = b, a % b\n    }\n    return b\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var gcd int\n\
    \    if a < b {\n        gcd = a\n    } else {\n        gcd = b\n    }\n    for\
    \ i := gcd; i > 0; i-- {\n        if a % i == 0 && b % i == 0 {\n            return\
    \ i\n        }\n    }\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var t int\n\
    \    for b != 0 {\n        t = b\n        b = a % b\n        a = t\n    }\n  \
    \  return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var big, small\
    \ int\n    if a > b {\n        big = a\n        small = b\n    } else {\n    \
    \    big = b\n        small = a\n    }\n    if big % small == 0 {\n        return\
    \ small\n    } else {\n        return greatest_common_divisor(big % small, small)\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    if a == b {\n        return a\n    }\n\
    \    if a > b {\n        return greatest_common_divisor(a - b, b)\n    }\n   \
    \ return greatest_common_divisor(a, b - a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var (\n   \
    \     r = 0\n        i = 0\n    )\n    if a > b {\n        r = a\n        i =\
    \ b\n    } else {\n        r = b\n        i = a\n    }\n    for {\n        if\
    \ r % i == 0 {\n            return i\n        }\n        r, i = i, r % i\n   \
    \ }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073786
- exit_code: 2
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        return greatest_common_divisor_helper(a, b)\n    } else {\n        return\
    \ greatest_common_divisor_helper(b, a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpzjagnept_test.go:15:16: undefined: greatest_common_divisor_helper

    /tmp/tmpzjagnept_test.go:17:16: undefined: greatest_common_divisor_helper

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073786
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var min int\n\
    \    var max int\n    if a > b {\n        min = b\n        max = a\n    } else\
    \ {\n        min = a\n        max = b\n    }\n    for i := min; i > 0; i-- {\n\
    \        if min % i == 0 && max % i == 0 {\n            return i\n        }\n\
    \    }\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073786
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    r := a % b\n\
    \    for r != 0 {\n        a = b\n        b = r\n        r = a % b\n    }\n  \
    \  return b\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073786
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for a != b\
    \ {\n        if a > b {\n            a -= b\n        } else {\n            b -=\
    \ a\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    gcd := 1\n\
    \    for i := 1; i <= a && i <= b; i++ {\n        if a % i == 0 && b % i == 0\
    \ {\n            gcd = i\n        }\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return 0\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpm2gy7m12_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpm2gy7m12_test.go:33:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpm2gy7m12_test.go:33: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpm2gy7m12_test.go:33:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var x, y int\n\
    \    var divisor int\n    x = a\n    y = b\n    for x%y != 0 {\n        divisor\
    \ = x % y\n        x = y\n        y = divisor\n    }\n    return y\n}\n\nfunc\
    \ TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        t := b\n        b = a % b\n        a = t\n    }\n    return a\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        a, b = b, a\n    }\n    for b > 0 {\n        a, b = b, a % b\n    }\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var temp_a\
    \ int\n    var temp_b int\n    var remainder int\n    if a < b {\n        temp_a\
    \ = a\n        temp_b = b\n    } else {\n        temp_a = b\n        temp_b =\
    \ a\n    }\n    remainder = temp_b % temp_a\n    if remainder != 0 {\n       \
    \ return greatest_common_divisor(temp_a, remainder)\n    } else {\n        return\
    \ temp_a\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a % b ==\
    \ 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        t := b\n        b = a % b\n        a = t\n    }\n    return a\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        tmp := a % b\n        a = b\n        b = tmp\n    }\n    return a\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.010s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var a_remainder\
    \ int\n    var b_remainder int\n    var d int\n\n    if a == 0 {\n        return\
    \ b\n    } else if b == 0 {\n        return a\n    } else {\n        a_remainder\
    \ = a % b\n        b_remainder = b % a\n        if a_remainder == 0 {\n      \
    \      d = b\n        } else if b_remainder == 0 {\n            d = a\n      \
    \  } else {\n            d = greatest_common_divisor(a_remainder, b_remainder)\n\
    \        }\n    }\n    return d\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n      \
    \  return a\n    }\n    if a%b == 0 {\n        return b\n    }\n    return greatest_common_divisor(b,\
    \ a%b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    remainder := a % b\n    if remainder == 0 {\n\
    \        return b\n    }\n    return greatest_common_divisor(b, remainder)\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for a != b\
    \ {\n        if a > b {\n            a -= b\n        } else {\n            b -=\
    \ a\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // your code\
    \ here\n    return -1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpliptwpur_test.go:34: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpliptwpur_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpliptwpur_test.go:34: expected '%!s(int=7)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpliptwpur_test.go:34:\
    \ expected '%!s(int=12)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Turn in\
    \ non-negative integers\n    if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n\
    \        b = -b\n    }\n    // Swap a and b if a < b\n    if a < b {\n       \
    \ a, b = b, a\n    }\n    r := a % b\n    for r != 0 {\n        a, b = b, r\n\
    \        r = a % b\n    }\n    return b\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for {\n   \
    \     if a < b {\n            a, b = b, a\n        }\n\n        if a % b == 0\
    \ {\n            return b\n        }\n\n        a, b = b, a % b\n    }\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 0\n    }\n    var gcd int\n    if a > b {\n       \
    \ gcd = b\n    } else {\n        gcd = a\n    }\n    for gcd > 1 {\n        if\
    \ a % gcd == 0 && b % gcd == 0 {\n            return gcd\n        }\n        gcd--\n\
    \    }\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for a % b !=\
    \ 0 {\n        a, b = b, a % b\n    }\n    return b\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return 1\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmpfs_a3dcq_test.go:33:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073784
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n      \
    \  return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var max, min\
    \ int\n\n    if a > b {\n        max = a\n        min = b\n    } else {\n    \
    \    max = b\n        min = a\n    }\n\n    rest := max % min\n    if rest ==\
    \ 0 {\n        return min\n    } else {\n        return greatest_common_divisor(min,\
    \ rest)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for b != 0 {\n        a, b = b, a % b\n    }\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var gcd int\
    \ = 1\n    for i := 1; i <= a && i <= b; i++ {\n        if a % i == 0 && b % i\
    \ == 0 {\n            gcd = i\n        }\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    if a == 0 {\n      \
    \  return b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return 1\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmpfs_a3dcq_test.go:33:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073784
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var result\
    \ int = 1\n    for i := 1; i <= a && i <= b; i++ {\n        if a % i == 0 && b\
    \ % i == 0 {\n            result = i\n        }\n    }\n    return result\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a % b ==\
    \ 0 {\n        return b\n    } else {\n        return greatest_common_divisor(b,\
    \ a % b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073725
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        t := b\n        b = a % b\n        a = t\n    }\n    return a\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var (\n   \
    \     larger int\n        smaller int\n        remainder int\n    )\n\n    if\
    \ a > b {\n        larger = a\n        smaller = b\n    } else {\n        larger\
    \ = b\n        smaller = a\n    }\n\n    for remainder = larger % smaller; remainder\
    \ != 0; remainder = larger % smaller {\n        larger = smaller\n        smaller\
    \ = remainder\n    }\n\n    return smaller\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n      \
    \  return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    } else if b == 0 {\n        return a\n    } else if a >\
    \ b {\n        return greatest_common_divisor(a % b, b)\n    } else {\n      \
    \  return greatest_common_divisor(a, b % a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return -1\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpxxdc925d_test.go:33: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpxxdc925d_test.go:33:\
    \ expected '%!s(int=5)', got '%!s(int=-1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpxxdc925d_test.go:33: expected '%!s(int=7)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpxxdc925d_test.go:33:\
    \ expected '%!s(int=12)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        t := b\n        b = a % b\n        a = t\n    }\n    return a\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    i := 1\n  \
    \  if a < 0 {\n        a = -a\n    }\n    if b < 0 {\n        b = -b\n    }\n\
    \    if a < b {\n        a, b = b, a\n    }\n    for {\n        if a%i == 0 &&\
    \ b%i == 0 {\n            return i\n        }\n        i++\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmp5lp56mg1_test.go:48: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmp5lp56mg1_test.go:48:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmp5lp56mg1_test.go:48: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        tmp := a\n        a = b\n        b = tmp\n    }\n    for b != 0 {\n \
    \       tmp := a % b\n        a = b\n        b = tmp\n    }\n    return a\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    gcd := 0\n\
    \    for i := 1; i <= a && i <= b; i++ {\n        if a % i == 0 && b % i == 0\
    \ {\n            gcd = i\n        }\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return 1\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmpfs_a3dcq_test.go:33:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073784
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    } else if b == 0 {\n        return a\n    } else if a >\
    \ b {\n        a = a % b\n        return greatest_common_divisor(a, b)\n    }\
    \ else {\n        b = b % a\n        return greatest_common_divisor(a, b)\n  \
    \  }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073789
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 2
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        return gcd(a, b)\n    } else {\n        return gcd(b, a)\n    }\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpua1k5ou3_test.go:15:16: undefined: gcd

    /tmp/tmpua1k5ou3_test.go:17:16: undefined: gcd

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        c := a % b\n        if c == 0 {\n            return b\n        } else\
    \ {\n            return greatest_common_divisor(b, c)\n        }\n    } else {\n\
    \        c := b % a\n        if c == 0 {\n            return a\n        } else\
    \ {\n            return greatest_common_divisor(a, c)\n        }\n    }\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073790
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return 1\n    }\n    return b == 0 ? a : greatest_common_divisor(b,\
    \ a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5x9_7tpv_test.go:17:19: illegal character U+003F ''?''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660073789
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    switch a >\
    \ b {\n    case true:\n        if a % b == 0 {\n            return b\n       \
    \ } else {\n            return greatest_common_divisor(b, a % b)\n        }\n\
    \    case false:\n        if b % a == 0 {\n            return a\n        } else\
    \ {\n            return greatest_common_divisor(a, b % a)\n        }\n    }\n\
    \    return -1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        a, b = b, a\n    }\n    var result int\n    for i := a; i > 0; i-- {\n\
    \        if a % i == 0 && b % i == 0 {\n            result = i\n            break\n\
    \        }\n    }\n    return result\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a % b ==\
    \ 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n\tfor b != 0 {\n\
    \t\tt := b\n\t\tb = a % b\n\t\ta = t\n\t}\n\treturn a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    for b != 0 {\n     \
    \   remainder := a % b\n        a = b\n        b = remainder\n    }\n    return\
    \ a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        remainder := a % b\n        a = b\n        b = remainder\n    }\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var gcd int\
    \ = 0\n    if a % b == 0 {\n        gcd = b\n    } else {\n        gcd = greatest_common_divisor(b,\
    \ a % b)\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    return greatest_common_divisor(b % a, a)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return 0\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpm2gy7m12_test.go:33: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpm2gy7m12_test.go:33:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpm2gy7m12_test.go:33: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpm2gy7m12_test.go:33:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073785
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // The greatest\
    \ common divisor of two integers a and b is the largest positive integer\n   \
    \ // that divides both a and b without remainder\n    // 25 = 5 * 5\n    // 15\
    \ = 3 * 5\n    // Therefor the greatest common divisor is 5\n    return 0\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpoh977fvv_test.go:38: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpoh977fvv_test.go:38:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpoh977fvv_test.go:38: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpoh977fvv_test.go:38:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 ||\
    \ b == 0 {\n        return a\n    }\n\n    if a > b {\n        for b != 0 {\n\
    \            a, b = b, a % b\n        }\n        return a\n    } else {\n    \
    \    for a != 0 {\n            b, a = a, b % a\n        }\n        return b\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for a != b\
    \ {\n        if a > b {\n            a -= b\n        } else {\n            b -=\
    \ a\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // If a is\
    \ less than b, swap a and b\n    if a < b {\n        a, b = b, a\n    }\n\n  \
    \  // Loop while b is not 0\n    for b != 0 {\n        // Set a to remainder of\
    \ a / b\n        a, b = b, a % b\n    }\n\n    // Return a\n    return a\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        temp := b\n        b = a % b\n        a = temp\n    }\n    return\
    \ a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    } else if b == 0 {\n        return a\n    } else if a >\
    \ b {\n        return greatest_common_divisor(a - b, b)\n    } else {\n      \
    \  return greatest_common_divisor(a, b - a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a % b ==\
    \ 0 {\n        return b\n    }\n    return greatest_common_divisor(b, a % b)\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n\n    if a % b == 0 {\n\
    \        return b\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    if a ==\
    \ b {\n        return a\n    }\n    if a == 1 || b == 1 {\n        return 1\n\
    \    }\n    if a < b {\n        return greatest_common_divisor(a, b - a)\n   \
    \ }\n    return greatest_common_divisor(a - b, b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // TODO\n \
    \   return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmphz9h39uo_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmphz9h39uo_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmphz9h39uo_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmphz9h39uo_test.go:34:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var larger_int,\
    \ smaller_int int\n    if a > b {\n        larger_int = a\n        smaller_int\
    \ = b\n    } else {\n        larger_int = b\n        smaller_int = a\n    }\n\
    \    for {\n        if larger_int % smaller_int == 0 {\n            return smaller_int\n\
    \        }\n        larger_int, smaller_int = smaller_int, larger_int % smaller_int\n\
    \    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate :=\
    \ greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, 7),\
    \ expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     { actual:\
    \ candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60), expected:\
    \ 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        tmp := a % b\n        a = b\n        b = tmp\n    }\n    return a\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.010s\n"
  timestamp: 1660073788
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // int div_a\
    \ = 0\n    // int div_b = 0\n    for i := 0; i < b; i++ {\n        if b % i ==\
    \ 0 {\n            // div_b = i\n        }\n    }\n    // println(div_b)\n   \
    \ return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\npanic: runtime error: integer\
    \ divide by zero [recovered]\n\tpanic: runtime error: integer divide by zero\n\
    \ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x5028c0, 0x5f19a0})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.greatest_common_divisor(...)\n\t/tmp/tmp85xko_u1_test.go:17\n\
    command-line-arguments_test.TestGreatest_Common_Divisor(0x0?)\n\t/tmp/tmp85xko_u1_test.go:32\
    \ +0x2bb\ntesting.tRunner(0xc0000da340, 0x527f70)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073790
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    return 1\n\
    }\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmpfs_a3dcq_test.go:33:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpfs_a3dcq_test.go:33: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073784
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // write you\
    \ code here\n    if a > b {\n        a, b = b, a\n    }\n    for b != 0 {\n  \
    \      a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a > b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    for i := a; i > 0; i--\
    \ {\n        if a % i == 0 && b % i == 0 {\n            return i\n        }\n\
    \    }\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n\
    \  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        t := b\n        b = a % b\n        a = t\n    }\n    return a\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    } else if b == 0 {\n        return a\n    } else if a >\
    \ b {\n        return greatest_common_divisor(a - b, b)\n    } else {\n      \
    \  return greatest_common_divisor(a, b - a)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    } else if b == 0 {\n        return a\n    } else if a >\
    \ b {\n        a = a % b\n        return greatest_common_divisor(a, b)\n    }\
    \ else {\n        b = b % a\n        return greatest_common_divisor(a, b)\n  \
    \  }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073789
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for i := a;\
    \ i > 0; i-- {\n        if a % i == 0 && b % i == 0 {\n            return i\n\
    \        }\n    }\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for b != 0\
    \ {\n        a, b = b, a % b\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for i := 1;\
    \ i <= a && i <= b; i++ {\n        if a % i == 0 && b % i == 0 {\n           \
    \ return i\n        }\n    }\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmp_xopr6fa_test.go:38: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmp_xopr6fa_test.go:38:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmp_xopr6fa_test.go:38: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    }\n    if b == 0 {\n        return a\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        return greatest_common_divisor(b, a)\n    }\n    if b == 0 {\n      \
    \  return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    for b != 0 {\n        a, b = b, a % b\n    }\n\
    \    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Assert a\
    \ > b\n    if a < b {\n        tmp := a\n        a = b\n        b = tmp\n    }\n\
    \n    for {\n        r := a % b\n        if r == 0 {\n            return b\n \
    \       }\n\n        a = b\n        b = r\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a == 0 {\n\
    \        return b\n    } else if b == 0 {\n        return a\n    } else if a ==\
    \ b {\n        return a\n    } else if a > b {\n        return greatest_common_divisor(a\
    \ - b, b)\n    } else {\n        return greatest_common_divisor(a, b - a)\n  \
    \  }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var gcd int\
    \ = 1\n    for i := 1; i <= a && i <= b; i++ {\n        if a % i == 0 && b % i\
    \ == 0 {\n            gcd = i\n        }\n    }\n    return gcd\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073788
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var t int\n\
    \    for b != 0 {\n        t = b\n        b = a % b\n        a = t\n    }\n  \
    \  return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073785
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    tmp := 0\n\
    \    for a > 0 {\n        tmp = a\n        a = b % a\n        b = tmp\n    }\n\
    \    return b\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // corner case,\
    \ a and b are both zero\n    if a == 0 && b == 0 {\n        return 0\n    }\n\n\
    \    // algorithm\n    if a < b {\n        a, b = b, a\n    }\n    for b != 0\
    \ {\n        r := a % b\n        a, b = b, r\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    min := a\n\
    \    if b < a {\n        min = b\n    }\n    for i := min; i > 0; i-- {\n    \
    \    if a % i == 0 && b % i == 0 {\n            return i\n        }\n    }\n \
    \   return 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    } else {\n        return greatest_common_divisor(b, a %\
    \ b)\n    }\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073669
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Do not forget\
    \ to use a recursive solution\n    if b == 0 {\n        return a\n    }\n    return\
    \ greatest_common_divisor(b, a % b)\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // TODO\n \
    \   return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate\
    \ := greatest_common_divisor\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3,\
    \ 7), expected: 1 },\n     { actual: candidate(10, 15), expected: 5 },\n     {\
    \ actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144, 60),\
    \ expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmphz9h39uo_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmphz9h39uo_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmphz9h39uo_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmphz9h39uo_test.go:34:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073790
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if b == 0 {\n\
    \        return a\n    }\n    return greatest_common_divisor(b, a % b)\n}\n\n\
    func TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073669
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // Implement\
    \ your code here\n    return 0\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__0\
    \ (0.00s)\n        tmpzswg_8eg_test.go:34: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__1 (0.00s)\n        tmpzswg_8eg_test.go:34:\
    \ expected '%!s(int=5)', got '%!s(int=0)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__2\
    \ (0.00s)\n        tmpzswg_8eg_test.go:34: expected '%!s(int=7)', got '%!s(int=0)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__3 (0.00s)\n        tmpzswg_8eg_test.go:34:\
    \ expected '%!s(int=12)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    d := 1\n  \
    \  for i := 2; i <= a; i++ {\n        if a % i == 0 && b % i == 0 {\n        \
    \    d = i\n        }\n    }\n    return d\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    // replace\
    \ this for solution\n    return 1\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpn5qejjni_test.go:34: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmpn5qejjni_test.go:34:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpn5qejjni_test.go:34: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    if a < b {\n\
    \        a, b = b, a\n    }\n    return a % b\n}\n\nfunc TestGreatest_Common_Divisor(t\
    \ *testing.T) {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(3, 7), expected: 1 },\n     { actual: candidate(10,\
    \ 15), expected: 5 },\n     { actual: candidate(49, 14), expected: 7 },\n    \
    \ { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc := range\
    \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\
    \t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\
    \t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\
    \t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmp5gx2icus_test.go:36: expected '%!s(int=12)', got '%!s(int=24)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    var result\
    \ = 1\n\n    if a > b {\n        a, b = b, a\n    }\n\n    for i := 1; i <= a;\
    \ i++ {\n        if a % i == 0 && b % i == 0 {\n            result = i\n     \
    \   }\n    }\n\n    return result\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073791
- exit_code: 1
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n\treturn 1\n}\n\
    \nfunc TestGreatest_Common_Divisor(t *testing.T) {\n  candidate := greatest_common_divisor\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(3, 7), expected: 1 },\n     { actual:\
    \ candidate(10, 15), expected: 5 },\n     { actual: candidate(49, 14), expected:\
    \ 7 },\n     { actual: candidate(144, 60), expected: 12 },\n   }\n\n\tfor i, tc\
    \ := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestGreatest_Common_Divisor (0.00s)\n    --- FAIL: TestGreatest_Common_Divisor/test_num__1\
    \ (0.00s)\n        tmpxcujuexn_test.go:33: expected '%!s(int=5)', got '%!s(int=1)'\n\
    \    --- FAIL: TestGreatest_Common_Divisor/test_num__2 (0.00s)\n        tmpxcujuexn_test.go:33:\
    \ expected '%!s(int=7)', got '%!s(int=1)'\n    --- FAIL: TestGreatest_Common_Divisor/test_num__3\
    \ (0.00s)\n        tmpxcujuexn_test.go:33: expected '%!s(int=12)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073791
- exit_code: 0
  program: "package greatest_common_divisor_test\n\nimport (\n    \"testing\"\n  \
    \  \"fmt\"\n)\n\n// Return a greatest common divisor of two integers a and b\n\
    // >>> greatest_common_divisor(3, 5)\n// 1\n// >>> greatest_common_divisor(25,\
    \ 15)\n// 5\nfunc greatest_common_divisor(a int, b int) int {\n    for a != b\
    \ {\n        if a > b {\n            a -= b\n        } else {\n            b -=\
    \ a\n        }\n    }\n    return a\n}\n\nfunc TestGreatest_Common_Divisor(t *testing.T)\
    \ {\n  candidate := greatest_common_divisor\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate(3, 7), expected: 1 },\n     { actual: candidate(10, 15), expected:\
    \ 5 },\n     { actual: candidate(49, 14), expected: 7 },\n     { actual: candidate(144,\
    \ 60), expected: 12 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073783
