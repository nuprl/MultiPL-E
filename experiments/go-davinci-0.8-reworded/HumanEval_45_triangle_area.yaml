name: HumanEval_45_triangle_area
language: go_test.go
prompt: "package triangle_area_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
  \n// Given length of a side and high return area for a triangle.\n// >>> triangle_area(5,\
  \ 3)\n// 7.5\nfunc triangle_area(a int, h int) float64 {\n"
tests: "func TestTriangle_Area(t *testing.T) {\n  candidate := triangle_area\n\ttype\
  \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
  \ := []test{\n     { actual: candidate(5, 3), expected: 7.5 },\n     { actual: candidate(2,\
  \ 2), expected: 2.0 },\n     { actual: candidate(10, 8), expected: 40.0 },\n   }\n\
  \n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
  \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\",\
  \ tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
  \t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var triangle_area float64 = float64(a) * float64(h) / 2\n    return\
    \ triangle_area\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return float64(a * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n",
  "    return float64(a*h)/2\n}\n", "    return float64(a) * float64(h) / 2\n}\n",
  "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a * h) / 2\n\
    }\n", "    return float64(a*h) / 2\n}\n", "    return float64(a) * float64(h)\
    \ / 2\n}\n", "    // TODO: Add your code here!\n    return float64(a * h) / 2\n\
    }\n", "    return float64(a * h) / 2\n}\n", "    return float64(a) * float64(h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "\treturn float64(a\
    \ * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a*h) / 2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a * h) / 2\n}\n", "    return float64(a*h)/2\n}\n",
  "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a) * float64(h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a) *\
    \ float64(h) / 2\n}\n", "\treturn float64(a) * float64(h) / 2\n}\n", "    return\
    \ float64(a) * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n\
    }\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a * h)\
    \ / 2\n}\n", "    return 0.5 * float64(a) * float64(h)\n}\n", "    return 0.5\
    \ * float64(a) * float64(h)\n}\n", "\treturn float64(a) * float64(h) / 2\n}\n",
  "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a) * float64(h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a*h)\
    \ / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return 0.5 * float64(a)\
    \ * float64(h)\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return float64(a * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n",
  "    return float64(a * h) / 2\n}\n", "    area := float64(a * h) / 2.0\n    return\
    \ area\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a * h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return 0.5 * float64(a) * float64(h)\n}\n", "    return 0.5 * float64(a) * float64(h)\n\
    }\n", "    return float64(a * h) / 2\n}\n", "    return float64(a) * float64(h)\
    \ / 2\n}\n", "    return 0.5 * float64(a) * float64(h)\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a*h)/2\n\
    }\n", "    return float64(a*h) / 2\n}\n", "    return float64(a * h / 2)\n}\n",
  "\treturn float64(a) * float64(h) / 2\n}\n", "\treturn float64(a * h) / 2\n}\n",
  "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a) * float64(h)\
    \ / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a * h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a*h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "\treturn float64(a * h) / 2\n}\n", "    return float64(a) *\
    \ float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return\
    \ 0.5 * float64(a) * float64(h)\n}\n", "    return float64(a) * float64(h) / 2\n\
    }\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a * h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return 0.5 * float64(a) * float64(h)\n}\n", "    return float64(a * h) / 2\n\
    }\n", "\treturn float64(a) * float64(h) / 2\n}\n", "    return float64(a) * float64(h)\
    \ / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a * h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a*h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a * h / 2)\n}\n", "\treturn float64(a*h)\
    \ / 2\n}\n", "    return float64(a * h) / 2\n}\n", "\treturn float64(a * h) /\
    \ 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return float64(a * h) /\
    \ 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return float64(a*h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n",
  "    // Your code here.\n    return float64(a * h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return float64(a) * float64(h) / 2\n}\n", "    return float64(a*h) / 2\n}\n",
  "    return float64(a * h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "  \
    \  return 0.5 * float64(a) * float64(h)\n}\n", "    return float64(a * h) / 2\n\
    }\n", "    return float64(a*h) / 2\n}\n", "    //result := 0.5 * float64(a) *\
    \ float64(h)\n    result := 0.5 * float64(a) * float64(h)\n    return result\n\
    }\n", "    return float64(a*h) / 2\n}\n", "    if a <= 0 || h <= 0 {\n       \
    \ return 0\n    }\n    return float64(a*h) / 2\n}\n", "    return float64(a) *\
    \ float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return\
    \ float64(a) * float64(h) / 2\n}\n", "    return float64(a*h)/2\n}\n", "    return\
    \ float64(a * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", " \
    \   return float64(a) * float64(h) / 2\n}\n", "    return float64(a) * float64(h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a*h) / 2\n}\n", "    //a*h/2\n    var ret\
    \ float64 = 0.0\n    ret = float64(a*h) / 2\n    return ret\n}\n", "    return\
    \ float64(a) * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n\
    }\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a) *\
    \ float64(h) / 2\n}\n", "    return float64(a*h) / 2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a*h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return float64(a * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n",
  "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a*h)/2\n}\n",
  "    var triangle float64\n    triangle = float64(a * h) / 2\n    return triangle\n\
    }\n", "    area := float64(a) * float64(h) / 2\n    return area\n}\n", "    return\
    \ float64(a * h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return\
    \ float64(a * h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", " \
    \   return float64(a * h) / 2\n}\n", "    return 0.5 * float64(a) * float64(h)\n\
    }\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a * h)\
    \ / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "\treturn float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return float64(a) * float64(h) / 2\n}\n", "    return 0.5 * float64(a) * float64(h)\n\
    }\n", "    return float64(a) * float64(h) / 2\n}\n", "    return 0.5 * float64(a)\
    \ * float64(h)\n}\n", "\treturn float64(a * h) / 2\n}\n", "    return float64(a)\
    \ * float64(h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "   \
    \ return 0.5 * float64(a) * float64(h)\n}\n", "    return float64(a*h) / 2\n}\n",
  "    return float64(a * h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "  \
    \  return float64(a * h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "  \
    \  return float64(a*h) / 2\n}\n", "    return float64(a * h) / 2\n}\n", "    return\
    \ 0.5 * float64(a) * float64(h)\n}\n", "    if h < 0 || a < 0 {\n        panic(\"\
    Wrong arguments\")\n    }\n    return float64(a*h)/2\n}\n", "    return float64(a\
    \ * h) / 2\n}\n", "    return float64(a*h) / 2\n}\n", "    return float64(a *\
    \ h) / 2\n}\n", "    return float64(a) * float64(h) / 2\n}\n", "    return float64(a*h)\
    \ / 2\n}\n", "    return float64(a * h / 2)\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
