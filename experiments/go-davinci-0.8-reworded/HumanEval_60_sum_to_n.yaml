name: HumanEval_60_sum_to_n
language: go_test.go
prompt: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n//\
  \ 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
  // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n"
tests: "func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
  \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
  \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\t\
  for i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
  \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
  \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\
  \t}\n\t\t})\n\t}\n}\n"
completions: ["    return (n * (n + 1)) / 2\n}\n", "    if n < 1 {\n        return\
    \ 0\n    }\n    return n + sum_to_n(n-1)\n}\n", "    // TODO: Write your sum_to_n\
    \ function, here\n    return 0\n}\n", "    return (n * (n + 1)) / 2\n}\n", " \
    \   return n * (n + 1) / 2\n}\n", "    return n * (n + 1) / 2\n}\n", "    return\
    \ n * (n + 1) / 2\n}\n", "    return n * (n + 1) / 2\n}\n", "    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n", " \
    \   var sum int\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return\
    \ sum\n}\n", "    return (n * (n + 1)) / 2\n}\n", "    return (n + 1) * n / 2\n\
    }\n", "    // Your code here\n    return 1\n}\n", "    return n * (n + 1) / 2\n\
    }\n", "\tif n == 1 {\n\t\treturn 1\n\t}\n\treturn n + sum_to_n(n-1)\n}\n", " \
    \   s := 0\n    for i := 1; i <= n; i++ {\n        s += i\n    }\n    return s\n\
    }\n", "    return n * (n + 1) / 2\n}\n", "    return n * (n + 1) / 2\n}\n", " \
    \   sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return\
    \ sum\n}\n", "    // >>> for i in range(4):\n    // ...     print(i)\n    // ...\n\
    \    // 0\n    // 1\n    // 2\n    // 3\n    // 5\n    // 6\n    // 7\n    //\
    \ 8\n    // 9\n    // >>>\n    var i int = 0\n    var sum int = 0\n    // >>>\
    \ range(4)\n    // range(0, 4)\n    // >>> range(10)\n    // range(0, 10)\n  \
    \  // >>>\n    for i = 0; i < n; i++ {\n        sum += i\n    }\n    return sum\n\
    }\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
