language: go_test.go
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    res := 0\n    for _, elem :=\
    \ range lst {\n        res += int(elem) * int(elem)\n    }\n    return res\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxjcijc_b_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxjcijc_b_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxjcijc_b_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz7e9vdx7_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz7e9vdx7_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpz7e9vdx7_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpz7e9vdx7_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\ntype TestCase\
    \ \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6qyr2hiv_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074869
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, x :=\
    \ range lst {\n        result += int(x + 0.5) * int(x + 0.5)\n    }\n    return\
    \ result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpc6f4zv0w_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpc6f4zv0w_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpc6f4zv0w_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpc6f4zv0w_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpc6f4zv0w_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpc6f4zv0w_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, x := range\
    \ lst {\n        if x > 0 {\n            sum += int(x + 0.5) * int(x + 0.5)\n\
    \        } else {\n            sum += int(x - 0.5) * int(x - 0.5)\n        }\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpa4b2bfyw_test.go:58: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpa4b2bfyw_test.go:58:\
    \ expected '%!s(int=75)', got '%!s(int=62)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v) * int(v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcc3jba92_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcc3jba92_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpcc3jba92_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, val := range\
    \ lst {\n        sum += int(val * val)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo7mqujur_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo7mqujur_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpo7mqujur_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpo7mqujur_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, x :=\
    \ range lst {\n        x = float64(int(x))\n        sum += int(x*x)\n    }\n \
    \   return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp490i0t2u_test.go:55: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp490i0t2u_test.go:55:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp490i0t2u_test.go:55: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res int\n    for _, el :=\
    \ range lst {\n        var i int\n        if el > 0 {\n            i = int(el\
    \ + 0.5)\n        } else {\n            i = int(el - 0.5)\n        }\n       \
    \ res += i * i\n    }\n    return res\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp1ir7_11j_test.go:60: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp1ir7_11j_test.go:60:\
    \ expected '%!s(int=75)', got '%!s(int=62)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, e := range\
    \ lst {\n        sum += int(e * e)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpb7o6qhnu_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpb7o6qhnu_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpb7o6qhnu_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpb7o6qhnu_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, e := range\
    \ lst {\n        sum += int(e) * int(e)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdw_y79fv_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdw_y79fv_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpdw_y79fv_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _,v := range\
    \ lst {\n        if v > 0 {\n            sum += int(v*v + 0.5)\n        } else\
    \ {\n            sum += int(v*v - 0.5)\n        }\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmldss662_test.go:58: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmldss662_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpmldss662_test.go:58: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpmldss662_test.go:58:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpmldss662_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpmldss662_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        v = (v) + 1 - 1\n        sum += int(v * v)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmphaa6jwe4_test.go:55: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmphaa6jwe4_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmphaa6jwe4_test.go:55: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmphaa6jwe4_test.go:55:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    total := 0\n    for _, i := range\
    \ lst {\n        total += int(i) * int(i)\n    }\n    return total\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmphwtck1ln_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmphwtck1ln_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmphwtck1ln_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, val :=\
    \ range lst {\n        result += int(val) * int(val)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjoh4hqp0_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpjoh4hqp0_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpjoh4hqp0_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res int\n    for _, v :=\
    \ range lst {\n        res += int(v) * int(v)\n    }\n    return res\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpv_7eptfc_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpv_7eptfc_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpv_7eptfc_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // TODO\n    return 0\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4tuxub6g_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4tuxub6g_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp4tuxub6g_test.go:51: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp4tuxub6g_test.go:51:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp4tuxub6g_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp4tuxub6g_test.go:51:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4tuxub6g_test.go:51: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4tuxub6g_test.go:51:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp4tuxub6g_test.go:51: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4tuxub6g_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp4tuxub6g_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64\n    for _, v\
    \ := range lst {\n        i := int(v)\n        if v - float64(i) >= 0.5 {\n  \
    \          i += 1\n        }\n        sum += float64(i*i)\n    }\n    return int(sum)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp_y2or16k_test.go:58: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp_y2or16k_test.go:58:\
    \ expected '%!s(int=75)', got '%!s(int=62)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    l := len(lst)\n    s := 0\n \
    \   for i := 0; i < l; i++ {\n        s += int(lst[i] * lst[i])\n    }\n    return\
    \ s\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdtcyw76i_test.go:55: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpdtcyw76i_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpdtcyw76i_test.go:55: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpdtcyw76i_test.go:55:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, num := range\
    \ lst {\n        sum += int(num) * int(num)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzq269sn5_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpzq269sn5_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpzq269sn5_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res int\n    for _, v :=\
    \ range lst {\n        res += int(v * v)\n    }\n    return res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpozsl7x54_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpozsl7x54_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpozsl7x54_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpozsl7x54_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, x := range\
    \ lst {\n        sum += int(x * x)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpirwk13k3_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpirwk13k3_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpirwk13k3_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpirwk13k3_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, value\
    \ := range lst {\n        result += int(value * value)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpuj4z1_sx_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpuj4z1_sx_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpuj4z1_sx_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpuj4z1_sx_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, num\
    \ := range lst {\n        sum += int(num * num)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpep5u_z0o_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpep5u_z0o_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpep5u_z0o_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpep5u_z0o_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz7e9vdx7_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz7e9vdx7_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpz7e9vdx7_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpz7e9vdx7_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    s := 0\n    for _, v := range\
    \ lst {\n        s += int(v * v)\n    }\n    return s\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmplqh35uay_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmplqh35uay_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmplqh35uay_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmplqh35uay_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64 = 0.0\n  \
    \  for _, v := range lst {\n        result += math.Ceil(v) * math.Ceil(v)\n  \
    \  }\n    return int(result)\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmptcitaqni_test.go:25:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz7e9vdx7_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz7e9vdx7_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpz7e9vdx7_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpz7e9vdx7_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    res := 0\n    for _, el := range\
    \ lst {\n        res += int(el) * int(el)\n    }\n    return res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbvr9ge5p_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpbvr9ge5p_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpbvr9ge5p_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074871
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Your code goes here\n    sum\
    \ := 0\n    for _, val := range lst {\n        x := int(val)\n        sum += x\
    \ * x\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpuwcy364d_test.go:56: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpuwcy364d_test.go:56:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpuwcy364d_test.go:56: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074872
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v*v + 0.5)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0_pw_0ki_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0_pw_0ki_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp0_pw_0ki_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp0_pw_0ki_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var r int\n    for _, n := range\
    \ lst {\n        r += int(n * n)\n    }\n    return r\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpy8xn33fl_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpy8xn33fl_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpy8xn33fl_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpy8xn33fl_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074872
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    for i,_ := range lst {\n    \
    \    lst[i] = Ceiling(lst[i])\n    }\n    return int(Sum(Square(lst)))\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpp3r48u4z_test.go:24:18: undefined: Ceiling

    /tmp/tmpp3r48u4z_test.go:26:16: undefined: Sum

    /tmp/tmpp3r48u4z_test.go:26:20: undefined: Square

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074872
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // your code here\n    if len(lst)\
    \ < 1 {\n        return 0\n    }\n    var total int\n    for _, v := range lst\
    \ {\n        total += int(v * v)\n    }\n    return total\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj4hb87tj_test.go:58: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj4hb87tj_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpj4hb87tj_test.go:58: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpj4hb87tj_test.go:58:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64 = 0\n    for\
    \ _, el := range lst {\n        result += el * el\n    }\n    return int(result)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp71xpr2_6_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp71xpr2_6_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp71xpr2_6_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp71xpr2_6_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, v\
    \ := range lst {\n        sum += int(v) * int(v)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkjtd63pl_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpkjtd63pl_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpkjtd63pl_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, num := range\
    \ lst {\n        sum += int(num + 0.5) * int(num + 0.5)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbaudjm73_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbaudjm73_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpbaudjm73_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpbaudjm73_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbaudjm73_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpbaudjm73_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, x :=\
    \ range lst {\n        sum += int(x*x + 0.5)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp_9b1i01u_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp_9b1i01u_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp_9b1i01u_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp_9b1i01u_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, i :=\
    \ range lst {\n        sum += int(i * i)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkrlzh5hg_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkrlzh5hg_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpkrlzh5hg_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpkrlzh5hg_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var ret int = 0\n    for _, val\
    \ := range lst {\n        ret += int(val) * int(val)\n    }\n    return ret\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp9g3dph6g_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp9g3dph6g_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp9g3dph6g_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // your code here\n    return\
    \ 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var ret int = 0\n    for _,i\
    \ := range lst {\n        ret += int(i * i)\n    }\n    return ret\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0pu4h4em_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0pu4h4em_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp0pu4h4em_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp0pu4h4em_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64\n    for _, x\
    \ := range lst {\n        // fmt.Println(x)\n        sum += x * x\n    }\n   \
    \ return int(sum)\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp_7qodhf5_test.go:55: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp_7qodhf5_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp_7qodhf5_test.go:55: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp_7qodhf5_test.go:55:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    res := 0\n    for _, v := range\
    \ lst {\n        res += int(v) * int(v)\n    }\n    return res\n}\n\ntype testpair\
    \ \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6m5bk16w_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074872
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    res := 0\n    for _, val := range\
    \ lst {\n        res += int(val * val)\n    }\n    return res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3dxxnra1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3dxxnra1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp3dxxnra1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp3dxxnra1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, x := range\
    \ lst {\n        sum += int(x*x)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpw024y7ch_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpw024y7ch_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpw024y7ch_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpw024y7ch_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n\tsum := 0\n\tfor _, element := range\
    \ lst {\n\t\tsum += int(element + 0.5) * int(element + 0.5)\n\t}\n\treturn sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp566p51mb_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp566p51mb_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp566p51mb_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp566p51mb_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp566p51mb_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmp566p51mb_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64\n    for _, f\
    \ := range lst {\n        sum += f * f\n    }\n    return int(sum)\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpe2mwncay_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpe2mwncay_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpe2mwncay_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpe2mwncay_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64 = 0\n    for\
    \ _, x := range lst {\n        result += x*x\n    }\n    return int(result)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsdtwnzvg_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpsdtwnzvg_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpsdtwnzvg_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpsdtwnzvg_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, val := range\
    \ lst {\n        sum += int(val * val)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo7mqujur_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo7mqujur_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpo7mqujur_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpo7mqujur_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n\tvar sum int\n\tfor _, num := range\
    \ lst {\n\t\tsum += int(num) * int(num)\n\t}\n\treturn sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp8osy049e_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp8osy049e_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp8osy049e_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, n :=\
    \ range lst {\n        result += int(n * n)\n    }\n    return result\n}\n\ntype\
    \ TestCase \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpcvzoigab_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074872
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, val\
    \ := range lst {\n        result += int(val * val)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5aht76f6_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5aht76f6_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5aht76f6_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5aht76f6_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var a float64\n    res := 0\n\
    \    for _, v := range lst {\n        res += int(v * v)\n        a += v\n    }\n\
    \    fmt.Println(a)\n    return res\n}\n\nfunc TestSum_Squares(t *testing.T) {\n\
    \  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "6\n6\n16\n5.6\n-0.3999999999999999\n118\n20000\n9.5\n55.3\n0\n-1\n0\n---\
    \ FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n\
    \        tmpnpb4ig_m_test.go:57: expected '%!s(int=29)', got '%!s(int=18)'\n \
    \   --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpnpb4ig_m_test.go:57:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpnpb4ig_m_test.go:57: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpnpb4ig_m_test.go:57:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var v int = 0\n    for _, v :=\
    \ range lst {\n        v = int(v)\n        v = v * v\n    }\n    return v\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpjsapm_wc_test.go:25:13: cannot use int(v) (value of type int) as type
    float64 in assignment

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n\tsum := 0\n\tfor _, element := range\
    \ lst {\n\t\tsum += int(element) * int(element)\n\t}\n\treturn sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmptl2pkfzw_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmptl2pkfzw_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmptl2pkfzw_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, n\
    \ := range lst {\n        n = n - 0.0001\n        result += int(n * n)\n    }\n\
    \    return result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp6syp_m_h_test.go:55: expected '%!s(int=14)', got '%!s(int=11)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp6syp_m_h_test.go:55:\
    \ expected '%!s(int=14)', got '%!s(int=11)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp6syp_m_h_test.go:55: expected '%!s(int=84)', got '%!s(int=80)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp6syp_m_h_test.go:55:\
    \ expected '%!s(int=29)', got '%!s(int=18)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp6syp_m_h_test.go:55: expected '%!s(int=6)', got '%!s(int=5)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp6syp_m_h_test.go:55:\
    \ expected '%!s(int=10230)', got '%!s(int=10226)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp6syp_m_h_test.go:55: expected '%!s(int=200000000)', got\
    \ '%!s(int=199999996)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n  \
    \      tmp6syp_m_h_test.go:55: expected '%!s(int=75)', got '%!s(int=61)'\n   \
    \ --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp6syp_m_h_test.go:55:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp6syp_m_h_test.go:55: expected '%!s(int=2)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    total := 0\n    for _, item :=\
    \ range lst {\n        total += int(item) * int(item)\n    }\n    return total\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpq0ycqkmd_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpq0ycqkmd_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpq0ycqkmd_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074874
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, value :=\
    \ range lst {\n        sum += int(value) * int(value)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3_8eshep_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3_8eshep_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp3_8eshep_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074874
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, num :=\
    \ range lst {\n        sum += int(num + 1.0) * int(num + 1.0)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp1id2f6b2_test.go:54: expected '%!s(int=14)', got '%!s(int=29)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp1id2f6b2_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=29)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp1id2f6b2_test.go:54: expected '%!s(int=84)', got '%!s(int=120)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp1id2f6b2_test.go:54:\
    \ expected '%!s(int=29)', got '%!s(int=30)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp1id2f6b2_test.go:54: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp1id2f6b2_test.go:54:\
    \ expected '%!s(int=10230)', got '%!s(int=10470)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp1id2f6b2_test.go:54: expected '%!s(int=200000000)', got\
    \ '%!s(int=200040002)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n  \
    \      tmp1id2f6b2_test.go:54: expected '%!s(int=75)', got '%!s(int=74)'\n   \
    \ --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp1id2f6b2_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmp1id2f6b2_test.go:54: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp1id2f6b2_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp1id2f6b2_test.go:54: expected '%!s(int=2)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v) * int(v)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpthu_6tj4_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpthu_6tj4_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpthu_6tj4_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, num :=\
    \ range lst {\n        sum += int(num) * int(num)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmppxqpkgg2_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmppxqpkgg2_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmppxqpkgg2_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, f := range\
    \ lst {\n        sum += int(f) * int(f)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsm2iqsd1_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsm2iqsd1_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpsm2iqsd1_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, n := range\
    \ lst {\n        sum += int(n*n + 0.5)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp49e_ek6e_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp49e_ek6e_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp49e_ek6e_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp49e_ek6e_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res float64\n    for _, val\
    \ := range lst {\n        res += val * val\n    }\n    return int(res)\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpptl3vn1m_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpptl3vn1m_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpptl3vn1m_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpptl3vn1m_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    for index, value := range lst\
    \ {\n        lst[index] = float64(int(value + 1))\n    }\n    sum := 0\n    for\
    \ _, value := range lst {\n        sum += int(value * value)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpe2lphpe0_test.go:57: expected '%!s(int=14)', got '%!s(int=29)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpe2lphpe0_test.go:57:\
    \ expected '%!s(int=14)', got '%!s(int=29)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpe2lphpe0_test.go:57: expected '%!s(int=84)', got '%!s(int=120)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpe2lphpe0_test.go:57:\
    \ expected '%!s(int=29)', got '%!s(int=30)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpe2lphpe0_test.go:57: expected '%!s(int=6)', got '%!s(int=9)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpe2lphpe0_test.go:57:\
    \ expected '%!s(int=10230)', got '%!s(int=10470)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpe2lphpe0_test.go:57: expected '%!s(int=200000000)', got\
    \ '%!s(int=200040002)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n  \
    \      tmpe2lphpe0_test.go:57: expected '%!s(int=75)', got '%!s(int=74)'\n   \
    \ --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpe2lphpe0_test.go:57:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__9\
    \ (0.00s)\n        tmpe2lphpe0_test.go:57: expected '%!s(int=0)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpe2lphpe0_test.go:57:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpe2lphpe0_test.go:57: expected '%!s(int=2)', got '%!s(int=5)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v) * int(v)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpthu_6tj4_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpthu_6tj4_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpthu_6tj4_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(sum)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxglbf589_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxglbf589_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpxglbf589_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpxglbf589_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n\n    var (\n        sum int\n        ceil int\n    )\n\n    for _,\
    \ v := range lst {\n        ceil = int(v)\n        if ceil < v {\n           \
    \ ceil++\n        }\n        sum += ceil * ceil\n    }\n\n    return sum\n}\n\n\
    type SumSquares \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpsbrgy9h8_test.go:43:17: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074874
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    s := 0\n    for _, v := range\
    \ lst {\n        v = math.Ceil(v)\n        s += int(v) * int(v)\n    }\n    return\
    \ s\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmplal_jamr_test.go:25:13: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074874
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // your code here\n    return\
    \ 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, val\
    \ := range lst {\n        sum += int(val * val)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp1q5xr40g_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp1q5xr40g_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp1q5xr40g_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp1q5xr40g_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    for i, v := range lst {\n   \
    \     lst[i] = math.Ceil(v)\n    }\n    return sum(map(lambda x: x * x, lst))\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp1p2kz2ix_test.go:26:19: expected ''['', found ''(''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074874
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v + 0.5) * int(v + 0.5)\n    }\n    return sum\n}\n\
    \ntype TestCase \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpwhzb5nq2_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074874
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, value\
    \ := range lst {\n        sum += value * value\n    }\n    return int(sum)\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpyb2cf_uw_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpyb2cf_uw_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpyb2cf_uw_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpyb2cf_uw_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, item\
    \ := range lst {\n        result += int(item * item)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpnmhn7oo4_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpnmhn7oo4_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpnmhn7oo4_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpnmhn7oo4_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz7e9vdx7_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpz7e9vdx7_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpz7e9vdx7_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpz7e9vdx7_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, x\
    \ := range lst {\n        if x < 0 {\n            continue\n        }\n      \
    \  sum += int(x*x + 0.5)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbygkyu6k_test.go:57: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbygkyu6k_test.go:57:\
    \ expected '%!s(int=6)', got '%!s(int=2)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpbygkyu6k_test.go:57: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpbygkyu6k_test.go:57:\
    \ expected '%!s(int=1086)', got '%!s(int=1073)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbygkyu6k_test.go:57: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpbygkyu6k_test.go:57:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64 = 0\n    for\
    \ _, num := range lst {\n        result += math.Ceil(num) * math.Ceil(num)\n \
    \   }\n    return int(result)\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpareehru7_test.go:25:19: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074874
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, val := range\
    \ lst {\n        sum += int(val*val)\n    }\n    return sum\n}\n\ntype TestCase\
    \ \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmputojziv2_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074874
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, i := range\
    \ lst {\n        sum += int(i) * int(i)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3adqpr1__test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3adqpr1__test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp3adqpr1__test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res int\n    for _, v :=\
    \ range lst {\n        res += int(v) * int(v)\n    }\n    return res\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpv_7eptfc_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpv_7eptfc_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpv_7eptfc_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var r int\n    for _,i := range\
    \ lst {\n        r += int(i) * int(i)\n    }\n    return r\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpz3eopf8a_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpz3eopf8a_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpz3eopf8a_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, num\
    \ := range lst {\n        result += int(num) * int(num)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpns02p0n9_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpns02p0n9_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpns02p0n9_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    squares := 0\n    for _, v :=\
    \ range lst {\n        squares += int(v*v + 0.5)\n    }\n    return squares\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpp5stvvgo_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpp5stvvgo_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpp5stvvgo_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpp5stvvgo_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, value :=\
    \ range lst {\n        sum += int(value * value)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp6d7isnz4_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp6d7isnz4_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp6d7isnz4_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp6d7isnz4_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, x := range\
    \ lst {\n        sum += int(x + 0.5) * int(x + 0.5)\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpzcqf8st0_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpzcqf8st0_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpzcqf8st0_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpzcqf8st0_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpzcqf8st0_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpzcqf8st0_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        //x := math.Ceil(v)\n        //fmt.Println(v, x)\n    \
    \    sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp85qilk0c_test.go:56: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp85qilk0c_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp85qilk0c_test.go:56: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp85qilk0c_test.go:56:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var answer int\n    for _, num\
    \ := range lst {\n        answer += int(num) * int(num)\n    }\n    return answer\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdtnsu63v_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdtnsu63v_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpdtnsu63v_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, v\
    \ := range lst {\n        sum += int(v + 0.9999999) * int(v + 0.9999999)\n   \
    \ }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate :=\
    \ sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84\
    \ },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n  \
    \   { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpc8j6obg9_test.go:54: expected '%!s(int=6)', got '%!s(int=3)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpc8j6obg9_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=74)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpc8j6obg9_test.go:54: expected '%!s(int=1086)', got '%!s(int=1085)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpc8j6obg9_test.go:54:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpc8j6obg9_test.go:54: expected '%!s(int=2)', got '%!s(int=1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, n := range\
    \ lst {\n        sum += int(n * n)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpksm1jhqe_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpksm1jhqe_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpksm1jhqe_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpksm1jhqe_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, item\
    \ := range lst {\n        sum += int(item * item)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpwkdgy5bk_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpwkdgy5bk_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpwkdgy5bk_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpwkdgy5bk_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, elem :=\
    \ range lst {\n        sum += int(elem*elem)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpy_stqli6_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpy_stqli6_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpy_stqli6_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpy_stqli6_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, elem :=\
    \ range lst {\n        sum += int(elem*elem + 0.5)\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpj5l_nwvv_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpj5l_nwvv_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpj5l_nwvv_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpj5l_nwvv_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    s := 0\n    for _, v := range\
    \ lst {\n        s += int(v * v)\n    }\n    return s\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmplqh35uay_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmplqh35uay_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmplqh35uay_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmplqh35uay_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, f := range\
    \ lst {\n        sum += int(f*f + 0.5)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpp3oimcyk_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpp3oimcyk_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpp3oimcyk_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpp3oimcyk_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // your code here\n    var sum\
    \ int\n    for _, v := range lst {\n        sum += int(v * v)\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp21nxj__h_test.go:55: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp21nxj__h_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp21nxj__h_test.go:55: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp21nxj__h_test.go:55:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, v :=\
    \ range lst {\n        result += int(v) * int(v)\n    }\n    return result\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0ds1qfx0_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp0ds1qfx0_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp0ds1qfx0_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total int\n    for _, number\
    \ := range lst {\n        total += int(number * number)\n    }\n    return total\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5mdgs5_t_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5mdgs5_t_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5mdgs5_t_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5mdgs5_t_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(sum)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxglbf589_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxglbf589_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpxglbf589_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpxglbf589_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n    for _, element\
    \ := range lst {\n        element = math.Ceil(element)\n        result += element\
    \ * element\n    }\n    return result\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpm6c_7jy5_test.go:25:19: undefined: math

    /tmp/tmpm6c_7jy5_test.go:26:9: invalid operation: result += element * element
    (mismatched types int and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, v\
    \ := range lst {\n        x := v\n        if x < 0 {\n            x = -x\n   \
    \     }\n        result += int(x + 0.5) * int(x + 0.5)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdhd3wcgu_test.go:58: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdhd3wcgu_test.go:58:\
    \ expected '%!s(int=75)', got '%!s(int=62)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // your code here\n    return\
    \ 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v + 0.5) * int(v + 0.5)\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpg0fpv2ie_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpg0fpv2ie_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpg0fpv2ie_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpg0fpv2ie_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpg0fpv2ie_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpg0fpv2ie_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res int\n    for _, num :=\
    \ range lst {\n        res += int(num * num)\n    }\n    return res\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo6xwc3jo_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo6xwc3jo_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpo6xwc3jo_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpo6xwc3jo_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var i int\n    var val float64\n\
    \    var ret int\n\n    ret = 0\n    for i, val = range lst {\n        ret +=\
    \ int(val) * int(val)\n    }\n\n    return ret\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpqw7i_jly_test.go:23:9: i declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, val := range\
    \ lst {\n        sum += int(val) * int(val)\n    }\n    return sum\n}\n\ntype\
    \ TestCase \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfj6l_70f_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, f :=\
    \ range lst {\n        sum += int(f*f)\n    }\n    return sum\n}\n\ntype test_pair\
    \ \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpdmbtnnln_test.go:30:16: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074876
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    l := make([]int, len(lst))\n\
    \    for i, v := range lst {\n        l[i] = int(v + 0.5)\n    }\n    var total\
    \ int\n    for _, v := range l {\n        total += v * v\n    }\n    return total\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp_zh43krh_test.go:58: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp_zh43krh_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp_zh43krh_test.go:58: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp_zh43krh_test.go:58:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp_zh43krh_test.go:58: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmp_zh43krh_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, item\
    \ := range lst {\n        sum += int(item*item)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpm2nxhr_f_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpm2nxhr_f_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpm2nxhr_f_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpm2nxhr_f_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, v := range\
    \ lst {\n        sum += v * v\n    }\n    return int(sum)\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxglbf589_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxglbf589_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpxglbf589_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpxglbf589_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var output int\n    for _, e\
    \ := range lst {\n        output += int(e) * int(e)\n    }\n    return output\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpok6t9191_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpok6t9191_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpok6t9191_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64\n    for _,\
    \ num := range lst {\n        result += num * num\n    }\n    return int(result)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp9v5zrdob_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp9v5zrdob_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp9v5zrdob_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp9v5zrdob_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, n :=\
    \ range lst {\n        if n > 0 {\n            sum += int(n * n)\n        } else\
    \ {\n            sum += int((n - 0.5) * (n - 0.5))\n        }\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0i1jc0_i_test.go:58: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0i1jc0_i_test.go:58:\
    \ expected '%!s(int=6)', got '%!s(int=10)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp0i1jc0_i_test.go:58: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp0i1jc0_i_test.go:58:\
    \ expected '%!s(int=1086)', got '%!s(int=1076)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp0i1jc0_i_test.go:58: expected '%!s(int=1)', got '%!s(int=2)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmp0i1jc0_i_test.go:58:\
    \ expected '%!s(int=2)', got '%!s(int=3)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int = 0\n    for _,\
    \ item := range lst {\n        result += int(item + 0.5) * int(item + 0.5)\n \
    \   }\n    return result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp29nf8gcm_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp29nf8gcm_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp29nf8gcm_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp29nf8gcm_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp29nf8gcm_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmp29nf8gcm_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, n :=\
    \ range lst {\n        n = n * n\n        fmt.Println(n)\n        sum += int(n)\n\
    \    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "1\n4\n9\n1\n4\n9\n1\n9\n25\n49\n1.9599999999999997\n17.64\n0\n5.76\n1\n\
    1\n10000\n1\n225\n4\n1e+08\n1e+08\n1.9599999999999997\n21.159999999999997\n39.69\n\
    1.9599999999999997\n320.40999999999997\n357.2099999999999\n396.00999999999993\n\
    0\n1\n1\n1\n0\n--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmeoh6eis_test.go:56: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmeoh6eis_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpmeoh6eis_test.go:56: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpmeoh6eis_test.go:56:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    total := 0\n    for _, val :=\
    \ range lst {\n        total += int(val * val)\n    }\n    return total\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3s0g4et7_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3s0g4et7_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp3s0g4et7_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp3s0g4et7_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, item :=\
    \ range lst {\n        sum += int(item*item + 0.5)\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpui10romc_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpui10romc_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpui10romc_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpui10romc_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, num :=\
    \ range lst {\n        sum += int(num) * int(num)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmppxqpkgg2_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmppxqpkgg2_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmppxqpkgg2_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n\tvar sum int = 0\n\tfor _, v :=\
    \ range lst {\n\t\tsum += int(v * v)\n\t}\n\treturn sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2juun972_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2juun972_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp2juun972_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp2juun972_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    res := 0\n    for _, val := range\
    \ lst {\n        res += int(val*val)\n    }\n    return res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpaclpzn7b_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpaclpzn7b_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpaclpzn7b_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpaclpzn7b_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total int\n    for _, number\
    \ := range lst {\n        total += int(number * number)\n    }\n    return total\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5mdgs5_t_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5mdgs5_t_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5mdgs5_t_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5mdgs5_t_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074877
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, n\
    \ := range lst {\n        sum += int(n * n)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4kcdvuh7_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp4kcdvuh7_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp4kcdvuh7_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp4kcdvuh7_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // Your code goes here\n    return\
    \ 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp4k_wl48e_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp4k_wl48e_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp4k_wl48e_test.go:51: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp4k_wl48e_test.go:51:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp4k_wl48e_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp4k_wl48e_test.go:51:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp4k_wl48e_test.go:51: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4k_wl48e_test.go:51:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp4k_wl48e_test.go:51: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp4k_wl48e_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp4k_wl48e_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074878
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, x :=\
    \ range lst {\n        sum += int(x) * int(x)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpnhr2qlq0_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpnhr2qlq0_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpnhr2qlq0_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    total := 0\n    for _, num :=\
    \ range lst {\n        total += int(num * num)\n    }\n    return total\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpxz7fp7bv_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpxz7fp7bv_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpxz7fp7bv_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpxz7fp7bv_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, val := range\
    \ lst {\n        sum += int(val * val)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpo7mqujur_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpo7mqujur_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpo7mqujur_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpo7mqujur_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    s := 0\n    for _, n := range\
    \ lst {\n        s += int(n) * int(n)\n    }\n    return s\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpwhn7we_l_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpwhn7we_l_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpwhn7we_l_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int = 0\n    for _,\
    \ i := range lst {\n        result += int(i) * int(i)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpn8cq9_lc_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpn8cq9_lc_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpn8cq9_lc_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _,v\
    \ := range lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpyb0clalx_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpyb0clalx_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpyb0clalx_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpyb0clalx_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    res := 0\n    for _, x := range\
    \ lst {\n        res += int(x + 0.5) * int(x + 0.5)\n    }\n    return res\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpauema7ud_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpauema7ud_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpauema7ud_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpauema7ud_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpauema7ud_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpauema7ud_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n\tvar sum int = 0\n\tfor _, val :=\
    \ range lst {\n\t\tsum += int(val + 0.5) * int(val + 0.5)\n\t}\n\treturn sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjeo3dfd0_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjeo3dfd0_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpjeo3dfd0_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpjeo3dfd0_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpjeo3dfd0_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpjeo3dfd0_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    count := 0\n    for _, v := range\
    \ lst {\n        count += int(v*v + 0.5)\n    }\n    return count\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpma1qj4yj_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpma1qj4yj_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpma1qj4yj_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpma1qj4yj_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, num := range\
    \ lst {\n        sum += int(num * num)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbzv2w94c_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbzv2w94c_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpbzv2w94c_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpbzv2w94c_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, e := range\
    \ lst {\n        sum += int(e) * int(e)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpdw_y79fv_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpdw_y79fv_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpdw_y79fv_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var s int\n    for _, v := range\
    \ lst {\n        if v < 0 {\n            s += int(v - 0.5) * int(v - 0.5)\n  \
    \      } else {\n            s += int(v + 0.5) * int(v + 0.5)\n        }\n   \
    \ }\n    return s\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3u8oxr67_test.go:58: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp3u8oxr67_test.go:58:\
    \ expected '%!s(int=75)', got '%!s(int=62)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    for i, v := range lst {\n   \
    \     lst[i] = math.Ceil(v)\n    }\n    return sum(square(lst))\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp4kw2g8c3_test.go:24:18: undefined: math

    /tmp/tmp4kw2g8c3_test.go:26:12: undefined: sum

    /tmp/tmp4kw2g8c3_test.go:26:16: undefined: square

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v + 0.5) * int(v + 0.5)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmph6ryw0qc_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmph6ryw0qc_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmph6ryw0qc_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmph6ryw0qc_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmph6ryw0qc_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmph6ryw0qc_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int = 0\n    for _, val\
    \ := range lst {\n        sum += int(val * val)\n    }\n    return sum\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp1q5xr40g_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp1q5xr40g_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp1q5xr40g_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp1q5xr40g_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074875
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v*v + 0.99)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpfmw6qq66_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpfmw6qq66_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpfmw6qq66_test.go:54: expected '%!s(int=75)', got '%!s(int=64)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpfmw6qq66_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1077)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, f :=\
    \ range lst {\n        sum += int(f * f)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpziw61et__test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpziw61et__test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpziw61et__test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpziw61et__test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    ret := 0\n    for _, v := range\
    \ lst {\n        ret += int(v) * int(v)\n    }\n    return ret\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpsqw_lztn_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpsqw_lztn_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpsqw_lztn_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n\tvar sum int = 0\n\tfor _, value\
    \ := range lst {\n\t\tsum += int(value*value)\n\t}\n\treturn sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpa42ps_k5_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpa42ps_k5_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpa42ps_k5_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpa42ps_k5_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, num :=\
    \ range lst {\n        sum += int(num*num)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgo82o4zs_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgo82o4zs_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpgo82o4zs_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpgo82o4zs_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, elem :=\
    \ range lst {\n        sum += elem * elem\n    }\n    return int(sum)\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpgsv2bfj7_test.go:54: expected '%!s(int=29)', got '%!s(int=19)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpgsv2bfj7_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpgsv2bfj7_test.go:54: expected '%!s(int=75)', got '%!s(int=62)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpgsv2bfj7_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v) * int(v)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpthu_6tj4_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpthu_6tj4_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpthu_6tj4_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, val := range\
    \ lst {\n        sum += int(val*val)\n    }\n    return sum\n}\n\ntype Test \n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph4degqzd_test.go:30:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, f := range\
    \ lst {\n        sum += int(f * f)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqxn77_hk_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqxn77_hk_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqxn77_hk_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqxn77_hk_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074880
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total float64\n    for _,\
    \ e := range lst {\n        ceil := math.Ceil(e)\n        total += ceil * ceil\n\
    \    }\n    return int(total)\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate\
    \ := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected\
    \ interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpn0gs88ce_test.go:25:17: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var res int\n    for _, v :=\
    \ range lst {\n        res += int(v * v)\n    }\n    return res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpozsl7x54_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpozsl7x54_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpozsl7x54_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpozsl7x54_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074792
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum float64\n    for _, num\
    \ := range lst {\n        if num < 0 {\n            num = -num\n        }\n  \
    \      sum += int(num+0.5) * int(num+0.5)\n    }\n    return int(sum)\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp5f580lk5_test.go:28:9: invalid operation: sum += int(num + 0.5) * int(num
    + 0.5) (mismatched types float64 and int)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, f :=\
    \ range lst {\n        sum += int(f) * int(f)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2yilk8pb_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp2yilk8pb_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp2yilk8pb_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, number\
    \ := range lst {\n        result += int(number + 0.99999)\n    }\n    return result\
    \ * result\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpvifejlzw_test.go:54: expected '%!s(int=14)', got '%!s(int=36)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpvifejlzw_test.go:54:\
    \ expected '%!s(int=14)', got '%!s(int=36)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpvifejlzw_test.go:54: expected '%!s(int=84)', got '%!s(int=256)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpvifejlzw_test.go:54:\
    \ expected '%!s(int=29)', got '%!s(int=49)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpvifejlzw_test.go:54: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpvifejlzw_test.go:54:\
    \ expected '%!s(int=10230)', got '%!s(int=13924)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpvifejlzw_test.go:54: expected '%!s(int=200000000)', got\
    \ '%!s(int=400000000)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n  \
    \      tmpvifejlzw_test.go:54: expected '%!s(int=75)', got '%!s(int=144)'\n  \
    \  --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpvifejlzw_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=3249)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpvifejlzw_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpvifejlzw_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // your code here\n    return\
    \ 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, num := range\
    \ lst {\n        sum += int(num) * int(num)\n    }\n    return sum\n}\n\ntype\
    \ testCase \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp6o017uh3_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, num :=\
    \ range lst {\n        sum += int(num * num)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpvx8ey4iu_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvx8ey4iu_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpvx8ey4iu_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpvx8ey4iu_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, num\
    \ := range lst {\n        result += int(num*num)\n    }\n    return result\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpv_t_o6op_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpv_t_o6op_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpv_t_o6op_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpv_t_o6op_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0.0\n    for _, i := range\
    \ lst {\n        sum += math.Ceil(i) * math.Ceil(i)\n    }\n    return int(sum)\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpixgevmuc_test.go:25:16: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    s := 0\n    for _, v := range\
    \ lst {\n        s += int(v * v)\n    }\n    return s\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmplqh35uay_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmplqh35uay_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmplqh35uay_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmplqh35uay_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074870
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, num := range\
    \ lst {\n        sum += int(num + 0.5) * int(num + 0.5)\n    }\n    return sum\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbaudjm73_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbaudjm73_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpbaudjm73_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpbaudjm73_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpbaudjm73_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpbaudjm73_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v) * int(v)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpthu_6tj4_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpthu_6tj4_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpthu_6tj4_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    result := 0\n\n    for _, num\
    \ := range lst {\n        result += int(num * num)\n    }\n\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp_6sa4vh0_test.go:56: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp_6sa4vh0_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp_6sa4vh0_test.go:56: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp_6sa4vh0_test.go:56:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        if v > 0 {\n            sum += int(v + 0.99999)\n     \
    \   } else {\n            sum += int(v - 0.99999)\n        }\n    }\n    return\
    \ sum * sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp2vyju2qb_test.go:58: expected '%!s(int=14)', got '%!s(int=36)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp2vyju2qb_test.go:58:\
    \ expected '%!s(int=14)', got '%!s(int=36)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp2vyju2qb_test.go:58: expected '%!s(int=84)', got '%!s(int=256)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp2vyju2qb_test.go:58:\
    \ expected '%!s(int=29)', got '%!s(int=49)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp2vyju2qb_test.go:58: expected '%!s(int=6)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp2vyju2qb_test.go:58:\
    \ expected '%!s(int=10230)', got '%!s(int=13924)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp2vyju2qb_test.go:58: expected '%!s(int=200000000)', got\
    \ '%!s(int=400000000)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n  \
    \      tmp2vyju2qb_test.go:58: expected '%!s(int=75)', got '%!s(int=100)'\n  \
    \  --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp2vyju2qb_test.go:58:\
    \ expected '%!s(int=1086)', got '%!s(int=3025)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp2vyju2qb_test.go:58: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v) * int(v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpcc3jba92_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpcc3jba92_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpcc3jba92_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    s := 0\n    for _, elem := range\
    \ lst {\n        s += int(elem * elem)\n    }\n    return s\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpk0zs6of4_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpk0zs6of4_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpk0zs6of4_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpk0zs6of4_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, val :=\
    \ range lst {\n        sum += int(val * val)\n    }\n    return sum\n}\n\ntype\
    \ testpair \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpen_4g_tv_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, a := range\
    \ lst {\n        sum += int(a + 0.5) * int(a + 0.5)\n    }\n    return sum\n}\n\
    \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0el3uv8f_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0el3uv8f_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp0el3uv8f_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp0el3uv8f_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmp0el3uv8f_test.go:54: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmp0el3uv8f_test.go:54:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result float64\n    for _,\
    \ value := range lst {\n        result += value * value\n    }\n    return int(result)\n\
    }\n\ntype testCase \nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpfoq534_2_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660074880
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n\tvar sum int\n\tfor _, v := range\
    \ lst {\n\t\tsum += int(v) * int(v)\n\t}\n\treturn sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp4bqx_7l7_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp4bqx_7l7_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp4bqx_7l7_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if lst == nil {\n        return\
    \ 0\n    }\n    var sum int\n    for _, val := range lst {\n        sum += int(val\
    \ * val)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpy239ylrf_test.go:57: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpy239ylrf_test.go:57:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpy239ylrf_test.go:57: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpy239ylrf_test.go:57:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, i :=\
    \ range lst {\n        sum += int(i*i + 0.5)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp62ak8gmp_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp62ak8gmp_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp62ak8gmp_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp62ak8gmp_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074881
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    res := 0\n    for _, v := range\
    \ lst {\n        res += int(v*v + 0.5)\n    }\n    return res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp6vo8fk3j_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp6vo8fk3j_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp6vo8fk3j_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp6vo8fk3j_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        sum += int(v*v + 0.5)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp0bxctj1g_test.go:54: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp0bxctj1g_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp0bxctj1g_test.go:54: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp0bxctj1g_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074714
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, n :=\
    \ range lst {\n        sum += int(n * n)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp95bows45_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp95bows45_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp95bows45_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp95bows45_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // replace the line below with\
    \ your code\n    r := 0\n    for _, v := range lst {\n        f := v * v\n   \
    \     r += int(f)\n    }\n    return r\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpmkfbdz4u_test.go:56: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpmkfbdz4u_test.go:56:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpmkfbdz4u_test.go:56: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpmkfbdz4u_test.go:56:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var output int\n    for _, value\
    \ := range lst {\n        output += int(value * value)\n    }\n    return output\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpjwpl5bqr_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpjwpl5bqr_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpjwpl5bqr_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpjwpl5bqr_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var ret int\n    for _, f :=\
    \ range lst {\n        // Ceiling: round up to an integer,\n        //       \
    \  e.g. 5.5 -> 6, -5.5 -> -5\n        i := int(f)\n        if f < 0 {\n      \
    \      i--\n        }\n        ret += i * i\n    }\n    return ret\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmps14mhkj0_test.go:60: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmps14mhkj0_test.go:60:\
    \ expected '%!s(int=6)', got '%!s(int=11)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmps14mhkj0_test.go:60: expected '%!s(int=75)', got '%!s(int=56)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmps14mhkj0_test.go:60:\
    \ expected '%!s(int=1086)', got '%!s(int=978)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmps14mhkj0_test.go:60: expected '%!s(int=1)', got '%!s(int=4)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmps14mhkj0_test.go:60:\
    \ expected '%!s(int=2)', got '%!s(int=5)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n\tres := 0\n\tfor _, v := range lst\
    \ {\n\t\tv = v*v\n\t\tres += int(v)\n\t}\n\treturn res\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpkk9whovo_test.go:55: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpkk9whovo_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpkk9whovo_test.go:55: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpkk9whovo_test.go:55:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, v :=\
    \ range lst {\n        v = v + 0.5\n        sum += int(v) * int(v)\n    }\n  \
    \  return sum\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpvq9ezcka_test.go:55: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpvq9ezcka_test.go:55:\
    \ expected '%!s(int=6)', got '%!s(int=3)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpvq9ezcka_test.go:55: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpvq9ezcka_test.go:55:\
    \ expected '%!s(int=1086)', got '%!s(int=1085)'\n    --- FAIL: TestSum_Squares/test_num__10\
    \ (0.00s)\n        tmpvq9ezcka_test.go:55: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__11 (0.00s)\n        tmpvq9ezcka_test.go:55:\
    \ expected '%!s(int=2)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return 0\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, num := range\
    \ lst {\n        sum += int(num * num)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpbzv2w94c_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpbzv2w94c_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpbzv2w94c_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpbzv2w94c_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074879
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    return 0\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmp82_m_fif_test.go:50:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmp82_m_fif_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    if len(lst) == 0 {\n        return\
    \ 0\n    }\n    res := 0\n    for _, x := range lst {\n        res += int(x*x\
    \ + 0.5)\n    }\n    return res\n}\n\nfunc TestSum_Squares(t *testing.T) {\n \
    \ candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\t\
    \texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp2653ymnf_test.go:57: expected '%!s(int=29)', got '%!s(int=20)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp2653ymnf_test.go:57:\
    \ expected '%!s(int=6)', got '%!s(int=8)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp2653ymnf_test.go:57: expected '%!s(int=75)', got '%!s(int=63)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp2653ymnf_test.go:57:\
    \ expected '%!s(int=1086)', got '%!s(int=1075)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var r int\n    for _, v := range\
    \ lst {\n        v = math.Ceil(v)\n        r += int(v * v)\n    }\n    return\
    \ r\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpwumbq6dz_test.go:25:13: undefined: math

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var total int\n    for _, v :=\
    \ range lst {\n        total += int(v) * int(v)\n    }\n    return total\n}\n\n\
    func TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpaq1aggdw_test.go:54: expected '%!s(int=29)', got '%!s(int=17)'\n\
    \    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpaq1aggdw_test.go:54:\
    \ expected '%!s(int=75)', got '%!s(int=53)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpaq1aggdw_test.go:54: expected '%!s(int=1086)', got '%!s(int=975)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var sum int\n    for _, val :=\
    \ range lst {\n        sum += int(val * val)\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 3.0, 5.0, 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2,\
    \ 0.0}), expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}),\
    \ expected: 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}),\
    \ expected: 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected:\
    \ 200000000 },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected:\
    \ 75 },\n     { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected:\
    \ 1086 },\n     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual:\
    \ candidate([]float64{-1.0}), expected: 1 },\n     { actual: candidate([]float64{-1.0,\
    \ 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp3m70iygn_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp3m70iygn_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp3m70iygn_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp3m70iygn_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    var result int\n    for _, val\
    \ := range lst {\n        result += int(val * val)\n    }\n    return result\n\
    }\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14\
    \ },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n  \
    \   { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n    \
    \ { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmp5aht76f6_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmp5aht76f6_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmp5aht76f6_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmp5aht76f6_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    // your code here\n    return\
    \ 0\n}\n\nfunc TestSum_Squares(t *testing.T) {\n  candidate := sum_squares\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected:\
    \ 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n\
    \     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected: 84 },\n  \
    \   { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n     { actual:\
    \ candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual: candidate([]float64{100.0,\
    \ 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual: candidate([]float64{10000.0,\
    \ 10000.0}), expected: 200000000 },\n     { actual: candidate([]float64{-1.4,\
    \ 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4, 17.9,\
    \ 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}), expected:\
    \ 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n     { actual:\
    \ candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__0\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=14)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__1 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=14)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__2\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=84)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__3 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=29)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__4\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__5 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=10230)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__6\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=200000000)', got\
    \ '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__7 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=75)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__8\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=1086)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_Squares/test_num__10 (0.00s)\n        tmpxf_326ld_test.go:51:\
    \ expected '%!s(int=1)', got '%!s(int=0)'\n    --- FAIL: TestSum_Squares/test_num__11\
    \ (0.00s)\n        tmpxf_326ld_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660074873
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, n := range\
    \ lst {\n        sum += int(n*n)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmponer_o0v_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmponer_o0v_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmponer_o0v_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmponer_o0v_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660074882
- exit_code: 1
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, v := range\
    \ lst {\n        sum += int(v * v)\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t\
    \ *testing.T) {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual\
    \   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual:\
    \ candidate([]float64{1.0, 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0,\
    \ 7.0}), expected: 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}),\
    \ expected: 29 },\n     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected:\
    \ 6 },\n     { actual: candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected:\
    \ 10230 },\n     { actual: candidate([]float64{10000.0, 10000.0}), expected: 200000000\
    \ },\n     { actual: candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n \
    \    { actual: candidate([]float64{-1.4, 17.9, 18.9, 19.9}), expected: 1086 },\n\
    \     { actual: candidate([]float64{0.0}), expected: 0 },\n     { actual: candidate([]float64{-1.0}),\
    \ expected: 1 },\n     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected:\
    \ 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num\
    \ % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) !=\
    \ fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\"\
    , tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_Squares (0.00s)\n    --- FAIL: TestSum_Squares/test_num__3\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=29)', got '%!s(int=18)'\n\
    \    --- FAIL: TestSum_Squares/test_num__4 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=6)', got '%!s(int=7)'\n    --- FAIL: TestSum_Squares/test_num__7\
    \ (0.00s)\n        tmpqc1_tll1_test.go:54: expected '%!s(int=75)', got '%!s(int=61)'\n\
    \    --- FAIL: TestSum_Squares/test_num__8 (0.00s)\n        tmpqc1_tll1_test.go:54:\
    \ expected '%!s(int=1086)', got '%!s(int=1074)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660074713
- exit_code: 2
  program: "package sum_squares_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\
    \n// You are given a list of numbers.\n// You need to return the sum of squared\
    \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
    \ first.\n// Examples:\n// >>> lst([]float64{1.0, 2.0, 3.0})\n// 14\n// >>> lst([]float64{1.0,\
    \ 4.0, 9.0})\n// 98\n// >>> lst([]float64{1.0, 3.0, 5.0, 7.0})\n// 84\n// >>>\
    \ lst([]float64{1.4, 4.2, 0.0})\n// 29\n// >>> lst([]float64{-2.4, 1.0, 1.0})\n\
    // 6\nfunc sum_squares(lst []float64) int {\n    sum := 0\n    for _, x := range\
    \ lst {\n        v := int(x)\n        if v < x {\n            v++\n        }\n\
    \        sum += v * v\n    }\n    return sum\n}\n\nfunc TestSum_Squares(t *testing.T)\
    \ {\n  candidate := sum_squares\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]float64{1.0,\
    \ 2.0, 3.0}), expected: 14 },\n     { actual: candidate([]float64{1.0, 2.0, 3.0}),\
    \ expected: 14 },\n     { actual: candidate([]float64{1.0, 3.0, 5.0, 7.0}), expected:\
    \ 84 },\n     { actual: candidate([]float64{1.4, 4.2, 0.0}), expected: 29 },\n\
    \     { actual: candidate([]float64{-2.4, 1.0, 1.0}), expected: 6 },\n     { actual:\
    \ candidate([]float64{100.0, 1.0, 15.0, 2.0}), expected: 10230 },\n     { actual:\
    \ candidate([]float64{10000.0, 10000.0}), expected: 200000000 },\n     { actual:\
    \ candidate([]float64{-1.4, 4.6, 6.3}), expected: 75 },\n     { actual: candidate([]float64{-1.4,\
    \ 17.9, 18.9, 19.9}), expected: 1086 },\n     { actual: candidate([]float64{0.0}),\
    \ expected: 0 },\n     { actual: candidate([]float64{-1.0}), expected: 1 },\n\
    \     { actual: candidate([]float64{-1.0, 1.0, 0.0}), expected: 2 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpbv4kllyo_test.go:26:16: invalid operation: v < x (mismatched types int
    and float64)

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660074882
