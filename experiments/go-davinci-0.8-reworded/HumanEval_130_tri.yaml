name: HumanEval_130_tri
language: go_test.go
prompt: "package tri_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Everyone\
  \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n// the\
  \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
  // Tribonacci sequence is defined by the recurrence:\n// tri(1) = 3\n// tri(n) =\
  \ 1 + n / 2, if n is even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if\
  \ n is odd.\n// For example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3)\
  \ = tri(2) + tri(1) + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative\
  \ integer number n, you have to a return a list of the \n// first n + 1 numbers\
  \ of the Tribonacci sequence.\n// Examples:\n// >>> tri(3)\n// []int{1, 3, 2, 8}\n\
  func tri(n int) []int {\n"
tests: "func TestTri(t *testing.T) {\n  candidate := tri\n\ttype test struct {\n\t\
  \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
  \  { actual: candidate(3), expected: []int{1, 3, 2, 8} },\n     { actual: candidate(4),\
  \ expected: []int{1, 3, 2, 8, 3} },\n     { actual: candidate(5), expected: []int{1,\
  \ 3, 2, 8, 3, 15} },\n     { actual: candidate(6), expected: []int{1, 3, 2, 8, 3,\
  \ 15, 4} },\n     { actual: candidate(7), expected: []int{1, 3, 2, 8, 3, 15, 4,\
  \ 24} },\n     { actual: candidate(8), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
  \ 5} },\n     { actual: candidate(9), expected: []int{1, 3, 2, 8, 3, 15, 4, 24,\
  \ 5, 35} },\n     { actual: candidate(20), expected: []int{1, 3, 2, 8, 3, 15, 4,\
  \ 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11} },\n     { actual: candidate(0),\
  \ expected: []int{1} },\n     { actual: candidate(1), expected: []int{1, 3} },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    if n == 0 {\n        return []int{}\n    }\n    var res []int\n\
    \    res = append(res, 1)\n    res = append(res, 3)\n    res = append(res, 2)\n\
    \    if n <= 3 {\n        return res[:n+1]\n    }\n    for i := 3; i < n; i++\
    \ {\n        if i % 2 == 0 {\n            res = append(res, 1 + i / 2)\n     \
    \   } else {\n            res = append(res, res[i-1] + res[i-2] + res[i+1])\n\
    \        }\n    }\n    return res\n}\n", "    res := make([]int, n + 1)\n    res[0]\
    \ = 1\n    res[1] = 3\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            res[i] = 1 + i / 2\n        } else {\n        \
    \    res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return\
    \ res\n}\n", "    rst := make([]int, n + 1)\n    for i := 0; i <= n; i++ {\n \
    \       if i == 0 {\n            rst[i] = 1\n        } else if i % 2 == 0 {\n\
    \            rst[i] = 1 + i / 2\n        } else {\n            rst[i] = rst[i\
    \ - 1] + rst[i - 2] + rst[i + 1]\n        }\n    }\n    return rst\n}\n", "  \
    \  var arr []int\n    for i := 0; i <= n; i++ {\n        if i == 0 {\n       \
    \     arr = append(arr, 1)\n        } else if i == 1 {\n            arr = append(arr,\
    \ 3)\n        } else if i == 2 {\n            arr = append(arr, 2)\n        }\
    \ else if i % 2 == 0 {\n            arr = append(arr, 1 + i / 2)\n        } else\
    \ {\n            arr = append(arr, arr[i - 1] + arr[i - 2] + arr[i + 1])\n   \
    \     }\n    }\n    return arr\n}\n", "    if n == 0 {\n        return []int{1}\n\
    \    } else if n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n\
    \        return []int{1, 3, 2}\n    } else {\n        seq := []int{1, 3, 2}\n\
    \        for i := 3; i <= n; i++ {\n            if i % 2 == 0 {\n            \
    \    seq = append(seq, 1 + i / 2)\n            } else {\n                seq =\
    \ append(seq, seq[i - 1] + seq[i - 2] + seq[i + 1])\n            }\n        }\n\
    \        return seq\n    }\n}\n", "    if n == 0 {\n        return []int{1}\n\
    \    }\n    r := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        n1 :=\
    \ r[i - 1]\n        n2 := r[i - 2]\n        n3 := r[i - 3]\n        if i % 2 ==\
    \ 0 {\n            r = append(r, 1 + i / 2)\n        } else {\n            r =\
    \ append(r, n1 + n2 + n3)\n        }\n    }\n    return r\n}\n", "    if n < 0\
    \ {\n        return nil\n    }\n\n    a := make([]int, n + 1)\n    a[0] = 1\n\
    \    a[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n      \
    \      a[i] = 1 + i / 2\n        } else {\n            a[i] = a[i - 1] + a[i -\
    \ 2] + a[i + 1]\n        }\n    }\n    return a\n}\n", "    if n == 0 {\n    \
    \    return []int{}\n    }\n\n    result := make([]int, n + 1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n\n    for i := 3; i <= n; i++ {\n\
    \        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else {\n\
    \            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n     \
    \   }\n    }\n\n    return result\n}\n", "    ret := make([]int, n + 1)\n    ret[0]\
    \ = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            ret[i]\
    \ = 1 + i / 2\n        } else {\n            ret[i] = ret[i - 1] + ret[i - 2]\
    \ + ret[i + 1]\n        }\n    }\n    return ret\n}\n", "\tvar (\n\t\ti = 0\n\t\
    \ttmp = []int{1, 3, 2}\n\t\ttri = []int{1, 3, 2}\n\t)\n\tif n <= 2 {\n\t\treturn\
    \ tri[:n+1]\n\t}\n\tfor ; i < n - 2; i++ {\n\t\ttmp[0] = tmp[1]\n\t\ttmp[1] =\
    \ tmp[2]\n\t\ttmp[2] = tmp[0] + tmp[1] + tri[len(tri) - 2]\n\t\ttri = append(tri,\
    \ tmp[2])\n\t}\n\treturn tri\n}\n", "    dp := make([]int, n + 1)\n    for i :=\
    \ 1; i <= n; i++ {\n        if i % 2 == 0 {\n            dp[i] = 1 + i / 2\n \
    \       } else {\n            dp[i] = dp[i - 1] + dp[i - 2] + dp[i + 1]\n    \
    \    }\n    }\n    return dp\n}\n", "    if n < 0 {\n        return nil\n    }\n\
    \    t := make([]int, n + 1)\n    t[0] = 1\n    t[1] = 3\n    t[2] = 2\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            t[i] = 1 + i / 2\n\
    \        } else {\n            t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n       \
    \ }\n    }\n    return t\n}\n", "    r := make([]int, n+1)\n    r[0] = 1\n   \
    \ r[1] = 3\n    r[2] = 2\n    if n == 0 {\n        return r[:1]\n    }\n    if\
    \ n == 1 {\n        return r[:2]\n    }\n    if n == 2 {\n        return r[:3]\n\
    \    }\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            r[i]\
    \ = 1 + i / 2\n        } else {\n            r[i] = r[i-1] + r[i-2] + r[i+1]\n\
    \        }\n    }\n    return r\n}\n", "    if n == 0 {\n        return []int{}\n\
    \    }\n    var triList []int\n    triList = append(triList, 1)\n    for i :=\
    \ 1; i <= n; i++ {\n        triList = append(triList, triN(i))\n    }\n    return\
    \ triList\n}\n", "    // write your code in Go 1.4\n    seq := make([]int, n +\
    \ 1)\n    seq[0] = 1\n    seq[1] = 3\n    seq[2] = 2\n    for i := 3; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            seq[i] = 1 + i / 2\n        } else\
    \ {\n            seq[i] = seq[i - 1] + seq[i - 2] + seq[i + 1]\n        }\n  \
    \  }\n    return seq\n}\n", "    if n == 0 {\n        return []int{}\n    }\n\
    \    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return\
    \ []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n    }\n\
    \    slice := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if (i + 1)\
    \ % 2 == 0 {\n            slice = append(slice, 1 + (i + 1) / 2)\n        } else\
    \ {\n            slice = append(slice, slice[i - 1] + slice[i - 2] + slice[i +\
    \ 1])\n        }\n    }\n    return slice\n}\n", "    var ret []int\n    ret =\
    \ append(ret, 1)\n    if n <= 0 {\n        return ret\n    }\n    ret = append(ret,\
    \ 3)\n    if n == 1 {\n        return ret\n    }\n    ret = append(ret, 2)\n \
    \   if n == 2 {\n        return ret\n    }\n    ret = append(ret, 8)\n    var\
    \ num int\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n          \
    \  num = 1 + i / 2\n        } else {\n            num = ret[i - 1] + ret[i - 2]\
    \ + ret[i - 3]\n        }\n        ret = append(ret, num)\n    }\n    return ret\n\
    }\n", "\tif n == 0 {\n\t\treturn []int{1}\n\t}\n\tswitch {\n\tcase n == 1:\n\t\
    \treturn []int{1, 3}\n\tcase n == 2:\n\t\treturn []int{1, 3, 2}\n\tdefault:\n\t\
    \ttmp := tri(n - 1)\n\t\treturn append(tmp, tmp[n - 1] + tmp[n - 2] + tmp[n -\
    \ 3])\n\t}\n}\n", "    if n == 0 {\n        return []int{1}\n    } else if n ==\
    \ 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n        return []int{1,\
    \ 3, 2}\n    }\n    s := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n     \
    \   s = append(s, s[i - 1] + s[i - 2] + s[i - 3])\n    }\n    return s\n}\n",
  "    if n < 1 {\n        return []int{}\n    }\n    t := make([]int, n+1)\n    t[0]\
    \ = 1\n    t[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            t[i] = 1 + i / 2\n        } else {\n            t[i] = t[i-1] + t[i-2]\
    \ + t[i+1]\n        }\n    }\n    return t\n}\n", "    if n == 0 {\n        return\
    \ []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n ==\
    \ 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1,\
    \ 3, 2}\n    }\n    res := make([]int, n + 1)\n    res[0] = 1\n    res[1] = 3\n\
    \    res[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n    \
    \        res[i] = 1 + i / 2\n        } else {\n            res[i] = res[i - 1]\
    \ + res[i - 2] + res[i + 1]\n        }\n    }\n    return res\n}\n", "    if n\
    \ == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n\
    \    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n\
    \        return []int{1, 3, 2}\n    }\n    result := make([]int, n+1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n    for i := 3; i <= n; i++ {\n \
    \       if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else {\n\
    \            result[i] = result[i-1] + result[i-2] + result[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    if n < 0 {\n        return nil\n    }\n\n\
    \    res := make([]int, n + 1)\n    res[0] = 1\n    res[1] = 3\n    for i := 2;\
    \ i <= n; i++ {\n        if i % 2 == 0 {\n            res[i] = 1 + i / 2\n   \
    \     } else {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n  \
    \      }\n    }\n\n    return res\n}\n", "    a := []int{1, 3, 2}\n    if n <\
    \ 3 {\n        return a[:n+1]\n    }\n    a = append(a, 0)\n    for i := 3; i\
    \ <= n; i++ {\n        if i % 2 == 0 {\n            a[i] = a[i/2] + 1\n      \
    \  } else {\n            a[i] = a[i-1] + a[i-2] + a[i+1]\n        }\n    }\n \
    \   return a\n}\n", "    if n == 0 {\n        return []int{}\n    }\n\n    if\
    \ n == 1 {\n        return []int{1}\n    }\n\n    result := []int{1, 3}\n    if\
    \ n == 2 {\n        return result\n    }\n\n    for i := 2; i < n; i++ {\n   \
    \     num := 0\n        if i % 2 == 0 {\n            num = 1 + i / 2\n       \
    \ } else {\n            num = result[i - 1] + result[i - 2] + result[i + 1]\n\
    \        }\n        result = append(result, num)\n    }\n\n    return result\n\
    }\n", "    res := make([]int, n + 1)\n    if n == 0 {\n        return res\n  \
    \  }\n    if n == 1 {\n        res[1] = 3\n        return res\n    }\n    res[1]\
    \ = 3\n    res[2] = 2\n    res[3] = 8\n    for i := 4; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            res[i] = 1 + i / 2\n        } else {\n        \
    \    res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return\
    \ res\n}\n", "    res := make([]int, n + 1)\n    for i := 0; i <= n; i++ {\n \
    \       if i == 0 {\n            res[i] = 1\n        } else if i % 2 == 0 {\n\
    \            res[i] = 1 + i / 2\n        } else {\n            res[i] = res[i\
    \ - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return res\n}\n", "  \
    \  if n == 0 {\n        return []int{}\n    }\n    result := make([]int, n + 1)\n\
    \    result[0] = 1\n    for i := 1; i <= n; i++ {\n        switch i {\n      \
    \  case 1:\n            result[i] = 3\n        case 2:\n            result[i]\
    \ = 2\n        default:\n            if i % 2 == 0 {\n                result[i]\
    \ = 1 + i / 2\n            } else {\n                result[i] = result[i - 1]\
    \ + result[i - 2] + result[i - 3]\n            }\n        }\n    }\n    return\
    \ result\n}\n", "    rs := make([]int, n + 1)\n    rs[0] = 1\n    rs[1] = 3\n\
    \    rs[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n     \
    \       rs[i] = rs[i - 2] + 1 + i / 2\n        } else {\n            rs[i] = rs[i\
    \ - 1] + rs[i - 2] + rs[i - 3]\n        }\n    }\n    return rs\n}\n", "    r\
    \ := make([]int, n + 1)\n    if n == 0 {\n        return r\n    }\n    r[0] =\
    \ 1\n    r[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n  \
    \          r[i] = 1 + i / 2\n        } else {\n            r[i] = r[i - 1] + r[i\
    \ - 2] + r[i + 1]\n        }\n    }\n    return r\n}\n", "    if n == 0 {\n  \
    \      return []int{1}\n    }\n    var sequence []int\n    for i := 0; i <= n;\
    \ i++ {\n        tri := 0\n        if i == 0 {\n            tri = 1\n        }\
    \ else if i == 1 {\n            tri = 3\n        } else if i == 2 {\n        \
    \    tri = 2\n        } else if i % 2 == 0 {\n            tri = 1 + i / 2\n  \
    \      } else {\n            tri = tri(i - 1) + tri(i - 2) + tri(i + 1)\n    \
    \    }\n        sequence = append(sequence, tri)\n    }\n    return sequence\n\
    }\n", "    switch n {\n    case 0:\n        return []int{1}\n    case 1:\n   \
    \     return []int{1, 3}\n    case 2:\n        return []int{1, 3, 2}\n    }\n\
    \    r := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        if i & 1 == 0\
    \ {\n            r = append(r, 1 + i / 2)\n        } else {\n            r = append(r,\
    \ r[i - 1] + r[i - 2] + r[i + 1])\n        }\n    }\n    return r\n}\n", "   \
    \ ret := make([]int, n + 1)\n    ret[0] = 1\n    ret[1] = 3\n    ret[2] = 2\n\
    \    for i := 3; i <= n; i++ {\n        if i & 1 == 0 {\n            ret[i] =\
    \ 1 + i / 2\n        } else {\n            ret[i] = ret[i - 1] + ret[i - 2] +\
    \ ret[i + 1]\n        }\n    }\n    return ret\n}\n", "    // TODO: Write your\
    \ code here\n    return nil\n}\n", "\tresult := make([]int, n+1)\n\tif n == 0\
    \ {\n\t\treturn result\n\t}\n\n\tresult[0] = 1\n\tresult[1] = 3\n\tresult[2] =\
    \ 2\n\tfor i := 3; i <= n; i++ {\n\t\tresult[i] = result[i-1] + result[i-2] +\
    \ result[i-3]\n\t}\n\treturn result\n}\n", "    arr := make([]int, n + 1)\n  \
    \  arr[0] = 1\n    arr[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            arr[i] = 1 + i / 2\n        } else {\n            arr[i]\
    \ = arr[i - 1] + arr[i - 2] + arr[i + 1]\n        }\n    }\n    return arr\n}\n",
  "    // just a hint, you have to implement it by yourself\n    return []int{}\n\
    }\n", "    res := make([]int, n + 1)\n    res[0] = 1\n    res[1] = 3\n    for\
    \ i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i] = 1 + i /\
    \ 2\n        } else {\n            res[i] = res[i - 1] + res[i - 2] + res[i +\
    \ 1]\n        }\n    }\n    return res\n}\n", "    // The first n + 1 numbers\
    \ of the Tribonacci sequence are:\n    // [1, 3, 2, 8, 5, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368,\
    \ 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296,\
    \ 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049,\
    \ 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445,\
    \ 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961,\
    \ 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288,\
    \ 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129,\
    \ 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707,\
    \ 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906,\
    \ 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585,\
    \ 420196140727489673, 679891637638612258, 1100087778366101931, 1779979416004714189,\
    \ 2880067194370816120, 4660046610375530309, 7540113804746346429", "\tif n < 1\
    \ {\n\t\treturn []int{}\n\t}\n\tresult := []int{1, 3, 2}\n\ti := 3\n\tfor i <=\
    \ n {\n\t\tif i % 2 == 0 {\n\t\t\tresult = append(result, 1 + i / 2)\n\t\t} else\
    \ {\n\t\t\tresult = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n\t\t}\n\t\ti++\n\t}\n\treturn result\n}\n", "    var trib []int\n    trib\
    \ = append(trib, 1)\n    for i := 0; i < n; i++ {\n        tmp := 0\n        if\
    \ i % 2 == 0 {\n            tmp = 1 + i / 2\n        } else {\n            if\
    \ i < 2 {\n                tmp = 1\n            } else {\n                tmp\
    \ = trib[i - 1] + trib[i - 2] + trib[i + 1]\n            }\n        }\n      \
    \  trib = append(trib, tmp)\n    }\n    return trib\n}\n", "    r := make([]int,\
    \ n + 1)\n    r[0] = 1\n    r[1] = 3\n    r[2] = 2\n    for i := 3; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            r[i] = 1 + i / 2\n        } else {\n\
    \            r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n        }\n    }\n    return\
    \ r\n}\n", "    var tri []int\n    for i := 0; i <= n; i++ {\n        if i ==\
    \ 0 {\n            tri = append(tri, 1)\n        } else if i == 1 {\n        \
    \    tri = append(tri, 3)\n        } else if i == 2 {\n            tri = append(tri,\
    \ 2)\n        } else if i % 2 == 0 {\n            tri = append(tri, 1 + i / 2)\n\
    \        } else {\n            tri = append(tri, tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1])\n        }\n    }\n    return tri\n}\n", "    res := make([]int, 0)\n\
    \    if n <= 0 {\n        return res\n    }\n    var f func(n int) int\n    f\
    \ = func(n int) int {\n        if n == 1 {\n            return 3\n        }\n\
    \        if n % 2 == 0 {\n            return 1 + n / 2\n        }\n        return\
    \ f(n - 1) + f(n - 2) + f(n + 1)\n    }\n    for i := 1; i <= n; i++ {\n     \
    \   res = append(res, f(i))\n    }\n    return res\n}\n", "    memo := make([]int,\
    \ n + 1)\n    memo[0] = 3\n    memo[1] = 2\n    memo[2] = 1\n    return rTri(n,\
    \ memo)\n}\n", "    if n < 1 {\n        return []int{}\n    }\n\n    var res []int\n\
    \    res = append(res, 1)\n    for i := 1; i <= n; i++ {\n        switch {\n \
    \       case i == 1:\n            res = append(res, 3)\n        case i % 2 ==\
    \ 0:\n            res = append(res, 1 + i / 2)\n        default:\n           \
    \ res = append(res, res[i-1] + res[i-2] + res[i+1])\n        }\n    }\n    return\
    \ res\n}\n", "    tri := []int{}\n    // FILL THIS IN\n    return tri\n}\n", " \
    \   if n == 0 {\n        return []int{}\n    }\n    seq := make([]int, n + 1)\n\
    \    seq[0] = 1\n    seq[1] = 3\n    seq[2] = 2\n    for i := 3; i <= n; i++ {\n\
    \        if i % 2 == 0 {\n            seq[i] = 1 + i / 2\n        } else {\n \
    \           seq[i] = seq[i - 1] + seq[i - 2] + seq[i + 1]\n        }\n    }\n\
    \    return seq\n}\n", "    if n == 0 {\n        return []int{1}\n    } else if\
    \ n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n        return\
    \ []int{1, 3, 2}\n    } else {\n        l := []int{1, 3, 2}\n        for i :=\
    \ 3; i <= n; i++ {\n            if i % 2 == 0 {\n                l = append(l,\
    \ 1 + i / 2)\n            } else {\n                l = append(l, l[i - 1] + l[i\
    \ - 2] + l[i + 1])\n            }\n        }\n        return l\n    }\n}\n", " \
    \   ret := make([]int, n+1)\n    ret[0] = 1\n    ret[1] = 3\n    ret[2] = 2\n\
    \    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            ret[i] =\
    \ 1 + i / 2\n        } else {\n            ret[i] = ret[i-1] + ret[i-2] + ret[i+1]\n\
    \        }\n    }\n    return ret\n}\n", "    l := make([]int, n+1)\n    if n\
    \ == 0 {\n        return l\n    }\n    l[0] = 1\n    if n == 1 {\n        return\
    \ l\n    }\n    l[1] = 3\n    if n == 2 {\n        return l\n    }\n    l[2] =\
    \ 2\n    if n == 3 {\n        return l\n    }\n    for i := 3; i <= n; i++ {\n\
    \        if i%2 == 0 {\n            l[i] = 1 + i/2\n        } else {\n       \
    \     l[i] = l[i-1] + l[i-2] + l[i+1]\n        }\n    }\n    return l\n}\n", " \
    \   if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return\
    \ []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if\
    \ n == 3 {\n        return []int{1, 3, 2}\n    }\n    result := make([]int, n\
    \ + 1)\n    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n\
    \        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        }\n    }\n    return result\n}\n", "    out := make([]int, n +\
    \ 1)\n    for i := 1; i <= n; i++ {\n        var t int\n        if i == 1 {\n\
    \            t = 3\n        } else if i & 1 == 0 {\n            t = 1 + i / 2\n\
    \        } else {\n            t = out[i - 1] + out[i - 2] + out[i + 1]\n    \
    \    }\n        out[i] = t\n    }\n    return out\n}\n", "    // Your code here...\n\
    \    return []int{}\n}\n", "    sequence := []int{1, 3, 2}\n    if n <= 2 {\n\
    \        return sequence[:n + 1]\n    }\n    for i := 3; i <= n; i++ {\n     \
    \   if i % 2 == 0 {\n            sequence = append(sequence, 1 + i / 2)\n    \
    \    } else {\n            sequence = append(sequence, sequence[i - 1] + sequence[i\
    \ - 2] + sequence[i + 1])\n        }\n    }\n    return sequence\n}\n", "    seq\
    \ := make([]int, n + 1)\n    seq[0] = 1\n    seq[1] = 3\n    seq[2] = 2\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            seq[i] = 1 + i /\
    \ 2\n        } else {\n            seq[i] = seq[i - 1] + seq[i - 2] + seq[i +\
    \ 1]\n        }\n    }\n    return seq\n}\n", "    switch n {\n    case 0:\n \
    \       return []int{1}\n    case 1:\n        return []int{1, 3}\n    case 2:\n\
    \        return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n", "    if n == 0 {\n\
    \        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n   \
    \ }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n   \
    \     return []int{1, 3, 2}\n    }\n    result := make([]int, n+1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n    for i := 3; i <= n; i++ {\n \
    \       if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else {\n\
    \            result[i] = result[i-1] + result[i-2] + result[i+1]\n        }\n\
    \    }\n    return result\n}\n", "    if n < 1 {\n        return []int{}\n   \
    \ }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3, 2}\n    }\n    tri := []int{1, 3, 2}\n    for i := 3;\
    \ i <= n; i++ {\n        tri = append(tri, tri[i - 3] + tri[i - 2] + tri[i - 1])\n\
    \    }\n    return tri\n}\n", "    if n == 0 {\n        return []int{}\n    }\n\
    \    l := make([]int, n + 1)\n    l[0] = 1\n    l[1] = 3\n    l[2] = 2\n    for\
    \ i := 3; i <= n; i++ {\n        l[i] = l[i - 1] + l[i - 2] + l[i - 3]\n    }\n\
    \    return l\n}\n", "    r := make([]int, n + 1)\n    r[0] = 1\n    r[1] = 3\n\
    \    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            r[i] = 1\
    \ + i / 2\n        } else {\n            r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n\
    \        }\n    }\n    return r\n}\n", "    var r []int = []int{1, 3, 2}\n   \
    \ for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            r = append(r,\
    \ 1 + i / 2)\n        } else {\n            r = append(r, r[i - 1] + r[i - 2]\
    \ + r[i + 1])\n        }\n    }\n    return r\n}\n", "    if n == 0 {\n      \
    \  return []int{}\n    }\n\n    rst := make([]int, n + 1)\n    rst[0] = 1\n  \
    \  rst[1] = 3\n    rst[2] = 2\n    rst[3] = 8\n\n    for i := 4; i <= n; i++ {\n\
    \        if i % 2 == 0 {\n            rst[i] = 1 + i / 2\n        } else {\n \
    \           rst[i] = rst[i - 1] + rst[i - 2] + rst[i + 1]\n        }\n    }\n\n\
    \    return rst\n}\n", "    if n < 0 {\n        return nil\n    }\n    a := []int{1,\
    \ 3, 2}\n    if n < 3 {\n        return a[:n+1]\n    }\n    for i := 3; i <= n;\
    \ i++ {\n        a = append(a, a[i-1] + a[i-2] + a[i-3])\n    }\n    return a\n\
    }\n", "    // TODO: return the list of the first n + 1 numbers of the Tribonacci\
    \ sequence.\n    return []int{}\n}\n", "\tif n < 1 {\n\t\treturn []int{1}\n\t\
    }\n\tout := []int{1, 3, 2}\n\tfor i := 3; i <= n; i++ {\n\t\tv := 0\n\t\tif i\
    \ % 2 == 0 {\n\t\t\tv = 1 + i / 2\n\t\t} else {\n\t\t\tv = out[i - 1] + out[i\
    \ - 2] + out[i - 3]\n\t\t}\n\t\tout = append(out, v)\n\t}\n\treturn out\n}\n",
  "    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    // initialize\
    \ array to sum of first two elements\n    tri := make([]int, n + 1)\n    tri[0]\
    \ = 1\n    tri[1] = 3\n    // compute rest\n    for i := 2; i <= n; i++ {\n  \
    \      if i % 2 == 0 {\n            tri[i] = 1 + i / 2\n        } else {\n   \
    \         tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n        }\n    }\n  \
    \  return tri\n}\n", "    if n < 0 {\n        return nil\n    }\n    l := n +\
    \ 1\n    res := make([]int, l)\n    if l > 0 {\n        res[0] = 1\n    }\n  \
    \  if l > 1 {\n        res[1] = 3\n    }\n    if l > 2 {\n        res[2] = 2\n\
    \    }\n    for i := 3; i < l; i++ {\n        res[i] = res[i - 1] + res[i - 2]\
    \ + res[i - 3]\n    }\n    return res\n}\n", "    if n == 0 {\n        return\
    \ []int{1}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if\
    \ n == 2 {\n        return []int{1, 3, 2}\n    }\n    a, b, c := 1, 3, 2\n   \
    \ res := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        n := a + b + c\n\
    \        res = append(res, n)\n        a, b, c = b, c, n\n    }\n    return res\n\
    }\n", "    if n < 0 {\n        return nil\n    }\n    if n == 0 {\n        return\
    \ []int{1}\n    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if\
    \ n == 2 {\n        return []int{1, 3, 2}\n    }\n    t := []int{1, 3, 2}\n  \
    \  for i := 2; i < n; i++ {\n        if i % 2 == 0 {\n            t = append(t,\
    \ 1 + i / 2)\n        } else {\n            t = append(t, t[i - 1] + t[i - 2]\
    \ + t[i + 1])\n        }\n    }\n    return t\n}\n", "    if n < 0 {\n       \
    \ return nil\n    }\n    results := make([]int, n + 1)\n    results[0] = 1\n \
    \   results[1] = 3\n    results[2] = 2\n    for i := 3; i <= n; i++ {\n      \
    \  if i % 2 == 0 {\n            results[i] = 1 + i / 2\n        } else {\n   \
    \         results[i] = results[i - 1] + results[i - 2] + results[i + 1]\n    \
    \    }\n    }\n    return results\n}\n", "    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    ret := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if i\
    \ % 2 == 0 {\n            ret = append(ret, 1 + i / 2)\n        } else {\n   \
    \         ret = append(ret, ret[i - 1] + ret[i - 2] + ret[i + 1])\n        }\n\
    \    }\n    return ret\n}\n", "    if n < 0 {\n        return nil\n    }\n   \
    \ seq := make([]int, n + 1)\n    seq[0] = 1\n    seq[1] = 3\n    seq[2] = 2\n\
    \    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            seq[i] =\
    \ 1 + i / 2\n        } else {\n            seq[i] = seq[i - 1] + seq[i - 2] +\
    \ seq[i + 1]\n        }\n    }\n    return seq\n}\n", "    var tri []int\n   \
    \ for i := 0; i <= n; i++ {\n        if i == 0 {\n            tri = append(tri,\
    \ 1)\n        } else if i == 1 {\n            tri = append(tri, 3)\n        }\
    \ else if i == 2 {\n            tri = append(tri, 2)\n        } else if i % 2\
    \ == 0 {\n            tri = append(tri, 1 + i / 2)\n        } else {\n       \
    \     tri = append(tri, tri[i - 1] + tri[i - 2] + tri[i + 1])\n        }\n   \
    \ }\n    return tri\n}\n", "\tvar result []int\n\tresult = append(result, 1)\n\
    \tfor i := 1; i <= n; i++ {\n\t\tif i % 2 == 0 {\n\t\t\tresult = append(result,\
    \ i/2)\n\t\t} else {\n\t\t\tresult = append(result, result[i-2] + result[i-1]\
    \ + result[i+1])\n\t\t}\n\t}\n\treturn result\n}\n", "    if n == 0 {\n      \
    \  return []int{1}\n    } else if n == 1 {\n        return []int{1, 3}\n    }\
    \ else if n == 2 {\n        return []int{1, 3, 2}\n    }\n    result := make([]int,\
    \ n + 1)\n    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n\
    \        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        }\n    }\n    return result\n}\n", "    res := make([]int, n +\
    \ 1)\n    for i := 0; i <= n; i++ {\n        if i <= 2 {\n            res[i] =\
    \ 1\n        } else {\n            res[i] = res[i - 1] + res[i - 2] + res[i -\
    \ 3]\n        }\n    }\n    return res\n}\n", "    if n == 0 {\n        return\
    \ []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n ==\
    \ 2 {\n        return []int{1, 2}\n    }\n    res := []int{1, 3, 2}\n    for i\
    \ := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res,\
    \ 1 + i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i\
    \ - 2] + res[i + 1])\n        }\n    }\n    return res\n}\n", "    return []int{1,\
    \ 3, 2, 8}\n}\n", "    if n < 0 {\n        return nil\n    }\n    res := make([]int,\
    \ n + 1)\n    if n == 0 {\n        return res\n    }\n    res[0] = 1\n    if n\
    \ == 1 {\n        return res\n    }\n    res[1] = 3\n    if n == 2 {\n       \
    \ return res\n    }\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            res[i] = 1 + i / 2\n        } else {\n           \
    \ res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return\
    \ res\n}\n", "    var list []int\n    for i := 0; i <= n; i++ {\n        if i\
    \ == 0 {\n            list = append(list, 1)\n        } else if i == 1 {\n   \
    \         list = append(list, 3)\n        } else if i == 2 {\n            list\
    \ = append(list, 2)\n        } else if i % 2 == 0 {\n            list = append(list,\
    \ 1 + i / 2)\n        } else {\n            list = append(list, list[i - 1] +\
    \ list[i - 2] + list[i + 1])\n        }\n    }\n    return list\n}\n", "    if\
    \ n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n\
    \    }\n    var ret = make([]int, n+1)\n    ret[0] = 1\n    ret[1] = 3\n    ret[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            ret[i]\
    \ = 1 + i / 2\n        } else {\n            ret[i] = ret[i-1] + ret[i-2] + ret[i+1]\n\
    \        }\n    }\n    return ret\n}\n", "    var a, b, c, tmp int = 3, 2, 1,\
    \ 0\n    ret := make([]int, n+1)\n    for i := 0; i <= n; i++ {\n        if i\
    \ == 0 {\n            ret[i] = a\n        } else if i == 1 {\n            ret[i]\
    \ = b\n        } else if i == 2 {\n            ret[i] = c\n        } else {\n\
    \            if i % 2 == 0 {\n                tmp = 1 + i / 2\n            } else\
    \ {\n                tmp = a + b + c\n            }\n            a = b\n     \
    \       b = c\n            c = tmp\n            ret[i] = tmp\n        }\n    }\n\
    \    return ret\n}\n", "    if n == 0 {\n        return []int{1}\n    } else if\
    \ n == 1 {\n        return []int{1, 3}\n    } else if n == 2 {\n        return\
    \ []int{1, 3, 2}\n    } else {\n        result := []int{1, 3, 2}\n        i :=\
    \ 3\n        for ; i <= n; i++ {\n            if i % 2 == 0 {\n              \
    \  result = append(result, 1 + i / 2)\n            } else {\n                result\
    \ = append(result, result[i - 1] + result[i - 2] + result[i + 1])\n          \
    \  }\n        }\n        return result\n    }\n}\n", "    if n == 0 {\n      \
    \  return []int{1}\n    } else if n == 1 {\n        return []int{1, 3}\n    }\
    \ else if n == 2 {\n        return []int{1, 3, 2}\n    } else {\n        r :=\
    \ tri(n - 1)\n        if n % 2 == 0 {\n            r = append(r, 1 + n / 2)\n\
    \        } else {\n            r = append(r, r[n - 1] + r[n - 2] + r[n + 1])\n\
    \        }\n        return r\n    }\n}\n", "    if n < 1 {\n        return []int{}\n\
    \    }\n\n    res := make([]int, n + 1)\n    if n == 1 {\n        res[0] = 1\n\
    \        res[1] = 3\n        return res\n    }\n\n    res[0] = 1\n    res[1] =\
    \ 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i]\
    \ = 1 + i / 2\n        } else {\n            res[i] = res[i - 1] + res[i - 2]\
    \ + res[i + 1]\n        }\n    }\n\n    return res\n}\n", "    tri := []int{1,\
    \ 3, 2}\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            tri\
    \ = append(tri, 1 + i / 2)\n        } else {\n            tri = append(tri, tri[i\
    \ - 1] + tri[i - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n", " \
    \   if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n        return\
    \ []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1, 3, 2}\n    }\n\
    \    arr := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        arr = append(arr,\
    \ nextTri(arr))\n    }\n    return arr\n}\n", "    result := make([]int, n+1)\n\
    \    result[0] = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n \
    \           result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i-1]\
    \ + result[i-2] + result[i+1]\n        }\n    }\n    return result\n}\n", "  \
    \  var tri []int\n    if n == 0 {\n        return tri\n    }\n    tri = make([]int,\
    \ n + 1)\n    tri[0] = 1\n    tri[1] = 3\n    tri[2] = 2\n    var i int\n    for\
    \ i = 3; i <= n; i++ {\n        if i % 2 == 0 {\n            tri[i] = 1 + i /\
    \ 2\n        } else {\n            tri[i] = tri[i - 1] + tri[i - 2] + tri[i +\
    \ 1]\n        }\n    }\n    return tri\n}\n", "\tif n == 0 {\n\t\treturn []int{1}\n\
    \t} else if n == 1 {\n\t\treturn []int{1, 3}\n\t} else if n == 2 {\n\t\treturn\
    \ []int{1, 3, 2}\n\t}\n\tseq := []int{1, 3, 2}\n\tfor n > 2 {\n\t\tseq = append(seq,\
    \ seq[len(seq) - 1] + seq[len(seq) - 2] + seq[len(seq) - 3])\n\t\tn--\n\t}\n\t\
    return seq\n}\n", "    rs := make([]int, n + 1)\n    for i := 1; i <= n; i++ {\n\
    \        if i == 1 {\n            rs[1] = 3\n        } else if i == 2 {\n    \
    \        rs[2] = 2\n        } else if i == 3 {\n            rs[3] = 8\n      \
    \  } else if i % 2 == 0 {\n            rs[i] = 1 + i / 2\n        } else {\n \
    \           rs[i] = rs[i - 1] + rs[i - 2] + rs[i - 3]\n        }\n    }\n    return\
    \ rs\n}\n", "    if n < 0 {\n        return nil\n    }\n    result := make([]int,\
    \ n + 1)\n    if n > 0 {\n        result[0] = 1\n    }\n    if n > 1 {\n     \
    \   result[1] = 3\n    }\n    if n > 2 {\n        result[2] = 2\n    }\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = 1 +\
    \ i / 2\n        } else {\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1]\n        }\n    }\n    return result\n}\n", "    if n ==\
    \ 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n\
    \    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n\
    \        return []int{1, 3, 2}\n    }\n    var seq []int\n    seq = append(seq,\
    \ 1, 3, 2)\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n         \
    \   seq = append(seq, 1 + i / 2)\n        } else {\n            seq = append(seq,\
    \ seq[i - 1] + seq[i - 2] + seq[i - 3])\n        }\n    }\n    return seq\n}\n",
  "    if n == 0 {\n        return []int{}\n    }\n    result := make([]int, n + 1)\n\
    \    result[0] = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n \
    \           result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        }\n    }\n    return result\n\
    }\n", "    var ret []int\n    if n == 0 {\n        return ret\n    }\n    ret\
    \ = append(ret, 1)\n    if n == 1 {\n        return ret\n    }\n    ret = append(ret,\
    \ 3)\n    if n == 2 {\n        return ret\n    }\n    ret = append(ret, 2)\n \
    \   if n == 3 {\n        return ret\n    }\n    for i := 3; i < n; i++ {\n   \
    \     val := ret[i - 3] + ret[i - 2] + ret[i - 1]\n        ret = append(ret, val)\n\
    \    }\n    return ret\n}\n", "    if n < 1 {\n        return []int{1}\n    }\n\
    \    result := make([]int, n + 1)\n    result[0] = 1\n    result[1] = 3\n    result[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = 1 + i / 2\n        } else {\n            result[i] = result[i - 1] + result[i\
    \ - 2] + result[i + 1]\n        }\n    }\n    return result\n}\n", "    triList\
    \ := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            newVal := 1 + i / 2\n            triList = append(triList, newVal)\n\
    \        } else {\n            if i == 3 {\n                newVal := triList[i\
    \ - 1] + triList[i - 2] + triList[i + 1]\n                triList = append(triList,\
    \ newVal)\n            } else {\n                newVal := triList[i - 1] + triList[i\
    \ - 2] + triList[i - 3]\n                triList = append(triList, newVal)\n \
    \           }\n        }\n    }\n    return triList\n}\n", "    if n < 1 {\n \
    \       return []int{1}\n    }\n    if n == 1 {\n        return []int{1, 3}\n\
    \    }\n    if n == 2 {\n        return []int{1, 3, 2}\n    }\n    t := []int{1,\
    \ 3, 2}\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            t\
    \ = append(t, 1 + i / 2)\n        } else {\n            t = append(t, t[i - 1]\
    \ + t[i - 2] + t[i + 1])\n        }\n    }\n    return t\n}\n", "    res := make([]int,\
    \ 0)\n    if n == 0 {\n        return res\n    }\n    res = append(res, 1)\n \
    \   if n == 1 {\n        return res\n    }\n    res = append(res, 3)\n    if n\
    \ == 2 {\n        return res\n    }\n    res = append(res, 2)\n    if n == 3 {\n\
    \        return res\n    }\n    for i := 4; i <= n; i++ {\n        res = append(res,\
    \ res[i - 2] + res[i - 3] + res[i - 4])\n    }\n    return res\n}\n", "\t// Write\
    \ your code here\n    if n < 0 {\n        return nil\n    }\n    res := make([]int,\
    \ n + 1)\n    res[0] = 1\n    res[1] = 3\n    res[2] = 2\n    for i := 3; i <=\
    \ n; i++ {\n        if i % 2 == 0 {\n            res[i] = 1 + i / 2\n        }\
    \ else {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n\
    \    }\n    return res\n}\n", "    // your code here\n    return []int{1, 2, 3}\n\
    }\n", "    res := make([]int, 0)\n    if n == 0 {\n        return res\n    }\n\
    \    res = append(res, 1)\n    if n == 1 {\n        return res\n    }\n    res\
    \ = append(res, 3)\n    if n == 2 {\n        return res\n    }\n    res = append(res,\
    \ 2)\n    if n == 3 {\n        return res\n    }\n    for i := 4; i <= n; i++\
    \ {\n        res = append(res, res[i - 1] + res[i - 2] + res[i - 3])\n    }\n\
    \    return res\n}\n", "    if n == 0 {\n        return []int{}\n    }\n    if\
    \ n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return []int{1,\
    \ 3}\n    }\n    result := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n   \
    \     if i % 2 == 0 {\n            result = append(result, 1 + i / 2)\n      \
    \  } else {\n            result = append(result, result[i - 1] + result[i - 2]\
    \ + result[i + 1])\n        }\n    }\n    return result\n}\n", "    var a int\
    \ = 1\n    var b int = 3\n    var c int = 2\n    var temp int\n    res := []int{a,\
    \ b, c}\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n            temp\
    \ = 1 + i / 2\n        } else {\n            temp = a + b + c\n        }\n   \
    \     a = b\n        b = c\n        c = temp\n        res = append(res, temp)\n\
    \    }\n    return res\n}\n", "    if n == 0 {\n        return []int{}\n    }\n\
    \    var out []int\n    for i := 1; i <= n + 1; i++ {\n        t := tri0(i)\n\
    \        out = append(out, t)\n    }\n    return out\n}\n", "    // YOUR CODE\
    \ HERE\n    return []int{}\n}\n", "\tret := make([]int, n + 1)\n\tret[0] = 1\n\
    \tret[1] = 3\n\tret[2] = 2\n\tfor i := 3; i <= n; i++ {\n\t\tif i % 2 == 0 {\n\
    \t\t\tret[i] = 1 + i / 2\n\t\t} else {\n\t\t\tret[i] = ret[i - 1] + ret[i - 2]\
    \ + ret[i + 1]\n\t\t}\n\t}\n\treturn ret\n}\n", "    if n < 0 {\n        return\
    \ nil\n    }\n    dp := make([]int, n + 1)\n    dp[0] = 1\n    dp[1] = 3\n   \
    \ dp[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n        \
    \    dp[i] = 1 + i / 2\n        } else {\n            dp[i] = dp[i - 1] + dp[i\
    \ - 2] + dp[i + 1]\n        }\n    }\n    return dp\n}\n", "    s := make([]int,\
    \ n+1)\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            s[i]\
    \ = 1 + i / 2\n        } else {\n            s[i] = s[i-1] + s[i-2] + s[i+1]\n\
    \        }\n    }\n    return s\n}\n", "\treturn nil\n}\n", "    result := make([]int,\
    \ n + 1)\n    if n > 0 {\n        result[0] = 1\n    }\n    if n > 1 {\n     \
    \   result[1] = 3\n    }\n    if n > 2 {\n        result[2] = 2\n    }\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = 1 +\
    \ i / 2\n        } else {\n            result[i] = result[i - 1] + result[i -\
    \ 2] + result[i + 1]\n        }\n    }\n    return result\n}\n", "    if n ==\
    \ 0 {\n        return []int{1}\n    }\n    res := make([]int, n + 1)\n    res[0]\
    \ = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i]\
    \ = 1 + i / 2\n        } else {\n            res[i] = res[i - 1] + res[i - 2]\
    \ + res[i + 1]\n        }\n    }\n    return res\n}\n", "    res := make([]int,\
    \ 0)\n    for i := 1; i <= n + 1; i++ {\n        res = append(res, fib(i))\n \
    \   }\n    return res\n}\n", "    return nil\n}\n", "    // TODO(sdu): your code\
    \ here.\n    return []int{}\n}\n", "    tri := []int{3, 2, 1}\n    if n == 0 {\n\
    \        return []int{}\n    } else if n == 1 {\n        return []int{3}\n   \
    \ } else if n == 2 {\n        return []int{3, 2}\n    } else if n == 3 {\n   \
    \     return []int{3, 2, 1}\n    }\n    for i := 4; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            tri = append(tri, 1 + i / 2)\n        } else {\n \
    \           tri = append(tri, tri[i - 4] + tri[i - 3] + tri[i - 2])\n        }\n\
    \    }\n    return tri\n}\n", "    var a []int\n    for i := 0; i <= n; i++ {\n\
    \        if i == 0 {\n            a = append(a, 1)\n        } else if i == 1 {\n\
    \            a = append(a, 3)\n        } else if i == 2 {\n            a = append(a,\
    \ 2)\n        } else if i % 2 == 0 {\n            a = append(a, 1 + i / 2)\n \
    \       } else {\n            a = append(a, a[i - 1] + a[i - 2] + a[i + 1])\n\
    \        }\n    }\n    return a\n}\n", "    // Write your code here\n    slice\
    \ := make([]int, n+1)\n    if n == 0 {\n        return []int{}\n    } else if\
    \ n == 1 {\n        return []int{1}\n    } else if n == 2 {\n        return []int{1,\
    \ 3}\n    }\n    slice[0] = 1\n    slice[1] = 3\n    slice[2] = 2\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            slice[i] = 1 + i / 2\n\
    \        } else {\n            slice[i] = slice[i-1] + slice[i-2] + slice[i+1]\n\
    \        }\n    }\n    return slice\n}\n", "    var t [3]int\n    t[0] = 1\n \
    \   t[1] = 3\n    t[2] = 2\n    var result []int\n    if n == 0 {\n        return\
    \ result\n    }\n    result = append(result, t[1])\n    for i := 0; i < n; i++\
    \ {\n        if i % 2 == 0 {\n            result = append(result, t[0] + (i /\
    \ 2))\n        } else {\n            result = append(result, t[0] + t[1] + t[2])\n\
    \            t[0] = t[1]\n            t[1] = t[2]\n            t[2] = result[i\
    \ + 1]\n        }\n    }\n    return result\n}\n", "    if n == 0 {\n        return\
    \ []int{}\n    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n ==\
    \ 2 {\n        return []int{1, 2}\n    }\n    a, b, c := 1, 3, 2\n    array :=\
    \ []int{a, b, c}\n    for i := 3; i <= n; i++ {\n        d := a + b + c\n    \
    \    a = b\n        b = c\n        c = d\n        array = append(array, d)\n \
    \   }\n    return array\n}\n", "    var f []int\n    if n > 0 {\n        f = make([]int,\
    \ n + 1)\n        f[0] = 1\n        f[1] = 3\n        for i := 2; i <= n; i++\
    \ {\n            if i % 2 == 0 {\n                f[i] = 1 + i / 2\n         \
    \   } else {\n                f[i] = f[i - 1] + f[i - 2] + f[i + 1]\n        \
    \    }\n        }\n    } else {\n        f = make([]int, 1)\n        f[0] = 1\n\
    \    }\n    return f\n}\n", "    f, s, t := 1, 3, 2\n    triList := []int{f, s,\
    \ t}\n    for i := 0; i < n; i++ {\n        if (i+1) % 2 == 0 {\n            f\
    \ = 1 + (i+1) / 2\n        } else {\n            f = triList[i-1] + triList[i-2]\
    \ + triList[i+1]\n        }\n        triList = append(triList, f)\n    }\n   \
    \ return triList\n}\n", "    if n == 0 {\n        return []int{1}\n    }\n   \
    \ if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return\
    \ []int{1, 3, 2}\n    }\n    ret := make([]int, n + 1)\n    ret[0] = 1\n    ret[1]\
    \ = 3\n    ret[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n\
    \            ret[i] = 1 + i / 2\n        } else {\n            ret[i] = ret[i\
    \ - 1] + ret[i - 2] + ret[i + 1]\n        }\n    }\n    return ret\n}\n", "  \
    \  var result []int\n    if n < 1 {\n        return result\n    }\n    result\
    \ = append(result, 1)\n    if n == 1 {\n        return result\n    }\n    result\
    \ = append(result, 3)\n    if n == 2 {\n        return result\n    }\n    result\
    \ = append(result, 2)\n    if n == 3 {\n        return result\n    }\n    for\
    \ i := 4; i <= n; i++ {\n        var t int\n        if i % 2 == 0 {\n        \
    \    t = 1 + i / 2\n        } else {\n            t = result[i - 1] + result[i\
    \ - 2] + result[i - 3]\n        }\n        result = append(result, t)\n    }\n\
    \    return result\n}\n", "    if n < 0 {\n        return nil\n    }\n    if n\
    \ == 0 {\n        return []int{1}\n    }\n\n    res := make([]int, n + 1)\n  \
    \  res[0] = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n      \
    \      res[i] = 1 + i / 2\n        } else {\n            res[i] = res[i - 1] +\
    \ res[i - 2] + res[i + 1]\n        }\n    }\n    return res\n}\n", "    result\
    \ := make([]int, n+1)\n    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n\
    \    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i]\
    \ = 1 + i / 2\n        } else {\n            result[i] = result[i-1] + result[i-2]\
    \ + result[i+1]\n        }\n    }\n    return result\n}\n", "    res := make([]int,\
    \ n + 1)\n    if n > 0 {\n        res[0] = 1\n    }\n    if n > 1 {\n        res[1]\
    \ = 3\n    }\n    if n > 2 {\n        res[2] = 2\n    }\n    for i := 3; i <=\
    \ n; i++ {\n        res[i] = res[i - 1] + res[i - 2] + res[i - 3]\n    }\n   \
    \ return res\n}\n", "    if n == 0 {\n        return []int{1}\n    }\n    if n\
    \ == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1,\
    \ 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i := 3; i <= n; i++ {\n   \
    \     if i % 2 == 0 {\n            res = append(res, 1 + i / 2)\n        } else\
    \ {\n            res = append(res, res[i - 1] + res[i - 2] + res[i + 1])\n   \
    \     }\n    }\n    return res\n}\n", "    m := make(map[int]int)\n    m[1] =\
    \ 3\n    r := make([]int, n+1)\n    for i := 1; i <= n; i++ {\n        r[i] =\
    \ tri_compute(i, m)\n    }\n    return r\n}\n", "    if n == 0 {\n        return\
    \ []int{1}\n    } else if n == 1 {\n        return []int{1, 3}\n    } else if\
    \ n == 2 {\n        return []int{1, 3, 2}\n    } else {\n        result := []int{1,\
    \ 3, 2}\n        for i := 3; i <= n; i++ {\n            if i % 2 == 0 {\n    \
    \            result = append(result, 1 + i / 2)\n            } else {\n      \
    \          result = append(result, result[i - 1] + result[i - 2] + result[i +\
    \ 1])\n            }\n        }\n        return result\n    }\n}\n", "    if n\
    \ < 0 {\n        return nil\n    }\n    if n == 0 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    res := []int{1, 3, 2}\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res = append(res, 1 +\
    \ i / 2)\n        } else {\n            res = append(res, res[i - 1] + res[i -\
    \ 2] + res[i + 1])\n        }\n    }\n    return res\n}\n", "    switch n {\n\
    \    case 0:\n        return []int{}\n    case 1:\n        return []int{1}\n \
    \   case 2:\n        return []int{1, 3}\n    case 3:\n        return []int{1,\
    \ 3, 2}\n    }\n    triResult := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n\
    \        var tri int\n        if i % 2 == 0 {\n            tri = 1 + i / 2\n \
    \       } else {\n            tri = triResult[i - 1] + triResult[i - 2] + triResult[i\
    \ - 3]\n        }\n        triResult = append(triResult, tri)\n    }\n    return\
    \ triResult\n}\n", "    if n < 0 {\n        return nil\n    }\n    result := make([]int,\
    \ n + 1)\n    result[0] = 1\n    result[1] = 3\n    result[2] = 2\n    for i :=\
    \ 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result[i] = 1 + i / 2\n\
    \        } else {\n            result[i] = result[i - 1] + result[i - 2] + result[i\
    \ + 1]\n        }\n    }\n    return result\n}\n", "    result := make([]int,\
    \ n + 1)\n    if n == 0 {\n        return result\n    }\n    result[0] = 1\n \
    \   result[1] = 3\n    result[2] = 2\n    for i := 3; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else {\n        \
    \    result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n        }\n  \
    \  }\n    return result\n}\n", "    if n == 0 {\n        return []int{}\n    }\n\
    \    if n == 1 {\n        return []int{1}\n    }\n    result := []int{1, 3, 2}\n\
    \    var temp int\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n  \
    \          temp = 1 + i / 2\n        } else {\n            temp = result[i - 1]\
    \ + result[i - 2] + result[i - 3]\n        }\n        result = append(result,\
    \ temp)\n    }\n    return result\n}\n", "    res := make([]int, n + 1)\n    res[0]\
    \ = 1\n    res[1] = 3\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n       \
    \ if i % 2 == 0 {\n            res[i] = res[i - 1] + res[i - 2] + res[i - 3]\n\
    \        } else {\n            res[i] = 1 + i / 2\n        }\n    }\n    return\
    \ res\n}\n", "    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n\
    \        return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n\
    \    }\n    if n == 3 {\n        return []int{1, 3, 2}\n    }\n    a := 1\n  \
    \  b := 3\n    c := 2\n    res := []int{1, 3, 2}\n    for i := 4; i <= n; i++\
    \ {\n        if i % 2 == 0 {\n            x := 1 + i / 2\n            res = append(res,\
    \ x)\n        } else {\n            x := a + b + c\n            res = append(res,\
    \ x)\n            a = b\n            b = c\n            c = x\n        }\n   \
    \ }\n    return res\n}\n", "    // Write your code here\n    // To print results\
    \ to the standard output you can use fmt.Println()\n    // Example: fmt.Println(\"\
    Hello world!\")\n    return nil\n}\n", "    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    slice := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        slice\
    \ = append(slice, slice[i - 1] + slice[i - 2] + slice[i - 3])\n    }\n    return\
    \ slice\n}\n", "    if n == 0 {\n        return []int{1}\n    } else if n == 1\
    \ {\n        return []int{1, 3}\n    } else if n == 2 {\n        return []int{1,\
    \ 3, 2}\n    } else {\n        rs := []int{1, 3, 2}\n        var i int\n     \
    \   for i = 3; i <= n; i++ {\n            if i % 2 == 0 {\n                rs\
    \ = append(rs, 1 + i / 2)\n            } else {\n                rs = append(rs,\
    \ rs[i - 1] + rs[i - 2] + rs[i + 1])\n            }\n        }\n        return\
    \ rs\n    }\n}\n", "    if n == 0 {\n        return []int{}\n    }\n\n    if n\
    \ == 1 {\n        return []int{1}\n    }\n\n    a := 1\n    b := 3\n    c := 2\n\
    \    res := []int{a, b, c}\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n\
    \        res = append(res, c)\n        n--\n    }\n    return res\n}\n", "   \
    \ res := make([]int, n + 1)\n    res[0] = 1\n    res[1] = 3\n    res[2] = 2\n\
    \    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i] =\
    \ 1 + i / 2\n        } else {\n            res[i] = res[i - 1] + res[i - 2] +\
    \ res[i + 1]\n        }\n    }\n    return res\n}\n", "    ret := make([]int,\
    \ n + 1)\n    if n == 0 {\n        return ret\n    }\n\n    ret[0] = 1\n    if\
    \ n == 1 {\n        return ret\n    }\n\n    ret[1] = 3\n    if n == 2 {\n   \
    \     return ret\n    }\n\n    for i := 2; i < n; i++ {\n        if i % 2 == 0\
    \ {\n            ret[i] = 1 + i / 2\n        } else {\n            ret[i] = ret[i\
    \ - 1] + ret[i - 2] + ret[i + 1]\n        }\n    }\n\n    return ret\n}\n", " \
    \   //TODO:\n    return []int{}\n}\n", "    // Implement the Tribonacci sequence\
    \ here.\n    r := make([]int, n + 1)\n    if n == 0 {\n        return r\n    }\n\
    \    r[0] = 1\n    r[1] = 3\n    r[2] = 2\n    for i := 3; i <= n; i++ {\n   \
    \     if i % 2 == 0 {\n            r[i] = 1 + i / 2\n        } else {\n      \
    \      r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n        }\n    }\n    return r\n\
    }\n", "    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n\
    \    if n == 3 {\n        return []int{1, 3, 2}\n    }\n    list := []int{1, 3,\
    \ 2}\n    for i := 3; i < n; i++ {\n        if i % 2 == 0 {\n            list\
    \ = append(list, (1 + i / 2))\n        } else {\n            list = append(list,\
    \ (list[i - 1] + list[i - 2] + list[i + 1]))\n        }\n    }\n    return list\n\
    }\n", "    var res []int\n    for i := 0; i <= n; i++ {\n        res = append(res,\
    \ tri_cal(i))\n    }\n    return res\n}\n", "    r := make([]int, n + 1)\n   \
    \ r[0] = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n         \
    \   r[i] = 1 + i / 2\n        } else {\n            r[i] = r[i - 1] + r[i - 2]\
    \ + r[i + 1]\n        }\n    }\n    return r\n}\n", "    var seq []int\n    if\
    \ n == 0 {\n        return seq\n    }\n    seq = append(seq, 3)\n    if n == 1\
    \ {\n        return seq\n    }\n    for i := 1; i < n; i++ {\n        var val\
    \ int\n        if i%2 == 0 {\n            val = 1 + i/2\n        } else {\n  \
    \          val = seq[i-1] + seq[i-2] + seq[i-3]\n        }\n        seq = append(seq,\
    \ val)\n    }\n    return seq\n}\n", "    seq := make([]int, 0)\n    seq = append(seq,\
    \ 1)\n    seq = append(seq, 3)\n    seq = append(seq, 2)\n    if n < 3 {\n   \
    \     return seq[:n+1]\n    }\n    for i := 3; i <= n; i++ {\n        if i % 2\
    \ == 0 {\n            seq = append(seq, 1 + i / 2)\n        } else {\n       \
    \     seq = append(seq, seq[i-1] + seq[i-2] + seq[i+1])\n        }\n    }\n  \
    \  return seq\n}\n", "    switch n {\n    case 0:\n        return []int{1}\n \
    \   case 1:\n        return []int{1, 3}\n    case 2:\n        return []int{1,\
    \ 3, 2}\n    default:\n        result := []int{1, 3, 2}\n        for i := 3; i\
    \ <= n; i++ {\n            if i % 2 == 0 {\n                result = append(result,\
    \ result[i - 1] / 2 + 1)\n            } else {\n                result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i - 3])\n            }\n        }\n \
    \       return result\n    }\n}\n", "    if n < 1 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    var tri []int\n\
    \    for i := 0; i <= n; i++ {\n        if i == 1 {\n            tri = append(tri,\
    \ 1)\n            tri = append(tri, 3)\n        } else if i == 2 {\n         \
    \   tri = append(tri, 2)\n        } else if i % 2 == 0 {\n            tri = append(tri,\
    \ 1 + i / 2)\n        } else {\n            tri = append(tri, tri[i - 1] + tri[i\
    \ - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n", "    if n == 0 {\n\
    \        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n   \
    \ }\n    if n == 2 {\n        return []int{1, 2}\n    }\n    if n == 3 {\n   \
    \     return []int{1, 3, 2}\n    }\n    t := make([]int, n + 1)\n    t[0] = 1\n\
    \    t[1] = 3\n    t[2] = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            t[i] = t[i - 1]\n        } else {\n            t[i] = t[i -\
    \ 1] + t[i - 2] + t[i - 3]\n        }\n    }\n    return t\n}\n", "    if n <\
    \ 0 {\n        return nil\n    }\n    result := make([]int, n + 1)\n    result[0]\
    \ = 1\n    result[1] = 3\n    result[2] = 2\n    for i := 3; i <= n; i++ {\n \
    \       if i % 2 == 0 {\n            result[i] = 1 + i / 2\n        } else {\n\
    \            result[i] = result[i - 1] + result[i - 2] + result[i + 1]\n     \
    \   }\n    }\n    return result\n}\n", "    t := []int{1, 3, 2}\n    if n <= 2\
    \ {\n        return t[:n+1]\n    }\n\n    for i := 3; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            t = append(t, 1 + i / 2)\n        } else {\n     \
    \       t = append(t, t[i-1] + t[i-2] + t[i+1])\n        }\n    }\n    return\
    \ t\n}\n", "    return nil\n}\n", "    var res []int\n    if n < 0 {\n       \
    \ return res\n    }\n    //\n    if n == 0 {\n        res = append(res, 1)\n \
    \       return res\n    }\n    res = append(res, 1)\n    if n == 1 {\n       \
    \ return res\n    }\n    res = append(res, 3)\n    if n == 2 {\n        return\
    \ res\n    }\n    res = append(res, 2)\n    if n == 3 {\n        return res\n\
    \    }\n    //\n    for i := 4; i <= n; i++ {\n        if i % 2 == 0 {\n     \
    \       res = append(res, i / 2)\n        } else {\n            res = append(res,\
    \ res[i - 1] + res[i - 2] + res[i - 3])\n        }\n    }\n    return res\n}\n",
  "    if n == 0 {\n        return []int{1}\n    }\n    if n == 1 {\n        return\
    \ []int{1, 3}\n    }\n    result := make([]int, n + 1)\n    result[0] = 1\n  \
    \  result[1] = 3\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n   \
    \         result[i] = 1 + i / 2\n        } else {\n            result[i] = result[i\
    \ - 1] + result[i - 2] + result[i + 1]\n        }\n    }\n    return result\n\
    }\n", "    if n == 0 {\n        return []int{1}\n    } else if n == 1 {\n    \
    \    return []int{1, 3}\n    } else if n == 2 {\n        return []int{1, 3, 2}\n\
    \    }\n    val1, val2, val3 := 1, 3, 2\n    result := []int{1, 3, 2}\n    for\
    \ i := 3; i <= n; i++ {\n        val := 0\n        if i % 2 == 0 {\n         \
    \   val = 1 + i / 2\n        } else {\n            val = val1 + val2 + val3\n\
    \        }\n        result = append(result, val)\n        val1, val2, val3 = val2,\
    \ val3, val\n    }\n    return result\n}\n", "\tif n == 0 {\n\t\treturn []int{}\n\
    \t}\n\tif n == 1 {\n\t\treturn []int{1}\n\t}\n\tif n == 2 {\n\t\treturn []int{1,\
    \ 3}\n\t}\n\t\n\tl := n + 1\n\tr := make([]int, l)\n\tr[0] = 1\n\tr[1] = 3\n\t\
    r[2] = 2\n\t\n\tfor i := 3; i < l; i++ {\n\t\tif i % 2 == 0 {\n\t\t\tr[i] = 1\
    \ + i / 2\n\t\t} else {\n\t\t\tr[i] = r[i - 1] + r[i - 2] + r[i + 1]\n\t\t}\n\t\
    }\n\t\n\treturn r\n}\n", "    tris := []int{1, 3, 2}\n    for i := 3; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            tris = append(tris, 1 + i / 2)\n\
    \        } else {\n            tri := tris[i - 3] + tris[i - 2] + tris[i - 1]\n\
    \            tris = append(tris, tri)\n        }\n    }\n    return tris\n}\n",
  "    switch n {\n    case 0:\n        return []int{}\n    case 1:\n        return\
    \ []int{1}\n    case 2:\n        return []int{1, 3}\n    case 3:\n        return\
    \ []int{1, 3, 2}\n    }\n    r := []int{1, 3, 2}\n    for n > 3 {\n        r =\
    \ append(r, r[len(r) - 1] + r[len(r) - 2] + r[len(r) - 3])\n        n--\n    }\n\
    \    return r\n}\n", "    var tri = []int{}\n    for i := 0; i <= n; i++ {\n \
    \       if i <= 1 {\n            tri = append(tri, 1)\n        } else if i ==\
    \ 2 {\n            tri = append(tri, 3)\n        } else if i % 2 == 0 {\n    \
    \        tri = append(tri, 1 + i / 2)\n        } else {\n            tri = append(tri,\
    \ tri[i - 1] + tri[i - 2] + tri[i + 1])\n        }\n    }\n    return tri\n}\n",
  "    a := make([]int, n+1)\n    a[0] = 1\n    a[1] = 3\n    a[2] = 2\n    for i\
    \ := 3; i <= n; i++ {\n        a[i] = a[i-1] + a[i-2] + a[i-3]\n    }\n    return\
    \ a\n}\n", "    if n == 0 {\n        return []int{1}\n    }\n    a, b, c := 0,\
    \ 1, 3\n    res := []int{a, b, c}\n    for i := 1; i < n; i++ {\n        d :=\
    \ a + b + c\n        a, b, c = b, c, d\n        res = append(res, d)\n    }\n\
    \    return res\n}\n", "    if n < 0 {\n        return nil\n    }\n    if n ==\
    \ 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{1}\n\
    \    }\n    if n == 2 {\n        return []int{1, 3}\n    }\n    if n == 3 {\n\
    \        return []int{1, 3, 2}\n    }\n    ret := []int{1, 3, 2}\n    for i :=\
    \ 3; i < n; i++ {\n        if i % 2 == 0 {\n            ret = append(ret, i /\
    \ 2 + 1)\n        } else {\n            ret = append(ret, ret[i - 1] + ret[i -\
    \ 2] + ret[i - 3])\n        }\n    }\n    return ret\n}\n", "    // Write your\
    \ code here\n    return []int{}\n}\n", "    return []int{}\n}\n", "    var tri_arr\
    \ []int\n    tri_arr = append(tri_arr, 1)\n    for i := 1; i <= n; i++ {\n   \
    \     if i % 2 == 0 {\n            tri_arr = append(tri_arr, 1 + i / 2)\n    \
    \    } else {\n            tri_arr = append(tri_arr, \n                tri_arr[i\
    \ - 1] + tri_arr[i - 2] + tri_arr[i + 1])\n        }\n    }\n    return tri_arr\n\
    }\n", "    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n     \
    \   return []int{1}\n    }\n    list := []int{1, 3, 2}\n    for i := 3; i <= n;\
    \ i++ {\n        if i % 2 == 0 {\n            list = append(list, 1 + i / 2)\n\
    \        } else {\n            list = append(list, list[i - 1] + list[i - 2] +\
    \ list[i + 1])\n        }\n    }\n    return list\n}\n", "    if n == 0 {\n  \
    \      return []int{1}\n    }\n    res := make([]int, n + 1)\n    res[0] = 1\n\
    \    res[1] = 3\n    res[2] = 2\n    for i := 3; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            res[i] = 1 + i / 2\n        } else {\n            res[i]\
    \ = res[i - 1] + res[i - 2] + res[i + 1]\n        }\n    }\n    return res\n}\n",
  "    return nil\n}\n", "    res := make([]int, n + 1)\n    for i := 1; i <= n; i++\
    \ {\n        res[i] = fib3(i)\n    }\n    return res\n}\n", "    result := make([]int,\
    \ 0)\n    result = append(result, 1)\n    result = append(result, 3)\n    result\
    \ = append(result, 2)\n    if n <= 2 {\n        return result\n    }\n    for\
    \ i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result = append(result,\
    \ 1 + i / 2)\n        } else {\n            result = append(result, result[i -\
    \ 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return result\n}\n",
  "    res := make([]int, n + 1)\n    res[0] = 1\n    res[1] = 3\n    for i := 2;\
    \ i <= n; i++ {\n        if i % 2 == 0 {\n            res[i] = 1 + i / 2\n   \
    \     } else {\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n  \
    \      }\n    }\n    return res\n}\n", "    var result []int\n    if n == 0 {\n\
    \        return result\n    }\n    result = append(result, 1)\n    if n == 1 {\n\
    \        return result\n    }\n    result = append(result, 3)\n    if n == 2 {\n\
    \        return result\n    }\n    result = append(result, 2)\n    if n == 3 {\n\
    \        return result\n    }\n    for i := 4; i <= n; i++ {\n        result =\
    \ append(result, result[i - 3] + result[i - 2] + result[i - 1])\n    }\n    return\
    \ result\n}\n", "    r := make([]int, n+1)\n    r[0] = 1\n    r[1] = 3\n    r[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            r[i]\
    \ = 1 + i / 2\n        } else {\n            r[i] = r[i-1] + r[i-2] + r[i+1]\n\
    \        }\n    }\n    return r\n}\n", "    if n < 0 {\n        return nil\n \
    \   }\n    if n == 0 {\n        return []int{1}\n    }\n\n    var array []int\n\
    \    array = append(array, 1)\n    for i := 1; i <= n; i++ {\n        if i ==\
    \ 1 {\n            array = append(array, 3)\n        } else if i % 2 == 0 {\n\
    \            array = append(array, 1 + i / 2)\n        } else {\n            array\
    \ = append(array, array[i - 1] + array[i - 2] + array[i + 1])\n        }\n   \
    \ }\n    return array\n}\n", "    if n == 0 {\n        return []int{}\n    }\n\
    \    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n        return\
    \ []int{1, 3}\n    }\n    var xs []int\n    xs = append(xs, 1)\n    xs = append(xs,\
    \ 3)\n    for i := 2; i < n; i++ {\n        xs = append(xs, xs[i - 1] + xs[i -\
    \ 2] + xs[i - 3])\n    }\n    return xs\n}\n", "    // TODO: Implement\n    return\
    \ []int{}\n}\n", "    return []int{1, 3, 2, 8}\n}\n", "    if n < 1 {\n      \
    \  return []int{}\n    }\n    nums := make([]int, n + 1)\n    nums[0] = 1\n  \
    \  nums[1] = 3\n    nums[2] = 2\n    for i := 3; i <= n; i++ {\n        if i %\
    \ 2 == 0 {\n            nums[i] = 1 + i / 2\n        } else {\n            nums[i]\
    \ = nums[i - 1] + nums[i - 2] + nums[i + 1]\n        }\n    }\n    return nums\n\
    }\n", "    // Write your code here\n    var result []int\n    result = append(result,\
    \ 1)\n    result = append(result, 3)\n    if n == 1 {\n        return result\n\
    \    }\n    result = append(result, 2)\n    if n == 2 {\n        return result\n\
    \    }\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n", "    if n == 0 {\n        return []int{1}\n    }\n    if n ==\
    \ 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n        return []int{1,\
    \ 3, 2}\n    }\n    s := make([]int, n + 1)\n    s[0] = 1\n    s[1] = 3\n    s[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            s[i]\
    \ = 1 + i / 2\n        } else {\n            s[i] = s[i - 1] + s[i - 2] + s[i\
    \ + 1]\n        }\n    }\n    return s\n}\n", "    res := make([]int, n+1)\n \
    \   res[0] = 1\n    for i := 1; i <= n; i++ {\n        if i % 2 == 0 {\n     \
    \       res[i] = 1 + i / 2\n        } else {\n            res[i] = res[i-1] +\
    \ res[i-2] + res[i+1]\n        }\n    }\n    return res\n}\n", "    if n == 0\
    \ {\n        return []int{}\n    }\n    sequence := []int{1, 3, 2}\n    for i\
    \ := 0; i < n; i++ {\n        l := len(sequence)\n        cur := sequence[l -\
    \ 1] + sequence[l - 2] + sequence[l - 3]\n        sequence = append(sequence,\
    \ cur)\n    }\n    return sequence\n}\n", "    var res []int\n    if n == 0 {\n\
    \        return res\n    }\n    res = append(res, 1)\n    if n == 1 {\n      \
    \  return res\n    }\n    res = append(res, 3)\n    if n == 2 {\n        return\
    \ res\n    }\n    res = append(res, 2)\n    if n == 3 {\n        return res\n\
    \    }\n    var acc1, acc2, acc3 int\n    for i := 4; i <= n; i++ {\n        if\
    \ i % 2 == 0 {\n            acc1 = res[i - 1]\n            acc2 = res[i - 2]\n\
    \            acc3 = res[i - 3]\n            res = append(res, acc1 + acc2 + acc3)\n\
    \        } else {\n            res = append(res, i / 2 + 1)\n        }\n    }\n\
    \    return res\n}\n", "    if n < 0 {\n        return nil\n    }\n\n    if n\
    \ == 0 {\n        return []int{1}\n    }\n\n    if n == 1 {\n        return []int{1,\
    \ 3}\n    }\n\n    if n == 2 {\n        return []int{1, 3, 2}\n    }\n\n    var\
    \ ret []int\n    ret = append(ret, 1, 3, 2)\n    for i := 3; i <= n; i++ {\n \
    \       if i % 2 == 0 {\n            ret = append(ret, 1 + i / 2)\n        } else\
    \ {\n            ret = append(ret, ret[i - 1] + ret[i - 2] + ret[i + 1])\n   \
    \     }\n    }\n\n    return ret\n}\n", "    if n < 1 {\n        return []int{}\n\
    \    }\n    res := make([]int, n+1)\n    res[0] = 1\n    res[1] = 3\n    res[2]\
    \ = 2\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            res[i]\
    \ = res[i/2]\n        } else {\n            res[i] = res[i-1] + res[i-2] + res[i+1]\n\
    \        }\n    }\n    return res\n}\n", "    if n < 1 {\n        return []int{1}\n\
    \    }\n    if n == 1 {\n        return []int{1, 3}\n    }\n    if n == 2 {\n\
    \        return []int{1, 3, 2}\n    }\n    // a, b, c is the tail for tri(n),\
    \ tri(n - 1), tri(n - 2) respectively\n    a, b, c := 2, 3, 8\n    l := []int{1,\
    \ 3, 2, 8}\n    for n > 3 {\n        n--\n        a, b, c = b, c, 1 + n / 2\n\
    \        if n % 2 == 1 {\n            c = c + a + b\n        }\n        l = append(l,\
    \ c)\n    }\n    return l\n}\n", "    var r []int\n    return r\n}\n", "    //\
    \ Write your code here\n    return []int{}\n}\n", "    if n < 0 {\n        return\
    \ nil\n    }\n    tri := make([]int, n + 1)\n    tri[0] = 1\n    tri[1] = 3\n\
    \    tri[2] = 2\n    if n == 2 {\n        return tri\n    }\n    for i := 3; i\
    \ <= n; i++ {\n        if i % 2 == 0 {\n            tri[i] = tri[i / 2]\n    \
    \    } else {\n            tri[i] = tri[i - 1] + tri[i - 2] + tri[i + 1]\n   \
    \     }\n    }\n    return tri\n}\n", "    if n == 0 {\n        return []int{}\n\
    \    }\n    if n == 1 {\n        return []int{1}\n    }\n    if n == 2 {\n   \
    \     return []int{1, 3}\n    }\n    if n == 3 {\n        return []int{1, 3, 2}\n\
    \    }\n    array := []int{1, 3, 2}\n    for i := 3; i < n; i++ {\n        if\
    \ i % 2 == 0 {\n            array = append(array, 1 + i / 2)\n        } else {\n\
    \            array = append(array, array[i - 1] + array[i - 2] + array[i + 1])\n\
    \        }\n    }\n    return array\n}\n", "    // Write your code here\n    return\
    \ []int{}\n}\n", "    if n < 1 {\n        return []int{}\n    }\n    ans := make([]int,\
    \ n + 1)\n    ans[0] = 1\n    ans[1] = 3\n    for i := 2; i <= n; i++ {\n    \
    \    if i % 2 == 0 {\n            ans[i] = 1 + i / 2\n        } else {\n     \
    \       ans[i] = ans[i - 1] + ans[i - 2] + ans[i + 1]\n        }\n    }\n    return\
    \ ans\n}\n", "    result := make([]int, 0)\n    result = append(result, 1)\n \
    \   if n > 0 {\n        result = append(result, 3)\n    }\n    if n > 1 {\n  \
    \      result = append(result, 2)\n    }\n    if n == 0 {\n        return result\n\
    \    }\n    for i := 3; i <= n; i++ {\n        if i % 2 == 0 {\n            result\
    \ = append(result, 1 + i / 2)\n        } else {\n            result = append(result,\
    \ result[i - 1] + result[i - 2] + result[i + 1])\n        }\n    }\n    return\
    \ result\n}\n", "\tm := map[int]int{}\n\treturn triR(n, m)\n}\n", "    if n <\
    \ 1 {\n        return []int{}\n    }\n\n    if n == 1 {\n        return []int{1,\
    \ 3}\n    }\n\n    slice := make([]int, n + 1)\n    slice[0] = 1\n    slice[1]\
    \ = 3\n    slice[2] = 2\n\n    for i := 3; i <= n; i++ {\n        if i % 2 ==\
    \ 0 {\n            slice[i] = 1 + i / 2\n        } else {\n            slice[i]\
    \ = slice[i - 1] + slice[i - 2] + slice[i + 1]\n        }\n    }\n\n    return\
    \ slice\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
