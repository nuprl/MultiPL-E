language: go_test.go
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 2; i < len(s); i++ {\n        if s[i-2] == s[i-1] || s[i-2] == s[i]\
    \ || s[i-1] == s[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var i, l int\n    l = len(s)\n    for i = 0;\
    \ i < l - 2; i++ {\n        if s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1]\
    \ == s[i + 2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpp4_qiryb_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpp4_qiryb_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    lenS := len(s)\n    if lenS < 3 {\n        return\
    \ false\n    }\n    for i := 2; i < lenS; i++ {\n        if s[i] == s[i-1] &&\
    \ s[i] == s[i-2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmped_4ctp6_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmped_4ctp6_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmped_4ctp6_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpwzykl0kp_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpwzykl0kp_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpwzykl0kp_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return is_happy_with_index(s, 0)\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7rla2im8_test.go:25:12: undefined: is_happy_with_index

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    // s[0:3] = s[:3]\n    for i:=1; i < len(s)-2; i++ {\n        if s[i-1] ==\
    \ s[i] || s[i-1] == s[i+1] || s[i] == s[i+1] {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpx0pfiang_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmpx0pfiang_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    for i := 2; i < len(s); i += 3 {\n        if\
    \ s[i] == s[i-1] || s[i] == s[i-2] || s[i-1] == s[i-2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmp5lrmp7do_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmp5lrmp7do_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp5lrmp7do_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // a happy string is a string that has at least\
    \ 3 characters,\n    // and has the same character at the third position from\
    \ the end and the middle\n    // a string of length 4 can not be happy since it\
    \ is too short to have its middle and third from end equal\n    if len(s) < 3\
    \ {\n        return false\n    }\n    // example: \"aabb\" is not happy because\
    \ the middle is a and the third from end is b\n    if len(s) % 2 == 0 {\n    \
    \    return false\n    }\n    // example: \"aabb\" is not happy because they are\
    \ the same character\n    if s[len(s)/2] != s[len(s)/2 - 1] {\n        return\
    \ false\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp_r6vyhqa_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp_r6vyhqa_test.go:62:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp_r6vyhqa_test.go:62: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    n := len(s)\n    if n < 3 {\n        return false\n\
    \    }\n    for i := 0; i < n - 2; i++ {\n        if s[i] == s[i + 1] && s[i]\
    \ == s[i + 2] {\n            return false\n        }\n    }\n    return true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpxob_8gvq_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpxob_8gvq_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpxob_8gvq_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    fmt.Println(s)\n    // \u5982\u679C\u5B57\u7B26\
    \u4E32\u7684\u957F\u5EA6\u5C0F\u4E8E3\uFF0C\u80AF\u5B9A\u4E0D\u7B26\u5408\u6761\
    \u4EF6\n    if len(s) < 3 {\n        return false\n    }\n    // \u5982\u679C\u5B57\
    \u7B26\u4E32\u7684\u957F\u5EA6\u5927\u4E8E3\uFF0C\u90A3\u4E48\u5FC5\u987B\u8981\
    \u6EE1\u8DB3\u6BCF3\u4E2A\u5B57\u7B26\u4E0D\u76F8\u540C\n    for i := 0; i < len(s)\
    \ - 2; i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "a\naa\nabcd\naabb\nadb\nxyy\niopaxpoi\niopaxioi\n--- FAIL: TestIs_Happy\
    \ (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmp2gyllvg__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmp2gyllvg__test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmp2gyllvg__test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var l = len(s)\n    if l < 3 {\n        return\
    \ false\n    }\n\n    for i := 0; i < l-2; i++ {\n        if s[i] == s[i+1] ||\
    \ s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    fmt.Println(s)\n    for i:=0; i < len(s)-2; i++ {\n        if s[i] == s[i+1]\
    \ && s[i] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "abcd\naabb\nadb\nxyy\niopaxpoi\niopaxioi\n--- FAIL: TestIs_Happy (0.00s)\n\
    \    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmprh57640z_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmprh57640z_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmprh57640z_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var boolMap = make(map[string]bool)\n    for\
    \ i := 0; i < len(s) - 2; i++ {\n        boolMap[s[i:i+3]] = true\n    }\n   \
    \ return len(boolMap) == len(s) - 2\n}\n\nfunc TestIs_Happy(t *testing.T) {\n\
    \  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__1\
    \ (0.00s)\n        tmpe6_6sx3y_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmpe6_6sx3y_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpe6_6sx3y_test.go:52: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmpe6_6sx3y_test.go:52:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Write your code here\n    for i := 0; i <\
    \ len(s) - 2; i++ {\n        for j := i + 1; j < len(s) - 1; j++ {\n         \
    \   for k := j + 1; k < len(s); k++ {\n                if s[i] == s[j] || s[j]\
    \ == s[k] || s[i] == s[k] {\n                    return false\n              \
    \  }\n            }\n        }\n    }\n    return true\n}\n\ntype TestCase \n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpt59aiimy_test.go:38:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Write your code here\n    return false\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpyj0z0br__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpyj0z0br__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpyj0z0br__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i <= len(s)-3; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    for i := 0; i < len(s)-2; i++ {\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpfs96lnos_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpfs96lnos_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    l := len(s)\n    if l < 3 {\n        return false\n\
    \    }\n    if l == 3 {\n        return true\n    }\n    return true\n}\n\ntype\
    \ fixture \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmprjmf8d3g_test.go:35:14: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075076
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Write your code here\n    return false\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpyj0z0br__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpyj0z0br__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpyj0z0br__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    last := s[0:3]\n    if len(last) != len(setChar(last)) {\n        return\
    \ false\n    }\n    for i := 0; i < len(s)-3; i++ {\n        cur := s[i:i+3]\n\
    \        if len(cur) != len(setChar(cur)) {\n            return false\n      \
    \  }\n        if cur[0] == last[2] {\n            return false\n        }\n  \
    \      last = cur\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpum8chdhm_test.go:29:25: undefined: setChar

    /tmp/tmpum8chdhm_test.go:34:28: undefined: setChar

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var y,n bool\n    for i := 0; i < len(s) - 2;\
    \ i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2] {\n            y = true\n\
    \        }\n        if s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] {\n\
    \            n = true\n        }\n    }\n    return y == false && n == true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpfr87hxot_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var prev rune\n    for i, r := range s {\n        if i % 3 == 0 {\n     \
    \       if prev == r {\n                return false\n            }\n        \
    \    prev = r\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp4q4kvq5b_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp4q4kvq5b_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp4q4kvq5b_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tif len(s)\
    \ == 3 {\n\t\treturn true\n\t}\n\tfor i := 0; i < len(s) - 2; i++ {\n\t\tif s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n\t\t\treturn false\n\t\t\
    }\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpik4898dm_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var char_map = make(map[int32]int)\n    for _, c := range s {\n        if\
    \ _, ok := char_map[c]; ok {\n            return false\n        }\n        char_map[c]\
    \ = 1\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpg0fb_04d_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var i int\n    for i = 2; i < len(s); i += 3 {\n        if s[i] == s[i-1]\
    \ || s[i] == s[i-2] || s[i-1] == s[i-2] {\n            return false\n        }\n\
    \    }\n    if i < len(s) {\n        return false\n    }\n    return true\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpz120fbsw_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var res bool\n    if len(s) >= 3 {\n        res\
    \ = true\n        var previous_char rune\n        for _, r := range s {\n    \
    \        if r == previous_char {\n                res = false\n              \
    \  break\n            }\n            previous_char = r\n        }\n    }\n   \
    \ return res\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpjaut0_n5_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075079
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    l := []rune(s)\n    i := 0\n    for i < len(l) - 2 {\n        if l[i] ==\
    \ l[i+1] {\n            return false\n        }\n        if l[i] == l[i+2] {\n\
    \            return false\n        }\n        if l[i+1] == l[i+2] {\n        \
    \    return false\n        }\n        i += 1\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code goes here\n    return false\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp1aqx5cig_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp1aqx5cig_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp1aqx5cig_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpo5xbaxdn_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpo5xbaxdn_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpo5xbaxdn_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // write your code in Go 1.4\n    l := len(s)\n\
    \    if l < 3 {\n        return false\n    }\n    c := s[0]\n    for i := 1; i\
    \ < l; i++ {\n        if s[i] == c {\n            return false\n        }\n  \
    \      c = s[i]\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpykot7duo_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tslen := len(s)\n\tif slen < 3 {\n\t\treturn false\n\
    \t}\n\tfor i := 2; i < slen; i++ {\n\t\tif s[i] == s[i-1] && s[i] == s[i-2] {\n\
    \t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpd9y5mzh8_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpd9y5mzh8_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpd9y5mzh8_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 2; i < len(s); i += 3 {\n        if s[i] == s[i-1] || s[i] == s[i-2]\
    \ || s[i-1] == s[i-2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpdtj30hok_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    s_len := len(s)\n    if s_len < 3 {\n       \
    \ return false\n    }\n\n    for i := 0; i < s_len - 2; i++ {\n        if s[i]\
    \ == s[i+1] && s[i] == s[i+2] {\n            return false\n        }\n    }\n\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpo9kstivb_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpo9kstivb_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpo9kstivb_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var m = make(map[rune]int)\n    var r []rune\
    \ = []rune(s)\n    for _, v := range r {\n        if _, ok := m[v]; ok {\n   \
    \         m[v]++\n        } else {\n            m[v] = 1\n        }\n    }\n \
    \   for _, v := range m {\n        if v >= 3 {\n            return false\n   \
    \     }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpz2zi_mo7_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpz2zi_mo7_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpz2zi_mo7_test.go:62: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpz2zi_mo7_test.go:62:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.005s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmp8s_mn704_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmp8s_mn704_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp8s_mn704_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp8s_mn704_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp8s_mn704_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i<len(s)-2; i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpxudsjrk2_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpxudsjrk2_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpxudsjrk2_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var strArr []string\n    for _, c := range s {\n        strArr = append(strArr,\
    \ string(c))\n    }\n    fmt.Println(strArr)\n    for i := 2; i < len(strArr);\
    \ i++ {\n        if strArr[i] == strArr[i-1] && strArr[i] == strArr[i-2] {\n \
    \           return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "[a b c d]\n[a a b b]\n[a d b]\n[x y y]\n[i o p a x p o i]\n[i o p a x i\
    \ o i]\n--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpb4qf7ylp_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpb4qf7ylp_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpb4qf7ylp_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    res := false\n    //your code here\n    return\
    \ res\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp7s53gf20_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp7s53gf20_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp7s53gf20_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tfor i\
    \ := 0; i < len(s)-2; i++ {\n\t\tif s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075080
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i ++ {\n        if s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\t// your code here\n\treturn false\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpb6wwcl1g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpb6wwcl1g_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpb6wwcl1g_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Your code goes here\n\n    return false\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpdx50slww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpdx50slww_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpdx50slww_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tres :=\
    \ true\n\tfor i := 0; i <= len(s)-3; i++ {\n\t\tif s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n\t\t\tres = false\n\t\t\tbreak\n\t\t}\n\t}\n\treturn\
    \ res\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075080
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var result bool = true\n    for i := 2; i < len(s); i++ {\n        if s[i-2]\
    \ == s[i-1] || s[i-2] == s[i] || s[i-1] == s[i] {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var k, v int\n    var m = make(map[int]int)\n\
    \    for _, c := range s {\n        fmt.Println(c)\n        v = int(c)\n     \
    \   m[v]++\n        if m[v] > 1 {\n            return false\n        }\n     \
    \   k = k + 1\n        if k == 3 {\n            k = 0\n            m = make(map[int]int)\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "97\n97\n97\n97\n98\n99\n100\n97\n97\n97\n100\n98\n120\n121\n121\n105\n\
    111\n112\n97\n120\n112\n111\n105\n105\n111\n112\n97\n120\n105\n111\n105\n--- FAIL:\
    \ TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0 (0.00s)\n     \
    \   tmpw3vkh74w_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmpw3vkh74w_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tfor i\
    \ := 0; i < len(s) - 2; i++ {\n\t\tif s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    fmt.Println(s)\n    return\
    \ true\n}\n\ntype TestCase \nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp71end_aq_test.go:30:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075079
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code goes here\n    if len(s) < 3 {\n\
    \        return false\n    }\n    for i:=0; i<len(s)-2; i++ {\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\ntype Case \nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpiex96b61_test.go:37:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075080
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tvar subStrings []string\n\tfor i := 0; i < len(s)-2;\
    \ i++ {\n\t\tsubStrings = append(subStrings, s[i:i+3])\n\t}\n\tfor i := 0; i <\
    \ len(subStrings); i++ {\n\t\tfor j := i + 1; j < len(subStrings); j++ {\n\t\t\
    \tif subStrings[i] == subStrings[j] {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmp4_1q4rkx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmp4_1q4rkx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp4_1q4rkx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp4_1q4rkx_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp4_1q4rkx_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i<len(s)-2; i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpxudsjrk2_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpxudsjrk2_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpxudsjrk2_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // if it's only one char, it's false\n    if\
    \ len(s) < 3 {\n        return false\n    }\n\n    // if it's only one char, it's\
    \ false\n    if len(s) == 3 {\n        if s[0] == s[1] || s[1] == s[2] || s[0]\
    \ == s[2] {\n            return false\n        }\n        return true\n    }\n\
    \n    // if it's more than 3, it's true\n    // check if 3 consecutive letters\
    \ are same\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] ||\
    \ s[i+1] == s[i+2] || s[i] == s[i+2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075081
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    sLeng := len(s)\n    var tmpA string\n    var\
    \ tmpB string\n    if sLeng < 3 {\n        return false\n    }\n    for i := 0;\
    \ i < sLeng-2; i++ {\n        tmpA = s[i:i+3]\n        for j := i + 1; j < sLeng-2;\
    \ j++ {\n            tmpB = s[j:j+3]\n            if tmpA == tmpB {\n        \
    \        return false\n            }\n        }\n    }\n    return true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpr_7e0u3a_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpr_7e0u3a_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpr_7e0u3a_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075081
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var last1, last2 rune\n    var found bool\n    for i, r := range s {\n  \
    \      if i == 0 {\n            last1 = r\n            continue\n        }\n \
    \       if i == 1 {\n            last2 = r\n            continue\n        }\n\
    \        if last1 == r || last2 == r {\n            return false\n        }\n\
    \        last1 = last2\n        last2 = r\n        found = true\n    }\n    return\
    \ found\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075081
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i ++ {\n        if s[i] == s[i + 1] || s[i] ==\
    \ s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n  \
    \  }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    len := len(s)\n    if len < 3 {\n        return\
    \ false\n    }\n    if len == 3 {\n        return true\n    }\n    for i := 0;\
    \ i < len-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmp0duqaav8_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var m map[string]bool = make(map[string]bool)\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if m[s[i:i+3]] {\n           \
    \ return false\n        }\n        m[s[i:i+3]] = true\n    }\n    return true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmp1e5he3r8_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmp1e5he3r8_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp1e5he3r8_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp1e5he3r8_test.go:55:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp1e5he3r8_test.go:55: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        j := i + 1\n        k := i + 2\n\
    \        if s[i] == s[j] || s[i] == s[k] || s[j] == s[k] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    for i := 0; i < len(s) - 2; i++ {\n        if\
    \ s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpuqcubs4x_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpuqcubs4x_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var happy = true\n    var invalid = map[string]bool{}\n\
    \    var i = 0\n    for i = 0; i < len(s) - 2; i++ {\n        if invalid[s[i:i+3]]\
    \ {\n            happy = false\n            break\n        }\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            invalid[s[i:i+3]]\
    \ = true\n        }\n    }\n    return happy\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpnvrfbjwt_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpnvrfbjwt_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpnvrfbjwt_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpnvrfbjwt_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpnvrfbjwt_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    lenght := len(s)\n    if lenght < 3 {\n     \
    \   return false\n    }\n    for i := 0; i < lenght - 2; i++ {\n        if s[i]\
    \ == s[i+1] && s[i] == s[i+2] {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp_i9gaqhi_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp_i9gaqhi_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp_i9gaqhi_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    n := len(s)\n    if n < 3 {\n        return false\n\
    \    }\n    for i := 0; i < n - 2; i++ {\n        if s[i] == s[i + 1] || s[i]\
    \ == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    // check there are no 3 consecutive letters\n    for i := 0; i <= len(s)-3;\
    \ i++ {\n        // fmt.Println(s[i], s[i+1], s[i+2])\n        if s[i] == s[i+1]\
    \ && s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpgsxzmwpm_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpgsxzmwpm_test.go:58:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpgsxzmwpm_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    // fmt.Println(s)\n    for i := 0; i < len(s)-2; i++ {\n        // fmt.Println(s[i:i+3])\n\
    \        // fmt.Println(s[i+1:i+4])\n        // fmt.Println(s[i+2:i+5])\n    \
    \    // fmt.Println(\"-----\")\n        if s[i:i+3] == s[i+1:i+4] || s[i:i+3]\
    \ == s[i+2:i+5] || s[i+1:i+4] == s[i+2:i+5] {\n            return false\n    \
    \    }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:5] with length 4 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:5] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmp5nzr9uq0_test.go:34\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmp5nzr9uq0_test.go:50\
    \ +0xc48\ntesting.tRunner(0xc0000da1a0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp13ghx4za_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp13ghx4za_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp13ghx4za_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] && s[i] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpwzykl0kp_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpwzykl0kp_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpwzykl0kp_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075077
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    l := len(s)\n    if l < 3 {\n        return false\n\
    \    }\n\n    for i := 0; i < l-2; i++ {\n        j := i + 3\n        if j > l\
    \ {\n            j = l\n        }\n        ss := s[i:j]\n        if test_happy(ss)\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp7h16u143_test.go:36:12: undefined: test_happy

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    isHappy := false\n    if len(s) < 3 {\n     \
    \   return isHappy\n    }\n\n    var first = s[0]\n    var second = s[1]\n   \
    \ var third = s[2]\n\n    for i := 1; i < len(s)-2; i++ {\n        if first !=\
    \ second && second != third && first != third {\n            isHappy = true\n\
    \            break\n        }\n        first = s[i]\n        second = s[i+1]\n\
    \        third = s[i+2]\n    }\n\n    return isHappy\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__4\
    \ (0.00s)\n        tmpb1v5z4nj_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmpb1v5z4nj_test.go:67:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i<len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    // Because the 3 letters must be different, so we use a map to calculate\
    \ the count of each letter.\n    // If some letter count larger than 1, then is\
    \ not happy string.\n    c := make(map[rune]int)\n    for _, v := range s {\n\
    \        c[v]++\n        if c[v] > 1 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpdhsxovjf_test.go:60: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code goes here\n    return false\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp1aqx5cig_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp1aqx5cig_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp1aqx5cig_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    var res bool\n    slen\
    \ := len(s)\n    if slen >= 3 {\n        res = true\n        for i := 0; i < slen-2;\
    \ i++ {\n            if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n\
    \                res = false\n                break\n            }\n        }\n\
    \    } else {\n        res = false\n    }\n    return res\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Your code here\n    if len(s) < 3 {\n    \
    \    return false\n    }\n    var count = 0\n    var arr [3]string\n    for i\
    \ := 0; i < len(s); i++ {\n        arr[count] = string(s[i])\n        if count\
    \ >= 2 {\n            if (arr[0] == arr[1]) || (arr[0] == arr[2]) || (arr[1] ==\
    \ arr[2]) {\n                return false\n            }\n            arr[0] =\
    \ arr[1]\n            arr[1] = arr[2]\n            count--\n        }\n      \
    \  count++\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    //your code here\n    if len(s) < 3 {\n     \
    \   return false\n    }\n    m := make(map[string]int)\n    for i := 0; i <= len(s)-3;\
    \ i++ {\n        m[s[i:i+3]] += 1\n        if m[s[i:i+3]] >= 2 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp1sdv6hcs_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp1sdv6hcs_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp1sdv6hcs_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    if len(s) == 3 {\n        return s[0] != s[1] && s[1] != s[2] && s[0] !=\
    \ s[2]\n    }\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpbuzaegbv_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmpbuzaegbv_test.go:54:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i <= len(s)-3; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075078
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for index := 0; index < len(s) - 2; index++ {\n        // same elements\n\
    \        if s[index] == s[index + 1] || s[index] == s[index + 2] || s[index +\
    \ 1] == s[index + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var currentChar string\n    var happy bool\n\
    \    var count int\n    for index, char := range s {\n        if currentChar ==\
    \ string(char) {\n            count += 1\n        } else {\n            currentChar\
    \ = string(char)\n            count = 1\n        }\n        if count == 3 {\n\
    \            if index == len(s) - 1 {\n                happy = true\n        \
    \    } else {\n                happy = false\n                break\n        \
    \    }\n        }\n    }\n    return happy\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpd0r7wr_7_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpd0r7wr_7_test.go:67:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpd0r7wr_7_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075083
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // `true` if given string is happy\n    // your\
    \ code here\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpoij17oj4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpoij17oj4_test.go:50:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpoij17oj4_test.go:50: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\ntype TestCase \nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp5aw7xqtz_test.go:36:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075083
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var last string\n    for i, c := range s {\n        if i > 0 && i % 3 ==\
    \ 0 {\n            if c == rune(last[1]) || c == rune(last[2]) {\n           \
    \     return false\n            }\n        }\n        last = last + string(c)\n\
    \        if len(last) > 3 {\n            last = last[1:]\n        }\n    }\n \
    \   return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpx91qqa99_test.go:63: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmpx91qqa99_test.go:63:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 2; i < len(s); i++ {\n        if s[i-2] == s[i-1] && s[i-1] == s[i]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp_wlqpm7i_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp_wlqpm7i_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp_wlqpm7i_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075084
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i ++ {\n        if s[i] == s[i + 1] && s[i] ==\
    \ s[i + 2] {\n            return false\n        }\n    }\n    return true\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp4ty4kwll_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp4ty4kwll_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp4ty4kwll_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // write your code in Go 1.4\n    if len(s) <\
    \ 3 {\n        return false\n    }\n\n    for i := 0; i < len(s) - 2; i++ {\n\
    \        if s[i] == s[i+1] && s[i] == s[i+2] {\n            return false\n   \
    \     }\n    }\n\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpv9qg3xt8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpv9qg3xt8_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpv9qg3xt8_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var h = map[rune]\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpnoho8msz_test.go:25:22: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075084
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var happys []string\n    for i := 0; i < len(s)-3;\
    \ i++ {\n        if s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] {\n \
    \           happys = append(happys, s[i:i+3])\n        }\n    }\n    return len(happys)\
    \ > 0\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__4\
    \ (0.00s)\n        tmp6_ec4tq4_test.go:54: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmp6_ec4tq4_test.go:54:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    hash := map[string]int{}\n    for i := 2; i < len(s); i++ {\n        curr\
    \ := s[i-2:i+1]\n        _, ok := hash[curr]\n        if ok {\n            return\
    \ false\n        }\n        hash[curr] = 1\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpdstfjg0f_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpdstfjg0f_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpdstfjg0f_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tvar letters = make(map[string]int)\n\tfmt.Println(len(s))\n\
    \tif len(s) >= 3 {\n\t\tfor i := 0; i < len(s)-2; i++ {\n\t\t\tletters[s[i:i+3]]++\n\
    \t\t}\n\t\tfor _, v := range letters {\n\t\t\tif v > 1 {\n\t\t\t\treturn false\n\
    \t\t\t}\n\t\t}\n\t\treturn true\n\t}\n\treturn false\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "1\n2\n4\n4\n3\n3\n8\n8\n--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpqyp5q6to_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpqyp5q6to_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpqyp5q6to_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tfor i\
    \ := 2; i < len(s); i++ {\n\t\tif s[i-2] == s[i-1] || s[i-2] == s[i] || s[i-1]\
    \ == s[i] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075085
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tvar is_happy\
    \ bool = true\n\tfor i := 0; i < len(s) - 2; i++ {\n\t\tif s[i] == s[i+1] || s[i]\
    \ == s[i+2] || s[i+1] == s[i+2] {\n\t\t\tis_happy = false\n\t\t\tbreak\n\t\t}\n\
    \t}\n\treturn is_happy\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075085
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    if len(s) < 3 {\n    \
    \    return false\n    }\n    if len(s) == 3 {\n        return (s[0] != s[1])\
    \ && (s[1] != s[2]) && (s[0] != s[2])\n    }\n    return is_happy(s[:3]) && is_happy(s[1:])\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    //fmt.Println(s)\n    for i := 0; i < len(s)-2; i++ {\n        //fmt.Println(s[i],\
    \ s[i+1], s[i+2])\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    length := len(s)\n    if length < 3 {\n     \
    \   return false\n    }\n    for i := 0; i <= length - 3; i++ {\n        if s[i]\
    \ == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075085
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    if len(s) < 3 {\n    \
    \    return false\n    }\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075085
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) >= 3 {\n        for i := 0; i < len(s)-2;\
    \ i++ {\n            if s[i] == s[i+1] && s[i] == s[i+2] {\n                return\
    \ false\n            }\n        }\n        return true\n    }\n    return false\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpb5qfi83z_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpb5qfi83z_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpb5qfi83z_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tfor i\
    \ := 0; i < len(s)-2; i++ {\n\t\tif s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmp8s_mn704_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmp8s_mn704_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp8s_mn704_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp8s_mn704_test.go:48:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp8s_mn704_test.go:48: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Implement your solution here\n    return false\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp813d_4j1_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp813d_4j1_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp813d_4j1_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    if len(s) < 3 {\n    \
    \    return false\n    }\n    var set [256]int\n    for i := 0; i < len(s); i++\
    \ {\n        if i <= len(s)-3 {\n            set[s[i]] = 1\n            set[s[i+1]]\
    \ = 1\n            set[s[i+2]] = 1\n            if set[s[i]] == 1 && set[s[i+1]]\
    \ == 1 && set[s[i+2]] == 1 {\n                return false\n            }\n  \
    \          set[s[i]] = 0\n            set[s[i+1]] = 0\n            set[s[i+2]]\
    \ = 0\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp4bd1cj0z_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp4bd1cj0z_test.go:66:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp4bd1cj0z_test.go:66: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var n = len(s)\n    var charMap = make(map[byte]int)\n\
    \    for i:=0; i<n; i++ {\n        if _, ok := charMap[s[i]]; ok {\n         \
    \   return false\n        } else {\n            charMap[s[i]] = 1\n        }\n\
    \    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmptaflozli_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmptaflozli_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tm := make(map[byte]int)\n\tfor i:=0; i<len(s);\
    \ i++ {\n\t\tm[s[i]]++\n\t}\n\tfor _, v := range m {\n\t\tif v > 1 {\n\t\t\treturn\
    \ false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpmjd9ovfx_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmpmjd9ovfx_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.002s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tvar mapping\
    \ = make(map[byte]int)\n\tfor i := 0; i < len(s); i++ {\n\t\tif i >= 2 {\n\t\t\
    \tfirst := s[i-2]\n\t\t\tsecond := s[i-1]\n\t\t\tthird := s[i]\n\t\t\tif first\
    \ == second || second == third || first == third {\n\t\t\t\treturn false\n\t\t\
    \t}\n\t\t}\n\t\t_, ok := mapping[s[i]]\n\t\tif ok {\n\t\t\treturn false\n\t\t\
    }\n\t\tmapping[s[i]] = i\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp3bdhsm_m_test.go:67: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075085
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    fmt.Println(s)\n    if len(s) < 3 {\n       \
    \ return false\n    }\n    for i := 0; i < len(s) - 2; i++ {\n        if s[i]\
    \ == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tvar lookup\
    \ = make(map[string]int)\n\tfor i:=0; i < len(s)-2; i++ {\n\t\tch := s[i:i+3]\n\
    \t\tif _, ok := lookup[ch]; ok {\n\t\t\treturn false\n\t\t}\n\t\tlookup[ch] =\
    \ 1\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp7gajmrzp_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp7gajmrzp_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp7gajmrzp_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075086
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var happies = []byte{}\n    for i := 0; i < len(s);\
    \ i++ {\n        for j := 0; j < len(happies); j++ {\n            if s[i] == happies[j]\
    \ {\n                return false\n            }\n        }\n        happies =\
    \ append(happies, s[i])\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmp7b3zh2wd_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmp7b3zh2wd_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075087
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tfor i\
    \ := 0; i < len(s)-2; i++ {\n\t\tif s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\ntype Test \n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp3xohd4ve_test.go:36:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075085
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    i := 0\n    for {\n        if len(s) < 3 {\n\
    \            return false\n        }\n        three := s[i:i+3]\n        if len(three)\
    \ != 3 {\n            return false\n        }\n        for j, _ := range three\
    \ {\n            for k, _ := range three {\n                if j != k && three[j]\
    \ == three[k] {\n                    return false\n                }\n       \
    \     }\n        }\n        i += 3\n        if i >= len(s) {\n            return\
    \ true\n        }\n    }\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:6] with length 4 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:6] with length 4\n\ngoroutine 34 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc0001d6000})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmp1dxhzgxj_test.go:30\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmp1dxhzgxj_test.go:57\
    \ +0xcc5\ntesting.tRunner(0xc0001991e0, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    if len(s) == 3 {\n        return s[0] != s[1] && s[1] != s[2] && s[0] !=\
    \ s[2]\n    }\n    max := s[0]\n    min := s[0]\n    for i := 1; i < len(s); i++\
    \ {\n        if s[i] > max {\n            max = s[i]\n        }\n        if s[i]\
    \ < min {\n            min = s[i]\n        }\n    }\n    for _, c := range s {\n\
    \        if int(c) > int(max) - 2 || int(c) < int(min) + 2 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpqoo1qdqt_test.go:69: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__6 (0.00s)\n        tmpqoo1qdqt_test.go:69:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Your code goes here\n    return false\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpor4ks0us_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpor4ks0us_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpor4ks0us_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075089
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp13ghx4za_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp13ghx4za_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp13ghx4za_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\t//Happy check\n\tif len(s) < 3 {\n\t\treturn false\n\
    \t}\n\tfor i := 0; i < len(s)-2; i++ {\n\t\tif s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n\
    func TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 2; i < len(s); i++ {\n        if s[i-2] == s[i-1] || s[i-2] == s[i]\
    \ || s[i-1] == s[i] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\ntype args \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpmu6tyjhn_test.go:36:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var res bool\n    if len(s) < 3 {\n        res\
    \ = false\n    } else {\n        letter := []rune(s)\n        res = true\n   \
    \     for i := 0; i < len(letter) - 3; i++ {\n            if letter[i] == letter[i\
    \ + 1] && letter[i + 1] == letter[i + 2] {\n                res = false\n    \
    \            break\n            }\n        }\n    }\n    return res\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpqsxe5bj8_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpqsxe5bj8_test.go:61:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpqsxe5bj8_test.go:61: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tif len(s) < 3 {\n\t\treturn false\n\t}\n\tset :=\
    \ make(map[string]bool)\n\tfor i := 0; i < len(s)-2; i++ {\n\t\tset[s[i:i+3]]\
    \ = true\n\t}\n\tif len(set) < len(s) {\n\t\treturn false\n\t}\n\treturn true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpyt43m_c6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpyt43m_c6_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpyt43m_c6_test.go:58: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var hapgo = false\n    if len(s) >= 3 {\n   \
    \     var i int\n        var b byte\n        var bc byte\n        var c byte\n\
    \        bc = 0\n        b = 0\n        c = 0\n        for i = 0; i < len(s);\
    \ i++ {\n            if i > 1 {\n                bc = b\n                b = c\n\
    \                c = s[i]\n                if bc != b && b != c && bc != c {\n\
    \                    hapgo = true\n                } else {\n                \
    \    hapgo = false\n                    break\n                }\n           \
    \ } else {\n                b = s[i]\n            }\n        }\n    }\n    return\
    \ hapgo\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i<len(s)-2; i++ {\n        for j:=i+1; j<len(s)-1; j++ {\n    \
    \        for k:=j+1; k<len(s); k++ {\n                if s[i] == s[j] || s[i]\
    \ == s[k] || s[j] == s[k] {\n                    return false\n              \
    \  }\n            }\n        }\n    }\n    return true\n}\n\ntype test \nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmph5m8kq0s_test.go:40:11: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) >= 3 {\n        return (s[0] != s[1])\
    \ && (s[1] != s[2]) && (s[0] != s[2])\n    }\n    return false\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpnkevc61i_test.go:51: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075082
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code goes here\n    return false\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp1aqx5cig_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp1aqx5cig_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp1aqx5cig_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075080
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var first_char rune = ' '\n    var second_char\
    \ rune = ' '\n    var third_char rune = ' '\n    var counter int = 0\n    var\
    \ prev_counter int = -1\n    // var first_char_counter int = 0\n    // var second_char_counter\
    \ int = 0\n    // var third_char_counter int = 0\n    for _, letter := range s\
    \ {\n        counter++\n        if counter == 1 {\n            first_char = letter\n\
    \            // first_char_counter++\n        } else if counter == 2 {\n     \
    \       second_char = letter\n            // second_char_counter++\n        }\
    \ else if counter == 3 {\n            third_char = letter\n            // third_char_counter++\n\
    \        }\n        if counter == 3 {\n            // fmt.Println(\"first char\
    \ \", first_char)\n            // fmt.Println(\"second char \", second_char)\n\
    \            // fmt.Println(\"third char \", third_char)\n            if first_char\
    \ == second_char || first_char == third_char || second_char == third_char {\n\
    \                return false\n            }\n            counter = 0\n      \
    \  }\n        if prev_counter == counter {\n            // fmt.Println(\"s \"\
    , s)\n            // fmt.Println(\"first char \", first_char)\n            //\
    \ fmt.Println(\"second char \", second_char)\n            // fmt.Println(\"third\
    \ char \", third_char)\n            // fmt.Println(\"counter \", counter)\n  \
    \          // fmt.Println(\"prev_counter \", prev_counter)\n            // fmt.Println(\"\
    first_char_counter \", first_char_counter)\n            // fmt.Println(\"second_char_counter\
    \ \", second_char_counter)\n            // fmt.Println(\"third_char_counter \"\
    , third_char_counter)\n            // fmt.Println(\"\")\n            return true\n\
    \        }\n        prev_counter = counter\n    }\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpw39xumfk_test.go:92: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpw39xumfk_test.go:92:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpw39xumfk_test.go:92: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    s_len := len(s)\n    if s_len < 3 {\n       \
    \ return false\n    }\n    for i := 0; i < s_len - 2; i++ {\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075090
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    isHappy := true\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            isHappy = false\n\
    \            break\n        }\n    }\n    return isHappy\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075090
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var str string\n    n := len(s)\n    if n < 3\
    \ {\n        return false\n    }\n\n    for i := 0; i < n; i++ {\n        str\
    \ = s[i : i+3]\n        if len(str) == 3 {\n            if (str[0] == str[1])\
    \ || (str[0] == str[2]) || (str[1] == str[2]) {\n                return false\n\
    \            }\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\npanic: runtime error: slice bounds out\
    \ of range [:5] with length 4 [recovered]\n\tpanic: runtime error: slice bounds\
    \ out of range [:5] with length 4\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2({0x513620,\
    \ 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1389\
    \ +0x24e\ntesting.tRunner.func1()\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1392\
    \ +0x39f\npanic({0x513620, 0xc000014360})\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:838\
    \ +0x207\ncommand-line-arguments_test.is_happy(...)\n\t/tmp/tmpbsv5xi89_test.go:32\n\
    command-line-arguments_test.TestIs_Happy(0x0?)\n\t/tmp/tmpbsv5xi89_test.go:51\
    \ +0x585\ntesting.tRunner(0xc0000da340, 0x528f60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1439\
    \ +0x102\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1486\
    \ +0x35f\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    b := []byte(s)\n    n := len(b)\n    if n < 3\
    \ {\n        return false\n    }\n    for i := 0; i < n-2; i++ {\n        if b[i]\
    \ == b[i+1] || b[i] == b[i+2] || b[i+1] == b[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return is_happy_test.go(s)\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpv8y04ol0_test.go:25:26: expected selector or type assertion, found ''go''

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tfor i := 1; i < len(s) - 2; i++ {\n\t\tif s[i]\
    \ == s[i - 1] || s[i] == s[i + 1] || s[i] == s[i + 2] {\n\t\t\treturn false\n\t\
    \t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate :=\
    \ is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmp5n2hag28_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmp5n2hag28_test.go:53:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmp5n2hag28_test.go:53: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var runes = []rune(s)\n    if len(runes) < 3\
    \ {\n        return false\n    }\n    for i := 0; i < len(runes) - 2; i++ {\n\
    \        if runes[i] == runes[i + 1] || runes[i] == runes[i + 2] || runes[i +\
    \ 1] == runes[i + 2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tstr := []rune(s)\n\tif len(str) > 3 {\n\t\tfor\
    \ i := 0; i < len(str)-2; i++ {\n\t\t\tif str[i] == str[i+1] && str[i] == str[i+2]\
    \ {\n\t\t\t\treturn false\n\t\t\t}\n\t\t}\n\t} else {\n\t\treturn false\n\t}\n\
    \treturn true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpc_w2wa10_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpc_w2wa10_test.go:58:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpc_w2wa10_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\t// your code goes here\n\n\ts = \"abcd\"\n\ts =\
    \ \"aabb\"\n\ts = \"adb\"\n\ts = \"aa\"\n\ts = \"yyy\"\n\tlen := len(s)\n\tif\
    \ len >= 3 {\n\t\tfmt.Println(\"true\")\n\t\treturn true\n\t}\n\treturn false\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "true\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\ntrue\n--- FAIL: TestIs_Happy\
    \ (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0 (0.00s)\n        tmparo5i2h__test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__1\
    \ (0.00s)\n        tmparo5i2h__test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__3 (0.00s)\n        tmparo5i2h__test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmparo5i2h__test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__7 (0.00s)\n        tmparo5i2h__test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // \u0423 \u043C\u0435\u043D\u044F \u043F\u043E\
    \u043B\u0443\u0447\u0438\u043B\u043E\u0441\u044C \u0441\u0434\u0435\u043B\u0430\
    \u0442\u044C \u0442\u0430\u043A:\n    // 1. \u0412\u044B\u0431\u0440\u0430\u0442\
    \u044C \u0438\u0437 \u0441\u0442\u0440\u043E\u043A\u0438 \u0442\u0440\u0438 \u0441\
    \u0438\u043C\u0432\u043E\u043B\u0430 \u0441 \u0438\u043D\u0434\u0435\u043A\u0441\
    \u0430\u043C\u0438 0, 1, 2 \u0438 \u0437\u0430\u043F\u0438\u0441\u0430\u0442\u044C\
    \ \u0438\u0445 \u0432 \u043D\u043E\u0432\u0443\u044E \u0441\u0442\u0440\u043E\u043A\
    \u0443.\n    // 2. \u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C, \u0447\
    \u0442\u043E \u0434\u043B\u0438\u043D\u0430 \u0441\u0442\u0440\u043E\u043A\u0438\
    \ \u0440\u0430\u0432\u043D\u0430 3 \u0438 \u043D\u0438 \u043E\u0434\u0438\u043D\
    \ \u0441\u0438\u043C\u0432\u043E\u043B \u043D\u0435 \u043F\u043E\u0432\u0442\u043E\
    \u0440\u044F\u0435\u0442\u0441\u044F.\n    // 3. \u0412\u044B\u0431\u0440\u0430\
    \u0442\u044C \u0438\u0437 \u0441\u0442\u0440\u043E\u043A\u0438 \u0442\u0440\u0438\
    \ \u0441\u0438\u043C\u0432\u043E\u043B\u0430 \u0441 \u0438\u043D\u0434\u0435\u043A\
    \u0441\u0430\u043C\u0438 1, 2, 3 \u0438 \u0437\u0430\u043F\u0438\u0441\u0430\u0442\
    \u044C \u0438\u0445 \u0432 \u043D\u043E\u0432\u0443\u044E \u0441\u0442\u0440\u043E\
    \u043A\u0443.\n    // 4. \u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\u044C\
    , \u0447\u0442\u043E \u0434\u043B\u0438\u043D\u0430 \u0441\u0442\u0440\u043E\u043A\
    \u0438 \u0440\u0430\u0432\u043D\u0430 3 \u0438 \u043D\u0438 \u043E\u0434\u0438\
    \u043D \u0441\u0438\u043C\u0432\u043E\u043B \u043D\u0435 \u043F\u043E\u0432\u0442\
    \u043E\u0440\u044F\u0435\u0442\u0441\u044F.\n    // 5. \u0412\u044B\u0431\u0440\
    \u0430\u0442\u044C \u0438\u0437 \u0441\u0442\u0440\u043E\u043A\u0438 \u0442\u0440\
    \u0438 \u0441\u0438\u043C\u0432\u043E\u043B\u0430 \u0441 \u0438\u043D\u0434\u0435\
    \u043A\u0441\u0430\u043C\u0438 2, 3, 4 \u0438 \u0437\u0430\u043F\u0438\u0441\u0430\
    \u0442\u044C \u0438\u0445 \u0432 \u043D\u043E\u0432\u0443\u044E \u0441\u0442\u0440\
    \u043E\u043A\u0443.\n    // 6. \u041F\u0440\u043E\u0432\u0435\u0440\u0438\u0442\
    \u044C, \u0447\u0442\u043E \u0434\u043B\u0438\u043D\u0430 \u0441\u0442\u0440\u043E\
    \u043A\u0438 \u0440\u0430\u0432\u043D\u0430 3 \u0438 \u043D\u0438 \u043E\u0434\
    \u0438\u043D \u0441\u0438\u043C\u0432\u043E\u043B \u043D\u0435 \u043F\u043E\u0432\
    \u0442\u043E\u0440\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpd2p1k45m_test.go:32:6: expected ''('', found TestIs_Happy

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075088
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    s_list := []byte(s)\n    for i:=0; i<len(s_list)-2; i++ {\n        for j:=i+1;\
    \ j<len(s_list)-1; j++ {\n            for k:=j+1; k<len(s_list); k++ {\n     \
    \           if s_list[i] == s_list[j] || s_list[i] == s_list[k] || s_list[j] ==\
    \ s_list[k] {\n                    return false\n                }\n         \
    \   }\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpltr3_ps__test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075091
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    size := len(s)\n    if size >= 3 {\n        for\
    \ i := 0; i < size - 2; i++ {\n            if s[i] == s[i + 1] && s[i] == s[i\
    \ + 2] {\n                return false\n            }\n        }\n        return\
    \ true\n    }\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmphi4uq515_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmphi4uq515_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmphi4uq515_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075092
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    l := len(s)\n    if l < 3 {\n        return false\n\
    \    }\n\n    for i := 2; i < l; i++ {\n        if s[i] == s[i-1] || s[i] == s[i-2]\
    \ {\n            return false\n        }\n    }\n\n    return true\n}\n\ntype\
    \ TestCase \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmp000fcld6_test.go:39:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075091
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    is_happy := true\n   \
    \ if len(s) < 3 {\n        is_happy = false\n    } else {\n        for i := 0;\
    \ i < len(s) - 2; i++ {\n            if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1]\
    \ == s[i+2] {\n                is_happy = false\n                break\n     \
    \       }\n        }\n    }\n    return is_happy\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075093
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    s_len := len(s)\n    if s_len < 3 {\n       \
    \ return false\n    }\n    for i := 0; i < s_len - 2; i++ {\n        if s[i] ==\
    \ s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n \
    \       }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate\
    \ := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n\
    \     { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075090
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    l := len(s)\n    if l < 3 {\n        return false\n\
    \    }\n    if l == 3 {\n        return true\n    }\n    for i := 2; i < l; i\
    \ += 1 {\n        if s[i] == s[i-1] && s[i] == s[i-2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpqanlghy4_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpqanlghy4_test.go:60:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpqanlghy4_test.go:60: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075093
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    count := make(map[string]int)\n    for i := 0;\
    \ i < len(s)-3; i++ {\n        count[s[i:i+3]]++\n    }\n    for _, val := range\
    \ count {\n        if val > 1 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__0\
    \ (0.00s)\n        tmpxzueie19_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__1 (0.00s)\n        tmpxzueie19_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmpxzueie19_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmpxzueie19_test.go:57:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpxzueie19_test.go:57: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075094
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    count := 0\n    for i := 0; i < len(s); i++ {\n        if i < len(s) - 2\
    \ {\n            if s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] {\n \
    \               count++\n            }\n        }\n    }\n    return count ==\
    \ len(s) - 2\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    return false\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmp9zlgzwdz_test.go:48:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmp9zlgzwdz_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Fill in the code here\n    var r rune\n  \
    \  var f bool\n    var cnt int\n    for i, r := range s {\n        if i == 0 {\n\
    \            continue\n        }\n        if i%3 == 0 {\n            cnt = 0\n\
    \            for j, r2 := range s {\n                if j < i-2 {\n          \
    \          continue\n                }\n                if r == r2 {\n       \
    \             cnt++\n                }\n            }\n            if cnt == 3\
    \ {\n                return false\n            }\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmp96kmbcx4_test.go:26:9: r declared but not used

    /tmp/tmp96kmbcx4_test.go:27:9: f declared but not used

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 2
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    // \u5148\u5EFA\u7ACB\u5B57\u5178\uFF0C\u6CE8\u610F\u957F\u5EA6\uFF0C\u5982\
    \u679C\u957F\u5EA6\u5DF2\u7ECF\u8D85\u8FC7\u4E8626\uFF0C\u90A3\u4E48\u540E\u9762\
    \u7684\u5B57\u7B26\u5FC5\u7136\u65E0\u6CD5\u6EE1\u8DB3\u8981\u6C42\uFF0C\u6240\
    \u4EE5\u53EF\u4EE5\u76F4\u63A5\u8FD4\u56DEfalse\n    // \u53E6\u5916\uFF0C\u5982\
    \u679C\u957F\u5EA6\u521A\u597D\u662F3\u7684\u500D\u6570\uFF0C\u6700\u540E\u4E00\
    \u7EC4\u5B57\u7B26\u4E0D\u4E00\u5B9A\u6EE1\u8DB3\u8981\u6C42\uFF0C\u6240\u4EE5\
    \u8981\u7279\u6B8A\u5904\u7406\n    var dic [26]bool\n    var r rune\n    var\
    \ ok bool\n    var c int\n    for i, v := range s {\n        r, ok = utf8.DecodeRuneInString(s[i:])\n\
    \        if ok {\n            if dic[r - 'a'] {\n                return false\n\
    \            }\n            dic[r - 'a'] = true\n            c += 1\n        \
    \    if c % 3 == 0 {\n                for _, v2 := range dic {\n             \
    \       if v2 {\n                        return false\n                    }\n\
    \                }\n            }\n        }\n    }\n    return true\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments_test [command-line-arguments.test]

    /tmp/tmpuabbb_wn_test.go:34:12: v declared but not used

    /tmp/tmpuabbb_wn_test.go:35:17: undefined: utf8

    '
  stdout: "FAIL\tcommand-line-arguments [build failed]\nFAIL\n"
  timestamp: 1660075094
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    prev := s[:3]\n    if prev[0] == prev[1] || prev[0] == prev[2] || prev[1]\
    \ == prev[2] {\n        return false\n    }\n    for i := 3; i < len(s); i++ {\n\
    \        if s[i] == prev[0] || s[i] == prev[1] || s[i] == prev[2] {\n        \
    \    return false\n        }\n        prev = prev[1:] + string(s[i])\n    }\n\
    \    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(\"a\"), expected: false },\n  \
    \   { actual: candidate(\"aa\"), expected: false },\n     { actual: candidate(\"\
    abcd\"), expected: true },\n     { actual: candidate(\"aabb\"), expected: false\
    \ },\n     { actual: candidate(\"adb\"), expected: true },\n     { actual: candidate(\"\
    xyy\"), expected: false },\n     { actual: candidate(\"iopaxpoi\"), expected:\
    \ true },\n     { actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpq9plji6a_test.go:61: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var isHappy bool\n    isHappy = false\n    for\
    \ i := 0; i < len(s)-2; i++ {\n        if s[i] != s[i+1] && s[i] != s[i+2] &&\
    \ s[i+1] != s[i+2] {\n            isHappy = true\n        } else {\n         \
    \   isHappy = false\n            break\n        }\n    }\n    return isHappy\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code here\n    return false\n}\n\nfunc\
    \ TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpy6auda04_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpy6auda04_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660074919
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // your code goes here\n    if len(s) < 3 {\n\
    \        return false\n    }\n    var ch [3]uint8\n    for i, c := range s {\n\
    \        ch[i%3] = uint8(c)\n        if i >= 2 && ch[0] == ch[1] && ch[1] == ch[2]\
    \ {\n            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp180_k91w_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp180_k91w_test.go:59:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp180_k91w_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var arr = []rune(s)\n    var check, i = make(map[rune]int), 1\n    check[arr[0]]\
    \ = 1\n    for i < len(arr) {\n        if arr[i] == arr[i-1] {\n            return\
    \ false\n        }\n        if _, ok := check[arr[i]]; ok {\n            return\
    \ false\n        }\n        check[arr[i]] = 1\n        i++\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpful0y5ri_test.go:64: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660075095
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s)-2; i++ {\n        //fmt.Println(s[i:i+3])\n      \
    \  if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    m := map[string]bool{}\n    l := len(s)\n   \
    \ if l < 3 {\n        return false\n    }\n    for i := 0; i < l - 2; i++ {\n\
    \        m[s[i:i+3]] = true\n    }\n    return len(m) == l - 2\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__3\
    \ (0.00s)\n        tmp0kwap69j_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    \    --- FAIL: TestIs_Happy/test_num__5 (0.00s)\n        tmp0kwap69j_test.go:56:\
    \ expected '%!s(bool=false)', got '%!s(bool=true)'\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmp0kwap69j_test.go:56: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\t// TODO\n\treturn false\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpedtfrmql_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpedtfrmql_test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpedtfrmql_test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // Write your code here\n    return false\n}\n\
    \nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmpyj0z0br__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmpyj0z0br__test.go:49:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmpyj0z0br__test.go:49: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075078
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i<len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075082
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\tvar isHappy bool\n\tfor i := 2; i < len(s); i++\
    \ {\n\t\tisHappy = false\n\t\tif s[i-2] != s[i-1] && s[i-1] != s[i] && s[i-2]\
    \ != s[i] {\n\t\t\tisHappy = true\n\t\t}\n\t}\n\treturn isHappy\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var result = true\n    var index = 0\n    for\
    \ i := 0; i < len(s); i++ {\n        if s[i] == s[index] {\n            result\
    \ = false\n            break\n        }\n        index++\n    }\n    return result\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__2\
    \ (0.00s)\n        tmptbmswjcp_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    \    --- FAIL: TestIs_Happy/test_num__4 (0.00s)\n        tmptbmswjcp_test.go:57:\
    \ expected '%!s(bool=true)', got '%!s(bool=false)'\n    --- FAIL: TestIs_Happy/test_num__6\
    \ (0.00s)\n        tmptbmswjcp_test.go:57: expected '%!s(bool=true)', got '%!s(bool=false)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\t// your code here\n\tm := make(map[string]int)\n\
    \thappy := true\n\tfor i:=0; i<len(s)-2; i++ {\n\t\tthree := s[i:i+3]\n\t\t_,\
    \ ok := m[three]\n\t\tif ok {\n\t\t\thappy = false\n\t\t\tbreak\n\t\t}\n\t\tm[three]\
    \ = 1\n\t}\n\treturn happy\n}\n\ntype testCase \nfunc TestIs_Happy(t *testing.T)\
    \ {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpzh8e6x1u_test.go:40:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075093
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075095
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    ss := []rune(s)\n    if len(ss) < 3 {\n     \
    \   return false\n    }\n    for i := 0; i < len(ss) - 2; i++ {\n        if ss[i]\
    \ == ss[i+1] || ss[i] == ss[i+2] || ss[i+1] == ss[i+2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    if len(s) == 3 {\n        return true\n    }\n    for i:=0; i<len(s)-2; i++\
    \ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n     \
    \       return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__5\
    \ (0.00s)\n        tmpvxxia3cc_test.go:59: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660075095
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n\trunes := []rune(s)\n\tif len(runes) < 3 {\n\t\t\
    return false\n\t}\n\tfor i := 0; i <= len(runes)-3; i++ {\n\t\tif runes[i] ==\
    \ runes[i+1] || runes[i] == runes[i+2] || runes[i+1] == runes[i+2] {\n\t\t\treturn\
    \ false\n\t\t}\n\t}\n\treturn true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n \
    \ candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"a\"\
    ), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075095
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i:=2; i<len(s); i++ {\n        if s[i] == s[i-1] || s[i] == s[i-2] {\n\
    \            return false\n        }\n    }\n    return true\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075095
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    for i := 0; i < len(s) - 2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2]\
    \ || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return\
    \ true\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.002s\n"
  timestamp: 1660074919
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    letter_map := make(map[byte]bool)\n    var current, last, before_last byte\
    \ = 0, 0, 0\n    for i := 0; i < len(s); i++ {\n        if i < 2 {\n         \
    \   letter_map[s[i]] = true\n            continue\n        }\n        current\
    \ = s[i]\n        last = s[i-1]\n        before_last = s[i-2]\n        if current\
    \ == last || current == before_last || last == before_last {\n            return\
    \ false\n        }\n        letter_map[s[i]] = true\n    }\n    return true\n\
    }\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(\"a\"), expected: false },\n     { actual: candidate(\"\
    aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected: true\
    \ },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual: candidate(\"\
    adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected: false\
    \ },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     { actual:\
    \ candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc := range tests\
    \ {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\t\
    if fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
    \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t\
    })\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    var result bool = false\n    if len(s) < 3 {\n\
    \        return result\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if\
    \ s[i] != s[i+1] && s[i] != s[i+2] && s[i+1] != s[i+2] {\n            result =\
    \ true\n            break\n        }\n    }\n    return result\n}\n\nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestIs_Happy (0.00s)\n    --- FAIL: TestIs_Happy/test_num__7\
    \ (0.00s)\n        tmpxrf0xoid_test.go:58: expected '%!s(bool=false)', got '%!s(bool=true)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660075095
- exit_code: 0
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n\
    \    var res bool\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] != s[i+1]\
    \ && s[i] != s[i+2] && s[i+1] != s[i+2] {\n            res = true\n        } else\
    \ {\n            res = false\n            break\n        }\n    }\n    return\
    \ res\n}\n\nfunc TestIs_Happy(t *testing.T) {\n  candidate := is_happy\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(\"a\"), expected: false },\n     { actual:\
    \ candidate(\"aa\"), expected: false },\n     { actual: candidate(\"abcd\"), expected:\
    \ true },\n     { actual: candidate(\"aabb\"), expected: false },\n     { actual:\
    \ candidate(\"adb\"), expected: true },\n     { actual: candidate(\"xyy\"), expected:\
    \ false },\n     { actual: candidate(\"iopaxpoi\"), expected: true },\n     {\
    \ actual: candidate(\"iopaxioi\"), expected: false },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660075095
- exit_code: 1
  program: "package is_happy_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // You are given a string s.\n// Your task is to check if the string is hapgo\
    \ or not.\n// A string is hapgo if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n// For example:\n// >>> is_happy(a)\n// false\n// >>>\
    \ is_happy(aa)\n// false\n// >>> is_happy(abcd)\n// true\n// >>> is_happy(aabb)\n\
    // false\n// >>> is_happy(adb)\n// true\n// >>> is_happy(xyy)\n// false\nfunc\
    \ is_happy(s string) bool {\n    // s is at least 3\n    if len(s) < 3 {\n   \
    \     return false\n    }\n\n    for i := 0; i < len(s) - 2; i++ {\n        if\
    \ s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n\
    \        }\n    }\n\n    return true\n}\n\ntype TestCase \nfunc TestIs_Happy(t\
    \ *testing.T) {\n  candidate := is_happy\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"\
    a\"), expected: false },\n     { actual: candidate(\"aa\"), expected: false },\n\
    \     { actual: candidate(\"abcd\"), expected: true },\n     { actual: candidate(\"\
    aabb\"), expected: false },\n     { actual: candidate(\"adb\"), expected: true\
    \ },\n     { actual: candidate(\"xyy\"), expected: false },\n     { actual: candidate(\"\
    iopaxpoi\"), expected: true },\n     { actual: candidate(\"iopaxioi\"), expected:\
    \ false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test\
    \ num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: SyntaxError
  stderr: '# command-line-arguments

    /tmp/tmpe4hs1fnm_test.go:39:15: expected type, found newline

    '
  stdout: "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n"
  timestamp: 1660075095
