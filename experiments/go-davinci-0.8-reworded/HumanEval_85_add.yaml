name: HumanEval_85_add
language: go_test.go
prompt: "package add_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given\
  \ a non-empty list of integers lst. add the even elements that are at odd indices..\n\
  // Examples:\n// >>> add([]int{4, 2, 6, 7})\n// 2\nfunc add(lst []int) int {\n"
tests: "func TestAdd(t *testing.T) {\n  candidate := add\n\ttype test struct {\n\t\
  \tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n   \
  \  { actual: candidate([]int{4, 88}), expected: 88 },\n     { actual: candidate([]int{4,\
  \ 5, 6, 7, 2, 122}), expected: 122 },\n     { actual: candidate([]int{4, 0, 6, 7}),\
  \ expected: 0 },\n     { actual: candidate([]int{4, 4, 6, 8}), expected: 12 },\n\
  \   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i),\
  \ func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
  %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
  \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
completions: ["    var total int\n    for i, n := range lst {\n        if i % 2 ==\
    \ 1 && n % 2 == 0 {\n            total += n\n        }\n    }\n    return total\n\
    }\n", "    var sum int\n    for i, v := range lst {\n        if i % 2 == 1 &&\
    \ v % 2 == 0 {\n            sum += v\n        }\n    }\n    return sum\n}\n",
  "    sum := 0\n    for index, value := range lst {\n        if index % 2 == 1 &&\
    \ value % 2 == 0 {\n            sum += value\n        }\n    }\n    return sum\n\
    }\n", "    if len(lst) < 2 {\n        return 0\n    }\n    return lst[1] + add(lst[2:])\n\
    }\n", "    var result int\n    for i, el := range lst {\n        if i % 2 == 1\
    \ && el % 2 == 0 {\n            result += el\n        }\n    }\n    return result\n\
    }\n", "    sum := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x %\
    \ 2 == 0 {\n            sum += x\n        }\n    }\n    return sum\n}\n", "  \
    \  var sum int\n    for idx, num := range lst {\n        if idx % 2 == 1 && num\
    \ % 2 == 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n",
  "    var result int\n    for i, v := range lst {\n        if i % 2 == 1 && v % 2\
    \ == 0 {\n            result += v\n        }\n    }\n    return result\n}\n",
  "    var added int\n    for i, elm := range lst {\n        if i % 2 == 1 && elm\
    \ % 2 == 0 {\n            added += elm\n        }\n    }\n    return added\n}\n",
  "    sum := 0\n    for i, num := range lst {\n        if i % 2 == 1 && num % 2 ==\
    \ 0 {\n            sum += num\n        }\n    }\n    return sum\n}\n", "    l\
    \ := len(lst)\n    if l == 0 {\n        return 0\n    }\n    total := 0\n    for\
    \ i, v := range lst {\n        if i%2 == 1 && v%2 == 0 {\n            total +=\
    \ v\n        }\n    }\n    return total\n}\n", "    var total int\n    for i,\
    \ v := range lst {\n        if i % 2 == 1 && v % 2 == 0 {\n            total +=\
    \ v\n        }\n    }\n    return total\n}\n", "    sum := 0\n    for i, e :=\
    \ range lst {\n        if i % 2 == 1 && e % 2 == 0 {\n            sum += e\n \
    \       }\n    }\n    return sum\n}\n", "    total := 0\n    for i, x := range\
    \ lst {\n        if i % 2 == 1 && x % 2 == 0 {\n            total += x\n     \
    \   }\n    }\n    return total\n}\n", "    sum := 0\n    for i, v := range lst\
    \ {\n        if i%2 != 0 && v%2 == 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n", "    var sum int = 0\n    for i, v := range lst {\n   \
    \     if i % 2 == 1 && v % 2 == 0 {\n            sum += v\n        }\n    }\n\
    \    return sum\n}\n", "    var evens int\n    for i, x := range lst {\n     \
    \   if i%2 != 0 && x%2 == 0 {\n            evens += x\n        }\n    }\n    return\
    \ evens\n}\n", "    var total int\n    for i, elem := range lst {\n        if\
    \ i%2 == 1 && elem%2 == 0 {\n            total += elem\n        }\n    }\n   \
    \ return total\n}\n", "    sum := 0\n    for i, e := range lst {\n        if i\
    \ % 2 == 1 && e % 2 == 0 {\n            sum += e\n        }\n    }\n    return\
    \ sum\n}\n", "    var result int\n    for i, val := range lst {\n        if i\
    \ % 2 == 1 && val % 2 == 0 {\n            result += val\n        }\n    }\n  \
    \  return result\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
