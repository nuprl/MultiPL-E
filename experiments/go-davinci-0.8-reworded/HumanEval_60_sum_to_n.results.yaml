language: go_test.go
name: HumanEval_60_sum_to_n
results:
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n < 1 {\n\
    \        return 0\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // TODO: Write\
    \ your sum_to_n function, here\n    return 0\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmp4cm3xtos_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmp4cm3xtos_test.go:41:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmp4cm3xtos_test.go:41: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmp4cm3xtos_test.go:41:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmp4cm3xtos_test.go:41: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n + 1)\
    \ * n / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // Your code\
    \ here\n    return 1\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__1\
    \ (0.00s)\n        tmpksq53_4m_test.go:41: expected '%!s(int=21)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_To_N/test_num__2 (0.00s)\n        tmpksq53_4m_test.go:41:\
    \ expected '%!s(int=66)', got '%!s(int=1)'\n    --- FAIL: TestSum_To_N/test_num__3\
    \ (0.00s)\n        tmpksq53_4m_test.go:41: expected '%!s(int=465)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_To_N/test_num__4 (0.00s)\n        tmpksq53_4m_test.go:41:\
    \ expected '%!s(int=5050)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.004s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\tif n == 1 {\n\t\
    \treturn 1\n\t}\n\treturn n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    s := 0\n    for\
    \ i := 1; i <= n; i++ {\n        s += i\n    }\n    return s\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // >>> for i\
    \ in range(4):\n    // ...     print(i)\n    // ...\n    // 0\n    // 1\n    //\
    \ 2\n    // 3\n    // 5\n    // 6\n    // 7\n    // 8\n    // 9\n    // >>>\n\
    \    var i int = 0\n    var sum int = 0\n    // >>> range(4)\n    // range(0,\
    \ 4)\n    // >>> range(10)\n    // range(0, 10)\n    // >>>\n    for i = 0; i\
    \ < n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmps5490h7e_test.go:63: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmps5490h7e_test.go:63:\
    \ expected '%!s(int=21)', got '%!s(int=15)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmps5490h7e_test.go:63: expected '%!s(int=66)', got '%!s(int=55)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmps5490h7e_test.go:63:\
    \ expected '%!s(int=465)', got '%!s(int=435)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmps5490h7e_test.go:63: expected '%!s(int=5050)', got '%!s(int=4950)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    //if n == 1 {\n\
    \    //    return 1\n    //}\n    //return n + sum_to_n(n-1)\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n < 1 {\n\
    \        return 0\n    }\n    return n * (n + 1) / 2\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // return n *\
    \ (n + 1) / 2\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n\
    \    }\n    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate :=\
    \ sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     {\
    \ actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n < 1 {\n\
    \        return 0\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    for i := 1; i\
    \ < n; i++ {\n        n += i\n    }\n    return n\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (7.95s)\n    --- FAIL: TestSum_To_N/test_num__1\
    \ (0.00s)\n        tmpqqbrwf9e_test.go:43: expected '%!s(int=21)', got '%!s(int=-9223372034707292154)'\n\
    \    --- FAIL: TestSum_To_N/test_num__2 (0.00s)\n        tmpqqbrwf9e_test.go:43:\
    \ expected '%!s(int=66)', got '%!s(int=-9223372034707292149)'\n    --- FAIL: TestSum_To_N/test_num__3\
    \ (0.00s)\n        tmpqqbrwf9e_test.go:43: expected '%!s(int=465)', got '%!s(int=-9223372034707292130)'\n\
    \    --- FAIL: TestSum_To_N/test_num__4 (0.00s)\n        tmpqqbrwf9e_test.go:43:\
    \ expected '%!s(int=5050)', got '%!s(int=-9223372034707292060)'\nFAIL\nFAIL\t\
    command-line-arguments\t7.960s\nFAIL\n"
  timestamp: 1660073238
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // Fill in code\
    \ here\n    return n * (n + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n \
    \ candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual:\
    \ candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return 0\n}\n\
    \nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\t// your code here\n\
    \tvar sum int\n\tfor i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // insert code\
    \ here\n    sum := 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n\
    \    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int =\
    \ 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073190
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\tsum := 0\n\tfor\
    \ i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // YOUR CODE\
    \ HERE\n    return 1\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__1\
    \ (0.00s)\n        tmpte873803_test.go:41: expected '%!s(int=21)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_To_N/test_num__2 (0.00s)\n        tmpte873803_test.go:41:\
    \ expected '%!s(int=66)', got '%!s(int=1)'\n    --- FAIL: TestSum_To_N/test_num__3\
    \ (0.00s)\n        tmpte873803_test.go:41: expected '%!s(int=465)', got '%!s(int=1)'\n\
    \    --- FAIL: TestSum_To_N/test_num__4 (0.00s)\n        tmpte873803_test.go:41:\
    \ expected '%!s(int=5050)', got '%!s(int=1)'\nFAIL\nFAIL\tcommand-line-arguments\t\
    0.003s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n < 1 {\n\
    \        return 0\n    }\n    return (n * (n + 1)) / 2\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    }\n    var sum int\n    for i := 1; i <= n; i++ {\n   \
    \     sum += i\n    }\n    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n\
    \  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual:\
    \ candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return ((1 +\
    \ n) * n) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\tif n == 1 {\n\t\
    \treturn 1\n\t}\n\t\n\treturn n + sum_to_n(n - 1)\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := n * (n\
    \ + 1) / 2\n    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate\
    \ := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     {\
    \ actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    for i := 1; i\
    \ < n; i++ {\n        n += i\n    }\n    return n\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (7.95s)\n    --- FAIL: TestSum_To_N/test_num__1\
    \ (0.00s)\n        tmpqqbrwf9e_test.go:43: expected '%!s(int=21)', got '%!s(int=-9223372034707292154)'\n\
    \    --- FAIL: TestSum_To_N/test_num__2 (0.00s)\n        tmpqqbrwf9e_test.go:43:\
    \ expected '%!s(int=66)', got '%!s(int=-9223372034707292149)'\n    --- FAIL: TestSum_To_N/test_num__3\
    \ (0.00s)\n        tmpqqbrwf9e_test.go:43: expected '%!s(int=465)', got '%!s(int=-9223372034707292130)'\n\
    \    --- FAIL: TestSum_To_N/test_num__4 (0.00s)\n        tmpqqbrwf9e_test.go:43:\
    \ expected '%!s(int=5050)', got '%!s(int=-9223372034707292060)'\nFAIL\nFAIL\t\
    command-line-arguments\t7.960s\nFAIL\n"
  timestamp: 1660073238
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return 0\n}\n\
    \nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var s int = 0\n\
    \    var i int = 1\n    for i <= n {\n        s += i\n        i += 1\n    }\n\
    \    return s\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var i int\n \
    \   var sum int\n    for i = 1; i <= n; i++ {\n        sum += i\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual:\
    \ candidate(30), expected: 465 },\n     { actual: candidate(100), expected: 5050\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int =\
    \ 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073190
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int =\
    \ 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073190
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := n * (n\
    \ + 1) / 2\n    return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate\
    \ := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     {\
    \ actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // Should probably\
    \ use a loop but this is easier\n    return n * (n + 1) / 2\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return ((n*n)+n)/2\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    i := 1\n    sum\
    \ := 0\n    for i <= n {\n        sum += i\n        i += 1\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual:\
    \ candidate(30), expected: 465 },\n     { actual: candidate(100), expected: 5050\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var i int = 1\n\
    \    var j int = 0\n    for ; i < n; i++ {\n        j += i\n    }\n    return\
    \ j\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test\
    \ struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual:\
    \ candidate(30), expected: 465 },\n     { actual: candidate(100), expected: 5050\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpgiwo21lp_test.go:45: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpgiwo21lp_test.go:45:\
    \ expected '%!s(int=21)', got '%!s(int=15)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpgiwo21lp_test.go:45: expected '%!s(int=66)', got '%!s(int=55)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpgiwo21lp_test.go:45:\
    \ expected '%!s(int=465)', got '%!s(int=435)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpgiwo21lp_test.go:45: expected '%!s(int=5050)', got '%!s(int=4950)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // Because `sum_to_n`\
    \ returns a int and take an int as an argument,\n    // you have to have a int\
    \ somewhere in the function, or go will throw\n    // a syntax error at compile\
    \ time.\n    //\n    // The if statement is a super simple boolean expression\
    \ like the\n    // ones you learned about in the previous section.\n    //\n \
    \   // You can return a expression in Go. You don't have to assign it to\n   \
    \ // a variable and then return the variable, you can just return a\n    // expression.\n\
    \    if n == 1 {\n        return 1\n    } else {\n        return n + sum_to_n(n\
    \ - 1)\n    }\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // your code\
    \ here\n    return 0\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpqzgk00jm_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpqzgk00jm_test.go:41:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpqzgk00jm_test.go:41: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpqzgk00jm_test.go:41:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpqzgk00jm_test.go:41: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int =\
    \ 0\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073190
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // TODO: Replace\
    \ 0 with the correct code.\n    return 0\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpfqycwq4p_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpfqycwq4p_test.go:41:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpfqycwq4p_test.go:41: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpfqycwq4p_test.go:41:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpfqycwq4p_test.go:41: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n + 1)\
    \ * n / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var i int = 1\n\
    \    var result int = 0\n    for ; i <= n; i++ {\n        result += i\n    }\n\
    \    return result\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // Enter code\
    \ here.\n    return 0\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate :=\
    \ sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     {\
    \ actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpm48u16xb_test.go:41: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpm48u16xb_test.go:41:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpm48u16xb_test.go:41: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpm48u16xb_test.go:41:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpm48u16xb_test.go:41: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    total := 0\n\
    \    for i := 1; i <= n; i++ {\n        total += i\n    }\n    return total\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // I should return\
    \ the sum of the numbers from 1 to n\n    sum := 0\n    // I should loop from\
    \ 1 to n:\n    for ii := 1; ii <= n; ii++ {\n        sum += ii\n    }\n    return\
    \ sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype\
    \ test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests\
    \ := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6),\
    \ expected: 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual:\
    \ candidate(30), expected: 465 },\n     { actual: candidate(100), expected: 5050\
    \ },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num %\
    \ d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"\
    %v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected,\
    \ tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    total := 0\n\
    \    for i := 1; i <= n; i++ {\n        total += i\n    }\n    return total\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    s := 0\n    for\
    \ i := 1; i <= n; i++ {\n        s += i\n    }\n    return s\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n > 0 {\n\
    \        return n + sum_to_n(n - 1)\n    } else {\n        return 0\n    }\n}\n\
    \nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    for i := 1; i\
    \ < n; i++ {\n        n += i\n    }\n    return n\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (7.95s)\n    --- FAIL: TestSum_To_N/test_num__1\
    \ (0.00s)\n        tmpqqbrwf9e_test.go:43: expected '%!s(int=21)', got '%!s(int=-9223372034707292154)'\n\
    \    --- FAIL: TestSum_To_N/test_num__2 (0.00s)\n        tmpqqbrwf9e_test.go:43:\
    \ expected '%!s(int=66)', got '%!s(int=-9223372034707292149)'\n    --- FAIL: TestSum_To_N/test_num__3\
    \ (0.00s)\n        tmpqqbrwf9e_test.go:43: expected '%!s(int=465)', got '%!s(int=-9223372034707292130)'\n\
    \    --- FAIL: TestSum_To_N/test_num__4 (0.00s)\n        tmpqqbrwf9e_test.go:43:\
    \ expected '%!s(int=5050)', got '%!s(int=-9223372034707292060)'\nFAIL\nFAIL\t\
    command-line-arguments\t7.960s\nFAIL\n"
  timestamp: 1660073238
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int\n\
    \    for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    n = n * (n +\
    \ 1) / 2\n    return n\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate :=\
    \ sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     {\
    \ actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n*(n+1))/2\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // return n *\
    \ (n + 1) / 2\n    return (n * (n + 1)) >> 1\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\t// n can't be negative\n\
    \tif n < 0 {\n\t\tpanic(\"n can't be negative\")\n\t}\n\t// 0 is defined as 0\n\
    \tif n == 0 {\n\t\treturn 0\n\t}\n\t// sum starts from 1, because we have to take\
    \ into account n\n\tsum := 1\n\tfor i := 2; i <= n; i++ {\n\t\tsum += i\n\t}\n\
    \treturn sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\tif n == 1 {\n\t\
    \treturn 1\n\t}\n\treturn n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t *testing.T)\
    \ {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // var out int\n\
    \    // for i := 1; i <= n; i++ {\n    //     out += i\n    // }\n    // return\
    \ out\n    return n * (n + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate\
    \ := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     {\
    \ actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // compute\n\
    \    var sum int\n    for i := 1; i <= n; i++ {\n        sum += i\n    }\n   \
    \ return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return ((n *\
    \ (n + 1)) / 2)\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073234
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return 0\n}\n\
    \nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n*(n+1))/2\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\treturn n * (n +\
    \ 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n * (n\
    \ + 1)) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    }\n    return n + sum_to_n(n-1)\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.006s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    total := 0\n\
    \    for i := 1; i <= n; i++ {\n        total += i\n    }\n    return total\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073232
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var result int\n\
    \    for i := 1; i <= n; i++ {\n        result += i\n    }\n    return result\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var sum int =\
    \ 0\n    var i int = 1\n    for ; i <= n; i++ {\n        sum += i\n    }\n   \
    \ return sum\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // Base case:\
    \ if n is 1, return 1\n    if n == 1 {\n        return 1\n    }\n\n    // Recursive\
    \ case: sum_to_n = n + sum_to_n(n-1)\n    return n + sum_to_n(n-1)\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\tsum := 0\n\tfor\
    \ i := 1; i <= n; i++ {\n\t\tsum += i\n\t}\n\treturn sum\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return ((n *\
    \ (n + 1)) / 2)\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\
    \ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    var s int\n \
    \   for i := 1; i <= n; i++ {\n        s += i\n    }\n    return s\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.003s\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return 0\n}\n\
    \nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return (n*(n+1))/2\n\
    }\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073232
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // value := 0\n\
    \    // return value\n    return 0\n}\n\nfunc TestSum_To_N(t *testing.T) {\n \
    \ candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual:\
    \ candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmp2ek8000s_test.go:42: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmp2ek8000s_test.go:42:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmp2ek8000s_test.go:42: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmp2ek8000s_test.go:42:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmp2ek8000s_test.go:42: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n\tvar total int\n\
    \tfor i := 1; i <= n; i++ {\n\t\ttotal += i\n\t}\n\treturn total\n}\n\nfunc TestSum_To_N(t\
    \ *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\
    \t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1),\
    \ expected: 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual:\
    \ candidate(11), expected: 66 },\n     { actual: candidate(30), expected: 465\
    \ },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc :=\
    \ range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T)\
    \ {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected)\
    \ {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\
    \t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    // TODO: implement\
    \ here\n    // sum := 0\n    return -1\n}\n\nfunc TestSum_To_N(t *testing.T) {\n\
    \  candidate := sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\t\
    expected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(1), expected:\
    \ 1 },\n     { actual: candidate(6), expected: 21 },\n     { actual: candidate(11),\
    \ expected: 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual:\
    \ candidate(100), expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\t\
    t.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"\
    %v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected\
    \ '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpg4n76hzk_test.go:42: expected '%!s(int=1)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpg4n76hzk_test.go:42:\
    \ expected '%!s(int=21)', got '%!s(int=-1)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpg4n76hzk_test.go:42: expected '%!s(int=66)', got '%!s(int=-1)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpg4n76hzk_test.go:42:\
    \ expected '%!s(int=465)', got '%!s(int=-1)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpg4n76hzk_test.go:42: expected '%!s(int=5050)', got '%!s(int=-1)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n <= 0 {\n\
    \        return 0\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073234
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    sum := 0\n  \
    \  for i := 1; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}\n\nfunc\
    \ TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct {\n\
    \t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 1
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return 0\n}\n\
    \nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: Exception
  stderr: ''
  stdout: "--- FAIL: TestSum_To_N (0.00s)\n    --- FAIL: TestSum_To_N/test_num__0\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=1)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__1 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=21)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__2\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=66)', got '%!s(int=0)'\n\
    \    --- FAIL: TestSum_To_N/test_num__3 (0.00s)\n        tmpddby_iks_test.go:40:\
    \ expected '%!s(int=465)', got '%!s(int=0)'\n    --- FAIL: TestSum_To_N/test_num__4\
    \ (0.00s)\n        tmpddby_iks_test.go:40: expected '%!s(int=5050)', got '%!s(int=0)'\n\
    FAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    return n * (n\
    \ + 1) / 2\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\t\
    type test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n\
    \   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     { actual:\
    \ candidate(6), expected: 21 },\n     { actual: candidate(11), expected: 66 },\n\
    \     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073152
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    if n == 1 {\n\
    \        return 1\n    } else {\n        return n + sum_to_n(n-1)\n    }\n}\n\n\
    func TestSum_To_N(t *testing.T) {\n  candidate := sum_to_n\n\ttype test struct\
    \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
    \     { actual: candidate(1), expected: 1 },\n     { actual: candidate(6), expected:\
    \ 21 },\n     { actual: candidate(11), expected: 66 },\n     { actual: candidate(30),\
    \ expected: 465 },\n     { actual: candidate(100), expected: 5050 },\n   }\n\n\
    \tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t\
    \ *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\"\
    , tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\
    \t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.004s\n"
  timestamp: 1660073230
- exit_code: 0
  program: "package sum_to_n_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n\
    // sum_to_n is a function that sums numbers from 1 to n.\n// >>> sum_to_n(30)\n\
    // 465\n// >>> sum_to_n(100)\n// 5050\n// >>> sum_to_n(5)\n// 15\n// >>> sum_to_n(10)\n\
    // 55\n// >>> sum_to_n(1)\n// 1\nfunc sum_to_n(n int) int {\n    s := n * (n +\
    \ 1) / 2\n    return s\n}\n\nfunc TestSum_To_N(t *testing.T) {\n  candidate :=\
    \ sum_to_n\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\
    \t}\n   tests := []test{\n     { actual: candidate(1), expected: 1 },\n     {\
    \ actual: candidate(6), expected: 21 },\n     { actual: candidate(11), expected:\
    \ 66 },\n     { actual: candidate(30), expected: 465 },\n     { actual: candidate(100),\
    \ expected: 5050 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"\
    test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual)\
    \ != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got\
    \ '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n"
  status: OK
  stderr: ''
  stdout: "ok  \tcommand-line-arguments\t0.005s\n"
  timestamp: 1660073234
