name: HumanEval_66_digitSum
language: go_test.go
prompt: "package digitSum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n//\
  \ Task\n// Write a function that takes a string as input and returns the sum of\
  \ the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\"\
  )\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n\
  // >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>>\
  \ digitSum(\"aAaaaXa\")\n// 153\nfunc digitSum(s string) int {\n"
tests: "func TestDigitsum(t *testing.T) {\n  candidate := digitSum\n\ttype test struct\
  \ {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n\
  \     { actual: candidate(\"\"), expected: 0 },\n     { actual: candidate(\"abAB\"\
  ), expected: 131 },\n     { actual: candidate(\"abcCd\"), expected: 67 },\n    \
  \ { actual: candidate(\"helloE\"), expected: 69 },\n     { actual: candidate(\"\
  woArBld\"), expected: 131 },\n     { actual: candidate(\"aAaaaXa\"), expected: 153\
  \ },\n     { actual: candidate(\" How are yOu?\"), expected: 151 },\n     { actual:\
  \ candidate(\"You arE Very Smart\"), expected: 327 },\n   }\n\n\tfor i, tc := range\
  \ tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\
  \tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\
  \tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\
  \t}\n}\n"
completions: ["    sum := 0\n    for _, c := range s {\n        if c >= 'A' && c <=\
    \ 'Z' {\n            sum += int(c)\n        }\n    }\n    return sum\n}\n", " \
    \   sum := 0\n    for _, v := range s {\n        if (v >= 65 && v <= 90) {\n \
    \           sum += int(v)\n        }\n    }\n    return sum\n}\n", "    var sum\
    \ int = 0\n    for _, char := range s {\n        if 'A' <= char && char <= 'Z'\
    \ {\n            sum += int(char)\n        }\n    }\n    return sum\n}\n", " \
    \   // Fill the code\n    return 0\n}\n", "\tsum := 0\n\tfor _, v := range s {\n\
    \t\tif v >= 65 && v <= 90 {\n\t\t\tsum += int(v)\n\t\t}\n\t}\n\treturn sum\n}\n",
  "    if len(s) == 0 {\n        return 0\n    }\n    sum := 0\n    for _, value :=\
    \ range s {\n        if value >= 65 && value <= 90 {\n            sum += int(value)\n\
    \        }\n    }\n    return sum\n}\n", "    // your code here\n    return 0\n\
    }\n", "    var sum int\n    for _, v := range s {\n        switch {\n        case\
    \ v >= 'A' && v <= 'Z':\n            sum += int(v)\n        }\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for _, r := range s {\n        if r >= 'A' &&\
    \ r <= 'Z' {\n            sum += int(r)\n        }\n    }\n    return sum\n}\n",
  "\tsum := 0\n\tfor _, c := range s {\n\t\tif c >= 'A' && c <= 'Z' {\n\t\t\tsum +=\
    \ int(c)\n\t\t}\n\t}\n\treturn sum\n}\n", "    if len(s) == 0 {\n        return\
    \ 0\n    }\n\n    sum := 0\n    for _, r := range s {\n        if r >= 'A' &&\
    \ r <= 'Z' {\n            sum += int(r)\n        }\n    }\n\n    return sum\n\
    }\n", "    x := 0\n    for _, c := range s {\n        if c >= 'A' && c <= 'Z'\
    \ {\n            x += int(c)\n        }\n    }\n    return x\n}\n", "    var result\
    \ int\n    for _, r := range s {\n        if r >= 'A' && r <= 'Z' {\n        \
    \    result += int(r)\n        }\n    }\n    return result\n}\n", "    upper :=\
    \ []rune(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    count := 0\n    for _, c := range\
    \ s {\n        for _, u := range upper {\n            if c == u {\n          \
    \      count += int(c)\n            }\n        }\n    }\n    return count\n}\n",
  "    sum := 0\n    for _, r := range s {\n        sum += int(r)\n    }\n    return\
    \ sum\n}\n", "    sum := 0\n    for _, v := range s {\n        if v > 64 && v\
    \ < 91 {\n            sum += int(v)\n        }\n    }\n    return sum\n}\n", " \
    \   var r, sum int\n    for _,v := range s {\n        if v >= 65 && v <= 90 {\n\
    \            sum += int(v)\n        }\n    }\n    return sum\n}\n", "    sum :=\
    \ 0\n    for _, c := range s {\n        if c > 64 && c < 91 {\n            sum\
    \ += int(c)\n        }\n    }\n    return sum\n}\n", "    var sum int\n    for\
    \ _, v := range s {\n        if v >= 65 && v <= 90 {\n            sum += int(v)\n\
    \        }\n    }\n    return sum\n}\n", "\tvar sum = 0\n\tfor _, rune := range\
    \ s {\n\t\tif rune >= 65 && rune <= 90 {\n\t\t\tsum += int(rune)\n\t\t}\n\t}\n\
    \treturn sum\n}\n"]
stop_tokens:
- "\nfunc"
- struct
- "\n// "
