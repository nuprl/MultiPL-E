name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a list\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty list.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\n// select_words(\"Mary had a little lamb\"\
  , 4) ==> [\"little\"]\n// select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\"\
  , \"lamb\"]\n// select_words(\"simple white space\", 2) ==> []\n// select_words(\"\
  Hello world\", 4) ==> [\"world\"]\n// select_words(\"Uncle sam\", 3) ==> [\"Uncle\"\
  ]\nstd::vector<std::string> select_words(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({\"little\"})));\n\
  \    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({\"\
  Mary\", \"lamb\"})));\n    assert(candidate((\"simple white space\"), (2)) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"Hello world\"), (4)) == (std::vector<std::string>({\"world\"\
  })));\n    assert(candidate((\"Uncle sam\"), (3)) == (std::vector<std::string>({\"\
  Uncle\"})));\n    assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n\
  \    assert(candidate((\"a b c d e f\"), (1)) == (std::vector<std::string>({\"b\"\
  , \"c\", \"d\", \"f\"})));\n}\n"
completions: ["    std::vector<std::string> words;\n    \n    // Complete this function\n\
    \    \n    return words;", "    std::vector<std::string> words;\n    // write\
    \ your code here\n    for (int i = 0; i < s.length(); ++i) {\n        if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n    \
    \        words.push_back(s.substr(i, i + n));\n        }\n    }\n    return words;",
  "    // Your code here\n    std::vector<std::string> res;\n    std::string tmp =\
    \ \"\";\n    for(auto i : s){\n        if(std::isalpha(i)){\n            tmp +=\
    \ i;\n            if(std::isspace(i)){\n                if(tmp.empty()){\n   \
    \                 res.clear();\n                    res.push_back(tmp);\n    \
    \                tmp = \"\";\n                }else{\n                    if(tmp\
    \ == \" \"){\n                        res.push_back(tmp);\n                  \
    \      tmp = \"\";\n                    }else{\n                        if(tmp.empty()){\n\
    \                            res.push_back(tmp);\n                           \
    \ tmp = \"\";\n                        }else{\n                            if(tmp\
    \ == \" \"){\n                                res.push_back(tmp);\n          \
    \                      tmp = \"\";\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return res;", "    std::vector<std::string> res;\n    if(s.empty())\
    \ return res;\n    for(size_t i = 0; i <= s.length(); i++) {\n        if(s.at(i).isspace())\
    \ continue;\n        for(size_t j = 0; j <= s.length(); j++) {\n            if(i\
    \ == j) continue;\n            if(s.at(j).isspace()) continue;\n            if(s.at(j)\
    \ == '_' || s.at(j) == ' ') continue;\n            if(n == 1) break;\n       \
    \     if(s.at(j) - s.at(i) == n) res.push_back(s.substr(i, j + 1));\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> words;\n    size_t idx\
    \ = 0, s_size = s.size();\n    for (; idx < s_size; idx++) {\n        if (s[idx]\
    \ != '\\0') {\n            std::string word = s.substr(idx, 1);\n            if\
    \ (select_consonant_counts(word, n, words) != 1) {\n                words.push_back(word);\n\
    \            }\n        }\n    }\n    return words;", "    std::sort(s.begin(),\
    \ s.end());\n    std::vector<std::string> res;\n    std::vector<std::string>::iterator\
    \ it = s.begin();\n    while (n-- > 0 && it != s.end()) {\n        if (*it ==\
    \ 'a' || *it == 'e' || *it == 'i' || *it == 'o' || *it == 'u' || *it == 'A' ||\
    \ *it == 'E' || *it == 'I' || *it == 'O' || *it == 'U') {\n            it = s.erase(it);\n\
    \        } else {\n            it++;\n        }\n    }\n    res.push_back(s);\n\
    \    return res;", "    std::vector<std::string> list;\n    \n    std::string\
    \ w;\n    \n    for (auto &i: s)\n    {\n        switch (i)\n        {\n     \
    \   case 'a':\n        case 'e':\n        case 'i':\n        case 'o':\n     \
    \   case 'u':\n            w = i;\n            break;\n        default:\n    \
    \        w = \"\";\n        }\n        \n        if (w.size() >= n)\n        \
    \    list.push_back(w);\n    }\n    \n    return list;", "        std::vector<std::string>\
    \ words;\n        std::vector<std::string> split_strs;\n        long int len =\
    \ s.length();\n        \n        if (n == 0)\n            return words;\n    \
    \    // To split s by the delimiter space and store the result in a vector\n \
    \       split_strs = split_string(s, \" \");\n        // To get all unique words\n\
    \        std::sort(split_strs.begin(), split_strs.end());\n        std::unique_copy(split_strs.begin(),\
    \ split_strs.end(), std::back_inserter(words));\n        \n        // return words.size();\n\
    \        return words;", "    if(s.empty()) return {};\n    std::vector<std::string>\
    \ res;\n    auto first = s.begin();\n    auto last = s.begin() + s.size();\n \
    \   for(long i = 0; i < n && first != last; ++first, ++i) {\n        while(i !=\
    \ n && !std::isspace(first[i - 1])) --i;\n        if(i != n) break;\n        if(first\
    \ == last) break;\n        res.emplace_back(std::string(first, last));\n    }\n\
    \    return res;", "    std::vector<std::string> retval;\n    \n    for(auto it=s.begin();it!=s.end();++it){\n\
    \        long cnt = 0;\n        for(char c : s){\n            if(c == *it){\n\
    \                ++cnt;\n            }\n        }\n        if(cnt == n){\n   \
    \         retval.push_back(std::string(it,s.end()));\n        }\n    }\n    return\
    \ retval;", "    std::vector<std::string> v;\n    for (std::size_t i = 0; i <\
    \ s.size(); ++i) {\n        std::size_t count = 0;\n        std::size_t next_index\
    \ = 0;\n        \n        for (std::size_t j = i; j < s.size(); ++j) {\n     \
    \       if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z') || (s[i]\
    \ >= '0' && s[i] <= '9')) {\n                ++count;\n            }\n       \
    \     \n            if (count == n) {\n                if (s[i] == ' ') {\n  \
    \                  v.push_back(s.substr(next_index, i - next_index));\n      \
    \              next_index = i + 1;\n                }\n            }\n       \
    \ }\n    }\n    return v;", "  std::vector<std::string> v;\n  if (s.size() ==\
    \ 0) {\n    return v;\n  }\n  \n  std::string words[s.size() / 2]; // O(logN)\
    \ \n  \n  for (int i = 0; i < s.size(); i++) {\n    words[i / 2].push_back(s[i]);\n\
    \  }\n  \n  // O(N)\n  for (int i = 0; i < s.size(); i += 2) {\n    if (words[i\
    \ / 2].size() >= n && words[i / 2][0] == s[i + 1]) {\n      v.push_back(words[i\
    \ / 2]);\n      words[i / 2].clear();\n    }\n  }\n  \n  return v;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    if (n == 0)\n        return v;\n    if (s.size()\
    \ == 0) {\n        return v;\n    }\n    if (s.size() > n) {\n        return v;\n\
    \    }\n    vector<string> ret;\n    for (auto it = s.begin(); it != s.end();\
    \ ++it) {\n        for (char c : *it) {\n            if (std::find({\"a\",\"e\"\
    ,\"i\",\"o\",\"u\"}.begin(), {\"a\",\"e\",\"i\",\"o\",\"u\"}.end(), c) == s.end()\
    \ &&\n                std::find({\"A\",\"E\",\"I\",\"O\",\"U\"}.begin(), {\"A\"\
    ,\"E\",\"I\",\"O\",\"U\"}.end(), c) == s.end() &&\n                std::find({\"\
    b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"}.begin(), {\"b\",\"c\",\"d\",\"\
    f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"\
    v\",\"w\",\"x\",\"y\",\"z\"}.end(), c) == s.end() &&\n                std::find({\"\
    B\",\"C\",\"D\",\"F\",\"G\",\"H\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"Q\",\"\
    R\",\"S\",\"T\",\"V\",\"W\",\"X\",\"Y\",\"Z\"}.begin(), {\"B\",\"C\",\"D\",\"\
    F\",\"G\",\"H\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"\
    V\",\"W\",\"X\",\"Y\",\"Z\"}.end(), c) == s.end() &&\n                std::find({\"\
    1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"}.begin(), {\"1\",\"2\",\"\
    3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"}.end(), c) == s.end() &&\n           \
    \     std::find({\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"\
    -\",\"_\",\"=\",\"~\",\"`\",\"'\",\"<\",\"[\",\"]\",\"{\",\"}\",\",\",\"<\",\"\
    >\",\"/\",\"|\"}.begin(), {\"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"\
    (\",\")\",\"-\",\"_\",\"=\",\"~\",\"`\",\"'\",\"<\",\"[\",\"]\",\"{\",\"}\",\"\
    ,\",\"<\",\">\",\"/\",\"|\"}.end(), c) == ", "  // code here\n  ", "    std::vector<std::string>\
    \ result;\n    if(!s.length()){\n        return result;\n    }\n    bool flag\
    \ = false;\n    for(char c:s){\n        if(c==' '){\n            flag = false;\n\
    \        }\n        else if(flag){\n            if(c>='a' && c<='z'){\n      \
    \          flag = false;\n            }\n            else{\n                result.push_back(std::string(1,\
    \ c));\n                flag = true;\n            }\n        }\n    }\n    for(auto\
    \ &i:result){\n        if(i.length()==n){\n            return result;\n      \
    \  }\n    }\n    return result;", "    std::vector<std::string> v;\n    if (s.empty()){\n\
    \        return v;\n    }\n\n    long count = 0;\n    int i = 0;\n    while (s[i]\
    \ != '\\0'){\n        if (s[i] == ' ' || s[i] == '\\t' || s[i] == '\\n'){\n  \
    \          continue;\n        }\n        else if (s[i] >= 'A' && s[i] <= 'Z' ||\
    \ s[i] >= 'a' && s[i] <= 'z'){\n            i++;\n            continue;\n    \
    \    }\n        else if (s[i] == 'W'){\n            v.push_back(s.substr(0, i+1));\n\
    \            i += 2;\n            while (s[i] != '\\n' && s[i] != '\\0'){\n  \
    \              i++;\n            }\n            continue;\n        }\n       \
    \ else if (s[i] == 'B'){\n            v.push_back(s.substr(0, i+1));\n       \
    \     i += 2;\n            while (s[i] != '\\n' && s[i] != '\\0'){\n         \
    \       i++;\n            }\n            count++;\n            continue;\n   \
    \     }\n        else if (s[i] == 'C'){\n            v.push_back(s.substr(0, i+1));\n\
    \            i += 2;\n            while (s[i] != '\\n' && s[i] != '\\0'){\n  \
    \              i++;\n            }\n            count += 2;\n            continue;\n\
    \        }\n        else if (s[i] == 'D'){\n            v.push_back(s.substr(0,\
    \ i+1));\n            i += 2;\n            while (s[i] != '\\n' && s[i] != '\\\
    0'){\n                i++;\n            }\n            count += 3;\n         \
    \   continue;\n        }\n        else if (s[i] == 'F'){\n            v.push_back(s.substr(0,\
    \ i+1));\n            i += 2;\n            while (s[i] != '\\n' && s[i] != '\\\
    0'){\n                i++;\n            }\n            count += 4;\n         \
    \   continue;\n        }\n        else if (s[i] == 'S'){\n            v.push_back(s.substr(0,\
    \ i+1));\n            i += 2;\n            while (s[i] != '\\n' && s[i] != '\\\
    0'){\n                i++;\n            }\n            count += 5;\n         \
    \   continue;\n        }\n        else if (s[i] == 'T'){\n            v.push_back(s.substr(0,\
    \ i+1));\n            i += 2;\n            while (s[i] != '\\n' && s[i] != '\\\
    0'){\n                i++;\n            }\n            count += 6;\n         \
    \   continue;\n        }\n        else if (s[i] == 'H'){\n            v.push_back(s.substr(0,\
    \ i+1));\n            i += 2;\n            while (s[i] != '\\n' && s[i] != '\\\
    0'){\n                i++;\n            }\n            count += 7;\n         \
    \   continue;\n        }\n        else if (s[i] == 'V'){\n            v.push_back(s.substr(0,\
    \ i+1));\n            i += 2;\n            while (s[i] != '\\n' && s[i] != '\\\
    0'){\n                i++;\n            }\n            count += 8;\n         \
    \   continue;\n        }\n        else if (s[i] == 'L')", "    std::vector<std::string>\
    \ v;\n    if (s.size() == 0) {\n        return v;\n    }\n    std::vector<bool>\
    \ v(s.size(), false);\n    for (char c: s) {\n        v.push_back(c);\n    }\n\
    \    \n    // first pass to check n\n    long curr_idx = 0;\n    for (int i =\
    \ 0; i < s.size(); i++) {\n        if (!v[i]) {\n            curr_idx = i;\n \
    \           break;\n        }\n    }\n    if (curr_idx == s.size()) return v;\n\
    \n    curr_idx = 0;\n    std::string word = \"\";\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (!v[i] && i != curr_idx) {\n            v.push_back(word);\n\
    \            curr_idx = i;\n            word = \"\";\n        }\n        \n  \
    \      word += s[i];\n    }\n    v.push_back(word);\n    return v;", "    if(s.length()\
    \ == 0) return {};\n    \n    std::unordered_set<char> set;\n    for(auto& c:\
    \ s) \n        set[c] = true;\n    \n    std::vector<std::string> res;\n    for(auto\
    \ &c: s) \n        if(set.count(c) == n) res.push_back(c);\n    return res;",
  "    // code here\n    std::vector<std::string> res;\n    std::string temp = \"\"\
    ;\n    int i = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' &&\n            s[i] !=\
    \ 'u') {\n            temp += s[i];\n        }\n        if (i == (s.length() -\
    \ 1) || i == s.length() - 2 && s[i] != 'a' &&\n            s[i] != 'e' && s[i]\
    \ != 'i' && s[i] != 'o' && s[i] != 'u') {\n            if (!temp.empty()) {\n\
    \                if (n == 0) {\n                    res.push_back(temp);\n   \
    \             } else {\n                    long n1 = (temp.length() + n) / 2;\n\
    \                    long n2 = n - n1;\n                    std::vector<string>\
    \ temp1 = select_words(temp, n1);\n                    std::vector<string> temp2\
    \ = select_words(temp, n2);\n                    res.insert(res.end(), temp1.begin(),\
    \ temp1.end());\n                    res.insert(res.end(), temp2.begin(), temp2.end());\n\
    \                }\n                temp.clear();\n            }\n        }\n\
    \    }\n    return res;", "    std::ifstream fin(s);\n    std::string str;\n \
    \   if (fin)\n    {\n        while (!fin.eof())\n        {\n            getline(fin,\
    \ str);\n        }\n    }\n    else\n    {\n        return {};\n    }\n\n    std::vector<std::string>\
    \ ans;\n    for (auto & i : str)\n    {\n        if ((i.size() >= n) && (std::all_of(i.begin(),\
    \ i.end(), std::isalpha)))\n        {\n            ans.emplace_back(i);\n    \
    \    }\n    }\n    return ans;", "    if(s.empty()) return {};\n    // write your\
    \ code here\n    return {}; ", "    std::vector<std::string> vec;\n    if (s.empty())\
    \ {\n        return vec;\n    }\n    \n    // For this problem, we only care about\
    \ consonants.\n    char consonants[] = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z' };\n    int n = s.size();\n\
    \    int nConsonants = n;\n    long n = n;\n    \n    for (int i = 0; i < n; i++)\
    \ {\n        std::string ss = s.substr(i, 1);\n        // if ss has a consonant\
    \ at position i, add it to vec, then increase n by 1.\n        if (ss.size() >\
    \ 1) {\n            \n            for (int j = 1; j < ss.size(); j++) {\n    \
    \            if (consonants[(int)ss[j] - 'a'] == 1) {\n                    vec.push_back(ss);\n\
    \                    nConsonants++;\n                    n--;\n              \
    \      break;\n                }\n            }\n        }\n    }\n    if (nConsonants\
    \ == n) {\n        return vec;\n    }\n    \n    return vec;", "    if (s.empty())\
    \ return {};\n    std::vector<std::string> v;\n    for (auto c : s) {\n      \
    \  if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n         \
    \   v.push_back(c);\n        }\n    }\n    std::vector<std::string> v;\n    for\
    \ (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u' || c == 'y') {\n            v.push_back(c);\n        }\n    }\n   \
    \ std::vector<std::string> v;\n    for (auto c : s) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y' || c == 's') {\n  \
    \          v.push_back(c);\n        }\n    }\n    std::vector<std::string> v;\n\
    \    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' || c == 'y' || c == 's' || c == 'h' || c == 'l' || c == 'm'\
    \ || c == 'n' || c == 't' || c == 'w' || c == 'd' || c == 'k' || c == 'b' || c\
    \ == 'e' || c == 'r') {\n            v.push_back(c);\n        }\n    }\n    std::vector<std::string>\
    \ v;\n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'y' || c == 's' || c == 'h' || c == 'l' || c ==\
    \ 'm' || c == 'n' || c == 't' || c == 'w' || c == 'd' || c == 'k' || c == 'b'\
    \ || c == 'e' || c == 'r' || c == 'n' || c == 'g' || c == 'h' || c == 'l' || c\
    \ == 'm' || c == 'n' || c == 't' || c == 'w' || c == 'd' || c == 'k' || c == 'b'\
    \ || c == 'e' || c == 'r' || c == 'n' || c == 'g') {\n            v.push_back(c);\n\
    \        }\n    }\n    std::vector<std::string> v;\n    for (auto c : s) {\n \
    \       if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y'\
    \ || c == 's' || c == 'h' || c == 'l' || c == 'm' || c == 'n' || c == 't' || c\
    \ == 'w' || c == 'd' || c == 'k' || c == 'b' || c == 'e' || c == 'r' || c == 'n'\
    \ || c == 'g' || c == 'h' || c == 'l' || c == 'm' || c == 'n' || c == 't' || c\
    \ == 'w' || c == 'd", "    std::vector<std::string> words;\n    // Write your\
    \ code here\n    if(!s.empty()) {\n        std::string new_word = \"\";\n    \
    \    for(char c : s) {\n            if(c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n                new_word += c;\n            }\n        }\n\
    \        if(new_word == s) {\n            words.push_back(new_word);\n       \
    \ }\n        for(char c : s) {\n            if(c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                while(new_word != s) {\n       \
    \             if(!s.empty()) {\n                        if(s.front() != 'a' &&\
    \ s.front() != 'e' && s.front() != 'i' && s.front() != 'o' && s.front() != 'u')\
    \ {\n                            new_word += c;\n                        }\n \
    \                   }\n                    else {\n                        words.push_back(new_word);\n\
    \                    }\n                    if(!s.empty()) {\n               \
    \         if(s.front() != 'a' && s.front() != 'e' && s.front() != 'i' && s.front()\
    \ != 'o' && s.front() != 'u') {\n                            new_word += c;\n\
    \                        }\n                    }\n                    else {\n\
    \                        words.push_back(new_word);\n                    }\n \
    \               }\n            }\n        }\n    }\n    words.clear();\n    return\
    \ words;", "    std::vector<std::string> v;\n    long max = 0;\n    for(auto i\
    \ : s) {\n        if(isalpha(i)) {\n            max = i;\n            max = max\
    \ > n ? max : n;\n        } else {\n            v.push_back(\"\");\n        }\n\
    \    }\n    if(s.empty()) {\n        return v;\n    }\n    v.push_back(\"\");\n\
    \    for(auto i : s) {\n        if(isalpha(i) && i > 0) {\n            v.push_back(s);\
    \ \n            max = i;\n        }\n    }\n    return v;", "    // Write your\
    \ code here\n    // 1. convert the string to lowercase \n    // 2. split the string\
    \ by space \n    // 3. create an empty vector to store words that are repeated\
    \ in s \n    // 4. traverse the string and store the words in vector if they are\
    \ repeated more than n times \n    // 5. return vector \n    std::vector<std::string>\
    \ ans;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    std::istringstream\
    \ str(s);\n    std::string word;\n    while (std::getline(str, word, ' ')) {\n\
    \        std::transform(word.begin(), word.end(), word.begin(), ::tolower);\n\
    \        if (ans.find(word) == ans.end()) {\n            ans.push_back(word);\n\
    \        }\n    }\n    return ans;", "    std::sort(s.begin(), s.end());\n   \
    \ std::map<char, int> m;\n    for(auto &c: s) {\n        if(m.find(c) != m.end())\
    \ {\n            m[c] += 1;\n        } else {\n            m[c] = 1;\n       \
    \ }\n    }\n    std::vector<std::string> res;\n    for(auto &c: m) {\n       \
    \ if(c[1] == n) {\n            res.push_back(std::to_string(c[0]));\n        }\n\
    \    }\n    if(res.size() == 0) {\n        return std::vector<std::string>();\n\
    \    }\n    return res;", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    std::string temp;\n    for (auto &it=s.begin();it!=s.end();++it){\n\
    \        if(it==s.begin()){\n            v.push_back(temp);\n            temp=*it;\n\
    \        }\n        if(temp.size()==n){\n            v.push_back(temp);\n    \
    \        temp=*it;\n        }\n        if(temp.size()==0){\n            v.push_back(temp);\n\
    \            temp=*it;\n        }\n    }\n    return v;", "    assert(s.length()\
    \ > 0);\n    // Write your code here.", "  \n    std::vector<std::string> result;\n\
    \    long len = s.length();\n    long cnt = 0;\n    long i = 0;\n    while (i+n\
    \ <= len) {\n      cnt = 0;\n      long j = 0;\n      while (j <= n-cnt) {\n \
    \       if (s[i+j] != 'a' && s[i+j] != 'e' && s[i+j] != 'i' && s[i+j] != 'o' &&\
    \ s[i+j] != 'u') {\n          cnt++;\n          j++;\n        } else {\n     \
    \     j++;\n        }\n      }\n      if (cnt == n) {\n        result.push_back(s.substr(i,n));\n\
    \      }\n      i += n;\n    }\n    return result;\n  }\n</code>\n<|/ a tags=string,algorithm,c++\
    \ |>\n<| c |>\nThank you for taking the time to write such a detailed answer.\
    \ Unfortunately it is not exactly what I am looking for. I am looking for a method\
    \ that does not use `vector` but `string` instead. My code above was actually\
    \ not using `vector` but `string`, but I just wanted to write it as a simple example\
    \ for my question. Thanks again.\n<|/ c |>\n<| c |>\nAs the requirements state,\
    \ \"You have been tasked to implement a function that returns a list of all words\
    \ from string s that contain exactly n consonants, in order these words appear\
    \ in the string s.\" - it seems like a reasonable implementation would be to not\
    \ use a `vector` but rather a `string` if you wanted to stick to that data type.\
    \  If you really want to use a `vector` then you could use `vector::reserve()`\
    \ before you start adding items to it, but you would have to `push_back()` the\
    \ items into the vector afterwards.\n<|/ c |>\n<| c |>\nI have edited my answer.\
    \ I hope it helps. I hope you learn something.\n<|/ c |>\n<| a tags=string,algorithm,c++\
    \ dscore=0 |>\nYou can use vector to hold all words and use back_inserter to insert\
    \ elements into vector:\n<code>\n#include <iostream>\n#include <string>\n#include\
    \ <vector>\n#include <iterator>\n\nstd::vector<std::string> select_words(std::string\
    \ s, long n) {\n\n    std::vector<std::string> vec;\n\n    long len = s.length();\n\
    \    long cnt = 0;\n    long i = 0;\n    while (i+n <= len) {\n        cnt = 0;\n\
    \        long j = 0;\n        while (j <= n-cnt) {\n            if (s[i+j] !=\
    \ 'a' && s[i+j] != 'e' && s[i+j] != 'i' && s[i+j] != 'o' && s[i+j] != 'u') {\n\
    \                cnt++;\n                j++;\n            } else {\n        \
    \        j++;\n            }\n        }\n        if (cnt == n) {\n            ",
  "    int k = s.length();\n    if(k == 0)\n        return {};\n    std::vector<string>\
    \ res;\n    stack<string> stack;\n    stack.push(s);\n    while(k > 0) {\n   \
    \     if(s.at(0) != ' ')\n            s.push(s.at(0));\n        else {\n     \
    \       string tmp = s.at(1);\n            s.pop();\n            if(!stack.empty()\
    \ && stack.top() == tmp)\n                res.push_back(tmp);\n            else\
    \ if(stack.size() > 0)\n                stack.push(tmp);\n            else {\n\
    \                res.push_back(tmp);\n                res.push_back(tmp + \" \"\
    \ + s.at(1));\n                s.pop();\n            }\n        }\n        --k;\n\
    \    }\n    while(!stack.empty())\n        res.push_back(stack.top());\n    return\
    \ res;", "   std::vector<std::string> v;\n   std::stack<std::string> st;\n   v.push_back(\"\
    \");\n   while(!st.empty()) {\n       std::string word = \"\";\n       std::string\
    \ newStr = st.top();\n       st.pop();\n       int i = 0;\n       while (i<newStr.size())\
    \ {\n           if (newStr[i] == s[i]) {\n               word = word + newStr[i];\n\
    \               i++;\n           } else {\n               if (word == \"\" &&\
    \ i<newStr.size() && newStr[i]!=' ') {\n                   word = newStr[i];\n\
    \                   i++;\n               }\n           }\n           i++;\n  \
    \     }\n       if(word == \"\") {\n           break;\n       }\n       v.push_back(word);\n\
    \   }\n   return v;", "    // Your code here\n    std::vector<std::string> word_vec;\n\
    \    std::string word = \"\";\n    for(int i=0;i<s.length();i++){\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n      \
    \      word += s[i];\n        else\n            word += \"a\";\n        if(word.length()\
    \ == n && word[0] == 'a')\n            word_vec.push_back(word);\n    }\n    return\
    \ word_vec;", "    std::vector<std::string> result;\n    vector<string> v;\n \
    \   for (auto x: s)\n        v.push_back(x);\n    sort(v.begin(), v.end());\n\
    \    if (v.size()==0) return result;\n    long long int t = 0;\n    for (auto\
    \ x: v)\n        t += x;\n    vector<string> temp;\n    for (auto x: v) \n   \
    \     if (t==n) temp.push_back(x);\n    if (temp.size()==0) return result;\n \
    \   for (auto x: temp) {\n        result.push_back(x);\n    }\n    return result;",
  "    // code here\n    std::vector<std::string> res;\n    std::string temp;\n  \
    \  int len = s.size();\n    for (int i = 0; i < len; i = i + n) {\n        for\
    \ (int j = 0; j < n; j++)\n            if (s[i + j] == ' ') {\n              \
    \  res.push_back(temp);\n                temp.clear();\n            }\n      \
    \      temp += s[i];\n        if (temp.length() > 0)\n            res.push_back(temp);\n\
    \        temp.clear();\n    }\n    return res;", "    // Your code here\n    std::vector<std::string>\
    \ result;\n    if (s.empty()) {\n        return result;\n    }\n    std::string\
    \ current_word = s;\n    while ((s.size()-1)%n != 0) {\n        current_word =\
    \ s.substr(0, s.size()-1);\n        result.push_back(current_word);\n    }\n \
    \   if (s.size()%n != 0) {\n        std::vector<std::string> words = select_words(s,\
    \ n);\n        result.insert(result.end(), words.begin(), words.end());\n    }\n\
    \    return result;", "    // Write your code here\n    return {};", "  std::vector<std::string>\
    \ v;\n  v.reserve(s.size());\n  for (size_t i = 0; i < s.size(); ++i) {\n    v.push_back(s.substr(i,\
    \ n));\n  }\n  return v;", "    std::vector<std::string> v;\n    \n    // base\
    \ case\n    if ( s.empty() ) {\n        return v;\n    }\n    \n    // split string\
    \ s into word tokens\n    std::vector<std::string> ssplit(s.begin(), s.end(),\
    \ ' ');\n    \n    // for each word token ssplit\n    for ( std::vector<std::string>::size_type\
    \ i = 0; i < ssplit.size(); ++i ) {\n        \n        // if current word token\
    \ is long enough, add it to list\n        if ( ssplit[i].size() >= n ) {\n   \
    \         v.push_back(ssplit[i]);\n        }\n    }\n    \n    return v;", '  //
    Write your code here.', "    std::vector<std::string> ret;\n    if (s.size() ==\
    \ 0 || n < 0) {\n        return ret;\n    }\n    std::string t;\n    size_t pos\
    \ = 0;\n    while (pos < s.size()) {\n        t = s.substr(pos, 1);\n        pos\
    \ = std::find(t.begin(), t.end(), ' ');\n        if (pos == t.end()) {\n     \
    \       ret.push_back(t);\n        }\n        pos = std::find(t.begin(), t.end(),\
    \ '!');\n        if (pos == t.end()) {\n            ret.push_back(t);\n      \
    \  }\n        pos = std::find(t.begin(), t.end(), '.');\n        if (pos == t.end())\
    \ {\n            ret.push_back(t);\n        }\n        pos = std::find(t.begin(),\
    \ t.end(), ',');\n        if (pos == t.end()) {\n            ret.push_back(t);\n\
    \        }\n        pos = std::find(t.begin(), t.end(), ':');\n        if (pos\
    \ == t.end()) {\n            ret.push_back(t);\n        }\n        pos = std::find(t.begin(),\
    \ t.end(), ';');\n        if (pos == t.end()) {\n            ret.push_back(t);\n\
    \        }\n        pos = std::find(t.begin(), t.end(), '?');\n        if (pos\
    \ == t.end()) {\n            ret.push_back(t);\n        }\n        pos = std::find(t.begin(),\
    \ t.end(), '/');\n        if (pos == t.end()) {\n            ret.push_back(t);\n\
    \        }\n        pos = std::find(t.begin(), t.end(), ' ');\n        if (pos\
    \ == t.end()) {\n            ret.push_back(t);\n        }\n    }\n    return ret;",
  "    std::vector<std::string> ans;\n    // Write your code here", "    std::vector<std::string>\
    \ v;\n    if (!s.empty()) {\n        v.push_back(s);\n        while (v.back().size()\
    \ < n) {\n            v.back() += v.back();\n        }\n        v.erase(v.begin(),\
    \ v.end() - n);\n    }\n    return v;", "    std::vector<std::string> res;\n \
    \   res.reserve(s.size());\n    // TODO:\n    // Implement the select_words function\
    \ here\n    return res;", "    std::vector<std::string> res;\n    if(!s.size())\
    \ {\n        return res;\n    }\n    std::unordered_set<char> seen;\n    for(char\
    \ c : s) {\n        seen[c] = true;\n    }\n    for(char c : s) {\n        if(seen.count(c)\
    \ == n) {\n            std::string cur = std::to_string(c);\n            res.push_back(cur);\n\
    \            seen[c] = false;\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    if (n == 0 || s == \"\") return result;\n    \n    size_t pos =\
    \ 0, end = s.size();\n    while (pos < end) {\n        pos = s.find_first_not_of(\"\
    aeiouAEIOU\", end);\n        if (pos == std::string::npos)\n            break;\n\
    \        if (s[pos] == ' ' || s[pos] == '\\n' || s[pos] == '\\t') \n         \
    \   break;\n        if (n <= end - pos - 1)\n            result.push_back(s.substr(pos,\
    \ end - pos));\n    }\n    return result;", "    // ++n;\n    // if(n < 0) {\n\
    \    //     return {};\n    // }\n    // std::vector<std::string> ans;\n    //\
    \ for(int i = 0; i < s.size(); i++) {\n    //     if(s[i] == ' ' || s[i] == '.'\
    \ || s[i] == '!' || s[i] == '?' || s[i] == '~')\n    //         continue;\n  \
    \  //     for(int j = 0; j < n; j++) {\n    //         if(s[i] == s[j]) {\n  \
    \  //             ans.push_back(s.substr(i, j+1));\n    //             break;\n\
    \    //         }\n    //     }\n    // }\n    std::vector<std::string> ans;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == ' ' || s[i] == '.'\
    \ || s[i] == '!' || s[i] == '?' || s[i] == '~')\n            continue;\n     \
    \   for(int j = 0; j < n; j++) {\n            if(s[i] == s[j]) {\n           \
    \     ans.push_back(s.substr(i, j+1));\n                break;\n            }\n\
    \        }\n    }\n    return ans;", "    // Your code goes here\n\tstd::vector<std::string>\
    \ v;\n\tif(s.empty())\n\t\treturn v;\n\t\n\tint i,j;\n\tfor(int i=0;i<s.size();i++){\n\
    \t\tfor(int j=i;j<s.size();j++){\n\t\t\tif(s[j]==' ')\n\t\t\t\ti++;\n\t\t\telse\
    \ if(s[i]=='s'&&s[j]=='a'&&s[j+1]=='m'&&s[j+2]=='y'){\n\t\t\t\tif(j+3<=s.size()&&s[j+3]=='a'){\n\
    \t\t\t\t\tif(j+4<=s.size()&&s[j+4]=='m'){\n\t\t\t\t\t\tif(j+5<=s.size()&&s[j+5]=='y'){\n\
    \t\t\t\t\t\t\tv.push_back(s+(i+1)+(j+1)+(i+2)+(j+2)+(i+3)+(j+3));\n\t\t\t\t\t\t\
    \ti+=2;\n\t\t\t\t\t\t\tj+=3;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\
    v.push_back(s+(i+1)+(j+1)+(i+2)+(j+2));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\
    else{\n\t\t\t\t\t\tv.push_back(s+(i+1)+(j+1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    \telse{\n\t\t\t\t\tv.push_back(s+(i+1));\n\t\t\t\t}\n\t\t\t\tj+=2;\n\t\t\t}\n\t\
    \t\telse if(s[i]=='s'&&s[j]=='a'&&s[j+1]=='l'){\n\t\t\t\tif(j+2<=s.size()&&s[j+2]=='l'){\n\
    \t\t\t\t\tif(j+3<=s.size()&&s[j+3]=='e'){\n\t\t\t\t\t\tif(j+4<=s.size()&&s[j+4]=='d'){\n\
    \t\t\t\t\t\t\tv.push_back(s+(i+1)+(j+1)+(i+2)+(j+2)+(i+3)+(j+3));\n\t\t\t\t\t\t\
    \ti+=2;\n\t\t\t\t\t\t\tj+=4;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\
    v.push_back(s+(i+1)+(j+1)+(i+2)+(j+2));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\
    else{\n\t\t\t\t\t\tv.push_back(s+(i+1)+(j+1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\
    \telse{\n\t\t\t\t\tv.push_back(s+(i+1));\n\t\t\t\t}\n\t\t\t\tj+=2;\n\t\t\t}\n\t\
    \t\telse if(s[i]=='s'&&s[j]=='a'&&s[j+1]=='b'){\n\t\t\t\tif(j+2<=s.size()&&s[j+2]=='b'){\n\
    \t\t\t\t\tif(j+3<=s.size()&&s[j+3]=='a'){\n\t\t\t\t\t\tif(j+4<=s.size()&&s[j+4]=='m'){\n\
    \t\t\t\t\t\t\tif(j+5<=s.size()&&s[j+5]=='l'){\n\t\t\t\t\t\t\t\tif(j+6<=s.size()&&s[j+6]=='e'){\n\
    \t\t\t\t\t\t\t\t\tv.push_back(s+(i+1)+(j+1)+(i+2)+(j", "    std::vector<std::string>\
    \ ans;\n    // Write your code here.", "    // code here\n    return {};", " \
    \   if (s.empty()) return {};\n    std::stack<std::string> res;\n    for (int\
    \ i=0; i<s.size(); i++)\n    {\n        if (s[i] == ' ') continue;\n        for\
    \ (char &c : s)\n        {\n            if (c != ' ' && s[i] == c)\n         \
    \   {\n                res.push(s.substr(i,1));\n                break;\n    \
    \        }\n        }\n    }\n    while (!res.empty())\n    {\n        std::string\
    \ a = res.top();\n        res.pop();\n        for (int i=0; i<a.size(); i++)\n\
    \        {\n            for (char &c : s)\n            {\n                if (c\
    \ != ' ' && a[i] == a[i])\n                {\n                    res.push(s.substr(i,1));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return res.empty() ? {} : res;", "  std::vector<std::string> res;\n \
    \ if (s.empty())\n    return res;\n  for (size_t i = 0; i < s.size(); i++) {\n\
    \    if (s.at(i) == '(') {\n      std::string s = s.substr(0, i);\n      res.push_back(select_words(s,\
    \ n));\n    }\n    else if (s.at(i) == ')') {\n      res.push_back(select_words(s.substr(i\
    \ + 1), n));\n    }\n    else if (s.at(i) == ' ') {\n      if (s.size() == 1 ||\
    \ s.at(0) != ' ')\n        res.push_back(select_words(s.substr(i + 1), n));\n\
    \    }\n    else {\n      std::set<char> vowels{'a', 'e', 'i', 'o', 'u'};\n  \
    \    if (vowels.count(s.at(i))) {\n        if (s.size() == 1 || s.at(0) != ' ')\n\
    \          res.push_back(select_words(s.substr(i + 1), n));\n      }\n    }\n\
    \  }\n  return res;", "    std::vector<std::string> ans;\n    std::string word;\n\
    \    if (s.size() == 0) {\n        return ans;\n    }\n    for (auto &c: s) {\n\
    \        word = word + c;\n        if (c == ' ' || c == '-' || c == '.' || c ==\
    \ '(' || c == ')' || c == '$' || c == '!') {\n            ans.push_back(word);\n\
    \            word = std::string();\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ res;\n    if(s.empty()) {\n        return res;\n    }\n    for(char c:s) {\n\
    \        \n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n\
    \            continue;\n        if(c == 'b')\n            continue;\n        if(c\
    \ == 'p')\n            continue;\n        if(c == 'm')\n            continue;\n\
    \        if(c == 'l' || c == 'r' || c == 't')\n            continue;\n       \
    \ if(c == 'n')\n            continue;\n        if(c == 's')\n            continue;\n\
    \        if(c == 'd')\n            continue;\n        if(c == 'g')\n         \
    \   continue;\n        if(c == 'h')\n            continue;\n        if(c == 'v')\n\
    \            continue;\n        if(c == 'z')\n            continue;\n        \n\
    \        for(int i = 0; i < s.find(c); i++) {\n            if(n == s.find(c, i+1))\
    \ {\n                res.push_back(s.substr(0, i) + s.substr(i+1, s.size()));\n\
    \                break;\n            }\n        }\n    }\n    return res;", " \
    \ std::vector<std::string> result;\n  \n  if(s == \"\") {\n    return result;\n\
    \  }\n  \n  // Initialize a map with the consonants in the input string\n  std::unordered_map<char,\
    \ bool> c_map;\n  for(char &c : s) {\n    c_map[c] = true;\n  }\n\n  // Initialize\
    \ a map with the words found in string\n  std::unordered_set<std::string> s_words;\n\
    \  \n  // Traverse through the string\n  for(char &c : s) {\n    if(c_map.count(c)\
    \ == 0) {\n      s_words.insert(c);\n    }\n    else {\n      c_map[c] = false;\n\
    \    }\n  }\n  \n  // Initialize a map to keep track of how many consecutive consonants\
    \ are found\n  std::unordered_map<char, int> c_counter;\n  c_counter[s[0]] = 1;\n\
    \  \n  // Traverse through the string\n  for(char &c : s) {\n    if(c_counter[s][c]\
    \ == n) {\n      result.push_back(s);\n    }\n    else {\n      c_counter[s][c]\
    \ += 1;\n    }\n  }\n  \n  return result;", "    std::vector<std::string> v;\n\
    \    std::string temp;\n    // code here\n    return v;", "    //your code here\n\
    \    if(s.empty()){\n        return {};\n    }\n    std::vector<std::string> res;\n\
    \    auto start = find_if(s.begin(), s.end(), isspace);\n    auto end = find_if(s.begin(),\
    \ s.end(), isspace)[s.size()-1];\n    auto n = s.size();\n    for(auto it = s.begin();\
    \ it != s.end() && it != start; it ++){\n        if(*it == 'a' || *it == 'e' ||\
    \ *it == 'i' || *it == 'o' || *it == 'u'){\n            if(end - it == n){\n \
    \               res.emplace_back(std::string(it, end));\n            }\n     \
    \       else{\n                it = s.begin();\n            }\n        }\n   \
    \     else if(*it == 's' || *it == 't' || *it == 'a' || *it == 'e' || *it == 'i'\
    \ || *it == 'o' || *it == 'u'){\n            if(end - it == n){\n            \
    \    res.emplace_back(std::string(it, end));\n            }\n            else{\n\
    \                it = s.begin();\n            }\n        }\n    }\n    return\
    \ res;", "    std::vector<std::string> v;\n    // your code goes here", "    std::sort(s.begin(),\
    \ s.end());\n    std::vector<std::string> ans;\n    size_t len = 0;\n    for(size_t\
    \ i = 0; i < s.length(); i++) {\n        len = s.find_first_of(\"aeiou\", i);\n\
    \        if(len != std::string::npos) {\n            ans.push_back(s.substr(i,\
    \ len));\n            i += len;\n        }\n        else if(len == std::string::npos\
    \ && i == s.length() - 1) {\n            ans.push_back(s.substr(i));\n       \
    \ }\n        else if(len > 0) {\n            ans.push_back(s.substr(i, len));\n\
    \            i += len;\n        }\n    }\n    if(ans.size() == 1 && ans[0] ==\
    \ \"\") {\n        ans.clear();\n    }\n    return ans;", "\tstd::vector<std::string>\
    \ res;\n\t\n\tstd::sort(s.begin(), s.end());\n\tif (s.empty()) {\n\t\treturn res;\n\
    \t}\n\t\n\tstd::string word;\n\tfor (auto &letter : s) {\n\t\tif (letter != 'a'\
    \ && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n\t\t\
    \tif (word.length() == 0) {\n\t\t\t\tres.push_back(word);\n\t\t\t}\n\t\t\t\n\t\
    \t\tword += letter;\n\t\t}\n\t}\n\t\n\tif (word.length() == 0) {\n\t\treturn res;\n\
    \t}\n\t\n\tres.push_back(word);\n\t\n\tfor (auto &letter : s) {\n\t\tif (letter\
    \ != 'a' && letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u')\
    \ {\n\t\t\tword += letter;\n\t\t}\n\t}\n\t\n\tres.push_back(word);\n\t\n\tstd::sort(res.begin(),\
    \ res.end());\n\t\n\tfor (auto &word : res) {\n\t\tif (word.length() >= n) {\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn res;", "    // code here\n    std::vector<std::string>\
    \ s;\n    if(s.length() == 0)\n        return s;\n    s.resize(0);\n    for(auto\
    \ &c : s)\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'\
    \ || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            s.push_back(c);\n\
    \    if(s.size() == 0)\n        return s;\n    std::vector<int> count(s.size(),\
    \ 0);\n    for(auto &c : s)\n        if(c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n            count[0]++;\n        else\n            count[toupper(c)\
    \ - 'A']++;\n    std::vector<bool> flag(s.size(), false);\n    for(auto &c : s)\n\
    \        if(count[toupper(c) - 'A'] == n)\n            flag[tolower(c)] = true;\n\
    \    for(auto &c : s) {\n        if(flag[tolower(c)]) {\n            s.push_back(c);\n\
    \        }\n    }\n    sort(s.begin(), s.end());\n    return s;", "    std::vector<std::string>\
    \ v;\n    v.push_back(\"\");\n    v.push_back(s);\n    for (size_t i = 1; i <\
    \ s.size(); i++) {\n        v.push_back(s.substr(0, i));\n    }\n    return v;",
  "    std::vector<std::string> retval;\n    retval.push_back(s);\n    std::stack<std::string>\
    \ s;\n    for(long i=0;i<s.size();i++){\n        if(s.empty()) break;\n      \
    \  if(s[i]==' '){\n            s.pop();\n            continue;\n        }\n  \
    \      if(s[i]!='a' &&s[i]!='e' &&s[i]!='i' &&s[i]!='o' &&s[i]!='u' &&s[i]!='A'\
    \ &&s[i]!='E' &&s[i]!='I' &&s[i]!='O' &&s[i]!='U') s.push(s[i]);\n        else\
    \ if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='A'\
    \ || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U'){\n            if(s.size()>n)\
    \ retval.push_back(s.top());\n            s.pop();\n        }\n        else{\n\
    \            s.pop();\n        }\n    }\n    if(s.size()>n) retval.push_back(s.top());\n\
    \    return retval;", "  std::vector<std::string> ans;\n  if(s.size() == 0) return\
    \ ans;\n  std::vector<std::string> vowels = { \"a\", \"e\", \"i\", \"o\", \"u\"\
    \ };\n  std::vector<std::string> consonants = { \"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n  for(size_t i = 0; i < s.size(); ++i)\n\
    \  {\n    if(s[i] == ' ') continue;\n    for(size_t j = 0; j < vowels.size();\
    \ ++j)\n    {\n      if(s[i] == vowels[j])\n      {\n        ans.push_back(s.substr(i,\
    \ s.length()));\n        ans.push_back(s.substr(i + 1, s.length()));\n       \
    \ break;\n      }\n    }\n    for(size_t j = 0; j < consonants.size(); ++j)\n\
    \    {\n      if(s[i] == consonants[j])\n      {\n        ans.push_back(s.substr(i,\
    \ s.length()));\n        ans.push_back(s.substr(i + 1, s.length()));\n       \
    \ break;\n      }\n    }\n  }\n  ans.push_back(s.substr(0, s.length()));\n  return\
    \ ans;", "    std::vector<std::string> words;\n    string temp;\n    for (auto\
    \ c : s) {\n        if (n >= temp.size()) {\n            words.push_back(temp);\n\
    \            temp = \"\";\n        }\n        temp += c;\n    }\n    if (temp.empty())\
    \ {\n        return words;\n    }\n    words.push_back(temp);\n    return words;",
  "    std::vector<std::string> ans;\n    for (long i=0; i<s.length(); i++) {\n  \
    \      bool cont=false;\n        for (long j=0; j<s.length(); j++) {\n       \
    \     if ((s[i]==s[j])&&(j==s.length()-1))\n                cont=true;\n     \
    \   }\n        if (cont==true)\n            ans.push_back(s.substr(i, s.length()-i));\
    \ // return all words that contain 'n' consonants\n    }\n    return ans;", //
    Write your code here, "    std::vector<std::string> words;\n    int i, j;\n  \
    \  for(i = 0, j = 0; i < s.length(); i++) {\n        if(s[i] == \" \") {\n   \
    \         if(i == j) words.push_back(s.substr(j));\n            j = 0;\n     \
    \   } else {\n            j++;\n            if(j == n) {\n                words.push_back(s.substr(i));\n\
    \            }\n        }\n    }\n    return words;", "    std::vector<std::string>\
    \ res;\n    // Your code here\n    if(s.empty()) {\n        return res;\n    }\n\
    \    \n    while(n > 0) {\n        if(s.find('a', 0) == std::string::npos) {\n\
    \            n--;\n        } else {\n            res.push_back(s.substr(0, s.find('a',\
    \ 0)));\n            s = s.substr(s.find('a', 0) + 1, s.size());\n           \
    \ n--;\n        }\n    }\n    \n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) {\n        return words;\n    }\n    std::string\
    \ word;\n    for (size_t i = 0; i < s.length(); i++) {\n        // check consonant\n\
    \        char c = s[i];\n        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c\
    \ <= 'Z')) {\n            word = word + c;\n        } else {\n            // if\
    \ char not consonant add to current word\n            if (!word.empty()) {\n \
    \               words.push_back(word);\n                word = \"\";\n       \
    \     }\n            // check vowel\n            char vowel = s[i - 2];\n    \
    \        if (vowel == 'a' || vowel == 'e' || vowel == 'i' || vowel == 'o' || vowel\
    \ == 'u') {\n                word = word + s[i];\n            }\n        }\n \
    \   }\n    // add last word\n    if (!word.empty()) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    // your code here\n    std::vector<std::string>\
    \ v;\n    \n    if(s.empty()) return v;\n    \n    for(auto & c : s)\n    {\n\
    \        if(isspace(c) || c == '-' || c == '_' || c == '.' || c == '?' || c ==\
    \ '!' || c == '#' || c == '-' || c == '_')\n            continue;\n        for(long\
    \ i = 0; i < n; i++)\n        {\n            if(c == 'a')\n            {\n   \
    \             v.push_back(\"Apple\");\n                v.push_back(\"Ball\");\n\
    \            }\n            else if(c == 'e')\n            {\n               \
    \ v.push_back(\"Elephant\");\n                v.push_back(\"Fish\");\n       \
    \     }\n            else if(c == 'i')\n            {\n                v.push_back(\"\
    Iron\");\n                v.push_back(\"Jelly\");\n            }\n           \
    \ else if(c == 'o')\n            {\n                v.push_back(\"Orange\");\n\
    \                v.push_back(\"Pear\");\n            }\n            else if(c\
    \ == 'u')\n            {\n                v.push_back(\"Uranus\");\n         \
    \       v.push_back(\"Scorpion\");\n            }\n            else if(c == 'y')\n\
    \            {\n                v.push_back(\"Yellow\");\n                v.push_back(\"\
    Bear\");\n            }\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ ans;\n    if (s.empty())\n    {\n        return ans;\n    }\n    \n    for (int\
    \ i=0; i < s.size() && i+n <= s.length(); i++)\n    {\n        std::string word\
    \ = s.substr(i, n);\n        if (std::count(word.begin(), word.end()) == n)\n\
    \        {\n            ans.push_back(word);\n        }\n    }\n    \n    return\
    \ ans;", "  // write your code in C++11/C++14 style\n  // You can use string methods\
    \ to solve this problem\n  // you can use std::unordered_set\n  std::vector<std::string>\
    \ res;\n  \n  // write your code here\n  \n  // Do not modify below this line\n\
    \  return res;", "    // Write your code here\n    std::vector<std::string> words;\n\
    \    if (s.empty())\n    {\n        return words;\n    }\n    size_t index = 0;\n\
    \    while (index < s.size())\n    {\n        if (s[index] == ' ')\n        {\n\
    \            while (index < s.size() && s[index] == ' ')\n                index++;\n\
    \            while (index < s.size())\n            {\n                if (s[index]\
    \ == ' ' && s[index + 1] != ' ' && s[index + 1] != '\\n' \n                  \
    \      && s[index + 1] != '\\r' && s[index + 1] != '\\t' && s[index + 1] != '\\\
    v' \n                        && s[index + 1] != '\\f')\n                {\n  \
    \                  words.push_back(s.substr(index, s.size()));\n             \
    \       index++;\n                }\n                else\n                {\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     else\n        {\n            index++;\n        }\n    }\n    if (index <\
    \ s.size())\n    {\n        words.push_back(s.substr(index, s.size()));\n    }\n\
    \    return words;", "  std::vector<std::string> v;\n  \n  v.push_back(s);\n \
    \ for(auto &x: v)\n    if(x.size() == n)\n      return v;\n  \n  if(s.size() ==\
    \ 0)\n    return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= n)\n      return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= 2 * n)\n      return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= 3 * n)\n      return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= 4 * n)\n      return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= 5 * n)\n      return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= 6 * n)\n      return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= 7 * n)\n      return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= 8 * n)\n      return v;\n  \n  v.push_back(s);\n  for(auto &x: v)\n    if(x.size()\
    \ >= 9 * n)\n      return v;\n  \n  return v;", "    std::vector<std::string>\
    \ res;\n    \n    if (s.size() == 0)\n        return res;\n    \n    // Your code\
    \ here\n    std::vector<string> v;\n    \n    for(int i = 0; i < s.size(); ++i)\n\
    \    {\n        std::string temp = s[i];\n        \n        for(int j = 0; j <\
    \ temp.size(); ++j)\n        {\n            if(temp[j] != '\\0')\n           \
    \ {\n                v.push_back(temp);\n            }\n        }\n    }\n   \
    \ \n    int count = 0;\n    \n    for(int i = 0; i < s.size(); ++i)\n    {\n \
    \       for(int j = 0; j < v.size(); ++j)\n        {\n            if(s[i] == v[j][count])\n\
    \            {\n                ++count;\n            }\n        }\n    }\n  \
    \  \n    for(auto i : v)\n    {\n        if(count == n)\n        {\n         \
    \   res[res.size()-1] += \" \" + i;\n        }\n    }\n    \n    return res;",
  "  std::vector<std::string> result;\n  if(s.empty()) return result;\n  if(s.length()\
    \ == 1) return select_words(s, n);\n  if(s.length() > n) return result;\n  if(isVowel(s[0])\
    \ == false && isVowel(s[s.length()-1]) == false && isConsonant(s[0]) == false\
    \ && isConsonant(s[s.length()-1]) == false) \n  {\n    if(s[0] != s[s.length()-1])\
    \ return result;\n  }\n  std::string sStr = s;\n  while(true) {\n    bool stop\
    \ = false;\n    if(sStr.length() == 0) {\n      stop = true;\n      break;\n \
    \   }\n    if(sStr.find(\"n\") == sStr.size()-1) {\n      stop = true;\n     \
    \ break;\n    }\n    if(sStr.find(\"N\") == sStr.size()-1) {\n      stop = true;\n\
    \      break;\n    }\n    if(sStr.find(\"n\") == 0) {\n      stop = true;\n  \
    \    break;\n    }\n    if(sStr.find(\"N\") == 0) {\n      stop = true;\n    \
    \  break;\n    }\n    if(sStr.find(\" \") != std::string::npos) {\n      stop\
    \ = true;\n      break;\n    }\n    if(sStr.find(\"  \") != std::string::npos)\
    \ {\n      stop = true;\n      break;\n    }\n    \n    if(stop) break;\n    result.push_back(sStr);\n\
    \    sStr.erase(0, 1);\n    sStr.erase(sStr.find(\"n\"));\n    sStr.erase(sStr.find(\"\
    N\"));\n    sStr.erase(0, 1);\n    sStr.erase(sStr.find(\" \"));\n    sStr.erase(sStr.find(\"\
    \  \"));\n  }\n  if(sStr.length() != 0) result.push_back(sStr);\n  for(auto &str\
    \ : result) {\n    for(auto &letter : str) \n      if(letter == \" \") \n    \
    \    str.erase(str.begin()+1);\n  }\n  return result;", "    // code here\n  \
    \  // ...", "    int index = 0;\n    std::vector<std::string> list;\n    std::string\
    \ tmp = s;\n    std::map<char, int> m;\n    while (index < tmp.size()) \n    {\n\
    \        m[tmp[index]] = m.get(tmp[index], 0) + 1;\n        index++;\n    }\n\
    \    for (auto &it : m)\n    {\n        if (it.second == n) list.push_back(tmp.substr(0,\
    \ it.first));\n    }\n    return list;", "    std::vector<std::string> result;\n\
    \    for(long i = 0; i < s.length(); ++i) {\n        if(s[i] != 'a' && s[i] !=\
    \ 'e' && s[i] != 'i' && s[i] != 'o' &&\n                s[i] != 'u' && s[i] !=\
    \ 'A' && s[i] != 'E' && s[i] != 'I' &&\n                s[i] != 'O' && s[i] !=\
    \ 'U') {\n            result.push_back(s.substr(i, 1));\n        }\n    }\n  \
    \  return result;", "    std::vector<std::string> v;\n    for (auto &i: select_words(s))\n\
    \        v.push_back(i);\n    return v;", "    assert(n >= 0);\n    std::vector<std::string>\
    \ res;\n    if (s.empty()) {\n        return res;\n    }\n    auto iter = s.begin();\n\
    \    char c = *iter;\n    auto end = s.end();\n    while (end != iter) {\n   \
    \     if (*end == c) {\n            iter++;\n        } else if (iter == end) {\n\
    \            res.push_back(s);\n            break;\n        } else if (*end ==\
    \ '*' && *iter == c) {\n            iter++;\n            while (iter != end) {\n\
    \                c = *iter;\n                if (iter == end) {\n            \
    \        res.push_back(s);\n                    break;\n                } else\
    \ if (*iter != c) {\n                    iter++;\n                    break;\n\
    \                }\n                iter++;\n            }\n        } else {\n\
    \            iter++;\n        }\n    }\n    return res;", "    // code here\n\
    \    std::vector<std::string> v;\n    for(int i = 0; i < s.length(); i++)\n  \
    \  {\n        for(int j = 0; j < n; j++)\n        {\n            if(s[i] != '\
    \ ')\n            {\n                v.push_back(s.substr(0, i));\n          \
    \      break;\n            }\n        }\n        if(v.size() == n) break;\n  \
    \  }\n    return v;", "    std::vector<std::string> res;\n    long count = 0;\n\
    \    // Your code here\n    if (s.empty())\n        return res;\n    for (auto\
    \ c: s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n            count++;\n            if (count == n) {\n                res.push_back(s.substr(s.find(c)\
    \ + 1));\n                count = 0;\n            }\n        }\n    }\n    return\
    \ res;", "    if (s.empty()) {\n        return {};\n    }\n    \n    std::vector<std::string>\
    \ ret;\n    \n    // Create a string with only n consonants\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    std::string cons_string = consonants.substr(0,\
    \ n);\n    \n    // Create a list of all words\n    for (auto it = std::begin(s);\
    \ it != std::end(s); ++it) {\n        bool found = false;\n        for (auto it2\
    \ = std::begin(cons_string); it2 != std::end(cons_string); ++it2) {\n        \
    \    if (*it == *it2) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            ret.push_back(it);\n\
    \        }\n    }\n    \n    return ret;", "    std::vector<std::string> result;\n\
    \    result.push_back(s);\n    // Complete this function\n    return result;",
  "    // Write your code here\n    std::vector<std::string> v;\n    std::string temp;\n\
    \    for(size_t i = 0; i < s.size(); i++) {\n        temp = s[i];\n        for(size_t\
    \ j = 0; j < temp.length(); j++) {\n            if(temp.at(j) == ' ') {\n    \
    \            temp.erase(j,1);\n            }\n        }\n        v.push_back(temp);\n\
    \    }\n    sort(v.begin(), v.end());\n    if(v.size() == 0) {\n        return\
    \ v;\n    }\n    v.erase(unique(v.begin(), v.end()), v.end());\n    for(size_t\
    \ i = 0; i < n; i++) {\n        v.erase(unique(v.begin(), v.end()), v.end());\n\
    \    }\n    return v;", "    // code here\n    return { };", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> res;\n    for (size_t i = 0; i < s.size(); i++) {\n\
    \        if (s.at(i) == ' ' || s.at(i) == '-') {\n            if (s.at(i) == '\
    \ ' && s.at(i - 1) != ' ') {\n                res.push_back(s.substr(0, i));\n\
    \            } else {\n                res.push_back(s.substr(i));\n         \
    \   }\n        }\n    }\n    return res;", "    std::sort(s.begin(), s.end());\n\
    \    std::vector<std::string> ans;\n    for (auto i : s) {\n        if (i == '\
    \ ' || i == '\\0') continue;\n        ans.push_back(s);\n    }\n    return ans;",
  "    std::vector<std::string> word_vec;\n    for (auto &c: s) {\n        if (std::isalpha(c)\
    \ || std::isspace(c)) {\n            word_vec.push_back(s.substr(0, s.find(c)));\n\
    \            s = s.substr(s.find(c) + 1);\n        }\n    }\n    if (s.size()\
    \ == 0) {\n        return word_vec;\n    }\n    long num_consonants = 0;\n   \
    \ bool first_char = true;\n    std::string word;\n    for (auto &c: s) {\n   \
    \     if (std::isalpha(c)) {\n            word = c;\n            first_char =\
    \ true;\n            continue;\n        }\n        if (std::isspace(c)) {\n  \
    \          std::cout << word;\n            if (std::find(word_vec.begin(), word_vec.end(),\
    \ word) == word_vec.end()) {\n                word_vec.push_back(word);\n    \
    \        }\n        }\n        else {\n            if (first_char) {\n       \
    \         if (std::find(word_vec.begin(), word_vec.end(), c) == word_vec.end())\
    \ {\n                    word_vec.push_back(c);\n                }\n         \
    \   }\n            else if (std::find(word_vec.begin(), word_vec.end(), c) ==\
    \ word_vec.end()) {\n                num_consonants += 1;\n            }\n   \
    \     }\n        first_char = false;\n    }\n    if (num_consonants == n) {\n\
    \        std::cout << word;\n        if (std::find(word_vec.begin(), word_vec.end(),\
    \ word) == word_vec.end()) {\n            word_vec.push_back(word);\n        }\n\
    \    }\n    return word_vec;", "    \n    std::vector<std::string> v;\n    if\
    \ (s.empty()) {\n        return v;\n    }\n    std::stack<std::string> s;\n  \
    \  std::string word = \"\";\n    char ch;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        ch = s[i];\n        if (!std::isalpha(ch) && !std::isspace(ch))\
    \ {\n            if (word.empty()) {\n                word = word.append(ch);\n\
    \            } else {\n                if (word.length() == n) {\n           \
    \         if (s.size() > 0) {\n                        std::string ss = s.top();\n\
    \                        s.pop();\n                        v.push_back(ss);\n\
    \                    }\n                } else {\n                    v.push_back(word);\n\
    \                    word = \"\";\n                }\n            }\n        }\n\
    \        else {\n            word.append(ch);\n        }\n    }\n    if (word.length()\
    \ > 0) {\n        v.push_back(word);\n    }\n    return v;", "    std::vector<std::string>\
    \ words;\n    for(std::string word : s){\n        if(std::count(word.begin(),\
    \ word.end(), ' ')!= 0){\n            words.push_back(word);\n        }\n    \
    \    for(std::size_t i = 0; i <= word.length() - n; ++i){\n            std::size_t\
    \ count = 0;\n            std::size_t found = 0;\n            for(std::size_t\
    \ j = 0; j < word.length(); ++j){\n                if(!isspace(word[j]))\n   \
    \                 if(word[j] == word[i + count]){\n                        ++count;\n\
    \                        if(count == n)\n                            found++;\n\
    \                    }\n            }\n            if(found == n)\n          \
    \      words.push_back(word.substr(i, count));\n        }\n    }\n    return words;",
  "    std::vector<std::string> v;\n    if(s.empty())\n        return v;\n    // Add\
    \ first word\n    v.push_back(s.substr(0, s.size() - 1));\n    // Add words containing\
    \ less than n consonants\n    for(auto itr = s.cbegin(); itr != s.cend() - 1;\
    \ itr++) {\n        if((*itr == 'a') || (*itr == 'e') || (*itr == 'i') || (*itr\
    \ == 'o') || (*itr == 'u')) {\n            v.push_back(s.substr(itr, s.size()\
    \ - 1));\n            itr = s.cend();\n        }\n    }\n    // Add last word\n\
    \    v.push_back(s.substr(itr, s.size()));\n    return v;", "    // Do not write\
    \ main() function.\n    // Do not read input, instead use the arguments to the\
    \ function.\n    // Do not print the output, instead return values that you compute\
    \ and print in main.\n    // Use only for loops that iterate over a known number\
    \ of items.\n    // The only library functions you are allowed to use are those\
    \ already written for you.\n    // Level up your understanding of C++ by taking\
    \ smaller steps.\n    std::vector< std::vector<std::string> > v;\n    std::vector<std::string>\
    \ temp;\n    for (int i = 0; i < s.length(); i++) {\n        for (int j = i; j\
    \ < s.length(); j++) {\n            if (s[i] != s[j]) {\n                if (s[j]\
    \ == 'a' || s[j] == 'e' || s[j] == 'i' || s[j] == 'o' || s[j] == 'u' || s[j] ==\
    \ 'y') {\n                    for (int k = i; k < s.length(); k++) {\n       \
    \                 if (s[k] == s[j]) {\n                            // cout <<\
    \ s[i] << \" \" << s[j] << \" \" << k << endl;\n                            temp.push_back(\
    \ s.substr(i, j) );\n                            temp.push_back( s.substr(k, j+1)\
    \ );\n                            // cout << temp.size() << \" \" << temp << endl;\n\
    \                            for (int l = k; l < s.length(); l++) {\n        \
    \                        // cout << s[k] << \" \" << l << \" \" << k << endl;\n\
    \                                temp.push_back( s.substr(k, j+1) );\n       \
    \                         // cout << temp.size() << \" \" << temp << endl;\n \
    \                           }\n                            // cout << temp.size()\
    \ << \" \" << temp << endl;\n                            v.push_back(temp);\n\
    \                            temp.clear();\n                            // cout\
    \ << v.size() << \" \" << v<< endl;\n                            break;\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n    }\n    // cout << v.size() << \" \" << v << endl;\n    return\
    \ v;", "    std::vector<std::string> res;\n    std::vector<char> v(s.size());\n\
    \    for(size_t i = 0; i < s.size(); ++i) {\n        if('a' <= s[i] && s[i] <=\
    \ 'z')\n            v[i] = s[i] - 'a' + 'A';\n        else if(' ' <= s[i] && s[i]\
    \ <= 'z')\n            v[i] = s[i] - ' ' + 'A';\n        else if('!' <= s[i] &&\
    \ s[i] <= 'z')\n            v[i] = s[i] - '!' + 'A';\n        else if('?' <= s[i]\
    \ && s[i] <= 'z')\n            v[i] = s[i] - '?' + 'A';\n        else if(';' <=\
    \ s[i] && s[i] <= 'z')\n            v[i] = s[i] - ';' + 'A';\n        else if(';'\
    \ <= s[i] && s[i] <= 'z')\n            v[i] = s[i] - ';' + 'A';\n        else\
    \ if(':' <= s[i] && s[i] <= 'z')\n            v[i] = s[i] - ':' + 'A';\n     \
    \   else\n            v[i] = s[i] + 'A';\n    }\n    std::vector<bool> flags(v.size());\n\
    \    for(size_t i = 0; i < v.size(); ++i) {\n        if(n == 0)\n            break;\n\
    \        if(v[i] == v[v.size() - n - 1])\n            flags[i] = true;\n     \
    \   else\n            flags[i] = false;\n    }\n    for(size_t i = 0; i < s.size();\
    \ ++i) {\n        if(flags[i]) {\n            res.push_back(s);\n            break;\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> result;\n \
    \   if (s.length() == 0) {\n        return result;\n    }\n    \n    if (n <=\
    \ 0) {\n        return result;\n    }\n    \n    std::vector<std::string> words;\n\
    \    for (auto &letter : s) {\n        if (letter == ' ') {\n            words.emplace_back(\"\
    \");\n        } else {\n            words.emplace_back(letter);\n        }\n \
    \   }\n\n    long count = 1;\n    for (auto &word : words) {\n        if (count++\
    \ == n) {\n            result.emplace_back(word);\n        }\n    }\n\n    return\
    \ result;", "    if(s.length()==0) {\n        return {};\n    }\n\n    std::vector<std::string>\
    \ words;\n\n    std::string word = \"\";\n    size_t word_size = 0;\n    for(size_t\
    \ i=0 ; i<s.length();i++) {\n        char c = s[i];\n        if(c>='a' && c<='z'\
    \ || c>='A' && c<='Z' || c>='0') {\n            if(word.length()>0) word+=' ';\n\
    \            word+=c;\n        } else {\n            word_size++;\n          \
    \  if(word_size==n) {\n                words.push_back(word);\n              \
    \  word_size=0;\n                word=\"\";\n            }\n        }\n    }\n\
    \    \n    return words;", "    std::vector<std::string> result;\n    if (s.empty())\
    \ return result;\n    \n    // Write your code here\n    \n    return result;",
  "    std::vector<std::string> v;\n    std::string::size_type pos = 0, lastPos =\
    \ 0, count = 1;\n    char ch;\n    // This loop searches for the first occurrence\
    \ of n in the string s\n    while(pos != std::string::npos) {\n        // Keep\
    \ track of the position in the string where we stopped searching\n        lastPos\
    \ = pos;\n        // Search for the next occurrence of n in the string\n     \
    \   pos = s.find_first_of(\" \", pos);\n        // If not found, don't search\
    \ any more\n        if(pos == std::string::npos) break;\n        // Search for\
    \ the next occurrence of n in the string\n        pos = s.find_first_of(\" \"\
    , pos + 1);\n        // If not found, don't search any more\n        if(pos ==\
    \ std::string::npos) break;\n        // If n appears again, increment the count\
    \ and store it\n        if(s[pos] == ' ') count++;\n        // If count matches\
    \ the required count for this word, add it to the vector\n        if(count ==\
    \ n) {\n            v.push_back(s.substr(lastPos, pos - lastPos));\n         \
    \   // Reset the count for the next word we encounter\n            count = 1;\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> v;\n    for (std::string::iterator\
    \ itr = s.begin(); itr != s.end(); ++itr) {\n        if (!isspace(*itr)) {\n \
    \           v.push_back(*itr);\n        }\n    }\n    std::sort(v.begin(), v.end());\n\
    \    v.erase(std::unique(v.begin(), v.end()), v.end());\n    v.erase(std::unique(v,\n\
    \        [] (const std::string &a, const std::string &b)\n        {\n        \
    \    return a.size() == b.size() && a.size() == n && a.find_first_not_of(\" \\\
    n\") != std::string::npos;\n        }), v.end());\n    return v;", "    std::vector<std::string>\
    \ v;\n    // Write your code here\n    return v;", "    if(s.empty()) return {};\n\
    \    std::vector<std::string> ans;\n    auto f = [&s, &n](std::pair<const std::string,\
    \ long long> &p) -> bool {\n        auto it = std::find(p.first.begin(), p.first.end(),\
    \ s.front());\n        if(it == p.first.end()) return true;\n        auto left\
    \ = it + s.size();\n        if(left > p.second) return true;\n        auto right\
    \ = left + n;\n        if(right > p.second) return true;\n        ans.emplace_back(p.first);\n\
    \        if(p.second == right) {\n            while(p.second != right) {\n   \
    \             p.second += n;\n                ans.emplace_back(p.first);\n   \
    \         }\n        }\n        for(; left <= p.second; ++left) {\n          \
    \  ans.emplace_back(p.first);\n        }\n        return false;\n    };\n    for(std::pair<const\
    \ std::string, long long> p : std::partition(s.begin(), s.end(), f)) {\n     \
    \   for(; p.second != p.second+n; ++p.second) {\n            ans.emplace_back(p.first);\n\
    \        }\n    }\n    return ans;", "    // code here\n    std::vector<std::string>\
    \ ans;\n    std::stack<std::string> stack;\n    stack.pop_back();\n    for (char\
    \ c : s) {\n        if (c == 'a') \n            stack.push(\"ab\");\n        else\
    \ if (c == 'e')\n            stack.push(\"e\");\n        else if (c == 'i')\n\
    \            stack.push(\"i\");\n        else if (c == 'o')\n            stack.push(\"\
    o\");\n        else if (c == 'u')\n            stack.push(\"u\");\n        else\
    \ if (c == 'y' && stack.size() == 3)\n            stack.push(\"u\");\n       \
    \ else if (c == 'y')\n            stack.push(\"u\");\n        else\n         \
    \   stack.push(c);\n    }\n    while (!stack.empty()) {\n        if (stack.size()\
    \ == n) {\n            ans.push_back(stack.top());\n        }\n        else {\n\
    \            stack.pop();\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.empty()) {\n        return res;\n    }\n    \n    for(long\
    \ i = 0; i <= s.size(); i++) {\n        if(s.at(i) == ' ') {\n            res.push_back(s.substr(0,\
    \ i));\n            s.erase(0, i);\n        }\n    }\n    \n    for(long i = 0;\
    \ i < s.size(); i++) {\n        if(s.at(i) == 'a' || s.at(i) == 'e' || s.at(i)\
    \ == 'i' || s.at(i) == 'o' || s.at(i) == 'u') {\n            for(long j = i; j\
    \ < s.size(); j++) {\n                if(!s.at(j).isalpha()) {\n             \
    \       i = j;\n                    break;\n                }\n            }\n\
    \        }\n    }\n    \n    while(s.size() != 0) {\n        if(s.size() >= n\
    \ && s.at(n).isalpha()) {\n            res.push_back(s.substr(0, s.size() - n));\n\
    \            s.erase(0, s.size() - n);\n        } else {\n            s.erase(0,\
    \ 1);\n        }\n    }\n    \n    return res;", "    // code here\n    \n   \
    \ std::vector<std::string> res;\n    \n    \n    \n    return res;\n    \n    ",
  "    std::vector<std::string> v;\n    if(s.empty())\n    {\n        v.emplace_back();\n\
    \        return v;\n    }\n    long pos = 0;\n    long count = 1;\n    for(auto\
    \ c: s)\n    {\n        if(c != s[pos] && c != s[pos+1])\n        {\n        \
    \    pos++;\n            count = 1;\n        }\n        else\n        {\n    \
    \        count++;\n        }\n        if(count == n)\n        {\n            v.emplace_back(std::string(pos,\
    \ pos));\n            count = 1;\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    res.reserve(s.size());\n    std::vector<std::string> v;\n    \n  \
    \  // base case\n    if (s.size() == 0) {\n        res.push_back(v);\n       \
    \ return res;\n    }\n    \n    long cnt = 0;\n    long len = 0;\n    \n    char\
    \ last;\n    long cnt = s.size();\n    for (size_t i = 0; i < s.size(); i++) {\n\
    \        last = s[i];\n        \n        // find first consonant\n        for\
    \ (size_t j = i; j < s.size(); j++) {\n            char ch = s[j];\n         \
    \   if (std::isupper(ch) || std::islower(ch) || std::isspace(ch))\n          \
    \      len = j - i;\n            if (cnt == n) {\n                res.push_back(v);\n\
    \                v.clear();\n                break;\n            }\n         \
    \   else if (std::islower(ch) && std::isupper(ch))\n                break;\n \
    \           else if (cnt == 0) {\n                v.push_back(s.substr(i, j-i+1));\n\
    \                i += j-i+1;\n                cnt = 1;\n                break;\n\
    \            }\n        }\n        cnt = 0;\n    }\n    return res;", "  // code\
    \ here\n  ", '    // code here', '    // code here', "    std::vector<std::string>\
    \ result;\n    std::string word;\n    if (s.empty()) {\n        return result;\n\
    \    }\n    for (std::string::iterator it = s.begin(); it != s.end(); ++it) {\n\
    \        // Find the current character\n        std::string current_word;\n  \
    \      std::string::iterator itr = it;\n        while (itr != s.end() && (*itr\
    \ != ' ' && *itr != '\\t' && *itr != '\\n')) {\n            current_word += *itr;\n\
    \            ++itr;\n        }\n        \n        // Find the current word length\
    \ after removing the current character\n        long word_length = current_word.size();\n\
    \        \n        // If the current word length equals to n\n        if (word_length\
    \ == n) {\n            result.push_back(current_word);\n        }\n    }\n   \
    \ return result;", "    std::list<std::string> res;\n    for (auto &c : s) {\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n     \
    \       res.push_back(c);\n    }\n    return res;", "    std::vector<std::string>\
    \ v;\n    // code here", "    std::set<std::string> res;\n    for (int i = 0;\
    \ i != s.size(); ++i) {\n        // find space\n        if (s[i] == ' ') {\n \
    \           std::string word = s.substr(0, i);\n            // find n consonants\n\
    \            if (n == 1) res.insert(word);\n            // find n vowels\n   \
    \         else {\n                for (int j = 0; j < word.size(); ++j) {\n  \
    \                  if (std::count(word.begin(), word.end(), \n               \
    \                   (std::tolower(word[j]) - 'a' + 1)) == n) {\n             \
    \           res.insert(word);\n                        break;\n              \
    \      }\n                }\n            }\n        }\n        // find letter\n\
    \        else {\n            // check vowels\n            for (int j = 0; j <\
    \ s[i].size(); ++j) {\n                if (std::count(s[i].begin(), s[i].end(),\
    \ \n                              (std::tolower(s[i]) - 'a' + 1)) == n) {\n  \
    \                  res.insert(s.substr(0, i));\n                    break;\n \
    \               }\n            }\n        }\n    }\n    return std::move(res);",
  "    std::vector<std::string> v;\n    if(!s.size())\n        return v;\n    for(int\
    \ i = 0; i<= s.size()-n; i++) {\n        for(int j=i+n; j < s.size();j++) {\n\
    \            v.push_back(s.substr(i, j-i));\n        }\n    }\n    return v;",
  "  // Write your code here\n    std::vector<std::string> words;\n    std::string\
    \ temp = s;\n    std::string vowels = \"aeiouy\";\n    std::string consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    std::string::size_type vowel_count = 0;\n\
    \    for (std::string::size_type i = 0; i < temp.length(); i++) {\n        if\
    \ (std::count(consonants.begin(), consonants.end(), temp[i]) == 0) {\n       \
    \     words.push_back(temp);\n            temp = temp.substr(0, i) + temp.substr(i\
    \ + 1, temp.length());\n            i = i - 1;\n        }\n        else {\n  \
    \          if (std::count(vowels.begin(), vowels.end(), temp[i]) == 0) {\n   \
    \             vowel_count++;\n            }\n        }\n    }\n    if (vowel_count\
    \ == n) {\n        words.push_back(temp);\n    }\n    return words;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) \n        return res;\n    std::stack<std::string>\
    \ st;\n    st.push(s);\n    while (st.size()) {\n        std::string x = st.top();\n\
    \        st.pop();\n        for (char c : x) {\n            if (c == 'a' || c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n                res.push_back(x);\n\
    \            }\n            if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' ||\
    \ c == '_') {\n                st.push(x);\n            }\n        }\n    }\n\
    \    return res;", "    // code here\n    std::vector<std::string> res;\n    //\
    \ code here\n    return res;", '    // code here', "    std::vector<std::string>\
    \ result;\n    if(s == \"\") return result;\n    auto itr = std::find(s.begin(),\
    \ s.end(), 'A');\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n\
    \    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end())\
    \ itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr\
    \ != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n\
    \    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end())\
    \ itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr\
    \ != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n\
    \    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end())\
    \ itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr\
    \ != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n\
    \    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end())\
    \ itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr\
    \ != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n\
    \    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end())\
    \ itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr\
    \ != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n\
    \    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end())\
    \ itr++;\n    if(itr != s.end()) itr++;\n    if(itr != s.end()) itr++;\n    if(itr\
    \ != s.end()) itr++;\n    if(itr != s.end()) ", "    if (s.empty()) {\n      \
    \  return std::vector<std::string>();\n    }\n    std::vector<std::string> results;\n\
    \    size_t pos = 0, n = s.size();\n    while (pos < n) {\n        while (pos\
    \ < n && s.at(pos) != '\\0') {\n            if (s.at(pos) == ' ' || s.at(pos)\
    \ == '\\0') {\n                if (pos - n <= 1) {\n                    results.emplace_back(s.substr(pos,\
    \ n - pos));\n                }\n                pos = n;\n                break;\n\
    \            }\n            ++pos;\n        }\n        ++pos;\n    }\n    return\
    \ results;", "    if (s.empty()) {\n        return {};\n    }\n    std::vector<std::string>\
    \ words;\n    for (std::size_t i = 0; i < s.size(); ++i) {\n        if (s[i] ==\
    \ '\\'') {\n            if (s[i + 1] == '\\'') {\n                ++i;\n     \
    \       } else {\n                return {};\n            }\n        } else {\n\
    \            if (s[i] == ' ') {\n                if (s[i + 1] == ' ') {\n    \
    \                ++i;\n                } else {\n                    words.push_back(s.substr(0,\
    \ i));\n                    s.erase(0, i + 1);\n                }\n          \
    \  } else if (s[i] >= 'a' && s[i] <= 'z') {\n                if (s[i + 1] >= 'a'\
    \ && s[i + 1] <= 'z') {\n                    ++i;\n                } else {\n\
    \                    return {};\n                }\n            } else {\n   \
    \             return {};\n            }\n        }\n    }\n    if (n > 0) {\n\
    \        for (const auto& word : words) {\n            for (std::size_t i = 0;\
    \ i < n; ++i) {\n                if (word.find(s[i]) != std::string::npos) {\n\
    \                    words.push_back(word);\n                    break;\n    \
    \            }\n            }\n        }\n    }\n    return words;", "    std::vector<std::string>\
    \ words;\n    if(s.empty()) {\n        return words;\n    }\n    \n    std::string\
    \ temp = \"\", temp_ = \"\";\n    std::vector<std::string> temp_words;\n    \n\
    \    for(char c: s) {\n        if(std::isalpha(c)) {\n            temp_ += c;\n\
    \        } else if(std::isspace(c)) {\n            temp_ += ' ';\n        } else\
    \ {\n            temp_ += c;\n        }\n        \n        if(temp_ == \"\") {\n\
    \            words.push(temp_words);\n            temp_words.clear();\n      \
    \      temp_ = \"\";\n        }\n    }\n    \n    // temp_word has all words that\
    \ contains exactly n consonants\n    while(temp_words.size() > 0) {\n        for(size_t\
    \ i = 0; i < temp_words.size(); i++) {\n            for(size_t j = 0; j < temp_words[i].size();\
    \ j++) {\n                if(temp_words[i][j] == temp_ && std::count(temp_words.begin(),\
    \ temp_words.end(), temp_words[i]) == n) {\n                    temp_words.erase(temp_words.begin()\
    \ + i);\n                    break;\n                }\n            }\n      \
    \  }\n    }\n    \n    return words;", "    // your code here\n    std::vector<std::string>\
    \ ans;\n    \n    std::string str = s;\n    if (n == 0) return ans;\n    \n  \
    \  while (n > 0) {\n        int len = 0;\n        while (n < s.size() && s[n]\
    \ == ' ') len++;\n        ans.push_back(s.substr(0, len));\n        s = s.substr(len);\n\
    \        n--;\n    }\n    \n    return ans;", "    std::vector<std::string> ans;\n\
    \    long begin = 0;\n    long end = s.size();\n    long count = 0;\n    while(begin\
    \ < end){\n        if(s.at(begin) == ' ') begin++;\n        else if(s.at(begin)\
    \ == 'a') begin++;\n        else if(s.at(begin) == 'u' ) begin++;\n        else\
    \ if(s.at(begin) == 'c' ) begin++;\n        else if(s.at(begin) == 'l' ) begin++;\n\
    \        else if(s.at(begin) == 'i' ) begin++;\n        else if(s.at(begin) ==\
    \ 's' ) begin++;\n        else if(s.at(begin) == 'e' ) begin++;\n        else\
    \ if(s.at(begin) == 'r' ) begin++;\n        else if(s.at(begin) == 'a' ) begin++;\n\
    \        else if(s.at(begin) == 'm' ) begin++;\n        else if(s.at(begin) ==\
    \ 'y' ) begin++;\n        else if(s.at(begin) == 'k' ) begin++;\n        else\
    \ if(s.at(begin) == 'e' ) begin++;\n        else if(s.at(begin) == 'd' ) begin++;\n\
    \        else if(s.at(begin) == 'o' ) begin++;\n        else if(s.at(begin) ==\
    \ 'w' ) begin++;\n        else if(s.at(begin) == 'n' ) begin++;\n        else\
    \ if(s.at(begin) == 't' ) begin++;\n        else if(s.at(begin) == 'l' ) begin++;\n\
    \        else if(s.at(begin) == 'p' ) begin++;\n        else if(s.at(begin) ==\
    \ 'r' ) begin++;\n        else if(s.at(begin) == 'a' ) begin++;\n        else\
    \ if(s.at(begin) == 'i' ) begin++;\n        else if(s.at(begin) == 's' ) begin++;\n\
    \        else if(s.at(begin) == 'o' ) begin++;\n        else if(s.at(begin) ==\
    \ 'r' ) begin++;\n        else if(s.at(begin) == 'c' ) begin++;\n        else\
    \ if(s.at(begin) == 'h' ) begin++;\n        else if(s.at(begin) == 'l' ) begin++;\n\
    \        else if(s.at(begin) == 'o' ) begin++;\n        else if(s.at(begin) ==\
    \ 'd' ) begin++;\n        else if(s.at(begin) == 'w' ) begin++;\n        else\
    \ if(s.at(begin) == 'n' ) begin++;\n        else if(s.at(begin) == 't' ) begin++;\n\
    \        else if(s.at(begin) == 'p' ) begin++;\n        else if(s.at(begin) ==\
    \ 'a' ) begin++;\n        else if(s.at(begin) == 'u' ) begin++;\n        else\
    \ if(s.at(begin) == 'f' ) begin++;\n        else if(s.at(begin) == 'i' ) begin++;\n\
    \        else if(s.at(begin) == 'v' ) ", "  std::sort(s.begin(), s.end());\n \
    \ \n  std::vector<std::string> res;\n  \n  for (auto &word : s)\n    \n    if\
    \ (word == \" \") {\n      \n      if (res.empty())\n        \n        break;\n\
    \      \n      if (res.back() == word)\n        \n        res.pop_back();\n  \
    \    \n      else\n        \n        res.push_back(word);\n    }\n    \n  res.resize(res.capacity());\n\
    \  \n  std::vector<std::string> tmp;\n  \n  for (auto &word : s) {\n    \n   \
    \ \n    bool inword = false;\n    \n    for (auto &x : tmp) {\n      \n      \n\
    \      if (word == x) {\n        \n        inword = true;\n        break;\n  \
    \    }\n    }\n    \n    \n    if (!inword)\n      \n      tmp.push_back(word);\n\
    \    \n  }\n  \n  for (auto &x : tmp) {\n    \n    if (x.size() >= n)\n      \n\
    \      res.push_back(x);\n  }\n  \n  return res;", "    if (s.empty()) {\n   \
    \     return {};\n    }\n    if (n == 0) {\n        return {s};\n    }\n    std::vector<std::string>\
    \ result;\n    auto search = [&](size_t n) {\n        for (const auto& word :\
    \ result) {\n            for (size_t i = 0; i < word.length() && i < n; ++i) {\n\
    \                if (word[i] != s[i] && word[i] != '\\n') {\n                \
    \    return false;\n                }\n            }\n            if (i == n)\
    \ {\n                result.push_back(word);\n                return true;\n \
    \           }\n        }\n        return false;\n    };\n    auto inserted = [&](std::string\
    \ word) {\n        bool found = false;\n        for (auto& word : result) {\n\
    \            for (size_t i = 0; i < word.length(); ++i) {\n                if\
    \ (word[i] == ' ') {\n                    return false;\n                }\n \
    \           }\n            found = true;\n        }\n        result.push_back(word);\n\
    \        return found;\n    };\n    for (size_t i = 0; i < s.length(); ++i) {\n\
    \        if (s[i] == ' ') {\n            std::string word(s.begin() + i, s.end());\n\
    \            if (!insert(word)) {\n                result.push_back(word);\n \
    \           }\n        }\n    }\n    while (!result.empty()) {\n        if (search(n))\
    \ {\n            return result;\n        }\n        if (search(n + 1)) {\n   \
    \         break;\n        }\n        n += 1;\n    }\n    return {};", "    std::vector<std::string>\
    \ retVec;\n    if (s.size() <= 0) {\n        return retVec;\n    }\n    // Split\
    \ s by space into a vector of words.\n    std::vector<std::string> words = std::split(s,\
    \ \" \");\n    // Iterate over the words in the vector.\n    for (std::vector<std::string>::iterator\
    \ it = words.begin(); it != words.end(); ++it) {\n        bool flag = false;\n\
    \        // Iterate over the consonants in word.\n        for (char c : *it) {\n\
    \            if (c == 'b') {\n                flag = true;\n            }\n  \
    \      }\n        // If word contains n consonants then add it to the vector.\n\
    \        if (flag) {\n            retVec.emplace_back(*it);\n        }\n    }\n\
    \    return retVec;", "    std::sort(s.begin(), s.end());\n    auto it = std::unique(s.begin(),\
    \ s.end());\n    s.erase(it, s.end());\n    std::vector<std::string> result;\n\
    \    if (s.empty())\n        return result;\n    for (auto i : s) {\n        //\
    \ if the substring contains n consonants, the string is added to the result.\n\
    \        if (std::count(i.begin(), i.end(), N_CONSONANTS) == n)\n            result.push_back(i);\n\
    \    }\n    return result;", "    // code here\n    std::vector<std::string> words;\n\
    \    // code here\n    return words;", "    std::vector<std::string> ans;\n  \
    \  if (s.empty()) return ans;\n    long i = 0;\n    std::vector<bool> v(s.size(),\
    \ false);\n    for(auto const &c : s) {\n        if (!v[i]) {\n            ans.push_back({c});\n\
    \            v[i] = true;\n        } else {\n            for (auto j=i;j<v.size()-1;j++)\
    \ {\n                if (v[j] && v[j+1]) break;\n            }\n            if\
    \ (v[j] && v[j+1]) {\n                ans.push_back({s.substr(i, j+1-i)});\n \
    \               i = j+1;\n                for (auto j=i;j<v.size()-1;j++) {\n\
    \                    v[j] = false;\n                }\n            }\n       \
    \ }\n    }\n    if (i < s.size())\n        ans.push_back({s.substr(i)});\n   \
    \ return ans;", "    std::vector<std::string> result;\n    if (s.empty()) {\n\
    \        return result;\n    }\n    \n    // Use n to store the count of each\
    \ letter \n    // and use n to store the last letter seen \n    std::vector<int>\
    \ counts(n+1);\n    int last_index = n; \n    \n    for (char c : s) {\n     \
    \   // Update counts\n        counts[c]++; \n        if (counts[c] == last_index)\
    \ {\n            result.push_back(std::string(1, c));\n        }\n        last_index\
    \ = counts[c]; \n    }\n    \n    return result;", "    std::vector<std::string>\
    \ res;\n    std::vector<std::string> sub_list;\n    \n    res.push_back(\"\");\n\
    \    if(s.empty()) \n        return res;\n    \n    for(char c : s) {\n      \
    \  \n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n  \
    \          if(n == 0) \n                break;\n            else \n          \
    \      if(n == 1)\n                    res.push_back(s);\n                else\
    \ {\n                    sub_list.push_back(s);\n                    n--;\n  \
    \                  if(n == 0) \n                        res.push_back(sub_list);\n\
    \                }\n    }\n    return res;", "  std::list<std::string> res;\n\
    \  if (s.length() == 0)\n    return res;\n  if (n == 0) {\n    return res;\n \
    \ }\n  \n  long lenS = s.length();\n  long lenN = n;\n  if (lenS > lenN)\n   \
    \ lenN = lenS;\n  \n  if (n % 2 == 0) {\n    // even n - split on every other\
    \ character\n    for (long i = 0, j = 0, len = lenS; i < len; i += 2) {\n    \
    \  std::string prefix = s.substr(i, j);\n      std::string suffix = s.substr(i\
    \ + 1, j + 1);\n      if (suffix == prefix)\n        continue;\n      \n     \
    \ res.push_back(prefix);\n      res.push_back(suffix);\n      j += 2;\n    }\n\
    \  }\n  else {\n    // odd n - split on every other word but first and last words\n\
    \    for (long i = 0, j = 0, len = lenS; i < len; i += 2) {\n      std::string\
    \ prefix = s.substr(i, j);\n      std::string suffix = s.substr(i + 1, j + 1);\n\
    \      \n      if (suffix == prefix)\n        continue;\n      \n      res.push_back(prefix);\n\
    \      res.push_back(suffix);\n      j += 2;\n    }\n  }\n  \n  return res;",
  "    std::vector<std::string> output;\n    std::set<std::string> seen;\n    for\
    \ (std::string word : s) {\n        std::set<std::string> words = select_words(word,\
    \ n, seen);\n        for (std::string word : words) {\n            if (seen.count(word)\
    \ == 0) {\n                output.push_back(word);\n                seen.insert(word);\n\
    \            }\n        }\n    }\n    return output;", "    std::vector<std::string>\
    \ res;\n    // your code goes here\n    res.push_back(\"\");\n    std::string\
    \ temp;\n    int counter = 0;\n    long counter2 = 0;\n    for (int i = 0; i <\
    \ s.size(); i++) {\n        if (s[i] == ' ') {\n            counter++;\n     \
    \   }\n        if (s[i] == 'a') {\n            counter2++;\n        }\n    }\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n      \
    \      counter--;\n        }\n        if (s[i] == 'a') {\n            counter2--;\n\
    \        }\n    }\n    while (counter > 0 || counter2 > 0) {\n        if (counter\
    \ > 0 && counter2 == 0) {\n            temp = temp + \" \";\n        }\n     \
    \   if (counter2 == 0 && counter > 0) {\n            temp = temp + \" \";\n  \
    \      }\n        if (counter == 0 && counter2 > 0) {\n            temp = temp\
    \ + \" \";\n        }\n        if (counter == 0 && counter < counter2) {\n   \
    \         res.push_back(temp);\n            counter = 0;\n        }\n        if\
    \ (counter > 0 && counter2 == counter) {\n            res.push_back(temp);\n \
    \           counter = 0;\n        }\n        if (counter2 == 0 && counter < counter2)\
    \ {\n            res.push_back(temp);\n            counter2 = 0;\n        }\n\
    \        if (counter > 0 && counter2 < counter) {\n            res.push_back(temp);\n\
    \            counter2 = 0;\n        }\n        if (counter2 < 0 && counter < counter2)\
    \ {\n            res.push_back(temp);\n            counter2 = 0;\n        }\n\
    \        if (counter2 == 0 && counter2 < counter) {\n            res.push_back(temp);\n\
    \            counter2 = 0;\n        }\n        if (counter > 0 && counter2 < counter)\
    \ {\n            res.push_back(temp);\n            counter2 = 0;\n        }\n\
    \        if (counter2 < 0 && counter < counter2) {\n            res.push_back(temp);\n\
    \            counter2 = 0;\n        }\n    }\n    return res;", "  assert(s.size()\
    \ > 0);\n  long maxWordLength = s.size() - 1;\n  std::vector<std::string> v;\n\
    \  \n  for (int i = n; i < maxWordLength; i--) {\n    if (s.at(i) == 'a' || s.at(i)\
    \ == 'e' || s.at(i) == 'i' || s.at(i) == 'o' || s.at(i) == 'u') {\n      v.push_back(s.substr(0,\
    \ i));\n    }\n  }\n  return v;", "    if (s == \"\") {\n        return {};\n\
    \    }\n    \n    long l = 0;\n    \n    for (auto& c : s) {\n        l += 1;\n\
    \    }\n\n    std::vector<std::string> ret;\n    \n    if (l == 0) {\n       \
    \ return ret;\n    }\n\n    std::vector<bool> seen(n, true);\n    \n    for (auto\
    \ i = 0; i < (s.size() - n); i++) {\n        auto j = i;\n        for (auto k\
    \ = i + 1; k < (s.size() - 1); k++) {\n            auto c = s.at(i + k);\n   \
    \         \n            if (seen[k] && c != ' ') {\n                ret.push_back(s.substr(i,\
    \ j));\n                j = k + 1;\n                break;\n            }\n  \
    \      }\n    }\n    \n    return ret;", "    std::vector<std::string> list;\n\
    \    std::stack<std::string> st;\n    \n    for (int i = 0; i != s.length(); ++i)\
    \ {\n        char c = s[i];\n        if (is_consonant(c)) {\n            if (!st.empty()\
    \ && st.top() == c) {\n                st.top() += c;\n            } else {\n\
    \                st.push(c);\n            }\n        } else {\n            if\
    \ (st.empty()) \n                list.push_back(s.substr(i));\n            if\
    \ (st.top() == c)\n                st.pop();\n        }\n    }\n    \n    return\
    \ list;", "    // code here\n    return {};", "    // your code goes here\n  \
    \  std::vector<std::string> v;\n    long l=0;\n    for(int i=0;i<s.size();++i)\n\
    \    {\n        if(s[i]==' ')\n        {\n            v.push_back(s.substr(0,i));\n\
    \            l=i;\n        }\n    }\n    \n    if(l==0)\n        return v;\n \
    \   \n    v.push_back(s.substr(0,l));\n    \n    for(auto j=l+1;j<s.size();++j)\n\
    \    {\n        if(s[j]==' ')\n            continue;\n        if(s[l]==s[j])\n\
    \        {\n            v.push_back(s.substr(0,j));\n            break;\n    \
    \    }\n        if(s[l]+s[j] == s[n])\n        {\n            v.push_back(s.substr(0,j));\n\
    \            break;\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ res;\n    if(s.length()==0) {\n        return res;\n    }\n    // Use a std::map\
    \ to store unique words (with frequency value) and sort them by frequency\n  \
    \  std::map<std::string, int> word_counts;\n    for (std::size_t i = 0; i < s.length();\
    \ i++) {\n        char c = s[i];\n        if(isalpha(c)) {\n            if(!word_counts.count(c))\
    \ {\n                word_counts[c] = 0;\n            }\n            word_counts[c]++;\n\
    \        }\n    }\n    std::map<std::string, int>::iterator it;\n    it=word_counts.begin();\n\
    \    while(it!=word_counts.end()) {\n        std::string word=it->first;\n   \
    \     int freq=it->second;\n        if(word_counts[word]==n) {\n            res.push_back(word);\n\
    \            word_counts.erase(it);\n        }\n        it++;\n    }\n    return\
    \ res;", "  // Your code here\n  std::vector<std::string> v;\n  std::size_t found\
    \ = s.find_first_of(\"aeiou\");\n  for(std::size_t i = 0; found != std::string::npos;\
    \ i++) {\n    v.push_back(s.substr(found, i));\n    found = s.find_first_of(\"\
    aeiou\", found + 1);\n  }\n  for(std::size_t i = 0; i < v.size(); i++) {\n   \
    \ if (std::count(v[i].begin(), v[i].end(), ' ') >= n) {\n      v.erase(v.begin()\
    \ + i);\n    }\n  }\n  return v;", "    std::vector<std::string> res;\n    if(!s.empty())\
    \ {\n        std::vector<std::string>::iterator it;\n        for(it = std::begin(s);it!=std::end(s);++it)\
    \ {\n            std::vector<std::string>::iterator it2;\n            for( it2\
    \ = std::begin(s);it2!=std::end(s);++it2) {\n                std::string str =\
    \ *it;\n                str.replace(str.begin(),str.end(),\"\");\n           \
    \     if(str.find(*it2)!=std::string::npos) {\n                    res.push_back(str);\n\
    \                }\n            }\n        }\n    }\n    return res;", "    int\
    \ n = s.find_first_not_of(\" \");\n    s = s.substr(0, n);\n    // Write your\
    \ code here", "\tstd::vector<std::string> v;\n\tfor(int i=0;i<s.length();i++){\n\
    \t\tint j = i;\n\t\twhile(j<s.length()){\n\t\t\tif(s[j] == ' ' || s[j] == '.'){\n\
    \t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(s[j] == 'o' || s[j] == 'u' || s[j] == 'e' ||\
    \ s[j] == 'i' || s[j] == 'a'){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\
    \tv.push_back(string(\"Hello world\")[j]);\n\t}\n\treturn v;", "    \n    std::unordered_set<std::string>\
    \ words;\n    std::vector<std::string> wordVec;\n    \n    while(s.size()) {\n\
    \        std::string temp = s;\n        std::replace(temp.begin(), temp.end(),\
    \ ' ', '0');\n        \n        // Remove space\n        temp = std::string(temp.begin(),\
    \ temp.end());\n        std::transform(temp.begin(), temp.end(), temp.begin(),\
    \ ::tolower);\n        \n        // Remove digits\n        std::transform(temp.begin(),\
    \ temp.end(), temp.begin(), ::tolower);\n        std::for_each(temp.begin(), temp.end(),\
    \ ::isdigit);\n        std::sort(temp.begin(), temp.end());\n        temp.resize(std::distance(temp.begin(),\
    \ temp.end()));\n        \n        // Find first n consecutive letters\n     \
    \   auto pos = 0;\n        for(; pos < temp.length(); ++pos) {\n            auto\
    \ ch = temp[pos];\n            \n            if(ch == ' ')\n                pos\
    \ = temp.length();\n            else if(ch == '0')\n                pos = temp.length();\n\
    \            else if(ch != ' ' && words.find(ch) == words.end()) {\n         \
    \       words.insert(ch);\n            }\n        }\n        \n        // Remove\
    \ first n letters\n        if(words.size() > n)\n            words.erase(words.begin(),\
    \ words.begin() + n);\n        \n        // Add remaining letters\n        while(words.size()\
    \ < n) {\n            std::string w = \"\\0\";\n            std::cin >> w;\n \
    \           \n            std::replace(w.begin(), w.end(), ' ', '0');\n      \
    \      \n            // Remove space\n            w = std::string(w.begin(), w.end());\n\
    \            std::transform(w.begin(), w.end(), w.begin(), ::tolower);\n     \
    \       \n            // Remove digits\n            std::transform(w.begin(),\
    \ w.end(), w.begin(), ::tolower);\n            std::for_each(w.begin(), w.end(),\
    \ ::isdigit);\n            std::sort(w.begin(), w.end());\n            w.resize(std::distance(w.begin(),\
    \ w.end()));\n            \n            words.insert(w);\n        }\n        \n\
    \        // Insert into vector\n        wordVec.push_back(std::move(words));\n\
    \    }\n    \n    return wordVec;", "    std::vector<std::string> ans;\n    \n\
    \    long cur = 0;\n    long curr = 0;\n    \n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == '.' || s[i] == ' ') {\n            if (s[i+1] ==\
    \ '.' || s[i+1] == ' ') {\n                curr++;\n            } else {\n   \
    \             curr = 0;\n            }\n            \n            if (curr ==\
    \ n) {\n                ans.push_back(s.substr(curr, i-curr));\n             \
    \   curr = 0;\n            }\n            \n            if (curr > 0) {\n    \
    \            ans.push_back(s.substr(curr, i-curr));\n                curr = 0;\n\
    \            }\n        } else if (s[i] != ' ') {\n            if (curr == 0)\
    \ {\n                ans.push_back(s.substr(curr, i-curr));\n                curr\
    \ = 0;\n            }\n            \n            if (curr > 0) {\n           \
    \     ans.push_back(s.substr(curr, i-curr));\n                curr = 0;\n    \
    \        }\n        }\n    }\n    \n    return ans;", "    assert(s.length() !=\
    \ 0);\n    std::vector<std::string> result;\n    // TODO: implement me\n    return\
    \ result;", "    std::sort(s.begin(), s.end());\n    std::vector<std::string>\
    \ ret;\n    size_t count = 0;\n    for (auto i : s) {\n        if (count < n)\
    \ {\n            ret.push_back(i);\n            count++;\n        }\n        if\
    \ (count == n)\n            break;\n    }\n    return ret;", "    std::vector<std::string>\
    \ words;\n    if (s.empty())\n        return words;\n    std::string temp;\n \
    \   for (auto i = s.begin(); i != s.end(); i++) {\n        if ((*i) != '-') {\n\
    \            words.push_back(i);\n        }\n    }\n    for (auto i = words.begin();\
    \ i != words.end(); i++) {\n        std::string str = *i;\n        if (str.size()\
    \ == 1) {\n            temp.push_back(str);\n            continue;\n        }\n\
    \        for (auto j = str.begin(); j != str.end(); ++j) {\n            if (j\
    \ != str.begin()) {\n                temp.push_back(*j);\n            }\n    \
    \    }\n    }\n    long len = 0;\n    for (auto i = temp.begin(); i != temp.end();\
    \ i++) {\n        if (len == n) {\n            words.push_back(str);\n       \
    \ }\n        len++;\n    }\n    return words;", "  std::vector<std::string> res;\n\
    \  // code goes here\n  return res;", "  std::vector<std::string> ans;\n  std::string\
    \ temp = \"\";\n  for (int i = 0; i < s.length(); i++) {\n    if (s.at(i) == '\
    \ ') {\n      temp.clear();\n      ans.push_back(temp);\n      temp.clear();\n\
    \      continue;\n    }\n    for (int j = 0; j < s.length(); j++) {\n      if\
    \ (s.at(j) == ' ') {\n        temp.clear();\n        ans.push_back(temp);\n  \
    \      temp.clear();\n        continue;\n      }\n      if (s.at(j) == s.at(i))\
    \ {\n        temp += s.at(j);\n      }\n      if (temp.size() == n) {\n      \
    \  ans.push_back(temp);\n        temp.clear();\n      }\n    }\n  }\n  if (temp.size()\
    \ > 0) {\n    ans.push_back(temp);\n  }\n  return ans;", "    if(s.empty()) return\
    \ {};\n    \n    std::vector<std::string> word_vec;\n    \n    if(n >= s.size())\
    \ {\n        for(auto &c: s) {\n            if((int)c == 'a' || (int)c == 'e'\
    \ || (int)c == 'i' || (int)c == 'o' || (int)c == 'u') {\n                word_vec.push_back(c);\n\
    \            }\n        }\n        return word_vec;\n    }\n    \n    for(auto\
    \ &c: s) {\n        if((int)c == 'a' || (int)c == 'e' || (int)c == 'i' || (int)c\
    \ == 'o' || (int)c == 'u') {\n            word_vec.push_back(c);\n        }\n\
    \    }\n    \n    for(auto &c: s) {\n        if((int)c == 'a' || (int)c == 'e'\
    \ || (int)c == 'i' || (int)c == 'o' || (int)c == 'u') {\n            word_vec.push_back(c);\n\
    \        }\n    }\n    \n    for(auto &c: s) {\n        if((int)c == 'a' || (int)c\
    \ == 'e' || (int)c == 'i' || (int)c == 'o' || (int)c == 'u') {\n            word_vec.push_back(c);\n\
    \        }\n    }\n    \n    for(auto &c: s) {\n        if((int)c == 'a' || (int)c\
    \ == 'e' || (int)c == 'i' || (int)c == 'o' || (int)c == 'u') {\n            word_vec.push_back(c);\n\
    \        }\n    }\n    \n    for(auto &c: s) {\n        if((int)c == 'a' || (int)c\
    \ == 'e' || (int)c == 'i' || (int)c == 'o' || (int)c == 'u') {\n            word_vec.push_back(c);\n\
    \        }\n    }\n    \n    return word_vec;", "    std::vector<std::string>\
    \ res;\n    \n    if(s.length() > 0) {\n        if(s.find(' ') != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n        \n        int count = 0;\n\
    \        for(char c: s) {\n            if(c == ' ') count++;\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                count--;\n\
    \            }\n            if(count == n) res.push_back(s);\n        }\n    }\n\
    \    \n    return res;", "    // Your code goes here\n    std::vector<std::string>\
    \ list;\n    std::string sub = \"\";\n    int count = 0;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        if (s[i] == ' ') {\n            count += 1;\n\
    \            list.push_back(sub);\n            sub = \"\";\n        } else {\n\
    \            sub += s[i];\n            if (count > n) {\n                list.push_back(sub);\n\
    \                count = 0;\n            }\n        }\n    }\n    if (sub != \"\
    \")\n        list.push_back(sub);\n    return list;", "    std::vector<std::string>\
    \ v;\n    if(s.empty())\n        return v;\n    for(auto &c : s)\n    {\n    \
    \    if(std::count(s.begin(), s.end(), c) == n)\n            v.emplace_back(std::to_string(c));\n\
    \    }\n    return v;", "    if (s.empty()) {\n        return {};\n    }\n   \
    \ std::vector<std::string> res;\n    if (n == 1) {\n        res.push_back(s);\n\
    \    } else {\n        std::vector<std::string> temp;\n        for (int i = 0;\
    \ i < s.size(); i++) {\n            for (int j = 0; j < i; j++) {\n          \
    \      if (s[j] == s[i]) {\n                    res.push_back(s);\n          \
    \      }\n            }\n        }\n    }\n    return res;", "  // Write your\
    \ code here\n  \n  return std::vector<std::string>{};", "  std::set<std::string>\
    \ set;\n  std::vector<std::string> res;\n  // implement here\n  return res;",
  "    // Write your code here\n    std::vector<std::string> v;\n    bool flag = true;\n\
    \    for(long i = 0; i < s.length(); i++) {\n        if(s[i] == '\\0' || flag\
    \ == true) {\n            v.emplace_back(\"\");\n            flag = false;\n \
    \           continue;\n        }\n        if((s[i] != ' ') && (s[i] != '\\0'))\
    \ {\n            flag = true;\n            v.emplace_back(s.substr(i, 1));\n \
    \       }\n    }\n    if(v.length() >= n) {\n        return v;\n    } else {\n\
    \        return {};\n    }", "  // code here\n  assert(s.size() != 0);\n  std::vector<std::string>\
    \ ans;\n  std::string tmp = s;\n  int nLen = n;\n  for(auto it=tmp.begin(); it!=tmp.end();\
    \ it++){\n    std::string word = \"\";\n    while(n != 0){\n      std::string\
    \ tmp2 = \"\";\n      while(nLen != 0){\n        tmp2 += *it;\n        if(*it\
    \ == ' '){\n          break;\n        }\n        ++it;\n        --nLen;\n    \
    \  }\n      if(tmp2 != \"\"){\n        word += tmp2;\n      }\n      --n;\n  \
    \    if(n == 0){\n        break;\n      }\n      ++it;\n      --nLen;\n    }\n\
    \    if(word != \"\"){\n      ans.push_back(word);\n    }\n  }\n  return ans;",
  "    std::vector<std::string> res;\n    if(s.empty()) {\n        return res;\n \
    \   }\n    unordered_set<char> vowels{'a','e','i','o','u'};\n    // if n is 0\
    \ then return empty list\n    if(n == 0) {\n        return res;\n    }\n    //\
    \ if n is 1 then return the first word\n    if(n == 1) {\n        auto begin =\
    \ s.begin();\n        while(begin != s.end()) {\n            if(vowels.find(*begin)\
    \ != vowels.end()) {\n                res.push_back((*begin));\n            }\n\
    \            begin++;\n        }\n        return res;\n    }\n    // for each\
    \ word in s remove all vowels and then add it to list res\n    for(auto word :\
    \ s) {\n        word = remove_vowels(word);\n        res.push_back(word);\n  \
    \  }\n    // return list res\n    return res;", "    // Your code here\n    std::vector<std::string>\
    \ res;\n    if(s.empty())\n        return res;\n    long count = 0;\n    for(auto\
    \ c : s)\n        for(char x : {'a','e','i','o','u','A','E','I','O','U'})\n  \
    \      {\n            if(c==x)\n            {\n                count++;\n    \
    \            if(count==n)\n                {\n                    res.push_back(c);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ return res;", "  // your code goes here\n  if(s.length()==0)\n    return std::vector<std::string>();\n\
    \  std::string temp=s.substr(0,s.length()-n+1);\n  std::vector<std::string> words;\n\
    \  for(auto &i: temp)\n  {\n    if(std::count(i.begin(),i.end(),'a')>0 || std::count(i.begin(),i.end(),'e')>0\
    \ || std::count(i.begin(),i.end(),'i')>0 || std::count(i.begin(),i.end(),'o')>0\
    \ || std::count(i.begin(),i.end(),'u')>0)\n    {\n        words.push_back(i);\n\
    \    }\n  }\n  return words;", "    std::set<std::string> words;\n    for (auto\
    \ &c : s)\n        if (c == ' ' || c == '.' || c == '!' || c == '?' || c == '('\
    \ || c == ')' || c == ':' || c == '-' || c == '=' || c == ' ' || c == ',' || c\
    \ == '<' || c == '>' || c == '/' || c == '\\\\' || c == '_' || c == '@' || c ==\
    \ '#' || c == '$' || c == '%' || c == '&' || c == '|' || c == '~' || c == '^'\
    \ || c == '~' || c == '_' || c == '*' || c == '+' || c == '=' || c == '&' || c\
    \ == '%' || c == '|' || c == '?' || c == '#' || c == '$' || c == '<' || c == '>'\
    \ || c == '(' || c == ')' || c == '!' || c == '.' || c == '?' || c == '-' || c\
    \ == '/' || c == '\\\\' || c == '_' || c == '@' || c == '#' || c == '$' || c ==\
    \ '%' || c == '&' || c == '|' || c == '~' || c == '^' || c == '~' || c == '_'\
    \ || c == '*' || c == '+' || c == '=' || c == '&' || c == '%' || c == '|' || c\
    \ == '?' || c == '#' || c == '$' || c == '<' || c == '>' || c == '(' || c == ')'\
    \ || c == '!' || c == '.' || c == '?' || c == '-' || c == '/' || c == '\\\\' ||\
    \ c == '_' || c == '@' || c == '#' || c == '$' || c == '%' || c == '&' || c ==\
    \ '|' || c == '~' || c == '^' || c == '~' || c == '_' || c == '*' || c == '+'\
    \ || c == '=' || c == '&' || c == '%' || c == '|' || c == '?' || c == '#' || c\
    \ == '$' || c == '<' || c == '>' || c == '(' || c == ')' || c == '!' || c == '.'\
    \ || c == '?' || c == '-' || c == '/' || c == '\\\\' || c == '_' || c == '@' ||\
    \ c == '#' || c == '$' || c == '%' || c == '&' || c == '|' || c == '~' || c ==\
    \ '^' || c == '~' || c == '_' || c == '*' || c == '+' || c == '=' || c == '&'\
    \ || c == '%' || c == '|' || c == '?' || c == '#' || c == '$' || c == '<", " \
    \   if (s.empty()) {\n        return {};\n    }\n    // TODO", "  std::vector<std::string>\
    \ res;\n  long start = 0;\n  long pos = 0;\n  while(pos != std::string::npos)\
    \ {\n    pos = s.find(\" \", start);\n    if(pos != std::string::npos) {\n   \
    \   res.push_back(s.substr(start, pos-start));\n    }\n    pos = s.find(\"a\"\
    , pos);\n    if(pos != std::string::npos) {\n      res.push_back(s.substr(pos,\
    \ pos-pos));\n      res.push_back(s.substr(pos, pos-pos));\n    }\n    pos = s.find(\"\
    b\", pos);\n    if(pos != std::string::npos) {\n      res.push_back(s.substr(pos,\
    \ pos-pos));\n    }\n    pos = s.find(\"c\", pos);\n    if(pos != std::string::npos)\
    \ {\n      res.push_back(s.substr(pos, pos-pos));\n    }\n    pos = s.find(\"\
    d\", pos);\n    if(pos != std::string::npos) {\n      res.push_back(s.substr(pos,\
    \ pos-pos));\n    }\n    pos = s.find(\"e\", pos);\n    if(pos != std::string::npos)\
    \ {\n      res.push_back(s.substr(pos, pos-pos));\n    }\n    pos = s.find(\"\
    f\", pos);\n    if(pos != std::string::npos) {\n      res.push_back(s.substr(pos,\
    \ pos-pos));\n    }\n    pos = s.find(\"g\", pos);\n    if(pos != std::string::npos)\
    \ {\n      res.push_back(s.substr(pos, pos-pos));\n    }\n    pos = s.find(\"\
    h\", pos);\n    if(pos != std::string::npos) {\n      res.push_back(s.substr(pos,\
    \ pos-pos));\n    }\n    pos = s.find(\"i\", pos);\n    if(pos != std::string::npos)\
    \ {\n      res.push_back(s.substr(pos, pos-pos));\n    }\n    pos = s.find(\"\
    j\", pos);\n    if(pos != std::string::npos) {\n      res.push_back(s.substr(pos,\
    \ pos-pos));\n    }\n    pos = s.find(\"k\", pos);\n    if(pos != std::string::npos)\
    \ {\n      res.push_back(s.substr(pos, pos-pos));\n    }\n    pos = s.find(\"\
    l\", pos);\n    if(pos != std::string::npos) {\n      res.push_back(s.substr(pos,\
    \ pos-pos));\n    }\n    pos = s.find(\"m\", pos);\n    if(pos != std::string::npos)\
    \ {\n      res.push_back(s.substr(pos, pos-pos));\n    }\n    pos = s.find(\"\
    n\", pos);\n    if(pos != std::string::npos) {\n      res.push_back(s.substr(pos,\
    \ pos-pos));\n    }\n    pos = s.find(\"o\", pos);\n    if(pos != std::string::",
  '    // code here', "  std::vector<std::string> res;\n  if (s.empty())\n    return\
    \ res;\n  \n  \n  // use map to store all unique words with certain number of\
    \ consonants\n  unordered_set<string> unique_words{ s.size()};\n  for (auto &word\
    \ : unique_words)\n    unique_words.insert(word);\n\n  unordered_set<string> unique_words_with_given_n;\n\
    \  // for each unique word, check if it contains n consonants\n  for (auto &word\
    \ : unique_words)\n    if (word.size() >= n)\n      unique_words_with_given_n.insert(word);\n\
    \  \n  \n  // for each unique word with n consonants, keep only those words\n\
    \  for (auto &word : unique_words_with_given_n) {\n    // remove all words that\
    \ have same prefix with new word\n    // for example, for input \"uncle sam\"\
    , we only want to keep \"uncle\"\n    bool same = true;\n    while (same && s.size()\
    \ > word.size())\n      same = s.substr(0, word.size()).compare(0, word.size(),\
    \ word) == 0;\n    if (same)\n      res.push_back(word);\n  }\n  return res;",
  "  std::vector<std::string> v;\n  if (s.empty()) {\n    return v;\n  }\n  v.push_back(s);\n\
    \  bool flag = false;\n  for (auto &i : v) {\n    flag = false;\n    for (auto\
    \ &j : i) {\n      if (j != ' ') {\n        flag = true;\n        break;\n   \
    \   }\n    }\n    if (flag == true) {\n      if (i.size() < n) {\n        v.erase(std::remove(i.begin(),\
    \ i.end(), ' '), i.end());\n      } else {\n        v.push_back(i);\n      }\n\
    \    }\n  }\n  return v;", "    std::vector<std::string> result;\n    if(s.empty())\
    \ {\n        return result;\n    }\n    unordered_map<char, int> char_count;\n\
    \    \n    for (char c : s) {\n        ++char_count[c];\n    }\n\n    std::vector<char>\
    \ sorted_chars;\n    \n    for (auto it  = char_count.begin(); it != char_count.end();\
    \ it++) {\n        if (it->second == n) {\n            sorted_chars.push_back(it->first);\n\
    \        }\n    }\n\n    result.push_back(std::string(sorted_chars.begin(), sorted_chars.end()));\n\
    \    return result;", "    int n = s.length();\n    if(n == 0){\n        return\
    \ {};\n    }\n    auto start = s.begin();\n    auto end = s.end();\n    std::stack<std::string>\
    \ s;\n    std::string word;\n    while(start < end && n != 0){\n        std::string\
    \ word_temp = s.top();\n        s.pop();\n        if(word_temp.size()==n){\n \
    \           s.push(word_temp);\n            word+=word_temp;\n            n--;\n\
    \        }\n        else{\n            if(!s.empty()){\n                s.top()+=word_temp;\n\
    \            }\n            start = std::search(start, end,word_temp.begin(),\
    \ word_temp.end(), [](char c1, char c2) {\n                return std::toupper(c1)\
    \ == std::toupper(c2);\n            });\n        }\n    }\n    return s.empty()\
    \ ? {} : std::vector<std::string>{ word };", "\tstd::vector<std::string> v;\n\t\
    assert(!s.empty()); // the question does not require empty words\n\tv.push_back(s);\
    \ // the first word is already in the list\n\tif (s.size() <= n) {\n\t\treturn\
    \ v;\n\t}\n\tlong count[n + 1] = {0};\n\t\n\tfor (long i = 0; i < s.size(); i++)\
    \ {\n\t\tcount[s[i] - 'a']++;\n\t}\n\tfor (long i = 0; i <= 'z'; i++) {\n\t\t\
    if (count[i] > n) {\n\t\t\tv.push_back(\"\"); // too much words\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\tfor (long i = 'a'; i <= 'z'; i++) {\n\t\tif (count[i] > n) {\n\t\
    \t\tv.push_back(\"\"); // too much words\n\t\t\tbreak;\n\t\t}\n\t}\n\tv.erase(v.end()\
    \ - n + 1, v.end()); // drop the words we don't need\n\t\n\treturn v;", "   std::vector<std::string>\
    \ s;\n   if(s.empty())\n      return s;\n   std::unordered_set<char> h;\n   for(auto\
    \ &x:s)\n      h.insert(x);\n   std::unordered_set<std::string> v;\n   for(auto\
    \ &x:s)\n      if(h.find(x) != h.end())\n         v.emplace_back(x);\n   v.erase(v.begin());\n\
    \   long count = 0;\n   for(auto &x:v)\n      if(x.size()==n)\n         count++;\n\
    \   std::vector<std::string> ret;\n   while(count != n && v.size() > 0)\n   {\n\
    \      ret.emplace_back(v.pop_back());\n      count++;\n   }\n   return ret;",
  "  std::vector<std::string> v;\n  v.push_back(s);\n  return v;", "  // write your\
    \ code here\n  std::vector<std::string> ret;\n  std::string temp = \"\";\n  std::map<char,std::string>::iterator\
    \ it;\n  for (it = s.begin(); it!=s.end(); ++it) {\n    if(isalnum(*it)){\n  \
    \    temp = temp+*it;\n    }\n  }\n  for(unsigned int i=0; i<temp.size(); ++i){\n\
    \    if(temp.at(i)=='a'){\n      temp[i]='A';\n    }\n    if(temp.at(i)=='e'){\n\
    \      temp[i]='E';\n    }\n    if(temp.at(i)=='i'){\n      temp[i]='I';\n   \
    \ }\n    if(temp.at(i)=='o'){\n      temp[i]='O';\n    }\n    if(temp.at(i)=='u'){\n\
    \      temp[i]='U';\n    }\n    if(temp.at(i)=='y'){\n      temp[i]='Y';\n   \
    \ }\n    if(temp.at(i)=='u'){\n      temp[i]='U';\n    }\n    if(temp.at(i)=='o'){\n\
    \      temp[i]='O';\n    }\n    if(temp.at(i)=='i'){\n      temp[i]='I';\n   \
    \ }\n    if(temp.at(i)=='a'){\n      temp[i]='A';\n    }\n    if(temp.at(i)=='a'){\n\
    \      temp[i]='a';\n    }\n    if(temp.at(i)=='a'){\n      temp[i]='a';\n   \
    \ }\n    if(temp.at(i)=='a'){\n      temp[i]='a';\n    }\n    if(temp.at(i)=='a'){\n\
    \      temp[i]='a';\n    }\n  }\n  if(temp==\"\"){\n    return ret;\n  }\n  if(temp.size()<n){\n\
    \    ret.push_back(temp);\n  }\n  else{\n    while(temp.size()>n){\n      temp=temp.substr(0,temp.size()-n);\n\
    \      ret.push_back(temp);\n    }\n  }\n  return ret;", "    if(s.empty()) \n\
    \        return {};\n\n    std::string words = \"\";\n    for(auto &c: s) {\n\
    \        if(isalpha(c)) \n            words += c;\n    }\n    \n    std::vector<std::string>\
    \ res;\n    for(auto &c: words) {\n        if(std::count(words.begin(), words.end(),\
    \ c) == n)\n            res.push_back(words);\n        \n        words += c;\n\
    \    }\n    \n    return res;", "    std::vector<std::string> v;\n    if (s.empty())\
    \ return v;\n\n    v.push_back(s);\n    std::string ss = s;\n    for (auto i =\
    \ 0; i < n; i++)\n    {\n        ss += s[i];\n        for (auto j = i; j < ss.size();\
    \ j++)\n        {\n            if (ss.at(j) == ' ' || ss.at(j) == ',' || ss.at(j)\
    \ == '.' || ss.at(j) == '?' || ss.at(j) == '!' || ss.at(j) == '@' || ss.at(j)\
    \ == '#' || ss.at(j) == '$' || ss.at(j) == '%' || ss.at(j) == '^' || ss.at(j)\
    \ == '&' || ss.at(j) == '*' || ss.at(j) == '(' || ss.at(j) == ')' || ss.at(j)\
    \ == '-' || ss.at(j) == '_' || ss.at(j) == '[' || ss.at(j) == ']' || ss.at(j)\
    \ == '|' || ss.at(j) == '{' || ss.at(j) == '}' || ss.at(j) == '~')\n         \
    \   {\n                v.push_back(ss.substr(i, j + 1));\n                break;\n\
    \            }\n        }\n    }\n    return v;", "    if (s.size() < 1) return\
    \ {};\n    std::vector<std::string> res;\n    if (n == 1)\n        for (size_t\
    \ i = 0; i != s.size(); ++i)\n            if (s[i] != 'z' && (s[i] != 'Z' && s[i]\
    \ != 'Y' && s[i] != 'y'))\n                res.push_back(s.substr(i, 1));\n  \
    \  else\n        for (size_t i = 0; i != s.size(); ++i) {\n            long flag\
    \ = 0;\n            int l = 0;\n            while (l < n) {\n                if\
    \ ((s[i] == 'z' && s[l + 1] == 'z') || (s[i] == 'Z' && s[l + 1] == 'Z') || (s[i]\
    \ == 'y' && s[l + 1] == 'y') || (s[i] == 'Y' && s[l + 1] == 'Y'))\n          \
    \          flag++;\n                else if (!(s[i] == 'z' && s[l + 1] == 'y')\
    \ && !(s[i] == 'Z' && s[l + 1] == 'y') && !(s[i] == 'y' && s[l + 1] == 'z') &&\
    \ !(s[i] == 'Y' && s[l + 1] == 'z'))\n                    break;\n           \
    \     l++;\n            }\n            if (flag == n)\n                res.push_back(s.substr(i,\
    \ 1));\n        }\n    return res;", "    std::sort(s.begin(), s.end()); //sort\
    \ characters by alphabetic order\n    std::vector<std::string> v;\n    if(s.size()\
    \ == 0){\n        return v;\n    }\n    for(auto c: s){\n        if(c == 'a'||\
    \ c == 'e'|| c == 'i'|| c == 'o'|| c == 'u'){\n            continue;\n       \
    \ }\n        std::size_t count = 0;\n        std::string currentWord;\n      \
    \  for(auto w: s){\n            if(w == c){\n                count++;\n      \
    \      }\n        }\n        if(count > n){\n            currentWord = std::to_string(c);\n\
    \        }\n        v.push_back(currentWord);\n    }\n    return v;", "  // code\
    \ here\n  ", "    std::vector<std::string> res;\n    int pos = 0;\n    bool flag\
    \ = false;\n    while((pos = s.find(\"  \", pos)) != std::string::npos){\n   \
    \     flag = true;\n        res.push_back(s.substr(0, pos+2));\n        s = s.substr(pos+2);\n\
    \        pos = 0;\n    }\n    if (s.empty())\n        return res;\n    // find\
    \ the first occurrence of n\n    while((pos = s.find(\" \")) != std::string::npos){\n\
    \        if (s.substr(pos+1, n).find(n) != std::string::npos){\n            flag\
    \ = true;\n            res.push_back(s.substr(0, pos+1));\n            s = s.substr(pos+1);\n\
    \        } else {\n            break;\n        }\n        pos = 0;\n    }\n  \
    \  if (flag)\n        res.push_back(s);\n    return res;", "    std::vector<std::string>\
    \ res;\n    if(s.empty()) return res;\n    \n    \n    for (std::size_t i = 0;\
    \ i != s.length(); ++i) {\n        if(s[i] == 'z' || s[i] == 'Z') {\n        \
    \    std::size_t end = i + 1;\n            while(end != s.length() && (s[end]\
    \ >= 'A' && s[end] <= 'Z')) {\n                ++end;\n            }\n       \
    \     while(i != end && end != s.length() && (s[end] >= 'a' && s[end] <= 'z'))\
    \ {\n                res.push_back(s.substr(i, end - i));\n                i =\
    \ end + 1;\n            }\n        }\n    }\n    return res;", "    // write your\
    \ code here\n    std::vector<std::string> v;\n    for(unsigned int i=0;i<s.size();i++){\n\
    \        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u' || s[i]=='\
    \ ')\n        {\n            v.push_back(s.substr(i,1));\n            v.push_back(s.substr(i+1,1));\n\
    \            i+=1;\n        }\n    }\n    \n    return v;", "    // Write your\
    \ code here\n    std::vector<std::string> ans;\n    if(s.empty()) return ans;\n\
    \    long sz = s.size();\n    vector<string> v;\n    for(long i=0; i<sz; ++i){\n\
    \        string str = s.substr(i, 1);\n        for(long j=0; j<str.length(); ++j){\n\
    \            if(str[j] != 'a' && str[j] != 'e' && str[j] != 'i' && str[j] != 'o'\
    \ && str[j] != 'u'){\n                v.push_back(str);\n                break;\n\
    \            }\n        }\n    }\n    sort(v.begin(), v.end());\n    for(long\
    \ i=0; i<v.size(); ++i){\n        if(n == v[i].size()){\n            ans.push_back(v[i]);\n\
    \        }\n    }\n    return ans;", "    // Write your code here\n    std::vector<std::string>\
    \ res;\n    std::string temp;\n    int i, j, k;\n    for (i = 0; i < s.length();\
    \ i++)\n    {\n        for (j = 0; j < s.length(); j++)\n        {\n         \
    \   for (k = 0; k < s.length(); k++)\n            {\n                if (s[j]\
    \ == s[k])\n                {\n                    temp = temp + \" \" + s.substr(i,\
    \ j);\n                    res.push_back(temp);\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return res;", "    if(s.empty())\
    \ return {};\n    \n    std::vector<std::string> results;\n    auto it = s.begin(),\
    \ itEnd = s.end(), itEnd = std::find_if(it, itEnd, is_vowel);\n    auto itEnd\
    \ = s.end(), itEnd = std::find_if(itEnd, itEnd, is_consonant);\n    \n    while(it!=itEnd){\n\
    \        if(std::count(it, itEnd, is_consonant) == n)\n        results.emplace_back(std::string(it,\
    \ itEnd));\n        it++;\n        itEnd = std::find_if(it, itEnd, is_vowel);\n\
    \        itEnd = s.end(), itEnd = std::find_if(itEnd, itEnd, is_consonant);\n\
    \    }\n    return results;", "  // your code here\n  std::ifstream in(s);\n \
    \ std::string word;\n  std::vector<std::string> v;\n  while (std::getline(in,\
    \ word, ' ')) {\n    for (auto c : word) {\n      if (std::isalpha(c)) {\n   \
    \     if (c == ' ')\n          v.push_back(word);\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n          if (v.size() == 0)\n \
    \           v.push_back(word);\n          if (v.size() >= n)\n            v.push_back(word);\n\
    \        }\n      }\n    }\n  }\n  return v;", "  std::map<char, std::pair<int,\
    \ int>> m;\n  for (char c: s) {\n    m[c] = { 1, 0 };\n  }\n  \n  std::string\
    \ word = \"\";\n  \n  for (char c: s) {\n    if (m[c].first > n) continue;\n \
    \   \n    if (m[c].first == n) word += c;\n    \n    m[c].first -= 1;\n    m[c].second\
    \ = 1;\n  }\n  return { word };", "    // code here\n    std::unordered_set<char>\
    \ vowels;\n    std::string word = \"\";\n    if (s.empty()) return {};\n    for\
    \ (char ch : s) {\n        if (vowels.count(ch)) {\n            word += ch;\n\
    \        } else {\n            word += \" \";\n        }\n    }\n    return {};",
  "    \n    // code here\n    \n    return 0;", "    std::vector<std::string> words;\n\
    \    auto it = s.begin(), end = s.end();\n    \n    while (it != end) {\n    \
    \    if (*it == 'a')\n            words.push_back(*it);\n        if (*it == 'e')\n\
    \            words.push_back(*it);\n        if (*it == 'i')\n            words.push_back(*it);\n\
    \        if (*it == 'o')\n            words.push_back(*it);\n        if (*it ==\
    \ 'u')\n            words.push_back(*it);\n        if (*it == 'A')\n         \
    \   words.push_back(*it);\n        if (*it == 'E')\n            words.push_back(*it);\n\
    \        if (*it == 'I')\n            words.push_back(*it);\n        if (*it ==\
    \ 'O')\n            words.push_back(*it);\n        if (*it == 'U')\n         \
    \   words.push_back(*it);\n        it++;\n    }\n    return words;", "    std::vector<std::string>\
    \ words;\n    std::string vowels = \"aeiou\";\n    std::string consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n    if (s == \"\") {\n        return words;\n    }\n\
    \    for (auto it = s.begin(); it != s.end(); ++it) {\n        if (vowels.find(*it)\
    \ != -1) {\n            if (words.empty()) {\n                words.push_back(*it);\n\
    \            }\n            if (n == words.back().size()) {\n                words.push_back(*it);\n\
    \            }\n        }\n        if (consonants.find(*it) != -1) {\n       \
    \     if (words.empty()) {\n                words.push_back(*it);\n          \
    \  }\n            if (n == words.back().size()) {\n                words.push_back(*it);\n\
    \            }\n        }\n    }\n    return words;", "    std::vector<std::string>\
    \ res;\n    long curr = 0;\n    if (s.empty())\n        return res;\n    std::vector<std::string>\
    \ v;\n    for (int i = 0; i <= s.size(); i++) {\n        if (s[i] == ' ')\n  \
    \          v.push_back(s);\n        else {\n            v.push_back(s.substr(curr,\
    \ i - curr));\n            v.push_back(s.substr(i, 1));\n            curr = i\
    \ + 1;\n        }\n        if (v.size() >= n) {\n            std::sort(v.begin(),\
    \ v.end());\n            v.erase(std::unique(v.begin(), v.end()), v.end());\n\
    \            res.push_back(std::string(v.begin(), v.end()));\n        }\n    }\n\
    \    return res;", "  std::vector<std::string> v;\n  if (s == \"\") {\n    return\
    \ v;\n  }\n  v.push_back(\"\"); // initialize an empty string\n  if (n > 0) {\n\
    \    // split on space and consonants \n    auto words = s.split(\" \");\n   \
    \ \n    for (auto &w : words) {\n      // remove consonants from word\n      auto\
    \ s = w.to_lower();\n      for (auto &i : s) {\n        if (i != 'a' && i != 'e'\
    \ && i != 'i' && i != 'o' && i != 'u') {\n          w.erase(i);\n        }\n \
    \     }\n      if (w == \"\") {\n        continue;\n      }\n      \n      //\
    \ remove duplicate word\n      if (find(v.begin(), v.end(), w) == v.end()) {\n\
    \        v.push_back(w);\n      }\n    }\n  }\n  return v;", "    if(s.length()\
    \ == 0) return {};\n    std::vector<std::string> res;\n    res.push_back(\"empty\"\
    );\n    for(long i = 0; i < s.length(); i++)\n    {\n        if(s[i] == \" \"\
    \ && i == s.length()-1)\n        {\n            res.push_back(\"space\");\n  \
    \      }\n        else\n        {\n            if(i+1 == s.length())\n       \
    \     {\n                if((s[i] == s[0]) || (s[i] == s[s.length()-1]))\n   \
    \             {\n                    res.push_back(s[i]);\n                }\n\
    \            }\n            else\n            {\n                if((s[i] == s[0])\
    \ || (s[i] == s[s.length()-1]) || (s[i] == s[i+1]))\n                {\n     \
    \               res.push_back(s[i]);\n                }\n            }\n     \
    \   }\n    }\n    return res;", "  std::vector<std::string> res;\n  assert(!s.empty());\n\
    \  if (n <= 0)\n    return res;\n  \n  std::string word = \"\";\n  for(int i =\
    \ 0; i<s.size(); i++){\n    if(s.at(i) == ' ' || s.at(i) == '\\0') {\n      if(word\
    \ != \"\") {\n        res.push_back(word);\n        word = \"\";\n      }\n  \
    \  }\n    else{\n      word += s.at(i);\n    }\n  }\n\n  return res;"]
stop_tokens:
- "\n}"
