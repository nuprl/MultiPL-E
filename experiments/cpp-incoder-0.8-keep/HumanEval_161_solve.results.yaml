language: cpp
name: HumanEval_161_solve
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  assert(s.size() > 0 && \"The\
    \ string should have atleast one character in it\");\n  \n  for(int i = 0; i<\
    \ s.size(); i++) {\n    if(!std::isalpha(s[i])) {\n      s[i] = toupper(s[i]);\n\
    \    }\n  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp6nyll1qn: /tmp/tmp6nyll1qn.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ans = s;\n   \
    \ for(int i = 0; i < ans.size(); ++i){\n        if(ans[i] >= 'a' && ans[i] <=\
    \ 'z'){\n            ans[i] = ans[i] - 'a' + 'A';\n        }else if(ans[i] >=\
    \ 'A' && ans[i] <= 'Z'){\n            ans[i] = ans[i] - 'A' + 'a';\n        }else{\n\
    \            ans[i] = ans[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpcvmrytk9: /tmp/tmpcvmrytk9.cpp:28: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    int\
    \ i = 0;\n    int j;\n    for (j = n-1; j >= 0 ; j--, i++) {\n        // if s[i]\
    \ is a letter, reverse its case from lower to upper or vise versa, \n        //\
    \ otherwise keep it as it is.\n        if (s[i] >= 'a' && s[i] <= 'z') {\n   \
    \         s[i] += 32 - 'a';\n        }\n        else{\n            s[i] = s[i];\n\
    \        }\n    }\n    std::string ans;\n    ans = s;\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpt7nfooj5: /tmp/tmpt7nfooj5.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::reverse(s.begin(), s.end());\n\
    \    std::string result = \"\";\n    for (auto i : s) result += i;\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp7iv3l6kk: /tmp/tmp7iv3l6kk.cpp:20: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::map<char, int> m;\n \
    \   for (auto i : s) {\n        m[i] = m[std::tolower(i)];\n        if (m[std::tolower(i)]\
    \ == 0) {\n            m[std::tolower(i)] = i;\n        }\n    }\n    std::string\
    \ answer;\n    for (auto i : s) {\n        answer[m.at(i)] = i;\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmprp9s2hy2: /tmp/tmprp9s2hy2.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  assert(s.size() != 0);\n  \n\
    \  std::string result = s;\n  for (int i = 0; i < s.size();++i){\n    if(std::isalpha(s[i])\
    \ || s[i] == '_'){\n      s[i] = std::toupper(s[i]);\n      result = std::string(s.begin()+i,\
    \ s.begin()+i+1) + result;\n      s[i] = std::tolower(s[i]);\n    }\n    else\
    \ result = std::string(s.begin()+i, s.begin()+i+1) + result;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp7u3_ckyl: /tmp/tmp7u3_ckyl.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(s.size() > 0);\n  \
    \  int len = s.size();\n    std::string res = \"\";\n    for (int i = 0; i < len;\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n            s[i] = s[i] -\
    \ 32;\n        } else if (s[i] == 'b' || s[i] == 'B') {\n            s[i] = s[i]\
    \ - 33;\n        } else if (s[i] == 'c' || s[i] == 'C') {\n            s[i] =\
    \ s[i] - 32;\n        }\n        res += s[i];\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpwbuerjp_: /tmp/tmpwbuerjp_.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\"\
    ;\n    for (int i=0; i<s.length(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        std::string lower = tolower(s[i]);\n            std::string upper = toupper(lower);\n\
    \            result += upper;\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprjnmana2.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmprjnmana2.cpp:16:40: error: conversion from \u2018int\u2019 to non-scalar\
    \ type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } requested\n   16 |             std::string lower = tolower(s[i]);\n      | \
    \                                ~~~~~~~^~~~~~\n/tmp/tmprjnmana2.cpp:17:46: error:\
    \ no matching function for call to \u2018toupper(std::string&)\u2019\n   17 |\
    \             std::string upper = toupper(lower);\n      |                   \
    \                           ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmprjnmana2.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmprjnmana2.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmprjnmana2.cpp:17:46: note:   candidate expects 2 arguments,\
    \ 1 provided\n   17 |             std::string upper = toupper(lower);\n      |\
    \                                              ^\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    int n = s.size();\n    std::string ans = s;\n    for(int i = 0; i < n; i++)\n\
    \    {\n        // Check for letter, make it lower case or upper case\n      \
    \  if(s[i] == '#')\n        {\n            std::string temp = ans[i];\n      \
    \      ans[i] = temp[0];\n            ans[i + 1] = temp[1];\n            ans[i\
    \ + 2] = temp[2];\n            ans[i + 3] = temp[3];\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn07bu9w5.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpn07bu9w5.cpp:21:37: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   21 |      \
    \       std::string temp = ans[i];\n      |                                  \
    \   ^\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.empty()) return s;\n\
    \    std::string new_s = s.substr(0, 1);\n    std::transform(s.begin(), s.end(),\
    \ s.begin(), ::toupper);\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n\
    \    std::string res = new_s;\n    std::transform(s.begin(), s.end(), s.begin(),\
    \ ::toupper);\n    std::string new_s2 = new_s + new_s;\n    std::transform(new_s2.begin(),\
    \ new_s2.end(), new_s2.begin(), ::tolower);\n    std::transform(new_s2.begin(),\
    \ new_s2.end(), new_s2.begin(), ::toupper);\n    return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpa6ln1qje: /tmp/tmpa6ln1qje.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  // code here\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  for (int i = 0; i < len; ++i) {\n        if (isalpha(s[i])) {\n           \
    \ if (isupper(s[i])) s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n\
    \        }\n        else s[i] = s[i];\n    }\n    std::string ret = \"\";\n  \
    \  int len = s.length();\n    for (int i = 0; i < len; ++i) {\n        ret +=\
    \ s[i];\n    }\n    return ret;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8819zmu4.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp8819zmu4.cpp:22:9: error: redeclaration of \u2018int len\u2019\n  \
    \ 22 |     int len = s.length();\n      |         ^~~\n/tmp/tmp8819zmu4.cpp:13:9:\
    \ note: \u2018int len\u2019 previously declared here\n   13 |     int len = s.length();\n\
    \      |         ^~~\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::unordered_map<char, int>\
    \ counts;\n    std::string ans;\n    for (char ch : s) {\n        if (counts[ch]\
    \ == 0) {\n            counts[ch] = 1;\n        } else {\n            counts[ch]++;\n\
    \        }\n    }\n    for (char ch : s) {\n        if (counts[ch] > 0) {\n  \
    \          if (ch == toupper(ch)) {\n                ans = ans + ch;\n       \
    \     } else if (ch == tolower(ch)) {\n                ans = ans + ch;\n     \
    \       }\n        }\n    }\n    if (ans == \"\") {\n        for (char ch : s)\
    \ {\n            ans = ans + ch;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpbkw55jet: /tmp/tmpbkw55jet.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(auto &c: s){\n       \
    \ switch(c){\n        case 'A':\n            c = 'a';\n            break;\n  \
    \      case 'a':\n            c = 'A';\n            break;\n        case '#':\n\
    \            c = 'a';\n            break;\n        case '@':\n            c =\
    \ '#';\n            break;\n        default:\n            c = c;\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp1txo46_r: /tmp/tmp1txo46_r.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(s.at(i) >= 'a' && s.at(i) <= 'z') {\n            s.at(i)\
    \ = s.at(i) - 32;\n        }\n    }\n    for(int i = 0; i < s.length(); i++) {\n\
    \        if(s.at(i) >= 'A' && s.at(i) <= 'Z') {\n            s.at(i) = s.at(i)\
    \ + 32;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpxqylwhh5: /tmp/tmpxqylwhh5.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int flag=0;\n    int count1=0;\n\
    \    for(int i=0;i<s.length();i++){\n        if(s[i]==97){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==98){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==99){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==123){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==65){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==66){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==67){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==68){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==69){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==70){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==71){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==72){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==73){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n        else if(s[i]==74){\n            if(count1==0){\n\
    \                flag=1;\n                count1=i;\n            }\n         \
    \   count1=count1+1;\n        }\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0wcji_ir.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp0wcji_ir.cpp:115:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  115 | int main() {\n      |            ^\n/tmp/tmp0wcji_ir.cpp:125:1:\
    \ error: expected \u2018}\u2019 at end of input\n  125 | }\n      | ^\n/tmp/tmp0wcji_ir.cpp:12:34:\
    \ note: to match this \u2018{\u2019\n   12 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmp0wcji_ir.cpp:125:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  125 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    size_t size = s.size();\n\
    \    if (size <= 0)\n        return s;\n    if (s[0] == '#')\n        return s;\n\
    \    std::string ans = s;\n    for(size_t i=1; i<size; ++i) {\n        if (ans[i]\
    \ == s[0]) ans[i] = tolower(ans[i]);\n        if (ans[i] == toupper(s[0])) ans[i]\
    \ = tolower(ans[i]);\n        if (ans[i] == tolower(s[0])) ans[i] = toupper(ans[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpofm0l2sx: /tmp/tmpofm0l2sx.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i]))\n            s[i] = toupper(s[i]);\n     \
    \   else\n            s[i] = tolower(s[i]);\n    }\n    \n    for(int i = 0; i\
    \ < s.size(); i++) {\n        if(s[i] == '#') \n            s[i] = '@';\n    }\n\
    \    \n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == '@') \n   \
    \         s[i] = '#';\n    }\n    \n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpcz07dd7d: /tmp/tmpcz07dd7d.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::reverse((s.begin()),(s.end()));\n\
    \  std::string r;\n  bool flag = true;\n  for (int i=0;i<s.size();i++) {\n   \
    \ if (s[i] == '#') {\n      if (flag) {\n        r = r.concat(s[i]);\n      }\n\
    \      else {\n        r = r.concat(s[i]);\n      }\n      flag = !flag;\n   \
    \ }\n    else {\n      if (flag) {\n        r = r.concat(s[i]);\n      }\n   \
    \   else {\n        r = r.concat(s[i]);\n      }\n    }\n  }\n  if (r == s) {\n\
    \    return s;\n  }\n  else {\n    return r;\n  }\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpghf6tzka.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpghf6tzka.cpp:19:15: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018concat\u2019\
    \n   19 |         r = r.concat(s[i]);\n      |               ^~~~~~\n/tmp/tmpghf6tzka.cpp:22:15:\
    \ error: \u2018std::string\u2019 {aka \u2018class std::__cxx11::basic_string<char>\u2019\
    } has no member named \u2018concat\u2019\n   22 |         r = r.concat(s[i]);\n\
    \      |               ^~~~~~\n/tmp/tmpghf6tzka.cpp:28:15: error: \u2018std::string\u2019\
    \ {aka \u2018class std::__cxx11::basic_string<char>\u2019} has no member named\
    \ \u2018concat\u2019\n   28 |         r = r.concat(s[i]);\n      |           \
    \    ^~~~~~\n/tmp/tmpghf6tzka.cpp:31:15: error: \u2018std::string\u2019 {aka \u2018\
    class std::__cxx11::basic_string<char>\u2019} has no member named \u2018concat\u2019\
    \n   31 |         r = r.concat(s[i]);\n      |               ^~~~~~\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // Write your code here\n\
    \    // Solve the problem\n    for(auto &i : s)\n    {\n        if(islower(i))\n\
    \        {\n            i = toupper(i);\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp78x997xr: /tmp/tmp78x997xr.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length()==0)\n      \
    \  return s; // return empty string\n    else \n    {\n        std::string ans\
    \ = \"\";\n        for(size_t i=0; i<s.length(); i++)\n        {\n           \
    \ if(islower(s[i])) // if s[i] is a lowercase letter, change to uppercase or vice-versa\n\
    \                ans += toupper(s[i]); // toupper converts char to uppercase and\
    \ concatenate them in ans\n            else\n                ans += s[i]; // otherwise\
    \ just concatenate them in ans\n        }\n        return ans;\n    }\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp4ufrlc_r: /tmp/tmp4ufrlc_r.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            s[i]=toupper(s[i]);\n        }\n    \
    \    else{\n            s[i]=s[i];\n        }\n    }\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]=='@'){\n            s[i]='A';\n        }\n        if(s[i]=='#'){\n\
    \            s[i]='a';\n        }\n    }\n    return s;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpn72vcw3v: /tmp/tmpn72vcw3v.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    size_t size = s.size();\n\
    \    size_t len = s.size();\n    std::string ans = s;\n    for(int i = 0; i <\
    \ size; i++) {\n        if(isalpha(ans[i]) && islower(ans[i])) {\n           \
    \ ans[i] = toupper(ans[i]);\n        }\n        if(isalpha(ans[i]) && isupper(ans[i]))\
    \ {\n            ans[i] = tolower(ans[i]);\n        }\n        if(!isalpha(ans[i]))\
    \ {\n            ans[len-i-1] = tolower(ans[len-i-1]);\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpk6jim43s: /tmp/tmpk6jim43s.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  for (int i = 0; i < len; ++i) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n\
    \            if (s[i] >= 'A' && s[i] <= 'Z') {\n                s[i] = s[i] -\
    \ ('A' - 'a');\n            } else {\n                s[i] = s[i] - ('a' - 'A');\n\
    \            }\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n           \
    \ s[i] = s[i] - ('A' - 'A');\n        } else {\n            s[i] = s[i];\n   \
    \     }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpmgkbdtjk: /tmp/tmpmgkbdtjk.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    size_t len = s.length();\n\
    \    int ans = 0;\n    for(int i = 0; i< len; i++) {\n        if(isalpha(s[i]))\
    \ {\n            if(isupper(s[i])){\n                ans += 32;\n            }else{\n\
    \                ans += 26;\n            }\n        } else {\n            ans\
    \ -= s[i] == 'a' ? 65 : 97; //this should be different for other alphabets\n \
    \       }\n    }\n    return to_string(ans);\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpigxdslb9.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpigxdslb9.cpp:26:12: error: \u2018to_string\u2019 was not declared in\
    \ this scope; did you mean \u2018std::__cxx11::to_string\u2019?\n   26 |     return\
    \ to_string(ans);\n      |            ^~~~~~~~~\n      |            std::__cxx11::to_string\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpigxdslb9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6601:3: note:\
    \ \u2018std::__cxx11::to_string\u2019 declared here\n 6601 |   to_string(long\
    \ double __val)\n      |   ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ans = s;\n   \
    \ for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])) \n            ans =\
    \ ans.substr(0,i) + toupper(ans.substr(i,1)) + ans.substr(i+1);\n        else\
    \ \n            ans = ans.substr(0,i) + s[i].tolower() + ans.substr(i+1);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_cxhmyeb.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp_cxhmyeb.cpp:16:60: error: no matching function for call to \u2018\
    toupper(std::__cxx11::basic_string<char>)\u2019\n   16 |             ans = ans.substr(0,i)\
    \ + toupper(ans.substr(i,1)) + ans.substr(i+1);\n      |                     \
    \                                       ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp_cxhmyeb.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp_cxhmyeb.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp_cxhmyeb.cpp:16:60: note:   candidate expects 2 arguments,\
    \ 1 provided\n   16 |             ans = ans.substr(0,i) + toupper(ans.substr(i,1))\
    \ + ans.substr(i+1);\n      |                                                \
    \            ^\n/tmp/tmp_cxhmyeb.cpp:18:42: error: request for member \u2018tolower\u2019\
    \ in \u2018s.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , "
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length()==0)\n      \
    \  return s;\n    for(int i=0; i< s.length(); i++) {\n        if(s[i]<'a' || s[i]>'z')\n\
    \            continue;\n        char c = s[i];\n        s[i] = 'A' + c-'a';\n\
    \        s[i] = 'a' + c+'A';\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpz4g68xi8: /tmp/tmpz4g68xi8.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tassert(s.size() > 0);\n\tstd::string\
    \ reverseStr = \"\";\n\t\n\tfor (auto i : s) {\n\t\tif (i >= 'a' && i <= 'z')\
    \ {\n\t\t\tif (reverseStr.size() != 0) {\n\t\t\t\treverseStr += i;\n\t\t\t} else\
    \ {\n\t\t\t\treverseStr += i;\n\t\t\t}\n\t\t} else if (i >= 'A' && i <= 'Z') {\n\
    \t\t\tif (reverseStr.size() != 0) {\n\t\t\t\treverseStr += i;\n\t\t\t} else {\n\
    \t\t\t\treverseStr += i;\n\t\t\t}\n\t\t} else {\n\t\t\tif (reverseStr.size() !=\
    \ 0) {\n\t\t\t\treverseStr += i;\n\t\t\t} else {\n\t\t\t\treverseStr += i;\n\t\
    \t\t}\n\t\t}\n\t}\n\t\n\tif (reverseStr.empty()) {\n\t\treverseStr = \"0\";\n\t\
    }\n\t\n\treturn reverseStr;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp24hznqxj: /tmp/tmp24hznqxj.cpp:46: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // Your code here\n    std::string\
    \ ans = \"\";\n    for(int i = 0; i < s.length(); i++){\n        if(std::isalpha(s[i])){\n\
    \            char c = s[i];\n            std::string t = \"\";\n            for(int\
    \ j = 0; j < s.length(); j++){\n                if(i != j){\n                \
    \    t += s[j];\n                }\n            }\n            std::string tt\
    \ = t;\n            std::string ttt = tt;\n            std::string t = \"\";\n\
    \            for(int j = 0; j < tt.length(); j++){\n                if(tt.length()\
    \ % 2 == 0){\n                    t += ttt.at(tt.length()-j-1);\n            \
    \    }else{\n                    t += ttt.at(j);\n                }\n        \
    \    }\n            ans += t;\n        }else{\n            ans += s[i];\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9br9_5jk.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp9br9_5jk.cpp:26:25: error: redeclaration of \u2018std::string t\u2019\
    \n   26 |             std::string t = \"\";\n      |                         ^\n\
    /tmp/tmp9br9_5jk.cpp:18:25: note: \u2018std::string t\u2019 previously declared\
    \ here\n   18 |             std::string t = \"\";\n      |                   \
    \      ^\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // write your code here\n\
    \    for(auto i=s.begin();i!=s.end();++i){\n        std::cout<<(*i).to_lower();\n\
    \    }\n    std::cout<<std::endl;\n    return \"\";\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgmmpb8qp.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpgmmpb8qp.cpp:15:25: error: request for member \u2018to_lower\u2019\
    \ in \u2018i.__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >::operator*()\u2019, which is of non-class type \u2018char\u2019\n   15 | \
    \        std::cout<<(*i).to_lower();\n      |                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string t;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            // Reverse\
    \ from lower to upper\n            std::swap(s[i], s[sizeof(s) - i - 1]);\n  \
    \      }\n        // If the string contains no letters, reverse the string\n \
    \       else {\n            std::swap(s[i], s[s.size() - i - 1]);\n        }\n\
    \    }\n    return t;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpmddxyc61: /tmp/tmpmddxyc61.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for (int i = 0; i < s.size();\
    \ i++) {\n        char c = s[i];\n        if (isalpha(c)) {\n            c = toupper(c);\n\
    \            if (c == 'Z') {\n                c = 'a';\n            } else {\n\
    \                c = 'A';\n            }\n            s[i] = c;\n        }\n \
    \   }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpm8u6rouo: /tmp/tmpm8u6rouo.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.length();\n    for\
    \ (int i = 0; i < n; i++) {\n        if (isalpha(s[i])) {\n            std::swap(s[i],\
    \ s[i] - 32);\n            std::swap(s[i+1], s[i+1] + 32);\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdykrgudw.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpdykrgudw.cpp:16:38: error: no matching function for call to \u2018\
    swap(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&, int)\u2019\
    \n   16 |             std::swap(s[i], s[i] - 32);\n      |                   \
    \                   ^\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdykrgudw.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpdykrgudw.cpp:16:38: note:   deduced conflicting types for parameter\
    \ \u2018_Tp\u2019 (\u2018char\u2019 and \u2018int\u2019)\n   16 |            \
    \ std::swap(s[i], s[i] - 32);\n      |                                      ^\n\
    In file included from /usr/include/c++/9/bits/stl_pair.h:59,\n               \
    \  from /usr/include/c++/9/bits/stl_algobase.h:64,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdykrgudw.cpp:2:\n/usr/include/c++/9/bits/move.h:205:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<std::__is_swappable<_Tp>::value>::type\
    \ std::swap(_Tp (&)[_Nm], _Tp (&)[_Nm])\u2019\n  205 |     swap(_Tp (&__a)[_Nm],\
    \ _Tp (&__b)[_Nm])\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:205:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpdykrgudw.cpp:16:"
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tint len = s.size();\n\tchar\
    \ tmp[len];\n\tfor (int i = 0; i < len; i++) {\n\t\tchar c = s[i];\n\t\tif (isalpha(c))\
    \ {\n\t\t\ttmp[i] = toupper(c);\n\t\t} else if (islower(c)) {\n\t\t\ttmp[i] =\
    \ tolower(c);\n\t\t} else {\n\t\t\ttmp[i] = c;\n\t\t}\n\t}\n\tstd::reverse(std::begin(tmp),\
    \ std::end(tmp));\n\treturn std::string(tmp);\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3zch7ce4.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp3zch7ce4.cpp:25:29: error: no matching function for call to \u2018\
    begin(char [len])\u2019\n   25 |  std::reverse(std::begin(tmp), std::end(tmp));\n\
    \      |                             ^\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3zch7ce4.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp3zch7ce4.cpp:25:29: note:   mismatched types \u2018std::initializer_list<_Tp>\u2019\
    \ and \u2018char*\u2019\n   25 |  std::reverse(std::begin(tmp), std::end(tmp));\n\
    \      |                             ^\nIn file included from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3zch7ce4.cpp:2:\n/usr/include/c++/9/bits/range_access.h:48:5:\
    \ note: candidate: \u2018template<class _Cont"
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    for(int\
    \ i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            s[i] = toupper(s[i]);\n\
    \            s[i] = tolower(s[i]);\n        }\n    }\n    \n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp6g5kempn: /tmp/tmp6g5kempn.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    char c;\n    for(int i=0;\
    \ i< s.size();i++){\n        c = s[i];\n        if(isalpha(c)){\n            char\
    \ temp = s[i]+32;\n            s[i] = temp;\n            s[i] = c-32;\n      \
    \  }\n        else{\n            s[i] = c-32; \n        }\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpeeujzzct: /tmp/tmpeeujzzct.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(char\
    \ c : s)\n    {\n        if(isalpha(c))\n        {\n            if(c >= 'A' &&\
    \ c <= 'Z')\n                c += 32;\n            else if(c >= 'a' && c <= 'z')\n\
    \                c -= 32;\n            else\n                continue;\n     \
    \   }\n        res.push_back(c);\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp23zeqwc6: /tmp/tmp23zeqwc6.cpp:32: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // your code goes here\n \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == '@') continue;\n        if (s[i] >= 'a' && s[i] <= 'z') {\n       \
    \     ans[ans.size()-1-i] = toupper(ans[ans.size()-1-i]);\n        } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            ans[ans.size()-1-i] = tolower(ans[ans.size()-1-i]);\n\
    \        } else {\n            ans[ans.size()-1-i] = s[i];\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpp_gcfgzu: /tmp/tmpp_gcfgzu.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ans = s;\n   \
    \ for(size_t i = 0; i <ans.size(); i++) {\n        if(isalpha(ans[i]) == true)\
    \ {\n            char c = toupper(ans[i]);\n            ans[i] = c;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpiodp_54a: /tmp/tmpiodp_54a.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    std::reverse(s.begin(),s.end());\
    \ \n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpyemwaoa9: /tmp/tmpyemwaoa9.cpp:19: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::stack<char> stk;\n  for\
    \ (int i=0;i<s.length();i++)\n    {\n        char c=s[i];\n        if(std::isalpha(c))\n\
    \        {\n            stk.push(c);\n        }\n        else\n        {\n   \
    \         while (!stk.empty())\n            {\n                s.push_back(stk.top());\n\
    \                stk.pop();\n            }\n        }\n    }\n    while (!stk.empty())\n\
    \    {\n        s.push(stk.top());\n        stk.pop();\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp89jnri3h.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp89jnri3h.cpp:32:11: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018push\u2019\
    \n   32 |         s.push(stk.top());\n      |           ^~~~\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();i++)\n\
    \    {\n        if(s[i] == 'a' || s[i] == 'A')\n        {\n            s[i] =\
    \ 'A';\n        }\n        else if(s[i] == 'b' || s[i] == 'B')\n        {\n  \
    \          s[i] = 'B';\n        }\n        else if(s[i] == 'c' || s[i] == 'C')\n\
    \        {\n            s[i] = 'C';\n        }\n        else if(s[i] == 'd' ||\
    \ s[i] == 'D')\n        {\n            s[i] = 'D';\n        }\n        else if(s[i]\
    \ == 'e' || s[i] == 'E')\n        {\n            s[i] = 'E';\n        }\n    \
    \    else if(s[i] == 'f' || s[i] == 'F')\n        {\n            s[i] = 'F';\n\
    \        }\n        else if(s[i] == 'g' || s[i] == 'G')\n        {\n         \
    \   s[i] = 'G';\n        }\n        else if(s[i] == 'h' || s[i] == 'H')\n    \
    \    {\n            s[i] = 'H';\n        }\n        else if(s[i] == 'i' || s[i]\
    \ == 'I')\n        {\n            s[i] = 'I';\n        }\n        else if(s[i]\
    \ == 'j' || s[i] == 'J')\n        {\n            s[i] = 'J';\n        }\n    \
    \    else if(s[i] == 'k' || s[i] == 'K')\n        {\n            s[i] = 'K';\n\
    \        }\n        else if(s[i] == 'l' || s[i] == 'L')\n        {\n         \
    \   s[i] = 'L';\n        }\n        else if(s[i] == 'm' || s[i] == 'M')\n    \
    \    {\n            s[i] = 'M';\n        }\n        else if(s[i] == 'n' || s[i]\
    \ == 'N')\n        {\n            s[i] = 'N';\n        }\n        else if(s[i]\
    \ == 'o' || s[i] == 'O')\n        {\n            s[i] = 'O';\n        }\n    \
    \    else if(s[i] == 'p' || s[i] == 'P')\n        {\n            s[i] = 'P';\n\
    \        }\n        else if(s[i] == 'q' || s[i] == 'Q')\n        {\n         \
    \   s[i] = 'Q';\n        }\n        else if(s[i] == 'r' || s[i] == 'R')\n    \
    \    {\n            s[i] = 'R';\n        }\n        else if(s[i] == 's' || s[i]\
    \ == 'S')\n        {\n            s[i] = 'S';\n        }\n        else if(s[i]\
    \ == 't' || s[i] == 'T')\n        {\n            s[i] = 'T';\n        }\n    \
    \    else if(s[i] == 'u' || s[i] == 'U')\n        {\n            s[i] = 'U';\n\
    \        }\n        else if(s[i] == 'v' || s[i] == 'V')\n        {\n         \
    \   s[i] = 'V';\n        }\n        else if(s[i] == 'w' || s[i] == 'W')\n    \
    \    {\n            s[i] = 'W';\n        }\n        else if(s[i] == 'x' || s[i]\
    \ == 'X')\n        {\n            s[i] = 'X';\n        }\n\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_53sr4cn.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp_53sr4cn.cpp:113:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  113 | int main() {\n      |            ^\n/tmp/tmp_53sr4cn.cpp:123:1:\
    \ error: expected \u2018}\u2019 at end of input\n  123 | }\n      | ^\n/tmp/tmp_53sr4cn.cpp:12:34:\
    \ note: to match this \u2018{\u2019\n   12 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmp_53sr4cn.cpp:123:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  123 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  assert(s.size() != 0 && s.size()\
    \ <= 10);\n  if(s.size() == 0) {\n    return \"\";\n  }\n  if(s[0] == '#') {\n\
    \    return s;\n  }\n  bool flag = false;\n  for(int i = 1; i < s.size(); i++)\
    \ {\n    if(!s.at(i).isalpha() && s.at(i) != '@' && s.at(i) != '#') {\n      flag\
    \ = true;\n      break;\n    }\n  }\n  if(flag == true) {\n    return s;\n  }\n\
    \  for(int i = 1; i < s.size(); i++) {\n    if(s.at(i).isalpha()) {\n      auto\
    \ it = s.begin();\n      auto temp = std::toupper(s.at(i));\n      while(it !=\
    \ s.end() && temp == s.at(i)) {\n        it = s.erase(it);\n        temp = std::toupper(s.at(i));\n\
    \      }\n      s.insert(it, temp);\n      continue;\n    }\n    if(s.at(i) ==\
    \ '@' || s.at(i) == '#') {\n      auto it = s.begin();\n      auto temp = std::tolower(s.at(i));\n\
    \      while(it != s.end() && temp == s.at(i)) {\n        it = s.erase(it);\n\
    \        temp = std::tolower(s.at(i));\n      }\n      s.insert(it, temp);\n \
    \     continue;\n    }\n    break;\n  }\n  if(s.size() == 0) {\n    return s;\n\
    \  }\n  \n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp90vgq1ll.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp90vgq1ll.cpp:22:17: error: request for member \u2018isalpha\u2019 in\
    \ \u2018s.std::__cxx11::basic_string<char>::at(((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   22 |     if(!s.at(i).isalpha()\
    \ && s.at(i) != '@' && s.at(i) != '#') {\n      |                 ^~~~~~~\n/tmp/tmp90vgq1ll.cpp:31:16:\
    \ error: request for member \u2018isalpha\u2019 in \u2018s.std::__cxx11::basic_string<char>::at(((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   31 |     if(s.at(i).isalpha())\
    \ {\n      |                ^~~~~~~\n"
  stdout: ''
  timestamp: 1660098289
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    string ans = \"#\";\n    for\
    \ (size_t i = 0; i < s.size(); i++)\n    {\n        if (isalpha(s[i]))\n     \
    \   {\n            string temp = s[i];\n            s[i] = s[toupper(s[i])];\n\
    \            s[toupper(s[i])] = temp;\n        }\n    }\n    for (int i = 0; i\
    \ < s.size();i++)\n    {\n        if (isalpha(s[i]))\n        {\n            ans\
    \ += s[i];\n        }\n        else\n        {\n            ans += s[s.size()-i-1];\n\
    \        }\n    }\n    ans = ans.substr(1);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5lf3wc0m.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp5lf3wc0m.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   13 |     string ans = \"#\";\n      |     ^~~~~~\n/tmp/tmp5lf3wc0m.cpp:13:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5lf3wc0m.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5lf3wc0m.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp5lf3wc0m.cpp:18:19: error: expected \u2018;\u2019 before \u2018temp\u2019\
    \n   18 |             string temp = s[i];\n      |                   ^~~~~\n \
    \     |                   ;\n/tmp/tmp5lf3wc0m.cpp:20:32: error: \u2018temp\u2019\
    \ was not declared in this scope\n   20 |             s[toupper(s[i])] = temp;\n\
    \      |                                ^~~~\n/tmp/tmp5lf3wc0m.cpp:27:13: error:\
    \ \u2018ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019\
    ?\n   27 |             ans += s[i];\n      |             ^~~\n      |        \
    \     abs\n/tmp/tmp5lf3wc0m.cpp:31"
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    if(s.length()\
    \ == 0)\n    {\n        return s;\n    }\n    if(islower(s[0]))\n    {\n     \
    \   std::string res(s.begin(), s.end());\n        std::string str2(s.begin(),\
    \ s.end());\n        for(std::size_t i = 1; i < s.length(); i++)\n        {\n\
    \            if(isupper(res[i]))\n            {\n                std::swap(str2[i\
    \ - 1], str2[i]);\n            }\n        }\n        return str2;\n    }\n   \
    \ else\n    {\n        std::string res(s.begin(), s.end());\n        std::string\
    \ str2(s.begin(), s.end());\n        for(std::size_t i = 1; i < s.length(); i++)\n\
    \        {\n            if(islower(res[i]))\n            {\n                std::swap(str2[i\
    \ - 1], str2[i]);\n            }\n        }\n        return str2;\n    }\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5hy56tdg: /tmp/tmp5hy56tdg.cpp:47: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098290
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    char result[s.length()];\n\
    \    for(int i = 0; i < s.length(); i++){\n        char c = s[i];\n        if((c\
    \ >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')){\n            std::swap(s[i],\
    \ s[i]);\n        }\n    }\n    for(int i = 0; i < s.length(); i++){\n       \
    \ char c = s[i];\n        if((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')){\n\
    \            int pos = (c-'a') + 2;\n            int ind = i - pos;\n        \
    \    result[i] = 'a' + ind;\n        }\n        else{\n            result[i] =\
    \ s[i];\n        }\n    }\n    return std::string(result);\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpi7_4mnr3: /tmp/tmpi7_4mnr3.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098289
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0) return\
    \ s;\n    std::string ans = s;\n    for (int i = 0; i < ans.size(); i++) {\n \
    \       if (ans[i] == 'a') ans[i] = 'A';\n        else if (ans[i] == 'A') ans[i]\
    \ = 'a';\n        else if (ans[i] == 'b') ans[i] = 'B';\n        else if (ans[i]\
    \ == 'B') ans[i] = 'b';\n        else if (ans[i] == 'c') ans[i] = 'C';\n     \
    \   else if (ans[i] == 'C') ans[i] = 'c';\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5ozhr2g0: /tmp/tmp5ozhr2g0.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098291
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if (s.size() == 0) return s;\n\
    \  for (char c : s) {\n    if (isupper(c)) c = tolower(c);\n    else c = toupper(c);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpg7usjmuu: /tmp/tmpg7usjmuu.cpp:22: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() == 0)\n     \
    \   return s;\n    for (auto &c : s)\n    {\n        if (c == 'a' || c == 'A')\n\
    \            c = toupper(c);\n        else if (c == 'b' || c == 'B')\n       \
    \     c = tolower(c);\n        else if (c == '_' || c == '@' || c == '#')\n  \
    \          c = '@';\n    }\n    std::string str = s;\n    str = std::reverse(str.begin(),\
    \ str.end());\n    return str;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd51b2xaa.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpd51b2xaa.cpp:25:46: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018void\u2019)\n   25 |     str = std::reverse(str.begin(), str.end());\n\
    \      |                                              ^\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpd51b2xaa.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:669:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \n  669 |       operator=(const basic_string& __str)\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:669:37: note:   no known conversion for\
    \ argument 1 from \u2018void\u2019 to \u2018const std::__cxx11::basic_string<char>&\u2019\
    \n  669 |       operator=(const basic_string& __str)\n      |                \
    \ ~~~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:708:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]\u2019\n  708 |       operator=(const _CharT*\
    \ __s)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:708:31:\
    \ note:   no known conversion for argument 1 from \u2018void\u2019 to \u2018const\
    \ char*\u2019"
  stdout: ''
  timestamp: 1660098291
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    string res;\n    for (int\
    \ i = 0; i < s.length(); i++){\n        if (isupper(s[i])){\n            res +=\
    \ s[i];\n        }\n        if (islower(s[i])){\n            res += s[i];\n  \
    \      }\n    }\n    res += s;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppqc695yq.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmppqc695yq.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   13 |     string res;\n      |     ^~~~~~\n/tmp/tmppqc695yq.cpp:13:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmppqc695yq.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmppqc695yq.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmppqc695yq.cpp:16:13: error: \u2018res\u2019 was not declared in this scope\n\
    \   16 |             res += s[i];\n      |             ^~~\n/tmp/tmppqc695yq.cpp:19:13:\
    \ error: \u2018res\u2019 was not declared in this scope\n   19 |             res\
    \ += s[i];\n      |             ^~~\n/tmp/tmppqc695yq.cpp:22:5: error: \u2018\
    res\u2019 was not declared in this scope\n   22 |     res += s;\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660098291
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for (size_t i = 0; i <= s.size();\
    \ i++) {\n        if (s[i] == '#') {\n            int j = i;\n            while\
    \ (i != 0) {\n                s[i] = s[j];\n                i = j;\n         \
    \       j = i;\n            }\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpm7z3_qh8: /tmp/tmpm7z3_qh8.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    // return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(s.size() > 0);\n  \
    \  \n    // initialize 'visited' to false \n    bool visited[s.size()+1] = {0};\n\
    \n    // initialize 'current' to first character\n    int current = 0;\n    \n\
    \    // initialize 'next' to last character\n    int next = s.size();\n\n    //\
    \ initialize 'left' to one less than 'current'\n    int left = next - 1;\n\n \
    \   // initialize 'right' to one less than 'current'\n    int right = next - 2;\n\
    \n    // initialize 'result' to empty string\n    std::string result=\"\";\n\n\
    \    // loop while 'current' is less than 'next'\n    while(current < next) {\n\
    \        // check if 'current' is visited already\n        if(visited[current]\
    \ == 1) {\n            // if it is visited, then update 'current' and 'next'\n\
    \            // such that 'current' is the next character after visited one\n\
    \            next = current + 1;\n        }\n        else {\n            // if\
    \ 'current' is not visited, then\n            // check if 'current' is a letter\n\
    \            if(s[current]>= 'a' && s[current] <= 'z') {\n                // if\
    \ it is letter, then\n                // swap its case from lower to upper or\
    \ vise versa,\n                // otherwise keep it as it is\n               \
    \ char c = s[current];\n                s[current] = s[next];\n              \
    \  s[next] = c;\n                \n                // update 'left' and 'right'\n\
    \                left = next - 1;\n                right = next - 2;\n       \
    \         \n                // update 'visited' to true\n                visited[next]\
    \ = 1;\n            }\n            else {\n                // if 'current' is\
    \ not a letter, then\n                // append 'current' character to the result\n\
    \                result += s[current];\n                \n                // update\
    \ 'left' and 'right'\n                left = next - 1;\n                right\
    \ = next - 2;\n            }\n        }\n        \n        // increment 'current'\n\
    \        current = next;\n    }\n    \n    // reverse the string from last to\
    \ first character\n    for(int i = s.size() - 1; i >= 0; i--) {\n        result\
    \ += s[i];\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpkfsxzw5i: /tmp/tmpkfsxzw5i.cpp:83: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool isFirst = true;\n   \
    \ bool isLast = true;\n    int n = s.length();\n    std::string res;\n    for(int\
    \ i = 0; i < n; i++){\n        if(s[i] == '#' || s[i] == '@'){\n            isFirst\
    \ = false;\n            isLast = true;\n        }\n        if(s[i] == 'a' || s[i]\
    \ == 'A'){\n            isFirst = true;\n            isLast = true;\n        }\n\
    \        if(s[i] == 'b' || s[i] == 'B'){\n            isFirst = true;\n      \
    \      isLast = false;\n        }\n        if(s[i] == 'c' || s[i] == 'C'){\n \
    \           isFirst = true;\n            isLast = false;\n        }\n        if(s[i]\
    \ == 'd' || s[i] == 'D'){\n            isFirst = false;\n            isLast =\
    \ false;\n        }\n        if(s[i] == 'e' || s[i] == 'E'){\n            isFirst\
    \ = false;\n            isLast = false;\n        }\n        if(s[i] == 'f' ||\
    \ s[i] == 'F'){\n            isFirst = false;\n            isLast = false;\n \
    \       }\n        if(s[i] == 'g' || s[i] == 'G'){\n            isFirst = false;\n\
    \            isLast = false;\n        }\n        if(s[i] == 'h' || s[i] == 'H'){\n\
    \            isFirst = false;\n            isLast = false;\n        }\n      \
    \  if(s[i] == 'i' || s[i] == 'I'){\n            isFirst = false;\n           \
    \ isLast = false;\n        }\n        if(s[i] == 'j' || s[i] == 'J'){\n      \
    \      isFirst = false;\n            isLast = false;\n        }\n        if(s[i]\
    \ == 'k' || s[i] == 'K'){\n            isFirst = false;\n            isLast =\
    \ false;\n        }\n        if(s[i] == 'l' || s[i] == 'L'){\n            isFirst\
    \ = false;\n            isLast = false;\n        }\n        if(s[i] == 'm' ||\
    \ s[i] == 'M'){\n            isFirst = false;\n            isLast = false;\n \
    \       }\n        if(s[i] == 'n' || s[i] == 'N'){\n            isFirst = false;\n\
    \            isLast = false;\n        }\n        if(s[i] == 'o' || s[i] == 'O'){\n\
    \            isFirst = false;\n            isLast = false;\n        }\n      \
    \  if(s[i] == 'p' || s[i] == 'P'){\n            isFirst = false;\n           \
    \ isLast = false;\n        }\n        if(s[i] == 'q' || s[i] == 'Q'){\n      \
    \      isFirst = false;\n            isLast = false;\n        }\n        if(s[i]\
    \ == 'r' || s[i] == 'R'){\n            isFirst = false;\n            isLast =\
    \ false;\n        }\n        if(s[i] == 's' || s[i] == 'S'){\n            isFirst\
    \ = false;\n            isLast = false;\n        }\n        if(s[i] == 't' ||\
    \ s[i] == 'T'){\n            isFirst = false;\n            isLast = false;\n \
    \       }\n        if(\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8h1dz8az.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp8h1dz8az.cpp:103:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  103 | }\n      | ^\n/tmp/tmp8h1dz8az.cpp:102:12: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  102 |         if(\n      |     \
    \      ~^\n      |            )\n  103 | }\n      | ~           \n/tmp/tmp8h1dz8az.cpp:103:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  103 | }\n \
    \     | ^\n/tmp/tmp8h1dz8az.cpp:104:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  104 | int main() {\n      |            ^\n\
    /tmp/tmp8h1dz8az.cpp:114:1: error: expected \u2018}\u2019 at end of input\n  114\
    \ | }\n      | ^\n/tmp/tmp8h1dz8az.cpp:12:34: note: to match this \u2018{\u2019\
    \n   12 | std::string solve(std::string s) {\n      |                        \
    \          ^\n/tmp/tmp8h1dz8az.cpp:114:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n  114 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660098291
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // your code goes here\n \
    \   for(int i=0;i<s.length();i++) {\n        if(s[i]>=97 && s[i]<=122){\n    \
    \        s[i]=s[i]+32;\n            s[i]=s[i]-32;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpv893t_wi: /tmp/tmpv893t_wi.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ans;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n           \
    \ ans += std::toupper(s[i]);\n        }\n        else {\n            ans += s[i];\n\
    \        }\n    }\n    ans = ans.substr(0, ans.size() - 1);\n    return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpaair584p: /tmp/tmpaair584p.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    \n\
    \    for(int i = 0; i < n; i++) {\n        if(s[i] == 'a')\n            s[i] =\
    \ 'A';\n        else if(s[i] == 'A')\n            s[i] = 'a';\n        else if((s[i]\
    \ == '#') && (i+1 < n) && (s[i+1] == '@'))\n            s[i] = 'a';\n        else\
    \ if((s[i] == '#') && (i+1 < n) && (s[i+1] == 'A'))\n            s[i] = 'A';\n\
    \        else if((s[i] == '#') && (i+1 < n) && (s[i+1] == 'c'))\n            s[i]\
    \ = 'c';\n    }\n    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpf9jsltj1: /tmp/tmpf9jsltj1.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int\
    \ i = 0; i<s.length();i++) {\n        if(s[i] == 'a' || s[i] == 'A') {\n     \
    \       res += 'A';\n        }\n        if(s[i] == 'b' || s[i] == 'B') {\n   \
    \         res += 'b';\n        }\n        if(s[i] == 'c' || s[i] == 'C') {\n \
    \           res += 'c';\n        }\n        if(s[i] == 'd' || s[i] == 'D') {\n\
    \            res += 'd';\n        }\n        if(s[i] == 'e' || s[i] == 'E') {\n\
    \            res += 'e';\n        }\n        if(s[i] == 'f' || s[i] == 'F') {\n\
    \            res += 'f';\n        }\n        if(s[i] == 'g' || s[i] == 'G') {\n\
    \            res += 'g';\n        }\n        if(s[i] == 'h' || s[i] == 'H') {\n\
    \            res += 'h';\n        }\n        if(s[i] == 'i' || s[i] == 'I') {\n\
    \            res += 'i';\n        }\n        if(s[i] == 'j' || s[i] == 'J') {\n\
    \            res += 'j';\n        }\n        if(s[i] == 'k' || s[i] == 'K') {\n\
    \            res += 'k';\n        }\n        if(s[i] == 'l' || s[i] == 'L') {\n\
    \            res += 'l';\n        }\n        if(s[i] == 'm' || s[i] == 'M') {\n\
    \            res += 'm';\n        }\n        if(s[i] == 'n' || s[i] == 'N') {\n\
    \            res += 'n';\n        }\n        if(s[i] == 'o' || s[i] == 'O') {\n\
    \            res += 'o';\n        }\n        if(s[i] == 'p' || s[i] == 'P') {\n\
    \            res += 'p';\n        }\n        if(s[i] == 'q' || s[i] == 'Q') {\n\
    \            res += 'q';\n        }\n        if(s[i] == 'r' || s[i] == 'R') {\n\
    \            res += 'r';\n        }\n        if(s[i] == 's' || s[i] == 'S') {\n\
    \            res += 's';\n        }\n        if(s[i] == 't' || s[i] == 'T') {\n\
    \            res += 't';\n        }\n        if(s[i] == 'u' || s[i] == 'U') {\n\
    \            res += 'u';\n        }\n        if(s[i] == 'v' || s[i] == 'V') {\n\
    \            res += 'v';\n        }\n        if(s[i] == 'w' || s[i] == 'W') {\n\
    \            res += 'w';\n        }\n        if(s[i] == 'x' || s[i] == 'X') {\n\
    \            res += 'x';\n        }\n        if(s[i] == 'y' || s[i] == 'Y') {\n\
    \            res += 'y';\n        }\n        if(s[i] == 'z' || s[i] == 'Z') {\n\
    \            res += 'z';\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp_cjckcmu: /tmp/tmp_cjckcmu.cpp:98: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // write your code here\n\
    \    std::unordered_map<char, char> mapping;\n    for (auto &el : s) {\n     \
    \   mapping[el] = toupper(el);\n        mapping[el] = tolower(el);\n    }\n  \
    \  std::string result;\n    char ch;\n    for (auto &el : s) {\n        ch = mapping[el];\n\
    \        result.push_back(ch);\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp0zs6s5y3: /tmp/tmp0zs6s5y3.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool letter = false;\n   \
    \ std::string rev;\n    for (size_t i = 0; i<s.size(); i++) {\n        if (s[i]\
    \ == '@') {\n            rev += s[i];\n            letter = true;\n        }\n\
    \        else {\n            letter = false;\n            rev += s[i];\n     \
    \   }\n    }\n    if(letter && s.size() == rev.length())\n        return rev;\n\
    \    else\n        return s;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp1nrqgd2y: /tmp/tmp1nrqgd2y.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // Your code here\n    \n\
    \    if(s.size() ==0)\n        return s;\n    \n    if(s[0]>= 'a' && s[0] <= 'z'){\n\
    \        char t = s[0];\n        s[0] = s[s.length() - 1];\n        s[s.length()\
    \ - 1] = t;\n    }\n\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpac58fy60: /tmp/tmpac58fy60.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string new_s;\n    for\
    \ (size_t i = 0; i < s.size(); i++) {\n        if (s[i] == '#') {\n          \
    \  s[i] = 'a';\n            new_s += s[i];\n        } else if (s[i] == '@') {\n\
    \            s[i] = 'b';\n            new_s += s[i];\n        }\n    }\n    return\
    \ new_s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpdupcknxd: /tmp/tmpdupcknxd.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    size_t i, j, len = s.length();\n\
    \    // Write your code here.\n    std::string ans = s;\n    \n    for (i = 0;\
    \ i < len / 2; i++) {\n        for (j = i + 1; j < len; j++) {\n            if\
    \ (s[i] == s[j]) {\n                ans[i] = s[j];\n                ans[j] = s[i];\n\
    \            }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmptjzoqq2g: /tmp/tmptjzoqq2g.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int l = s.size();\n    int\
    \ mid = (l + l / 2);\n    for (int i = 0; i < mid; i++) {\n        if (s[i] ==\
    \ 'a' || s[i] == 'A') {\n            s[i] = 'A';\n        } else if (s[i] == 'b'\
    \ || s[i] == 'B') {\n            s[i] = 'B';\n        } else if (s[i] == 'c' ||\
    \ s[i] == 'C') {\n            s[i] = 'C';\n        } else if (s[i] == 'd' || s[i]\
    \ == 'D') {\n            s[i] = 'D';\n        } else if (s[i] == 'e' || s[i] ==\
    \ 'E') {\n            s[i] = 'E';\n        } else if (s[i] == 'f' || s[i] == 'F')\
    \ {\n            s[i] = 'F';\n        } else if (s[i] == 'g' || s[i] == 'G') {\n\
    \            s[i] = 'G';\n        } else if (s[i] == 'h' || s[i] == 'H') {\n \
    \           s[i] = 'H';\n        } else if (s[i] == 'i' || s[i] == 'I') {\n  \
    \          s[i] = 'I';\n        } else if (s[i] == 'j' || s[i] == 'J') {\n   \
    \         s[i] = 'J';\n        } else if (s[i] == 'k' || s[i] == 'K') {\n    \
    \        s[i] = 'K';\n        } else if (s[i] == 'l' || s[i] == 'L') {\n     \
    \       s[i] = 'L';\n        } else if (s[i] == 'm' || s[i] == 'M') {\n      \
    \      s[i] = 'M';\n        } else if (s[i] == 'n' || s[i] == 'N') {\n       \
    \     s[i] = 'N';\n        } else if (s[i] == 'o' || s[i] == 'O') {\n        \
    \    s[i] = 'O';\n        } else if (s[i] == 'p' || s[i] == 'P') {\n         \
    \   s[i] = 'P';\n        } else if (s[i] == 'q' || s[i] == 'Q') {\n          \
    \  s[i] = 'Q';\n        } else if (s[i] == 'r' || s[i] == 'R') {\n           \
    \ s[i] = 'R';\n        } else if (s[i] == 's' || s[i] == 'S') {\n            s[i]\
    \ = 'S';\n        } else if (s[i] == 't' || s[i] == 'T') {\n            s[i] =\
    \ 'T';\n        } else if (s[i] == 'u' || s[i] == 'U') {\n            s[i] = 'U';\n\
    \        } else if (s[i] == 'v' || s[i] == 'V') {\n            s[i] = 'V';\n \
    \       } else if (s[i] == 'w' || s[i] == 'W') {\n            s[i] = 'W';\n  \
    \      } else if (s[i] == 'x' || s[i] == 'X') {\n            s[i] = 'X';\n   \
    \     } else if (s[i] == 'y' || s[i] == 'Y') {\n            s[i] = 'Y';\n    \
    \    } else if (s[i] == 'z' || s[i] == 'Z') {\n            s[i] = 'Z';\n     \
    \   }\n    }\n    std::string res(s);\n    res.resize(mid);\n    for (int i =\
    \ 0; i < mid; i++) {\n        if (s[i] == 'A') {\n            s[i] = 'a';\n  \
    \      } else if (s[i] == 'B') {\n            s[i] = 'b';\n        } else if (s[i]\
    \ == 'C') {\n            s[i] = 'c';\n        } else if (s[i] == 'D') {\n    \
    \        s[i] = 'd';\n        } else if (s[i] == 'E') {\n            s[i] = '\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12z_thia.cpp:82:20: warning: missing terminating ' character\n\
    \   82 |             s[i] = '\n      |                    ^\n/tmp/tmp12z_thia.cpp:82:20:\
    \ error: missing terminating ' character\n/tmp/tmp12z_thia.cpp: In function \u2018\
    std::string solve(std::string)\u2019:\n/tmp/tmp12z_thia.cpp:83:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   83 | }\n      | ^\n/tmp/tmp12z_thia.cpp:84:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   84 | int main() {\n      |            ^\n/tmp/tmp12z_thia.cpp:94:1: error:\
    \ expected \u2018}\u2019 at end of input\n   94 | }\n      | ^\n/tmp/tmp12z_thia.cpp:72:35:\
    \ note: to match this \u2018{\u2019\n   72 |     for (int i = 0; i < mid; i++)\
    \ {\n      |                                   ^\n/tmp/tmp12z_thia.cpp:94:1: error:\
    \ expected \u2018}\u2019 at end of input\n   94 | }\n      | ^\n/tmp/tmp12z_thia.cpp:12:34:\
    \ note: to match this \u2018{\u2019\n   12 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmp12z_thia.cpp:94:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   94 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() ==0)\n      \
    \  return s;\n    \n    bool lowerCase = true;\n    \n    for (auto c : s)\n \
    \   {\n        if (c == 'a' || c == 'A')\n            lowerCase = !lowerCase;\n\
    \    }\n\n    std::string ret = \"\";\n    \n    for (auto c : s)\n    {\n   \
    \     if (lowerCase)\n        {\n            ret = c + ret;\n        }\n     \
    \   else\n        {\n            ret = ret + c;\n        }\n    }\n    \n    return\
    \ ret;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp_qpgn1xs: /tmp/tmp_qpgn1xs.cpp:42: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  // Your code goes here\n  if(s.size()\
    \ == 0) return s;\n  int index = s.size() - 1;\n  int len = (int)s.size();\n \
    \ std::string str = \"\";\n  bool first = true;\n  while(index >= 0){\n    if(s[index]\
    \ == '#'){\n      if(!first){\n        str += s[index];\n      } else {\n    \
    \    str += s[index];\n        first = false;\n      }\n      index--;\n     \
    \ continue;\n    }\n    else if(!first){\n      str += s[index];\n      continue;\n\
    \    }\n    else first = true;\n    index--;\n  }\n  return str;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjvt2mvot: /tmp/tmpjvt2mvot.cpp:41: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() <= 0)\n      \
    \  return s;\n    std::string str = s;\n    std::string str1 = s;\n    for(int\
    \ i = 0; i < str.size(); i++) {\n        if(str[i] == '#') {\n            str1\
    \ = \"#\" + std::string(str1.begin(), str1.end()) + \"#\";\n            str =\
    \ str1;\n        } else {\n            if(str[i] >= 'a' && str[i] <= 'z') {\n\
    \                str[i] = str[i] - 32;\n            }\n        }\n    }\n    return\
    \ str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpf4d26gch: /tmp/tmpf4d26gch.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string new_s;\n    for\
    \ (size_t i = 0; i < s.length(); i++){\n        // Reverse the letter in s.\n\
    \        if (s[i] >= 'a' && s[i] <= 'z'){\n            std::string new_c = s[s.length()\
    \ - 1 - i];\n            s[i] = 'a';\n            s[s.length() - 1 - i] = new_c;\n\
    \        }\n        else if (s[i] >= 'A' && s[i] <= 'Z'){\n            std::string\
    \ new_c = s[s.length() - 1 - i];\n            s[i] = 'A';\n            s[s.length()\
    \ - 1 - i] = new_c;\n        }\n    }\n\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnaesrdyl.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpnaesrdyl.cpp:17:53: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   17 |      \
    \       std::string new_c = s[s.length() - 1 - i];\n      |                  \
    \                                   ^\n/tmp/tmpnaesrdyl.cpp:19:37: error: cannot\
    \ convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} in assignment\n   19 |             s[s.length() - 1 -\
    \ i] = new_c;\n      |                                     ^~~~~\n      |    \
    \                                 |\n      |                                 \
    \    std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpnaesrdyl.cpp:22:53:\
    \ error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   22 |      \
    \       std::string new_c = s[s.length() - 1 - i];\n      |                  \
    \                                   ^\n/tmp/tmpnaesrdyl.cpp:24:37: error: cannot\
    \ convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} in assignment\n   24 |             s[s.length() - 1 -\
    \ i] = new_c;\n      |                                     ^~~~~\n      |    \
    \                                 |\n      |                                 \
    \    std::string {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(s.size() > 0);\n  \
    \  std::string t;\n    if (s[0] >= 'a' && s[0] <= 'z') {\n        t = std::string(s.rbegin(),\
    \ s.rend()) + std::string(s.begin(), s.begin() + 1);\n    } else if (s[0] >= 'A'\
    \ && s[0] <= 'Z') {\n        t = std::string(s.begin(), s.begin() + 1) + std::string(s.rbegin(),\
    \ s.rend());\n    } else {\n        t = s;\n    }\n    return t;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpbayckjj2: /tmp/tmpbayckjj2.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  \n    string rev_s=\"\";\n \
    \   int len=s.size();\n    for(int i=0;i<len;i++){\n        if(s[i]>=65&&s[i]<=90){\n\
    \            int x=s[i]-32;\n            rev_s=rev_s.substr(0,i)+to_string(x)+rev_s.substr(i+1);\n\
    \        }\n        if(s[i]>=97&&s[i]<=122){\n            int x=s[i]-32;\n   \
    \         rev_s=rev_s.substr(0,i)+to_string(x)+rev_s.substr(i+1);\n        }\n\
    \        else{\n            rev_s=rev_s+s[i];\n        }\n    }\n    return rev_s;\n\
    \    \n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz17rqoma.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpz17rqoma.cpp:14:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   14 |     string rev_s=\"\";\n      |     ^~~~~~\n/tmp/tmpz17rqoma.cpp:14:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpz17rqoma.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpz17rqoma.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpz17rqoma.cpp:19:13: error: \u2018rev_s\u2019 was not declared in this\
    \ scope\n   19 |             rev_s=rev_s.substr(0,i)+to_string(x)+rev_s.substr(i+1);\n\
    \      |             ^~~~~\n/tmp/tmpz17rqoma.cpp:19:37: error: \u2018to_string\u2019\
    \ was not declared in this scope; did you mean \u2018std::__cxx11::to_string\u2019\
    ?\n   19 |             rev_s=rev_s.substr(0,i)+to_string(x)+rev_s.substr(i+1);\n\
    \      |                                     ^~~~~~~~~\n      |              \
    \                       std::__cxx11::to_string\nIn file included from /usr/include/c+"
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    int n=s.size();\n  \
    \  std::string result;\n    for (int i=0;i<n;i++) {\n        if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            result+=(s[i]-65+26);\n        }\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            result+=(s[i]-97+26);\n        }\n   \
    \     else result+=s[i];\n    }\n    \n    return result; \n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmprl_h02r9: /tmp/tmprl_h02r9.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  assert(s.size() > 0);\n  //\
    \ Use a map to store a counter to find out whether a letter is upper or lower\
    \ case.\n  std::map<char, int> counter;\n  for (auto c : s) {\n    if (std::isalpha(c))\
    \ {\n      counter[toupper(c)] ++;\n      counter[tolower(c)] --;\n    } else\
    \ {\n      counter[c] ++;\n    }\n  }\n  // We will store the original string\
    \ into a new string.\n  std::string ans;\n  for (auto c : s) {\n    if (std::isalpha(c))\
    \ {\n      // If this is a letter, check whether it is upper or lower case.\n\
    \      if (counter[toupper(c)] > 0) {\n        ans += tolower(c);\n      }\n \
    \     if (counter[tolower(c)] > 0) {\n        ans += toupper(c);\n      }\n  \
    \  } else {\n      ans += c;\n    }\n  }\n  return ans;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmppmecrdi1: /tmp/tmppmecrdi1.cpp:43: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        char c = s[i];\n        if (isalpha(c))\
    \ {\n            if (toupper(c) != tolower(c)) {\n                res = s + c;\n\
    \            } else {\n                res = s;\n            }\n        } else\
    \ {\n            res = s;\n        }\n    }\n    reverse(res.begin(), res.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp3yi4nanr: /tmp/tmp3yi4nanr.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(s.size() >= 2);\n \
    \   for(size_t i = 0; i< s.size();i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n\
    \            s[i] = s[i] - 'a' + 'A';\n        }\n        else if(s[i] >= 'A'\
    \ && s[i] <= 'Z'){\n            s[i] = s[i] - 'A' + 'a';\n        }\n        else{\n\
    \            s[i] = s[i];\n        }\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjz50a6x3: /tmp/tmpjz50a6x3.cpp:30: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]>=97 && s[i]<=122){\n            s[i]=toupper(s[i]);\n       \
    \ }else if(s[i]>=65 && s[i]<=90){\n            s[i]=tolower(s[i]);\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmprbo2dwjm: /tmp/tmprbo2dwjm.cpp:25: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\tassert(s.size() > 0);\n\tstd::string\
    \ res = \"\";\n\tfor (char ch : s) {\n\t\tif (isalpha(ch)) {\n\t\t\tif (toupper(ch)\
    \ != ch)\n\t\t\t\tres += toupper(ch);\n\t\t\telse\n\t\t\t\tres += ch;\n\t\t} else\
    \ {\n\t\t\tres += ch;\n\t\t}\n\t}\n\treturn res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpx7ebh1vl: /tmp/tmpx7ebh1vl.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string str = \"\"; //\
    \ string returned by the function\n    bool flag = true; // flag representing\
    \ if the first letter is upper\n    int length = 0; // count the length of the\
    \ string\n    for (auto c : s) {\n        // if the character is not a letter,\
    \ then append it to str\n        if (c < 'a' || c > 'z') {\n            str +=\
    \ c;\n            length++;\n        } else {\n            if (flag) { // the\
    \ character is not upper and is not the first letter\n                // reverse\
    \ the case\n                str += (c >= 'A') ? (c - 'A' + 'a') : (c - 'a' + 'A');\n\
    \                length++;\n            } else { // the character is not upper\
    \ and is the first letter\n                // keep it\n                str +=\
    \ c;\n                length++;\n            }\n            flag = !flag; // reverse\
    \ the flag\n        }\n    }\n    if (length != 0) { // the last letter was not\
    \ a letter\n        str += 'z'; // append the last letter\n        length++;\n\
    \    }\n    return str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpd7u90uaz: /tmp/tmpd7u90uaz.cpp:42: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]>='A' && s[i]<='Z'){\n            s[i]-=32;\n        }\n     \
    \   else if(s[i]>='a' && s[i]<='z'){\n            s[i]+=32;\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmphx93j9b2: /tmp/tmphx93j9b2.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n\
    \            result = std::string(s[i], toupper(s[i])) + result;\n        } else\
    \ {\n            result = std::string(s[i], s[i]) + result;\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmphxcka1hq: /tmp/tmphxcka1hq.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string t = s;\n    for(size_t\
    \ i = 0; i < t.length(); i++) {\n        if(std::isalpha(std::tolower(t[i])))\
    \ {\n            std::string str = t;\n            t = t.substr(0, i) + std::toupper(t.substr(i,\
    \ 1)) + t.substr(i+1);\n            t.assign(str);\n        } else {\n       \
    \     t = t.substr(0, i) + std::toupper(t.substr(i, 1)) + t.substr(i+1);\n   \
    \     }\n    }\n    return t;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprb84ueia.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmprb84ueia.cpp:17:61: error: no matching function for call to \u2018\
    toupper(std::__cxx11::basic_string<char>)\u2019\n   17 |             t = t.substr(0,\
    \ i) + std::toupper(t.substr(i, 1)) + t.substr(i+1);\n      |                \
    \                                             ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmprb84ueia.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmprb84ueia.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmprb84ueia.cpp:17:61: note:   candidate expects 2 arguments,\
    \ 1 provided\n   17 |             t = t.substr(0, i) + std::toupper(t.substr(i,\
    \ 1)) + t.substr(i+1);\n      |                                              \
    \               ^\n/tmp/tmprb84ueia.cpp:20:61: error: no matching function for\
    \ call to \u2018toupper(std::__cxx11::basic_string<char>)\u2019\n   20 |     \
    \        t = t.substr(0, i) + std::toupper(t.sub"
  stdout: ''
  timestamp: 1660098292
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(unsigned int i = 0; i\
    \ < s.length(); i++)\n    {\n        if(s[i] == '#')\n            s[i] = 'a';\n\
    \        else if(s[i] == 'A')\n            s[i] = 'a';\n        else if(s[i] ==\
    \ '@')\n            s[i] = 'b';\n        else if(s[i] == 'B')\n            s[i]\
    \ = 'b';\n        else if(s[i] == 'c')\n            s[i] = 'c';\n        else\
    \ if(s[i] == 'D')\n            s[i] = 'd';\n        else if(s[i] == 'e')\n   \
    \         s[i] = 'e';\n        else if(s[i] == 'F')\n            s[i] = 'f';\n\
    \        else if(s[i] == 'G')\n            s[i] = 'g';\n        else if(s[i] ==\
    \ 'H')\n            s[i] = 'h';\n        else if(s[i] == 'i')\n            s[i]\
    \ = 'i';\n        else if(s[i] == 'J')\n            s[i] = 'j';\n        else\
    \ if(s[i] == 'k')\n            s[i] = 'k';\n        else if(s[i] == 'L')\n   \
    \         s[i] = 'l';\n        else if(s[i] == 'm')\n            s[i] = 'm';\n\
    \        else if(s[i] == 'n')\n            s[i] = 'n';\n        else if(s[i] ==\
    \ 'O')\n            s[i] = 'o';\n        else if(s[i] == 'P')\n            s[i]\
    \ = 'p';\n        else if(s[i] == 'Q')\n            s[i] = 'q';\n        else\
    \ if(s[i] == 'r')\n            s[i] = 'r';\n        else if(s[i] == 's')\n   \
    \         s[i] = 's';\n        else if(s[i] == 't')\n            s[i] = 't';\n\
    \        else if(s[i] == 'U')\n            s[i] = 'u';\n        else if(s[i] ==\
    \ 'V')\n            s[i] = 'v';\n        else if(s[i] == 'W')\n            s[i]\
    \ = 'w';\n        else if(s[i] == 'X')\n            s[i] = 'x';\n        else\
    \ if(s[i] == 'Y')\n            s[i] = 'y';\n        else if(s[i] == 'Z')\n   \
    \         s[i] = 'z';\n    }\n\n    std::string result = s;\n    for(unsigned\
    \ int i = 0; i < s.length(); i++)\n    {\n        if(s[i] == 'a' || s[i] == 'A')\n\
    \            result += 'A';\n        else if(s[i] == 'b' || s[i] == 'B')\n   \
    \         result += 'B';\n        else if(s[i] == 'c' || s[i] == 'C')\n      \
    \      result += 'C';\n        else if(s[i] == 'd' || s[i] == 'D')\n         \
    \   result += 'D';\n        else if(s[i] == 'e' || s[i] == 'E')\n            result\
    \ += 'E';\n        else if(s[i] == 'f' || s[i] == 'F')\n            result +=\
    \ 'F';\n        else if(s[i] == 'g' || s[i] == 'G')\n            result += 'G';\n\
    \        else if(s[i] == 'h' || s[i] == 'H\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph9lfcah7.cpp:90:40: warning: missing terminating ' character\n\
    \   90 |         else if(s[i] == 'h' || s[i] == 'H\n      |                  \
    \                      ^\n/tmp/tmph9lfcah7.cpp:90:40: error: missing terminating\
    \ ' character\n   90 |         else if(s[i] == 'h' || s[i] == 'H\n      |    \
    \                                    ^~\n/tmp/tmph9lfcah7.cpp: In function \u2018\
    std::string solve(std::string)\u2019:\n/tmp/tmph9lfcah7.cpp:91:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   91 | }\n      | ^\n/tmp/tmph9lfcah7.cpp:90:39:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   90 |         else\
    \ if(s[i] == 'h' || s[i] == 'H\n      |                ~                     \
    \ ^\n      |                                       )\n   91 | }\n      | ~   \
    \                                   \n/tmp/tmph9lfcah7.cpp:91:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   91 | }\n      | ^\n/tmp/tmph9lfcah7.cpp:92:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   92 | int main() {\n      |            ^\n/tmp/tmph9lfcah7.cpp:102:1: error:\
    \ expected \u2018}\u2019 at end of input\n  102 | }\n      | ^\n/tmp/tmph9lfcah7.cpp:12:34:\
    \ note: to match this \u2018{\u2019\n   12 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmph9lfcah7.cpp:102:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  102 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098291
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // Do not write main() function.\n\
    \    // Do not read input, instead use the arguments to the function.\n    //\
    \ Do not print the output, instead return values that user needs\n    std::string\
    \ ans = s;\n    for(int i=0;i<s.size();i++){\n        char c=s[i];\n        if(c>=65\
    \ && c<=90)\n        {\n            ans=ans.substr(0,i)+(c+32)+ans.substr(i+1);\n\
    \        }\n        else\n        {\n            ans=ans.substr(0,i)+c+ans.substr(i+1);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkqxacf3d.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpkqxacf3d.cpp:21:32: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018int\u2019)\n\
    \   21 |             ans=ans.substr(0,i)+(c+32)+ans.substr(i+1);\n      |    \
    \             ~~~~~~~~~~~~~~~^~~~~~~\n      |                           |    \
    \   |\n      |                           |       int\n      |                \
    \           std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkqxacf3d.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpkqxacf3d.cpp:21:38:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   21 |             ans=ans.substr(0,i)+(c+32)+ans.substr(i+1);\n\
    \      |                                      ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkqxacf3d.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iter"
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  int n = s.length();\n  std::string\
    \ ans = \"\";\n  for(int i = 0; i < n; i++){\n    if(s[i] >= 'a' && s[i] <= 'z'){\n\
    \      ans += s[i];\n    }else{\n      ans += std::tolower(s[i]);\n      ans +=\
    \ std::toupper(s[i]);\n    }\n  }\n  assert(ans == \"abcdefghijklmnopqrstuvwxyz\"\
    );\n  return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpkdfr3jn5: /tmp/tmpkdfr3jn5.cpp:23: std::string solve(std::string): Assertion
    `ans == "abcdefghijklmnopqrstuvwxyz"'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(unsigned i = 0; i < s.length();\
    \ i++) {\n        if(std::isalpha(s[i])) {\n            // Reverse the case\n\
    \            char c = s[i];\n            s[i] = c >= 'a' && c <= 'z' ? c + 32\
    \ : c - 32;\n        }\n    }\n    \n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp3lox50el: /tmp/tmp3lox50el.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for (std::size_t i = 0; i\
    \ < s.length(); i++) {\n        std::cout << s.at(i);\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpvw3vn6br: /tmp/tmpvw3vn6br.cpp:20: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // Write your code here\n\
    \    \n    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpva_mpa_n: /tmp/tmpva_mpa_n.cpp:20: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098293
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.size();\n    bool\
    \ flag = true;\n    if (len > 1) {\n        // Your code here.\n        int len2\
    \ = 1;\n        for (int i = 0; i < len - 1; i++) {\n            if (s[i] != s[i\
    \ + 1]) {\n                len2 = len2 + 1;\n            }\n        }\n      \
    \  flag = len2 != 1;\n    }\n    std::string ans = s;\n    for (int i = 0; i <\
    \ ans.size(); i++) {\n        char c = ans[i];\n        if ((c >= 'a' && c <=\
    \ 'z') || (c >= 'A' && c <= 'Z')) {\n            ans[i] = 'A' + (c - 'a');\n \
    \       } else if (c == '@') {\n            ans[i] = 'a';\n        }\n    }\n\
    \    if (flag) {\n        ans = solve(ans);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098293
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty())\n    {\n   \
    \     return s;\n    }\n    \n    int size = s.size();\n    \n    for(int i =\
    \ 0; i < size; i++)\n    {\n        if(isalpha(s[i]) != 0)\n        {\n      \
    \      for(int j = i; j < size - 1; j++)\n            {\n                if(toupper(s[j])\
    \ >= toupper(s[j + 1]))\n                {\n                    swap(s[j], s[j\
    \ + 1]);\n                }\n                else\n                {\n       \
    \             break;\n                }\n            }\n        }\n        else\n\
    \        {\n            break;\n        }\n    }\n    \n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5fbp6z8.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpx5fbp6z8.cpp:28:21: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   28 |                     swap(s[j], s[j + 1]);\n      |          \
    \           ^~~~\n/tmp/tmpx5fbp6z8.cpp:28:21: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpx5fbp6z8.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpx5fbp6z8.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpx5fbp6z8.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpx5fbp6z8.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap"
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(s.size() > 0);\n  \
    \  int cnt = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] ==\
    \ char('A')) {\n            s[i] = char('Z');\n            cnt--;\n        }\n\
    \        else if (s[i] == char('a')) {\n            s[i] = char('z');\n      \
    \      cnt--;\n        }\n    }\n    if (cnt == 0) {\n        std::reverse(s.begin(),\
    \ s.end());\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpw4rkir0l: /tmp/tmpw4rkir0l.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i=0; i< s.size();\
    \ i++) {\n        if(isupper(s[i])) {\n            s[i] = tolower(s[i]);\n   \
    \     }\n    }\n    for(int i=s.size()-1; i>=0; i--) {\n        if(isupper(s[i]))\
    \ {\n            s[i] = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpj3c9uamb: /tmp/tmpj3c9uamb.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098293
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    for(int i = 0; i < s.size();\
    \ i++)\n    {\n        if (isalpha(s[i]))\n        {\n            s[i] = toupper(s[i]);\n\
    \            s[i] = tolower(s[i]);\n        }\n    }\n    \n    std::string s1(s);\n\
    \    \n    int len = s1.length();\n    std::string s2(len);\n    \n    for(int\
    \ i = 0; i < len; i++)\n    {\n        s2[i] = s1[i];\n    }\n    \n    return\
    \ s2;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg759b4zp.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpg759b4zp.cpp:26:23: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::basic_string(int&)\u2019\n   26 |     std::string\
    \ s2(len);\n      |                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpg759b4zp.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note: candidate: \u2018template<class _Tp, class> std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::basic_string(const _Tp&, const _Alloc&)\u2019\n  654 |  basic_string(const\
    \ _Tp& __t, const _Alloc& __a = _Alloc())\n      |  ^~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:654:2:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/bits/move.h:55,\n                 from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpg759b4zp.cpp:2:\n/usr/include/c++/9/type_traits:\
    \ In substitution of \u2018template<bool _Cond, class _Tp> using enable_if_t =\
    \ typename std::enable_if::type [with bool _Cond = std::integral_constant<bool,\
    \ false>::value; _Tp = void]\u2019:\n/usr/include/c++/9/bits/basic_string.h:121:8:\
    \   required by substitution of \u2018template<class _CharT, class _Traits, class\
    \ _Alloc> template<class _Tp, class _Res> using _If_sv = std::enable_if_t<std::__and"
  stdout: ''
  timestamp: 1660098292
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\t// Your code goes here\n\tstd::map<char,\
    \ int> m;\n\tfor (auto &c : s) {\n\t\tif (m.find(c) == m.end()) m[c] = 1;\n\t\t\
    else m[c]++;\n\t}\n\tstd::string ans = \"\";\n\tfor (auto &i : m) {\n\t\tif (i.second\
    \ > 1) {\n\t\t\tif (i.first >= 'A' && i.first <= 'Z') ans += 'a' + i.first - 'A';\n\
    \t\t\telse if (i.first >= 'a' && i.first <= 'z') ans += 'A' + i.first - 'a';\n\
    \t\t\telse ans += i.first;\n\t\t} else {\n\t\t\tans += i.first;\n\t\t}\n\t}\n\t\
    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmplw41dybn: /tmp/tmplw41dybn.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    // Write your code here.\n\
    \    \n    for(int i = 0; i < s.length(); i++){\n        if(s[i] >= 'a' && s[i]\
    \ <= 'z'){\n            s[i] = s[i] - 32;\n        }else if(s[i] >= 'A' && s[i]\
    \ <= 'Z'){\n            s[i] = s[i] + 32;\n        }\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpnz1sn6nk: /tmp/tmpnz1sn6nk.cpp:28: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  // code here\n  assert(s.size()\
    \ != 0);\n  if(s.find_first_not_of('a') == s.find_first_not_of('z')){\n    std::string\
    \ newS = \"\";\n    for(char c : s){\n      if(c == 'a' || c == 'A'){\n      \
    \  c = 'A';\n      }\n      else if(c == 'b' || c == 'B'){\n        c = 'b';\n\
    \      }\n      else if(c == 'c' || c == 'C'){\n        c = 'C';\n      }\n  \
    \    else if(c == 'd' || c == 'D'){\n        c = 'D';\n      }\n      else if(c\
    \ == 'e' || c == 'E'){\n        c = 'E';\n      }\n      else if(c == 'f' || c\
    \ == 'F'){\n        c = 'F';\n      }\n      else if(c == 'g' || c == 'G'){\n\
    \        c = 'G';\n      }\n      else if(c == 'h' || c == 'H'){\n        c =\
    \ 'H';\n      }\n      else if(c == 'i' || c == 'I'){\n        c = 'I';\n    \
    \  }\n      else if(c == 'j' || c == 'J'){\n        c = 'J';\n      }\n      else\
    \ if(c == 'k' || c == 'K'){\n        c = 'K';\n      }\n      else if(c == 'l'\
    \ || c == 'L'){\n        c = 'L';\n      }\n      else if(c == 'm' || c == 'M'){\n\
    \        c = 'M';\n      }\n      else if(c == 'n' || c == 'N'){\n        c =\
    \ 'N';\n      }\n      else if(c == 'o' || c == 'O'){\n        c = 'O';\n    \
    \  }\n      else if(c == 'p' || c == 'P'){\n        c = 'P';\n      }\n      else\
    \ if(c == 'q' || c == 'Q'){\n        c = 'Q';\n      }\n      else if(c == 'r'\
    \ || c == 'R'){\n        c = 'R';\n      }\n      else if(c == 's' || c == 'S'){\n\
    \        c = 'S';\n      }\n      else if(c == 't' || c == 'T'){\n        c =\
    \ 'T';\n      }\n      else if(c == 'u' || c == 'U'){\n        c = 'U';\n    \
    \  }\n      else if(c == 'v' || c == 'V'){\n        c = 'V';\n      }\n      else\
    \ if(c == 'w' || c == 'W'){\n        c = 'W';\n      }\n      else if(c == 'x'\
    \ || c == 'X\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps6navzf2.cpp:87:32: warning: missing terminating ' character\n\
    \   87 |       else if(c == 'x' || c == 'X\n      |                          \
    \      ^\n/tmp/tmps6navzf2.cpp:87:32: error: missing terminating ' character\n\
    \   87 |       else if(c == 'x' || c == 'X\n      |                          \
    \      ^~\n/tmp/tmps6navzf2.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmps6navzf2.cpp:88:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   88 | }\n      | ^\n/tmp/tmps6navzf2.cpp:87:31: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   87 |       else if(c == 'x' ||\
    \ c == 'X\n      |              ~                ^\n      |                  \
    \             )\n   88 | }\n      | ~                              \n/tmp/tmps6navzf2.cpp:88:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   88 | }\n \
    \     | ^\n/tmp/tmps6navzf2.cpp:89:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   89 | int main() {\n      |            ^\n\
    /tmp/tmps6navzf2.cpp:99:1: error: expected \u2018}\u2019 at end of input\n   99\
    \ | }\n      | ^\n/tmp/tmps6navzf2.cpp:15:59: note: to match this \u2018{\u2019\
    \n   15 |   if(s.find_first_not_of('a') == s.find_first_not_of('z')){\n      |\
    \                                                           ^\n/tmp/tmps6navzf2.cpp:99:1:\
    \ error: expected \u2018}\u2019 at end of input\n   99 | }\n      | ^\n/tmp/tmps6navzf2.cpp:12:34:\
    \ note: to match this \u2018{\u2019\n   12 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmps6navzf2.cpp:99:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   99 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660098293
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string answer;\n    for\
    \ (std::string::const_iterator it = s.begin(); it != s.end(); ++it) {\n      \
    \  if (isalpha((unsigned char)*it)) {\n            answer += toupper((unsigned\
    \ char)*it);\n        } else {\n            answer += *it;\n        }\n    }\n\
    \    answer = std::string(answer.begin(), answer.end());\n    return answer;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp88mmx0sa: /tmp/tmp88mmx0sa.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.size();\n    \n\
    \    for(int i=0;i<len;i++){\n        if(s[i] == '#'){\n            s[i] = 'a';\n\
    \            s[i+1] = 'b';\n            s[i+2] = 'c';\n        }\n        else\
    \ if(s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = s[i] - 32;\n        }\n\
    \        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            s[i] = s[i] - 64;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpdi25sc3h: /tmp/tmpdi25sc3h.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    if(s.length()==0)\n\
    \        return s;\n    \n    if(std::all_of(s.begin(),s.end(),::isalpha))\n \
    \       return s;\n    \n    std::string newS = s;\n    \n    for (int i = 0;\
    \ i < s.length(); i++) \n    {\n        if(islower(s[i]))\n            newS[i]\
    \ = toupper(s[i]);\n        else if (isupper(s[i]))\n            newS[i] = tolower(s[i]);\n\
    \        else\n            newS[i] = s[i];\n    }\n    return newS;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp6ac1wzny: /tmp/tmp6ac1wzny.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    size_t pos = 0;\n    for(\
    \ ;pos<s.size(); pos++ ){\n        if(isalpha(s[pos])){\n            char c =\
    \ toupper(s[pos]);\n            s[pos] = tolower(c);\n            s[s.size() -\
    \ pos - 1] = c;\n        }else{\n            s[pos] = s[pos];\n        }\n   \
    \ }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp6mf15tzc: /tmp/tmp6mf15tzc.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::vector<char> vs;\n  \
    \  for (auto c : s) {\n        if (std::isalpha(c)) {\n            vs.push_back(std::tolower(c));\n\
    \        } else {\n            vs.push_back(c);\n        }\n    }\n    std::string\
    \ res;\n    for (auto i : vs) {\n        res += i;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmphjmqr0tm: /tmp/tmphjmqr0tm.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    if(s.size()\
    \ == 0)\n    {\n        return s;\n    }\n    if(islower(s[s.size()-1]))\n   \
    \ {\n        return solve(s.substr(0, s.size()-1)) + s[s.size()-1] + solve(s.substr(s.size()\
    \ - 1));\n    }\n    else \n    {\n        return solve(s.substr(0, s.size() -\
    \ 1)) + s[s.size()-1] + solve(s.substr(s.size() - 1));\n    }\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i=0;i<s.length();i++){\n\
    \        if(isalpha(s[i])){\n            int temp = s[i];\n            s[i] =\
    \ toupper(s[i]);\n            s[i] = tolower(s[i]);\n            s[i] = temp;\n\
    \        }\n        else{\n            s[i] = s[i];\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp09i794ah: /tmp/tmp09i794ah.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(s.size() > 0);\n  \
    \  std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (s[i] >= 'a' && s[i] <= 'z') {\n            ans = ans.substr(0, i) + s[s.size()-1]\
    \ + ans.substr(i+1, ans.size()-1);\n        }\n        else if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n            ans = ans.substr(0, i) + s[s.size()-1] + ans.substr(i+1,\
    \ ans.size()-1);\n        }\n        else ans = ans.substr(0, i) + s[s.size()-1]\
    \ + ans.substr(i+1, ans.size()-1);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpr1i3n3qo: /tmp/tmpr1i3n3qo.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    \n    // write your\
    \ code in main here\n    if(s[0]!='A'){\n    for(int i=0;i<s.size();i++){\n  \
    \      if(s[i]>=97 && s[i]<=122){\n            s[i]=s[i]-32;\n        }\n    \
    \    else{\n            s[i]=s[i];\n        }\n    }\n    }\n    \n    \n    if(s[0]==0){\n\
    \        for(int i=0;i<s.size();i++){\n            s[i]=s[i];\n        }\n   \
    \     \n    }\n    \n    \n        \n    return s;\n    \n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpdt3yn228: /tmp/tmpdt3yn228.cpp:42: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            if(toupper(s[i]) < toupper(s[i\
    \ + 1])) {\n                auto temp = s[i];\n                s[i] = toupper(s[i\
    \ + 1]);\n                s[i + 1] = temp;\n            } else if(tolower(s[i])\
    \ > tolower(s[i + 1])) {\n                auto temp = s[i];\n                s[i]\
    \ = tolower(s[i + 1]);\n                s[i + 1] = temp;\n            }\n    \
    \    }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpcmkoose_: /tmp/tmpcmkoose_.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            s[i] = toupper(s[i]);\n   \
    \     }\n        if(isdigit(s[i])) {\n            s[i] = tolower(s[i]);\n    \
    \    }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpdw4w3xm4: /tmp/tmpdw4w3xm4.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // Write your code here.\n\
    \    std::vector<char> v(s.size());\n    for (size_t i = 0; i < s.size(); ++i){\n\
    \        v[i] = s[i];\n    }\n\n    std::string res = \"\";\n    for (size_t i\
    \ = 0; i != s.size(); ++i){\n        if (std::isalpha(v[i])){\n            v[i]\
    \ = std::toupper(v[i]);\n        } else {\n            v[i] = std::tolower(v[i]);\n\
    \        }\n        res += v[i];\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp6x788e57: /tmp/tmp6x788e57.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::stack<char> st;\n   \
    \ bool flag = false;\n    for (int i = 0; i < s.length(); i++) {\n        char\
    \ ch = s[i];\n        if (flag == false) {\n            flag = std::isalpha(ch);\n\
    \        }\n        if (flag == true) {\n            flag = !(std::isupper(ch)\
    \ || std::islower(ch));\n        }\n        if (flag == true) {\n            st.push(ch);\n\
    \        } else {\n            while (!st.empty()) {\n                s[i] = st.top();\n\
    \                st.pop();\n            }\n            flag = false;\n       \
    \ }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpu228i4q5: /tmp/tmpu228i4q5.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // write your code here\n\
    \    std::string res = \"\";\n    std::transform(s.begin(), s.end(), std::back_inserter(res),\
    \ [](char ch){\n        if(std::isalpha(ch)){\n            if(ch == 'a'){\n  \
    \              return std::toupper(ch);\n            }\n            return std::tolower(ch);\n\
    \        }\n        return ch;\n    });\n    return res;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6unmtuxe.cpp: In lambda function:\n/tmp/tmp6unmtuxe.cpp:22:16:\
    \ error: inconsistent types \u2018int\u2019 and \u2018char\u2019 deduced for lambda\
    \ return type\n   22 |         return ch;\n      |                ^~\n"
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            s[i] = toupper(s[i]);\n  \
    \      }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpd7qfhzty: /tmp/tmpd7qfhzty.cpp:22: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpncrgazi1: /tmp/tmpncrgazi1.cpp:18: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res=\"\";\n  \
    \  for(size_t i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(i>0){\n\
    \                res=res+s[i];\n            }\n            s[i]=toupper(s[i]);\n\
    \            if(i<s.size()){\n                s[i]=tolower(s[i]);\n          \
    \  }\n        }\n        else{\n            res=res+s[i];\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpi911f2o6: /tmp/tmpi911f2o6.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (std::isalpha(s[i])) {\n            s[i] = std::toupper(s[i]);\n\
    \        } else {\n            s[i] = std::tolower(s[i]);\n        }\n    }\n\n\
    \    std::string ans = \"\";\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     ans += s[i];\n    }\n\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpsa03okmu: /tmp/tmpsa03okmu.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(s.size() != 0);\n \
    \   \n    std::string resultingString;\n    int currentPos = 0;\n    \n    for\
    \ (int i = 0; i < s.size();) {\n        if (s[i] == '#') currentPos++;\n     \
    \   else if (s[i] == '@') currentPos--;\n        else resultingString.append(s[i]);\n\
    \        i++;\n    }\n    if (currentPos == 0) resultingString = resultingString.rbegin();\n\
    \    return resultingString;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8hvs_8lf.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp8hvs_8lf.cpp:21:41: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::append(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   21 |         else resultingString.append(s[i]);\n\
    \      |                                         ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp8hvs_8lf.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1267:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n 1267 |       append(const _CharT* __s)\n      |       ^~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:1267:7: note:   conversion of argument\
    \ 1 would be ill-formed:\n/tmp/tmp8hvs_8lf.cpp:21:41: error: invalid conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n   21 |  \
    \       else resultingString.append(s[i]);\n      |                          \
    \               ^\n      |                                         |\n      |\
    \                                         __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/in"
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            result += s[i] - 'a' + 'A';\n        }\n        else {\n    \
    \        result += s[i];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmppzgb1xn_: /tmp/tmppzgb1xn_.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length() == 0)\n    \
    \    return s;\n    bool isUpper =false;\n    for(auto c:s)\n    {\n        if(isUpper)\n\
    \            if(c>='A' && c<='Z')\n                c ^= 32;\n            else\n\
    \                isUpper = false;\n        else\n            if(c>='a' && c<='z')\n\
    \                c ^= 32;\n            else\n                isUpper = true;\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpj_a_jgj5: /tmp/tmpj_a_jgj5.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098294
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::stack<char> st;\n   \
    \ for (auto c : s) \n    {\n        st.push(c);\n    }\n    std::string ans =\
    \ \"\";\n    while (!st.empty()) {\n        char c = st.top();\n        st.pop();\n\
    \        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))\n            ans\
    \ += c;\n        else\n            ans += toupper(c);\n        st.push(c);\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098300
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\t// Do not write main() function.\n\
    \t// Do not read input, instead use the arguments to the function.\n\t// Do not\
    \ print the output, instead return values as specified\n\t// by problem statement.\n\
    \tstd::string res;\n\tint flag=0;\n\tfor(int i=0;i<s.length();i++)\n\t{\n\t\t\
    if(isalpha(s[i]))\n\t\t{\n\t\t\tflag=1;\n\t\t\t//char c=s[i];\n\t\t\tstd::reverse(s.begin(),s.end());\n\
    \t\t}\n\t\telse\n\t\t{\n\t\t\tres=res+s[i];\n\t\t}\n\t}\n\tif(flag==0)\n\t{\n\t\
    \tstd::reverse(s.begin(),s.end());\n\t}\n\t\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpb922qca9: /tmp/tmpb922qca9.cpp:41: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // write your code here\n\
    \    char ch;\n    int l = s.length();\n    std::string result;\n    for(int i=0;\
    \ i< l;i++) {\n        ch = s[i];\n        if( isalpha(ch)) {\n            int\
    \ len = getCase(ch, i);\n            if( len > 0)\n                i = len;\n\
    \        }\n        result.append(1, s[i]);\n    }\n    return result; \n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx4kq8t_r.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpx4kq8t_r.cpp:20:23: error: \u2018getCase\u2019 was not declared in\
    \ this scope; did you mean \u2018getdate\u2019?\n   20 |             int len =\
    \ getCase(ch, i);\n      |                       ^~~~~~~\n      |            \
    \           getdate\n"
  stdout: ''
  timestamp: 1660098294
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    for(int i = 0; i<s.size();\
    \ i++)\n    {\n        if(isalpha(s[i]))\n        {\n            s[i] = toupper(s[i]);\n\
    \        }\n        else\n        {\n            s[i] = tolower(s[i]);\n     \
    \   }\n    }\n\n    if(s.size() == 0)\n    {\n        s = \"#\";\n    }\n\n  \
    \  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpt7m_zh2l: /tmp/tmpt7m_zh2l.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::sort(s.begin(), s.end());\n\
    \    std::reverse(s.begin(), s.end());\n    if(s.size() == 0){\n        return\
    \ s;\n    }\n    for(char i : s) {\n        while(!s.empty() && i >= 'a' && i\
    \ <= 'z'){\n            if(s[0] >= 'A' && s[0] <= 'Z'){\n                s +=\
    \ \"A\";\n                s.erase(0, 1);\n            }\n            else if(s[0]\
    \ >= 'a' && s[0] <= 'z'){\n                s += \"a\";\n                s.erase(0,\
    \ 1);\n            }\n            else{\n                s += s[0];\n        \
    \        s.erase(0, 1);\n            }\n        }\n        while(!s.empty() &&\
    \ i >= 'A' && i <= 'Z'){\n            if(s[0] >= 'a' && s[0] <= 'z'){\n      \
    \          s += \"a\";\n                s.erase(0, 1);\n            }\n      \
    \      else if(s[0] >= 'A' && s[0] <= 'z'){\n                s += \"A\";\n   \
    \             s.erase(0, 1);\n            }\n            else{\n             \
    \   s += s[0];\n                s.erase(0, 1);\n            }\n        }\n   \
    \ }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098300
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::stack<char> stk;\n  \
    \  for(std::string::iterator i = s.begin(); i != s.end(); ++i) {\n        if(isalpha(*i))\
    \ {\n            stk.push(*i);\n        }\n        else {\n            while(!stk.empty()\
    \ && isalpha(stk.top())) {\n                stk.pop();\n            }\n      \
    \      while(!stk.empty() && islower(stk.top())) {\n                stk.pop();\n\
    \            }\n            stk.push(*i);\n        }\n    }\n    return std::string(stk.begin(),\
    \ stk.end());\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpos87f1ri.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpos87f1ri.cpp:28:28: error: \u2018class std::stack<char>\u2019 has no\
    \ member named \u2018begin\u2019\n   28 |     return std::string(stk.begin(),\
    \ stk.end());\n      |                            ^~~~~\n/tmp/tmpos87f1ri.cpp:28:41:\
    \ error: \u2018class std::stack<char>\u2019 has no member named \u2018end\u2019\
    \n   28 |     return std::string(stk.begin(), stk.end());\n      |           \
    \                              ^~~\n"
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    for(int i=0 ;i<s.length();i++){\n\
    \        if(s[i]>='a'&&s[i]<='z'){\n            s[i]=s[i]-'a'+(s[i]-'A'+'a');\n\
    \        }\n    }\n    std::string ans = s;\n    return ans;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpyv9eexeo: /tmp/tmpyv9eexeo.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n\t// Write your code here\n\t\
    assert(s.size()>0);\n\tint sz=s.size();\n\tfor(int i=0;i<sz;i++){\n\t\tif(s[i]>='a'\
    \ && s[i]<='z')\n\t\t\ts[i]-='a';\n\t\telse\n\t\t\ts[i]-='A';\n\t}\n\tstd::string\
    \ res;\n\tfor(int i=0;i<sz;i++){\n\t\tres+=s[i];\n\t}\n\treturn res;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpkxhky30p: /tmp/tmpkxhky30p.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    string newString;\n    for\
    \ (int i = 0; i <= s.size(); i++) {\n        if (s[i] == ' ') {\n            newString\
    \ += ' ';\n        }\n        else {\n            newString += s[i];\n       \
    \ }\n    }\n    if (newString.size() <= 1) {\n        return newString;\n    }\n\
    \    for (int i = 0; i < newString.size(); i++) {\n        if (newString[i] >=\
    \ 'A' && newString[i] <= 'Z') {\n            newString[i] = newString[i] - 32;\n\
    \        }\n        else if (newString[i] >= 'a' && newString[i] <= 'z') {\n \
    \           newString[i] = newString[i] + 32;\n        }\n    }\n    return newString;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi53hyoav.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpi53hyoav.cpp:13:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   13 |     string newString;\n      |     ^~~~~~\n/tmp/tmpi53hyoav.cpp:13:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpi53hyoav.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpi53hyoav.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpi53hyoav.cpp:16:13: error: \u2018newString\u2019 was not declared in this\
    \ scope\n   16 |             newString += ' ';\n      |             ^~~~~~~~~\n\
    /tmp/tmpi53hyoav.cpp:19:13: error: \u2018newString\u2019 was not declared in this\
    \ scope\n   19 |             newString += s[i];\n      |             ^~~~~~~~~\n\
    /tmp/tmpi53hyoav.cpp:22:9: error: \u2018newString\u2019 was not declared in this\
    \ scope\n   22 |     if (newString.size() <= 1) {\n      |         ^~~~~~~~~\n\
    /tmp/tmpi53hyoav.cpp:25:25: error: \u2018newString\u2019 was not declared in this\
    \ scope\n   25 |   "
  stdout: ''
  timestamp: 1660098295
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    if (s.empty()) return\
    \ s;\n    \n    if (s[0] == '#')\n    {\n        \n        std::stringstream res;\n\
    \        \n        res.str(\"\");\n        \n        for (auto &c : s)\n     \
    \   {\n            if (c == '#') continue;\n            \n            if (std::isalpha(c))\n\
    \            {\n                \n                if (c.size() > 1)\n        \
    \        {\n                    std::swap(c, c[c.size() - 1]);\n             \
    \   }\n            }\n            else\n            {\n                \n    \
    \            res << c;\n            }\n        }\n        \n        return res.str();\n\
    \    }\n    else\n    {\n        \n        std::string result = s;\n        \n\
    \        for (auto &c : s)\n        {\n            \n            if (std::isalpha(c))\n\
    \            {\n                \n                if (c.size() > 1)\n        \
    \        {\n                    std::swap(c, c[c.size() - 1]);\n             \
    \   }\n            }\n            else\n            {\n                \n    \
    \            result = c;\n            }\n        }\n        \n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpasz58q1s.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpasz58q1s.cpp:30:23: error: request for member \u2018size\u2019 in \u2018\
    c\u2019, which is of non-class type \u2018char\u2019\n   30 |                \
    \ if (c.size() > 1)\n      |                       ^~~~\n/tmp/tmpasz58q1s.cpp:32:38:\
    \ error: request for member \u2018size\u2019 in \u2018c\u2019, which is of non-class\
    \ type \u2018char\u2019\n   32 |                     std::swap(c, c[c.size() -\
    \ 1]);\n      |                                      ^~~~\n/tmp/tmpasz58q1s.cpp:55:23:\
    \ error: request for member \u2018size\u2019 in \u2018c\u2019, which is of non-class\
    \ type \u2018char\u2019\n   55 |                 if (c.size() > 1)\n      |  \
    \                     ^~~~\n/tmp/tmpasz58q1s.cpp:57:38: error: request for member\
    \ \u2018size\u2019 in \u2018c\u2019, which is of non-class type \u2018char\u2019\
    \n   57 |                     std::swap(c, c[c.size() - 1]);\n      |        \
    \                              ^~~~\n"
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpncrgazi1: /tmp/tmpncrgazi1.cpp:18: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  if (s.size() == 0)\n    return\
    \ s;\n  int i;\n  for (i = 0; i < s.size() - 1; i++) {\n    if (isalpha(s[i])\
    \ == 0 && isalpha(s[i + 1]) == 0) {\n      s[i] = toupper(s[i]);\n      s[i +\
    \ 1] = toupper(s[i + 1]);\n    }\n  }\n  return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpf71cc5v7: /tmp/tmpf71cc5v7.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  // your code goes here\n  \n\
    \  for(int i = 0; i < s.size(); i++)\n  {\n    if(s[i] >= 'a' && s[i] <= 'z')\n\
    \    {\n      s[i] = s[i] - 32;\n      s[i] = s[i] - 'a' + 13;\n    }\n    else\
    \ if(s[i] >= 'A' && s[i] <= 'Z')\n    {\n      s[i] = s[i] - 32;\n      s[i] =\
    \ s[i] - 'A' + 13;\n    }\n    else\n      s[i] = s[i];\n  }\n  std::string res\
    \ = \"\";\n  for(int i = 0; i < s.size(); i++)\n    res += s[i];\n  return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmppb0knsc9: /tmp/tmppb0knsc9.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.empty()) return s;\n\
    \    std::string res;\n    int n = s.size();\n    for (int i = 0; i < n; ++i)\
    \ {\n        char c = s[i];\n        if (isalpha(c)) {\n            if (islower(c))\
    \ {\n                c = toupper(c);\n            } else {\n                c\
    \ = tolower(c);\n            }\n        }\n        res.push_back(c);\n    }\n\
    \    std::reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpkogwzbd_: /tmp/tmpkogwzbd_.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    bool flag=false;\n    int\
    \ n=s.length();\n    for(int i=0;i<n;i++){\n        if(s[i]>= 'a' && s[i] <='z'){\n\
    \            s[i]=s[i]+32-97;\n            flag=true;\n        }\n        else\
    \ if(s[i]>= 'A' && s[i] <='Z'){\n            s[i]=s[i]-32+97;\n            flag=true;\n\
    \        }\n        else if((s[i]>=97 && s[i]<122) || (s[i]>=65 && s[i]<90)) {\n\
    \            flag=false;\n        }\n    }\n    if(!flag) {\n        return s;\n\
    \    }\n    else {\n        std::string reverse;\n        for(int i=0;i<n;i++)\
    \ {\n            reverse+=s[i];\n        }\n        return reverse;\n    }\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmprr01w8oq: /tmp/tmprr01w8oq.cpp:41: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(auto i = s.begin(), last\
    \ = s.end(); i != last; ++i){\n        if(isalpha(*i)){\n            std::string\
    \ newStr;\n            for(auto j = i; j != last; j++){\n                if(isupper(*j))\
    \ newStr += toupper(*j);\n                else if(islower(*j)) newStr += tolower(*j);\n\
    \                else *j == *i ? newStr += toupper(*j) : newStr += *j;\n     \
    \       }\n            s = newStr;\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjdjfxq1x: /tmp/tmpjdjfxq1x.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    //using std::string;\n\
    \    //using std::swap;\n    \n    int n = s.length();\n    \n    // Write your\
    \ code here.\n    \n    std::string t = \"\";\n    \n    if(s.at(0) == s.at(1)\
    \ && s.at(0) == s.at(2)){\n        for(int i=0; i<3; i++){\n            t = s.at(i)+\
    \ t;\n        }\n    }\n    else if(s.at(0) == s.at(1) && s.at(0) != s.at(2)){\n\
    \        for(int i=2; i<n; i++){\n            t = s.at(i)+ t;\n        }\n   \
    \ }\n    else if(s.at(0) != s.at(1) && s.at(0) == s.at(2)){\n        for(int i=2;\
    \ i<n; i++){\n            t = s.at(i)+ t;\n        }\n    }\n    else if(s.at(0)\
    \ != s.at(1) && s.at(0) != s.at(2)){\n        for(int i=3; i<n; i++){\n      \
    \      t = s.at(i)+ t;\n        }\n    }\n    else if(s.at(0) != s.at(1) && s.at(0)\
    \ != s.at(2)){\n        for(int i=3; i<n; i++){\n            t = s.at(i)+ t;\n\
    \        }\n    }\n    \n    \n    return t;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpxi_ch0ej: /tmp/tmpxi_ch0ej.cpp:54: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for (int i=s.length()-1;i>=0;i--)\
    \ {\n        if (isalpha(s[i])) {\n            s[i] = toupper(s[i]);\n       \
    \ }\n        else {\n            s[i] = tolower(s[i]);\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp4n53twh0: /tmp/tmp4n53twh0.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098296
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i=0; i<s.size(); i++)\
    \ {\n        if(isalpha(s[i])) {\n            if(s[i] != (s[i]+'A')%26) {\n  \
    \              s.replace(i,i+1,(s[i]+'A')%26);\n            }\n        }\n   \
    \ }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpihel1o2x.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpihel1o2x.cpp:16:46: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(int&, int, int)\u2019\n   16 |     \
    \            s.replace(i,i+1,(s[i]+'A')%26);\n      |                        \
    \                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpihel1o2x.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpihel1o2x.cpp:16:43:\
    \ error: invalid conversion from \u2018int\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   16 |                 s.replace(i,i+1,(s[i]+'A')%26);\n      |            \
    \                     ~~~~~~~~~~^~~\n      |                                 \
    \          |\n      |                                           int\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from "
  stdout: ''
  timestamp: 1660098295
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  int len = s.length();\n  if\
    \ (len == 0 || s[0] == '#') {\n    return s;\n  }\n  \n  string t;\n  int n =\
    \ 0, k = 0, m = 0, pos = 0;\n  for (int i = 0; i < len; i++) {\n    if (s[i] ==\
    \ '#') {\n      k = 0;\n      n = m = 0;\n      t = s.substr(n, len - n);\n  \
    \    pos = i;\n      continue;\n    }\n    if (s[i] == s[i]) {\n      t = s.substr(n,\
    \ len - n);\n      pos = i;\n      continue;\n    }\n    if (s[i] == toupper(s[i]))\
    \ {\n      t = s.substr(n, len - n);\n      t = tolower(t);\n      n = pos = i;\n\
    \      continue;\n    }\n    if (s[i] == tolower(s[i])) {\n      t = s.substr(n,\
    \ len - n);\n      t = toupper(t);\n      n = pos = i;\n      continue;\n    }\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp09s25355.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp09s25355.cpp:18:3: error: \u2018string\u2019 was not declared in this\
    \ scope\n   18 |   string t;\n      |   ^~~~~~\n/tmp/tmp09s25355.cpp:18:3: note:\
    \ suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp09s25355.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp09s25355.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp09s25355.cpp:24:7: error: \u2018t\u2019 was not declared in this scope\n\
    \   24 |       t = s.substr(n, len - n);\n      |       ^\n/tmp/tmp09s25355.cpp:29:7:\
    \ error: \u2018t\u2019 was not declared in this scope\n   29 |       t = s.substr(n,\
    \ len - n);\n      |       ^\n/tmp/tmp09s25355.cpp:34:7: error: \u2018t\u2019\
    \ was not declared in this scope\n   34 |       t = s.substr(n, len - n);\n  \
    \    |       ^\n/tmp/tmp09s25355.cpp:40:7: error: \u2018t\u2019 was not declared\
    \ in this scope\n   40 |       t = s.substr(n, len - n);\n      |       ^\n"
  stdout: ''
  timestamp: 1660098295
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  for (int i = s.size() - 1; i\
    \ >= 0; --i) {\n    if (isalpha(s[i])) {\n      s[i] = toupper(s[i]);\n      s[i]\
    \ = tolower(s[i]);\n    } else {\n      s[i] = s[i];\n    }\n  }\n\n  for (int\
    \ i = s.size() - 1; i >= 0; --i) {\n    if (isalpha(s[i])) {\n      s[i] = toupper(s[i]);\n\
    \      s[i] = tolower(s[i]);\n    } else {\n      s[i] = s[i];\n    }\n  }\n\n\
    \  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpzzswpgbd: /tmp/tmpzzswpgbd.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098296
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  int lower = 97; \n  int upper\
    \ = 122;\n  int size = s.size();\n  std::string new_string(s);\n\n  if (size %\
    \ 2 == 0) {\n    for (int i = 0; i < (size-1); i++) {\n      new_string[i] = toupper(new_string[i]);\n\
    \    }\n  }\n\n  else {\n    for (int i = 0; i < (size-1); i++) {\n      new_string[i]\
    \ = tolower(new_string[i]);\n    }\n  }\n\n  return new_string;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5j2gl6f4: /tmp/tmp5j2gl6f4.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098296
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.size();\n    char\
    \ temp;\n    if (len == 0) {\n        return s;\n    }\n    int flag = 0;\n  \
    \  for(int i=0; i<len; i++){\n        temp = s[i];\n        s[i] = s[i+1];\n \
    \       s[i+1] = temp;\n    }\n    for(int i=len-1; i>=0; i--){\n        if(s[i]>='A'&&\
    \ s[i]<='Z'){\n            flag = 1;\n            break;\n        }\n    }\n \
    \   if(flag == 1){\n        for(int i=0; i<len-1; i++){\n            s[i] = s[i+1];\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpphc07ngt: /tmp/tmpphc07ngt.cpp:39: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098296
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::reverse(s.begin(), s.end());\n\
    \    \n    if(std::all_of(s.begin(), s.end(), ::isalpha))\n    {\n        for(auto\
    \ &c : s)\n        {\n            if(c == 'a')\n                std::swap(c, 'A');\n\
    \            if(c == 'A')\n                std::swap(c, 'a');\n        }\n   \
    \ }\n    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpso2d9r8t.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpso2d9r8t.cpp:20:33: error: no matching function for call to \u2018\
    swap(char&, char)\u2019\n   20 |                 std::swap(c, 'A');\n      | \
    \                                ^\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpso2d9r8t.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&) [with _Tp = char; typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ = void]\u2019 <near match>\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |  \
    \   ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   conversion of argument\
    \ 2 would be ill-formed:\n/tmp/tmpso2d9r8t.cpp:20:30: error: cannot bind non-const\
    \ lvalue reference of type \u2018char&\u2019 to an rvalue of type \u2018char\u2019\
    \n   20 |                 std::swap(c, 'A');\n      |                        \
    \      ^~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n   \
    \              from /usr/include/c++/9/bits/stl_algobase.h:64,\n             \
    \    from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpso2d9r8t.cpp:2:\n/usr/include/c++/9/bits/move.h:205:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<std::__is_swappable<_Tp>::value>::type\
    \ std::swap(_Tp (&)[_Nm], _Tp (&)[_Nm])\u2019\n  205 |     swap(_Tp (&__a)[_Nm],\
    \ _Tp (&__b)[_Nm])\n      |     ^~~~\n/usr/include/c++"
  stdout: ''
  timestamp: 1660098296
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.length();\n    std::string\
    \ res=\"\";\n    for(int i=0;i<n;i++){\n        if(s[i]>=97 && s[i]<=122){\n \
    \           res+=toupper(s[i]);\n        }else{\n            res+=s[i];\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp38bqbxa9: /tmp/tmp38bqbxa9.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    for(int i = 0;i < s.length();\
    \ i++){\n        if(isalpha(s[i])){\n            s[i] = toupper(s[i]);\n     \
    \   }\n    }\n    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpohrkf0lp: /tmp/tmpohrkf0lp.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098296
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    for(int i = 0; i < s.size();i++){\n\
    \        if(isalpha(s[i])){\n            if(s[i] == 'a'){\n                s[i]\
    \ = 'A';\n            }\n            else if(s[i] == 'A'){\n                s[i]\
    \ = 'a';\n            }\n            else{\n                s[i] = s[i] + ('A'\
    \ - 'a');\n            }\n        }\n    }\n    std::reverse(s.begin(),s.end());\
    \ \n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpqjryh7gd: /tmp/tmpqjryh7gd.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    if\
    \ (n == 0) return s;\n    \n    string t = s;\n    int a = 0, b = n-1;\n    while\
    \ (a < b) {\n        if (t.at(a) == t.at(b)) a++;\n        else b--;\n    }\n\
    \    \n    int k = b-1;\n    while (k >= 0) {\n        if (t.at(k) != t.at(b.at(k)))\
    \ \n            t.at(k) = t.at(b.at(k));\n        k--;\n    }\n    \n    return\
    \ t;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_hk7lhu.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpi_hk7lhu.cpp:16:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   16 |     string t = s;\n      |     ^~~~~~\n/tmp/tmpi_hk7lhu.cpp:16:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpi_hk7lhu.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpi_hk7lhu.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpi_hk7lhu.cpp:19:13: error: \u2018t\u2019 was not declared in this scope\n\
    \   19 |         if (t.at(a) == t.at(b)) a++;\n      |             ^\n/tmp/tmpi_hk7lhu.cpp:25:13:\
    \ error: \u2018t\u2019 was not declared in this scope\n   25 |         if (t.at(k)\
    \ != t.at(b.at(k)))\n      |             ^\n/tmp/tmpi_hk7lhu.cpp:25:31: error:\
    \ request for member \u2018at\u2019 in \u2018b\u2019, which is of non-class type\
    \ \u2018int\u2019\n   25 |         if (t.at(k) != t.at(b.at(k)))\n      |    \
    \                           ^~\n/tmp/tmpi_hk7lhu.cpp:26:30: error: request for\
    \ member \u2018at\u2019 "
  stdout: ''
  timestamp: 1660098296
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string out = \"\";\n\
    \    for(int i = 0; i < s.length(); ++i) {\n        if(s[i] >= 'a' && s[i] <=\
    \ 'z') {\n            if(out == \"\") out = s[i];\n            out =out + toupper(s[i]\
    \ - 32);\n        } else {\n            if(out == \"\") out = s[i];\n        \
    \    out += s[i];\n        }\n    }\n    return out;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2ahnzg2.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpt2ahnzg2.cpp:17:22: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   17 |             out =out + toupper(s[i] - 32);\n \
    \     |                  ~~~ ^ ~~~~~~~~~~~~~~~~~~\n      |                  |\
    \            |\n      |                  |            int\n      |           \
    \       std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpt2ahnzg2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpt2ahnzg2.cpp:17:41:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   17 |             out =out + toupper(s[i] - 32);\n  \
    \    |                                         ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpt2ahnzg2.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move"
  stdout: ''
  timestamp: 1660098296
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    std::vector<std::string>\
    \ v;\n    for ( int i = 0 ; i != s.length(); i++) {\n        v.push_back(s[i]);\n\
    \    }\n    std::sort(v.begin(), v.end());\n    std::string ans = s;\n    for\
    \ (auto it = v.begin(); it != v.end(); it++) {\n        if (it != v.begin()) {\n\
    \            ans += (*it);\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2470bzsb.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp2470bzsb.cpp:16:25: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::push_back(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   16 |         v.push_back(s[i]);\n      |     \
    \                    ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2470bzsb.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018std::vector<std::__cxx11::basic_st"
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    // write your code here\n\
    \    \n    if(s.length()==0){\n        return s;\n    }\n    if(s.at(0)>='a'&&s.at(0)<='z'){\n\
    \        s.at(0) += 32;\n    }\n    for(int i=0;i<s.length();i++){\n        if(isalpha(s.at(i))){\n\
    \            if(s.at(i)>='a'&&s.at(i)<='z'){\n                s.at(i) -= 32;\n\
    \            }\n            else{\n                s.at(i) = toupper(s.at(i));\n\
    \            }\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpvwvywu_x: /tmp/tmpvwvywu_x.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()){\n        return\
    \ s;\n    }\n    std::string ans = s;\n    for(char c: s){\n        if(c == '@'\
    \ || c == '_'){\n            ans = ans.substr(0,ans.size()-1) +\"@\" + ans.substr(ans.size()-1);\n\
    \        }else if(c == '#'){\n            ans = ans.substr(0,ans.size()-1) +\"\
    #\" + ans.substr(ans.size()-1);\n        }else if(c == '@'){\n            ans\
    \ = ans.substr(0,ans.size()-1) +\"_\" + ans.substr(ans.size()-1);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp4izii430: /tmp/tmp4izii430.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    int n =\
    \ s.size();\n    bool flag = false;\n    int i, j = 0, k = 0;\n    char ch;\n\
    \    std::string ans;\n    for(i = 0; i < n; i++) {\n        if(s[i] == '#') {\n\
    \            if(j < i) {\n                ans += s[j];\n            }\n      \
    \      ans += s[i];\n            j = i + 1;\n        } else {\n            ch\
    \ = s[i];\n            ch = ch >= 'a' ? ch - 'a' + 10 : ch - 'A' + 10;\n     \
    \       ch = ch >= 'A' ? ch - 'A' + 10 : ch - 'a' + 10;\n            ch = toupper(ch);\n\
    \            if(flag) {\n                ans += ch;\n            } else {\n  \
    \              ans += ch;\n            }\n            flag = !flag;\n        }\n\
    \    }\n    if(j < i) {\n        ans += s[j];\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpp7y3pcsq: /tmp/tmpp7y3pcsq.cpp:46: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    std::stack<char>\
    \ st;\n    for(char c: s) {\n        if(c=='a'||c=='e'||c=='i'||c=='o'||c=='u')\n\
    \            st.push(c);\n        else \n            st.push(std::tolower(c));\n\
    \    }\n    while(!st.empty()) {\n        if(st.top()=='a')\n            st.push('b');\n\
    \        else if(st.top()=='e')\n            st.push('f');\n        else if(st.top()=='i')\n\
    \            st.push('g');\n        else if(st.top()=='o')\n            st.push('h');\n\
    \        else if(st.top()=='u')\n            st.push('j');\n        else if(st.top()=='b')\n\
    \            st.push('a');\n        else if(st.top()=='f')\n            st.push('e');\n\
    \        else if(st.top()=='g')\n            st.push('i');\n        else if(st.top()=='h')\n\
    \            st.push('o');\n        else if(st.top()=='j')\n            st.push('u');\n\
    \        else if(st.top()=='a')\n            st.push('e');\n        else if(st.top()=='e')\n\
    \            st.push('i');\n        else if(st.top()=='i')\n            st.push('o');\n\
    \        else if(st.top()=='o')\n            st.push('u');\n        else if(st.top()=='u')\n\
    \            st.push('b');\n        else {\n            res+=st.top();\n     \
    \       st.pop();\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098302
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::stack<char> st;\n   \
    \ std::string rev = \"\";\n    for(auto it=s.begin();it!=s.end();++it) {\n   \
    \     char c=*it;\n        if(isalpha(c)) {\n            if(!st.empty()) {\n \
    \               rev = c + st.top();\n                st.pop();\n            }\n\
    \            else {\n                rev = c;\n            }\n        }\n    \
    \    else {\n            if(st.empty()) {\n                rev = c;\n        \
    \    }\n            else {\n                rev += c;\n            }\n       \
    \ }\n        st.push(c);\n    }\n    return rev;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp50kcizci: /tmp/tmp50kcizci.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  // Write your code here\n  \n\
    \  for(int i=0;i<s.size();i++){\n    if(s[i]>=97 && s[i]<=122)\n      s[i]=s[i]+32;\n\
    \    else if(s[i]>=65 && s[i]<=90)\n      s[i]=s[i]-32;\n  }\n  \n  return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5b3oz9l4: /tmp/tmp5b3oz9l4.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    int\
    \ len = s.length();\n    \n    for(int i = 0; i < len; i++){\n        char c =\
    \ s[i];\n        if((c == 'a') || (c == 'e') || (c == 'i') || (c == 'o') || (c\
    \ == 'u')){\n            for(int j = i; j > 0; j--){\n                if((s[i-1]\
    \ >= 'a') && (s[i-1] <= 'z'))\n                    s[i-1] = s[i-1] + 'a' - 'a';\n\
    \                else\n                    break;\n            }\n        }\n\
    \        else if((c == 'b') || (c == 'c') || (c == 'd') || (c == 'f')){\n    \
    \        for(int j = i; j > 0; j--){\n                if((s[i-1] >= 'A') && (s[i-1]\
    \ <= 'Z'))\n                    s[i-1] = s[i-1] + 'A' - 'A';\n               \
    \ else\n                    break;\n            }\n        }\n        else\n \
    \           s[i] = s[i] - 'a';\n    }\n    \n    for(int i = 0; i < len; i++)\n\
    \        result += s[i];\n    \n    return result;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpuoh0faip: /tmp/tmpuoh0faip.cpp:45: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::reverse(s.begin(),s.end());\n\
    \    if (s[0] >= 'A' && s[0] <= 'Z') s[0] += 32;\n    if (s[0] >= 'a' && s[0]\
    \ <= 'z') s[0] -= 32;\n    \n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmph6cvr5uv: /tmp/tmph6cvr5uv.cpp:21: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    bool\
    \ flag = true;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z') {\n            if (flag)\n\
    \                res = res + s[i];\n            else\n                res = res\
    \ + std::toupper(s[i]);\n            flag = !flag;\n        } else {\n       \
    \     res = res + s[i];\n        }\n    }\n    if (!flag)\n        res.swap(res);\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgteyikl3.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpgteyikl3.cpp:20:27: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   20 |                 res = res + std::toupper(s[i]);\n\
    \      |                       ~~~ ^ ~~~~~~~~~~~~~~~~~~\n      |             \
    \          |                 |\n      |                       |              \
    \   int\n      |                       std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpgteyikl3.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpgteyikl3.cpp:20:46:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   20 |                 res = res + std::toupper(s[i]);\n\
    \      |                                              ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpgteyikl3.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Iterat"
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i=0; i<s.length();\
    \ i++){\n        if (islower(s[i])) {\n            s[i] = toupper(s[i]);\n   \
    \     }\n        else if (isupper(s[i])) {\n            s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp_djo6mip: /tmp/tmp_djo6mip.cpp:26: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    // Code here\n    if\
    \ (s.empty()) {\n        return s;\n    }\n\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            s[i] = toupper(s[i]);\n  \
    \      }\n        else {\n            s[i] = tolower(s[i]);\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpok3285x3: /tmp/tmpok3285x3.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n   char ans=s;\n   for(int i=0;i<s.size();++i)\n\
    \   {\n   if(s[i]>=65&&s[i]<=90)\n   {\n   ans=ans+(s[i]-32);\n   }\n   else if(s[i]>=97&&s[i]<=122)\n\
    \   {\n   ans=ans+(s[i]+32);\n   }\n   else\n   {\n   ans=ans+s[i];\n   }\n  \
    \ }\n   return ans;\n   }\n\n \n\n  \n\n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\
    \ \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1w2g372k.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp1w2g372k.cpp:13:13: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char\u2019 in initialization\n\
    \   13 |    char ans=s;\n      |             ^\n      |             |\n      |\
    \             std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmp1w2g372k.cpp:29:11:\
    \ error: could not convert \u2018ans\u2019 from \u2018char\u2019 to \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019}\n   29 |    return ans;\n\
    \      |           ^~~\n      |           |\n      |           char\n/tmp/tmp1w2g372k.cpp:\
    \ At global scope:\n/tmp/tmp1w2g372k.cpp:246:1: error: expected declaration before\
    \ \u2018}\u2019 token\n  246 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660098297
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    int\
    \ i,temp,flag=0,flag1=0;\n    if(s.size()==0)\n        return s;\n    for(i=0;i<s.size();i++){\n\
    \        if(s[i]==46){\n            if(!flag1){\n                temp=i;\n   \
    \             flag=1;\n            }else{\n                temp=i;\n         \
    \       flag1=0;\n            }\n        }else if(s[i]!=48){\n            res+=s[i];\n\
    \        }else{\n            temp=i;\n            flag=0;\n            flag1=1;\n\
    \        }\n    }\n    \n    if(flag==1){\n        res+=s[temp];\n    }\n    for(i=0;i<s.size();i++){\n\
    \        if(s[i]==46){\n            if(!flag1){\n                temp=i;\n   \
    \             flag=1;\n            }else{\n                temp=i;\n         \
    \       flag1=0;\n            }\n        }else if(s[i]!=48){\n            res+=s[temp];\n\
    \        }else{\n            temp=i;\n            flag=0;\n            flag1=1;\n\
    \        }\n    }\n    if(flag==1){\n        res+=s[temp];\n    }\n    for(i=0;i<s.size();i++){\n\
    \        if(s[i]==46){\n            if(!flag1){\n                temp=i;\n   \
    \             flag=1;\n            }else{\n                temp=i;\n         \
    \       flag1=0;\n            }\n        }else if(s[i]!=48){\n            res+=s[temp];\n\
    \        }else{\n            temp=i;\n            flag=0;\n            flag1=1;\n\
    \        }\n    }\n    if(flag==1){\n        res+=s[temp];\n    }\n    for(i=0;i<s.size();i++){\n\
    \        if(s[i]==46){\n            if(!flag1){\n                temp=i;\n   \
    \             flag=1;\n            }else{\n                temp=i;\n         \
    \       flag1=0;\n            }\n        }else if(s[i]!=48){\n            res+=s[temp];\n\
    \        }else{\n            temp=i;\n            flag=0;\n            flag1=1;\n\
    \        }\n    }\n    if(flag==1){\n        res+=s[temp];\n    }\n    for(i=0;i<s.size();i++){\n\
    \        if(s[i]==46){\n            if(!flag1){\n                temp=i;\n   \
    \             flag=1;\n            }else{\n                temp=i;\n         \
    \       flag1=0;\n            }\n        }else if(s[i]!=48){\n            res+=s[temp];\n\
    \        }else{\n            temp=i;\n            flag=0;\n            flag1=1;\n\
    \        }\n    }\n    if(flag==1){\n        res+=s[temp];\n    }\n    for(i=0;i<s.size();i++){\n\
    \        if(s[i]==46){\n            if(!flag1){\n\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_4nrrsff.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp_4nrrsff.cpp:123:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  123 | int main() {\n      |            ^\n/tmp/tmp_4nrrsff.cpp:133:1:\
    \ error: expected \u2018}\u2019 at end of input\n  133 | }\n      | ^\n/tmp/tmp_4nrrsff.cpp:119:21:\
    \ note: to match this \u2018{\u2019\n  119 |         if(s[i]==46){\n      |  \
    \                   ^\n/tmp/tmp_4nrrsff.cpp:133:1: error: expected \u2018}\u2019\
    \ at end of input\n  133 | }\n      | ^\n/tmp/tmp_4nrrsff.cpp:118:28: note: to\
    \ match this \u2018{\u2019\n  118 |     for(i=0;i<s.size();i++){\n      |    \
    \                        ^\n/tmp/tmp_4nrrsff.cpp:133:1: error: expected \u2018\
    }\u2019 at end of input\n  133 | }\n      | ^\n/tmp/tmp_4nrrsff.cpp:12:34: note:\
    \ to match this \u2018{\u2019\n   12 | std::string solve(std::string s) {\n  \
    \    |                                  ^\n/tmp/tmp_4nrrsff.cpp:133:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  133 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string answer = s;\n\
    \    std::reverse(answer.begin(), answer.end());\n    \n    // return answer;\n\
    \    return answer;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjp8mopev: /tmp/tmpjp8mopev.cpp:21: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    std::string\
    \ sol = s;\n    std::reverse(s.begin(), s.end());\n    std::reverse(sol.begin(),\
    \ sol.end());\n    return sol;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpgtwotj18: /tmp/tmpgtwotj18.cpp:21: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(!s.empty());\n    std::string\
    \ res = s;\n    for (int i = 0; i < res.size(); i++) {\n        char c = res[i];\n\
    \        if (std::isalpha(c)) {\n            c = toupper(c);\n            if (c\
    \ == '@') {\n                c = 'A';\n            }\n            else {\n   \
    \             c = tolower(c);\n            }\n        }\n        res.replace(i,\
    \ 1, c);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplzd75zl4.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmplzd75zl4.cpp:26:28: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(int&, int, char&)\u2019\n   26 |   \
    \      res.replace(i, 1, c);\n      |                            ^\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmplzd75zl4.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type, const _CharT*)\
    \ [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019 <near match>\n 1965 |       replace(size_type __pos, size_type __n1,\
    \ const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmplzd75zl4.cpp:26:27:\
    \ error: invalid conversion from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   26 |         res.replace(i, 1, c);\n      |                           ^\n\
    \      |                           |\n      |                           char\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n            "
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::sort(s.begin(), s.end(),\
    \ [] (char a, char b) { return (a > b); });\n    int size = s.size();\n    if\
    \ (size % 2 == 1) {\n        size /= 2;\n    }\n    std::string res = \"\";\n\
    \    for (int i = 0; i < size; i++) {\n        if (s[i] == '@') {\n          \
    \  res += 'C';\n        } else {\n            res += s[i];\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpgyvwvcd4: /tmp/tmpgyvwvcd4.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    int len\
    \ = s.length();\n    if(len == 0)\n        return \"#\";\n    int i = 0;\n   \
    \ while(i < len)\n    {\n        if(s[i]>='a' && s[i]<='z')\n        {\n     \
    \       s[i] = s[i] - 32;\n        }\n        else if(s[i]>='A' && s[i]<='Z')\n\
    \        {\n            s[i] = s[i] - 48;\n        }\n        i++;\n    }\n  \
    \  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpnplwv4l3: /tmp/tmpnplwv4l3.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.empty())\n    {\n  \
    \      std::cerr << \"Empty string passed\\n\";\n    }\n    // Write your code\
    \ here\n    \n    if (s[0] >= 'a' && s[0] <= 'z')\n    {\n        s[0] = s[0]\
    \ - 32;\n    }\n    else if (s[0] >= 'A' && s[0] <= 'Z')\n    {\n        s[0]\
    \ = s[0] - 64;\n    }\n    std::string out = \"\";\n    for (auto c: s)\n    {\n\
    \        out += c;\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpk2ia32s9: /tmp/tmpk2ia32s9.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i=0;i<s.size();i++)\n\
    \    {\n        if(s[i]>='a' && s[i]<='z')\n            s[i]-=32;\n        else\
    \ if(s[i]>='A' && s[i]<='Z')\n            s[i]+=32;\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpgfpk1a8p: /tmp/tmpgfpk1a8p.cpp:25: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string s1(s);\n    std::string\
    \ s2(\"\");\n    for(int i = 0;i < s1.length();i++) {\n        if(s1[i] >= 'a'\
    \ && s1[i] <= 'z') {\n            s2+= std::toupper(s1[i]);\n        }\n     \
    \   else if(s1[i] >= 'A' && s1[i] <= 'Z') {\n            s2+= std::tolower(s1[i]);\n\
    \        }\n        else {\n            s2+= s1[i];\n        }\n    }\n    return\
    \ s2;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpq6k88mbc: /tmp/tmpq6k88mbc.cpp:31: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0) return s;\n\
    \    for(int i=0;i < s.size();i++) {\n        if(isalpha(s[i]) && islower(s[i]))\
    \ {\n            s[i]=toupper(s[i]);\n        }\n        else if(isalpha(s[i])\
    \ && isupper(s[i])) {\n            s[i]=tolower(s[i]);\n        }\n        else\
    \ s[i] = s[i];\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmppc5xnmyk: /tmp/tmppc5xnmyk.cpp:28: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    if(s.length()==0){\n\
    \        return s;\n    }\n    for(int i=0;i<s.length();i++){\n        if(s[i]>='a'&&s[i]<='z'){\n\
    \            s[i]=s[i]+32;\n        }\n        if(s[i]>='A'&&s[i]<='Z'){\n   \
    \         s[i]=s[i]-32;\n        }\n    }\n    return s;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpd2_jopp2: /tmp/tmpd2_jopp2.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  if(len == 0){\n        return s;\n    }\n    for(int i=0;i<len/2;i++){\n  \
    \      if(s[i] == s[i+1]){\n            s[i] = toupper(s[i]);\n            s[i+1]\
    \ = toupper(s[i+1]);\n        }\n    }\n    for(int i=len/2;i>=0;i--){\n     \
    \   if(s[i] == s[i+1]){\n            s[i] = tolower(s[i]);\n            s[i+1]\
    \ = tolower(s[i+1]);\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpzictxhsb: /tmp/tmpzictxhsb.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n\
    \    if (s.size() <= 1) return s;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (std::isalpha(s[i])) {\n            res = std::toupper(s[i]);\n  \
    \          s = s.substr(0, i) + res + s.substr(i + 1);\n        }\n    }\n   \
    \ return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpepy3xrf8: /tmp/tmpepy3xrf8.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string ans = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    std::string res;\n    std::transform(s.begin(), s.end(), s.begin(), ::toupper);\n\
    \    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    std::transform(s.begin(),\
    \ s.end(), s.begin(), ::toupper);\n    std::transform(s.begin(), s.end(), s.begin(),\
    \ ::tolower);\n    std::replace(s.begin(), s.end(), '_', ' ');\n    if(s.size()\
    \ % 2 == 0){\n        for(int i = 0; i < (s.size() + 1) / 2; i++){\n         \
    \   std::swap(ans[2 * i], ans[2 * i + 1]);\n        }\n    }\n    for(int i =\
    \ 0; i < s.size(); i++){\n        ans[i % 2] += s[i];\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    for(int i = 0; i < ans.size(); i++){\n        res += ans[i];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpzib0h0ne: /tmp/tmpzib0h0ne.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    std::string\
    \ ans = \"\";\n    if(n == 0)\n        return s;\n    for(int i = 0; i < n; i++)\
    \ {\n        char c = s[i];\n        if(c == 'a' || c == 'A' || c == 'b' || c\
    \ == 'B' || c == 'c' || c == 'C' || c == 'd' || c == 'D' || c == 'e' || c == 'E'\
    \ || c == 'f' || c == 'F' || c == 'g' || c == 'G' || c == 'h' || c == 'H' || c\
    \ == 'i' || c == 'I' || c == 'j' || c == 'J' || c == 'k' || c == 'K' || c == 'l'\
    \ || c == 'L' || c == 'm' || c == 'M' || c == 'n' || c == 'N' || c == 'o' || c\
    \ == 'O' || c == 'p' || c == 'P' || c == 'q' || c == 'Q' || c == 'r' || c == 'R'\
    \ || c == 's' || c == 'S' || c == 't' || c == 'T' || c == 'u' || c == 'U' || c\
    \ == 'v' || c == 'V' || c == 'w' || c == 'W' || c == 'x' || c == 'X' || c == 'y'\
    \ || c == 'Y' || c == 'z' || c == 'Z') {\n            ans += tolower(c);\n   \
    \     } else {\n            ans += c;\n        }\n    }\n    if(ans.empty()) {\n\
    \        return s;\n    }\n    int index = 0;\n    while(index < ans.size()) {\n\
    \        if(ans.at(index) != '#') {\n            ans = ans.substr(0, index) +\
    \ ans.at(index) + ans.substr(index + 1);\n        } else {\n            index++;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098303
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    // code here\n    string\
    \ result = s;\n    int size = s.size();\n    for (int i = 0; i < size; i++) {\n\
    \        if (isalpha(s[i])) {\n            result += s[i];\n            result\
    \ += toupper(s[i]);\n            result += tolower(s[i]);\n        } else {\n\
    \            result += s[i];\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75f_pq9w.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp75f_pq9w.cpp:15:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   15 |     string result = s;\n      |     ^~~~~~\n/tmp/tmp75f_pq9w.cpp:15:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp75f_pq9w.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp75f_pq9w.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp75f_pq9w.cpp:19:13: error: \u2018result\u2019 was not declared in this\
    \ scope\n   19 |             result += s[i];\n      |             ^~~~~~\n/tmp/tmp75f_pq9w.cpp:23:13:\
    \ error: \u2018result\u2019 was not declared in this scope\n   23 |          \
    \   result += s[i];\n      |             ^~~~~~\n/tmp/tmp75f_pq9w.cpp:26:12: error:\
    \ \u2018result\u2019 was not declared in this scope\n   26 |     return result;\n\
    \      |            ^~~~~~\n"
  stdout: ''
  timestamp: 1660098297
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(s[i] == ' ') {\n            reverse(s, i + 1, s.size() -\
    \ 1);\n        }\n        else {\n            s[i] = tolower(s[i]);\n        }\n\
    \    }\n    reverse(s.begin(), s.end());\n    return s;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprxw0kda1.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmprxw0kda1.cpp:15:43: error: no matching function for call to \u2018\
    reverse(std::string&, int, std::__cxx11::basic_string<char>::size_type)\u2019\n\
    \   15 |             reverse(s, i + 1, s.size() - 1);\n      |               \
    \                            ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprxw0kda1.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1186:5:\
    \ note: candidate: \u2018template<class _BIter> void std::reverse(_BIter, _BIter)\u2019\
    \n 1186 |     reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)\n\
    \      |     ^~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1186:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmprxw0kda1.cpp:15:43: note: \
    \  deduced conflicting types for parameter \u2018_BIter\u2019 (\u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018int\u2019)\n   15 |             reverse(s, i + 1, s.size() - 1);\n\
    \      |                                           ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprxw0kda1.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:249:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _BidirectionalIterator>\
    \ __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy, void> std::reverse(_ExecutionPolicy&&,\
    \ _BidirectionalIterator, _BidirectionalIterator)\u2019\n  249 | reverse(_ExecutionPolicy&&\
    \ __exec, _BidirectionalIterator __first, _BidirectionalIterator __last);\n  \
    \    | ^~~~~~~\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:249:1: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmprxw0kda1.cpp:15:43: note: \
    \  deduced conflicting types for parameter \u2018_BidirectionalIterator\u2019\
    \ (\u2018int\u2019 and \u2018long unsigned int\u2019)\n   15 |             reverse(s,\
    \ i + 1, s.size() - 1);\n      |                                           ^\n"
  stdout: ''
  timestamp: 1660098297
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string final;\n    for\
    \ (auto &c : s) {\n        bool isUpper = c >= 'A' && c <= 'Z';\n        bool\
    \ isLower = c >= 'a' && c <= 'z';\n        if (isUpper == isLower) {\n       \
    \     final += (isUpper) ? 'A' : 'a';\n            final += (isUpper) ? 'B' :\
    \ 'b';\n            final += (isUpper) ? 'C' : 'c';\n            final += (isUpper)\
    \ ? 'D' : 'd';\n            final += (isUpper) ? 'E' : 'e';\n            final\
    \ += (isUpper) ? 'F' : 'f';\n            final += (isUpper) ? 'G' : 'g';\n   \
    \         final += (isUpper) ? 'H' : 'h';\n            final += (isUpper) ? 'I'\
    \ : 'i';\n            final += (isUpper) ? 'J' : 'j';\n            final += (isUpper)\
    \ ? 'K' : 'k';\n            final += (isUpper) ? 'L' : 'l';\n            final\
    \ += (isUpper) ? 'M' : 'm';\n            final += (isUpper) ? 'N' : 'n';\n   \
    \         final += (isUpper) ? 'O' : 'o';\n            final += (isUpper) ? 'P'\
    \ : 'p';\n            final += (isUpper) ? 'Q' : 'q';\n            final += (isUpper)\
    \ ? 'R' : 'r';\n            final += (isUpper) ? 'S' : 's';\n            final\
    \ += (isUpper) ? 'T' : 't';\n            final += (isUpper) ? 'U' : 'u';\n   \
    \         final += (isUpper) ? 'V' : 'v';\n            final += (isUpper) ? 'W'\
    \ : 'w';\n            final += (isUpper) ? 'X' : 'x';\n            final += (isUpper)\
    \ ? 'Y' : 'y';\n            final += (isUpper) ? 'Z' : 'z';\n            continue;\n\
    \        }\n        final += c;\n    }\n    return final;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpq3g9oqba: /tmp/tmpq3g9oqba.cpp:52: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.size() <= 1)\n     \
    \   return s;\n    std::vector<int> dp(s.size(), 0);\n    for (int i = 0; i <\
    \ s.size(); i++)\n        dp[i] = (s[i] == 'a' ? dp[i + 1] - 1 : dp[i - 1] + 1);\n\
    \    \n    std::string out = \"\";\n    for (int i = 0; i < s.size(); i++)\n \
    \       out += (s[i] - 'a') + dp[i];\n    \n    return out;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjih3oi9o: /tmp/tmpjih3oi9o.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string s1 = s;\n    \n\
    \    for (int i = 0; i < s1.size(); i++) {\n        if (s1[i] >= 'a' && s1[i]\
    \ <= 'z') {\n            if (s1[i] > 'z')\n                s1[i] += 'a' - 'z'\
    \ + 'a' - 'a';\n            else\n                s1[i] += 'a' - 'z' + 'A' - 'A';\n\
    \        } else {\n            if (s1[i] > 'Z')\n                s1[i] += 'A'\
    \ - 'Z' + 'A' - 'A';\n            else\n                s1[i] += 'A' - 'Z' + 'a'\
    \ - 'a';\n        }\n    }\n    \n    return s1;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp5tnrwmml: /tmp/tmp5tnrwmml.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    \n\
    \    if(!s.empty() && s[0] == '#')\n    {\n        for(char c : s)\n        {\n\
    \            switch(c)\n            {\n                case 'a':\n           \
    \         c = 'A';\n                    break;\n                case 'b':\n  \
    \                  c = 'B';\n                    break;\n                case\
    \ 'c':\n                    c = 'C';\n                    break;\n           \
    \     case '#':\n                    c = '#';\n                    break;\n  \
    \              case '@':\n                    c = '@';\n                    break;\n\
    \                case 'A':\n                    c = 'a';\n                   \
    \ break;\n                case 'B':\n                    c = 'b';\n          \
    \          break;\n                case 'C':\n                    c = 'c';\n \
    \                   break;\n            }\n        }\n    }\n    \n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5c759rex: /tmp/tmp5c759rex.cpp:53: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.length()==0)\n      \
    \  return s;\n    bool flag=false;\n    for(int i=0;i<s.length()-1;i++) {\n  \
    \      if(isalpha(s[i]))\n            flag=true;\n        else\n            flag=false;\n\
    \        if(flag)\n            std::swap(s[i],s[i+1]);\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmps5cjid8b: /tmp/tmps5cjid8b.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    std::stack<char> st;\n\
    \    std::string ret;\n    \n    for(int i = 0; i < s.length(); i++)\n    {\n\
    \        if(s[i] >= 65 && s[i] <= 90)\n        {\n            st.push(s[i]);\n\
    \        }\n        else\n        {\n            while(!st.empty())\n        \
    \    {\n                ret.append(st.top());\n                st.pop();\n   \
    \         }\n            while(i < s.length())\n            {\n              \
    \  ret.append(s[i]);\n                i++;\n            }\n            std::reverse(ret.begin(),\
    \ ret.end());\n            break;\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfmt_7zhs.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpfmt_7zhs.cpp:27:36: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::append(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   27 |                 ret.append(st.top());\n \
    \     |                                    ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfmt_7zhs.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1267:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n 1267 |       append(const _CharT* __s)\n      |       ^~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:1267:7: note:   conversion of argument\
    \ 1 would be ill-formed:\n/tmp/tmpfmt_7zhs.cpp:27:34: error: invalid conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n   27 |  \
    \               ret.append(st.top());\n      |                            ~~~~~~^~\n\
    \      |                                  |\n      |                         \
    \         __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type {aka\
    \ char}\nIn file included from /usr/include/c++/9/string:55,\n               \
    \  from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from /usr/include/c++/9/bits/ios_base.h:41,\n\
    \                 from /usr/include/c++/9/ios:42,\n               "
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::reverse(s.begin(),s.end());\
    \ \n  std::reverse(s.begin()+1,s.end()-1);\n  if (s[0]>='a' && s[0]<='z') {\n\
    \    std::string rs;\n    for (int i=0;i<s.length();i++) {\n      if (s[i]>='a'\
    \ && s[i]<='z') {\n        rs = rs + s[i];\n      }\n    }\n    std::reverse(rs.begin(),rs.end());\n\
    \    return rs;\n  }\n  else {\n    return s;\n  }\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmph2w2ekc2: /tmp/tmph2w2ekc2.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int len = s.length();\n  \
    \  bool flag = true;\n    std::string ans = \"\";\n    \n    for(int i = 0; i\
    \ < (int) s.size(); i++)\n    {\n        if(flag == true)\n        {\n       \
    \     if(s[i] == s[i])\n            {\n                flag = false;\n       \
    \         ans = ans + s[i];\n            }\n        }\n        else\n        {\n\
    \            ans = ans + s[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp3xkvds5v: /tmp/tmp3xkvds5v.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(auto &i : s) {\n     \
    \   if( i == 'a' || i == 'A' )\n            i = toupper(i);\n        else if(i\
    \ == 'b' || i == 'B')\n            i = tolower(i);\n    }\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmphw19im_o: /tmp/tmphw19im_o.cpp:23: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098298
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    assert(!s.empty());\n    bool\
    \ isLetter = false;\n    for (char c : s) {\n        if (isalpha(c))\n       \
    \     isLetter = true;\n        else\n            isLetter = false;\n        if\
    \ (isLetter) {\n            int lower = tolower(c) - 97;\n            int upper\
    \ = toupper(c) - 65;\n            if (lower > upper)\n                swap(lower,\
    \ upper);\n        }\n    }\n    if (s.empty() || isLetter)\n        return s;\n\
    \    else\n        return s + tolower(s[0]) + toupper(s[0]);\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9mh40sbr.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp9mh40sbr.cpp:24:17: error: \u2018swap\u2019 was not declared in this\
    \ scope\n   24 |                 swap(lower, upper);\n      |                \
    \ ^~~~\n/tmp/tmp9mh40sbr.cpp:24:17: note: suggested alternatives:\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp9mh40sbr.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9mh40sbr.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp9mh40sbr.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmp9mh40sbr.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path&\
    \ __l"
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res(s.begin(),\
    \ s.end());\n    for (int i = 0; i < s.length(); i++) {\n        if (isupper(s[i]))\
    \ {\n            int low = i;\n            while (low < s.length() && islower(s[low]))\
    \ {\n                low++;\n            }\n            int high = low;\n    \
    \        while (high < s.length() && isupper(s[high])) {\n                high++;\n\
    \            }\n            if (high > low) {\n                res[low] = toupper(res[low]);\n\
    \                res[high] = tolower(res[high]);\n            }\n            else\
    \ {\n                res[low] = tolower(res[low]);\n            }\n        }\n\
    \        else {\n            res[i] = s[i];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpycf6i1ah: /tmp/tmpycf6i1ah.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if (s.length() <= 1) return\
    \ s;\n    char c = s[0];\n    string ts(s);\n    char cc;\n    for (int i = 1;\
    \ i < s.length(); i++) {\n        cc = s[i];\n        if (cc >= 'a' && cc <= 'z')\
    \ {\n            int j = i;\n            while (j > 0) {\n                s[--j]\
    \ = s[--j];\n            }\n            s[j] = cc;\n        }\n        else if\
    \ (cc >= 'A' && cc <= 'Z') {\n            int j = i;\n            while (j > 0)\
    \ {\n                s[--j] = s[--j];\n            }\n            s[j] = cc;\n\
    \        }\n        else if ((cc >= '0') && (cc <= '9')) {\n            int j\
    \ = i;\n            while (j > 0) {\n                s[--j] = s[--j];\n      \
    \      }\n            s[j] = cc;\n        }\n        else {\n            int j\
    \ = i;\n            while (j > 0) {\n                s[--j] = s[--j];\n      \
    \      }\n            s[j] = cc;\n        }\n    }\n    return ts;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpilhfpomr.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpilhfpomr.cpp:15:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   15 |     string ts(s);\n      |     ^~~~~~\n/tmp/tmpilhfpomr.cpp:15:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpilhfpomr.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpilhfpomr.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpilhfpomr.cpp:48:12: error: \u2018ts\u2019 was not declared in this scope;\
    \ did you mean \u2018s\u2019?\n   48 |     return ts;\n      |            ^~\n\
    \      |            s\n"
  stdout: ''
  timestamp: 1660098298
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n   \n    // Do not write main()\
    \ function.\n    // Do not read input, instead use the arguments to the function.\n\
    \    // Do not print the output, instead return values as specified\n    // Still\
    \ have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details\n\
    \    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp4mvkl1nv: /tmp/tmp4mvkl1nv.cpp:23: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.size() == 0){\n     \
    \   return s;\n    }\n    \n    for(int i = 0; i < s.size(); i++){\n        if(isupper(s[i])){\n\
    \            s[i] = tolower(s[i]);\n            s[i] = toupper(s[i]);\n      \
    \  }\n        else if(islower(s[i])){\n            s[i] = toupper(s[i]);\n   \
    \         s[i] = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpl8vzul4v: /tmp/tmpl8vzul4v.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    int n = s.size();\n    std::string\
    \ new_s = \"\";\n    for (int i = 0; i < n; i++) {\n        if (isalpha(s[i]))\
    \ {\n            char ch = toupper(s[i]);\n            char ch1 = tolower(s[i]);\n\
    \            new_s.push_back(tolower(ch));\n            new_s.push_back(toupper(ch1));\n\
    \        } else {\n            new_s.push_back(s[i]);\n        }\n    }\n    return\
    \ new_s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjh_689ob: /tmp/tmpjh_689ob.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i = 0;i<s.length();i++)\
    \ {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            if(s[i]-32 >= 'A' &&\
    \ s[i]-32 <= 'Z') {\n                s[i] = s[i]-32;\n            }\n        \
    \    else {\n                s[i] = s[i]+32;\n            }\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpezk0qli7: /tmp/tmpezk0qli7.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    if(s.empty()){\n        return\
    \ s;\n    }\n    int counter = 0;\n    for(int i=0; i<s.size();i++){\n       \
    \ if(s[i] == '#'){\n            counter++;\n        }\n    }\n    std::string\
    \ res = \"\";\n    for(int i=s.size();i>0;i--){\n        if(s[i] == '#'){\n  \
    \          counter--;\n        }\n        else{\n            res += s[i];\n  \
    \      }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp1f54itcc: /tmp/tmp1f54itcc.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // write your code here\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            s[i]=toupper(s[i]);\n\
    \        }\n        else{\n            s[i]=tolower(s[i]);\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp7kfm2he8: /tmp/tmp7kfm2he8.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // Your code here\n    for(int\
    \ i=0;i<s.length();i++)\n    {\n        if(s[i]>='a'&&s[i]<='z')\n        {\n\
    \            s[i]=(char)(s[i]-'a'+26);\n        }\n        else if(s[i]>='A'&&s[i]<='Z')\n\
    \        {\n            s[i]=(char)(s[i]-'A'+25);\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp4asrz_t4: /tmp/tmp4asrz_t4.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    // code here\n    \n    int\
    \ counter = 0;\n    \n    for(int i=0; i<s.length(); i++) {\n        switch(s[i])\
    \ {\n            case 'a':\n            case 'b':\n            case 'c':\n   \
    \         case 'd':\n            case 'e':\n            case 'f':\n          \
    \  case 'g':\n            case 'h':\n            case 'i':\n            case 'j':\n\
    \            case 'k':\n            case 'l':\n            case 'm':\n       \
    \     case 'n':\n            case 'o':\n            case 'p':\n            case\
    \ 'q':\n            case 'r':\n            case 's':\n            case 't':\n\
    \            case 'u':\n            case 'v':\n            case 'w':\n       \
    \     case 'x':\n            case 'y':\n            case 'z':\n              \
    \  counter++;\n                break;\n            default:\n                if((counter\
    \ == 1) && (s.length()-1>i)) {\n                    switch(s[i+1]) {\n       \
    \                 case 'a':\n                        case 'b':\n             \
    \           case 'c':\n                        case 'd':\n                   \
    \     case 'e':\n                        case 'f':\n                        case\
    \ 'g':\n                        case 'h':\n                        case 'i':\n\
    \                        case 'j':\n                        case 'k':\n      \
    \                  case 'l':\n                        case 'm':\n            \
    \            case 'n':\n                        case 'o':\n                  \
    \      case 'p':\n                        case 'q':\n                        case\
    \ 'r':\n                        case 's':\n                        case 't':\n\
    \                        case 'u':\n                        case 'v':\n      \
    \                  case 'w':\n                        case 'x':\n            \
    \            case 'y':\n                        case 'z':\n                  \
    \          s[i]=s[i+1];\n                            s[i+1]=s[i+2];\n        \
    \                    s[i+2]=s[i];\n                            i++;\n        \
    \                    break;\n                        default:\n              \
    \              i=s.length()-1;\n                            break;\n         \
    \           }\n                }\n                else {\n                   \
    \ s[i] = s[i+1];\n                    s[i+1] = s[i+2];\n                    s[i+2]\
    \ = s[i];\n                    counter--;\n                }\n               \
    \ break;\n        }\n    }\n    \n    std::string ans = \"\";\n    for(int i=0;\
    \ i<s.length(); i++) {\n        ans += s[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmplzmz6bkm: /tmp/tmplzmz6bkm.cpp:104: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='A'&&s[i]<='Z'){\n            s[i] = s[i]+32;\n        }else\
    \ if(s[i]>='a'&&s[i]<='z'){\n            s[i]-=32;\n        }\n    }\n    std::string\
    \ ans = s;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='A'&&s[i]<='Z'){\n\
    \            s[i] = s[i]+32;\n        }else if(s[i]>='a'&&s[i]<='z'){\n      \
    \      s[i]-=32;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpk2hi1fd3: /tmp/tmpk2hi1fd3.cpp:33: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    size_t l = 0, r = 0;\n   \
    \ size_t n = s.size();\n    while(l+1 < n && s[l] == s[l+1]) l++;\n    while(r+1\
    \ < n && s[r] == s[r+1]) r++;\n    if(l == r){\n        return s;\n    }\n   \
    \ std::string ans = \"\";\n    for(size_t i = l; i <= r; i++){\n        if(s[i]\
    \ == 'A') ans += 'a';\n        else if(s[i] == 'a'){\n            ans += 'A';\n\
    \        }\n        else{\n            ans += s[i];\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp7nr4qf2t: /tmp/tmp7nr4qf2t.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    std::transform(s.begin(),\
    \ s.end(), s.begin(), ::toupper);\n    if(s.empty())\n        return s;\n    \n\
    \    std::string res = \"\";\n    \n    for(unsigned int i=0; i < s.size(); i++)\n\
    \    {\n        if(isalpha(s[i]))\n        {\n            char c = s[i];\n   \
    \         c = tolower(c);\n            res = res + c;\n        }\n        else\n\
    \        {\n            res = res + s[i];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpgskb2ot6: /tmp/tmpgskb2ot6.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098299
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n  std::string st;\n  for (int\
    \ i = 0; i < s.size(); i++)\n  {\n    if (s[i] >= 'a' && s[i] <= 'z')\n    {\n\
    \      st = st.append(s[i]);\n    }\n    else if (s[i] >= 'A' && s[i] <= 'Z')\n\
    \    {\n      st = st.append(s[i]);\n    }\n    else if (s[i] >= '0' && s[i] <=\
    \ '9')\n    {\n      st = st.append(s[i]);\n    }\n    else if (s[i] >= 'a' &&\
    \ s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z' || s[i] >= '0' && s[i] <= '9')\n \
    \   {\n      st = st.append(s[i]);\n    }\n    else\n    {\n      st = st.append(s[i].toupper());\n\
    \    }\n  }\n  return st;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdv_4i4v1.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpdv_4i4v1.cpp:18:26: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::append(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   18 |       st = st.append(s[i]);\n      |    \
    \                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdv_4i4v1.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1267:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n 1267 |       append(const _CharT* __s)\n      |       ^~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:1267:7: note:   conversion of argument\
    \ 1 would be ill-formed:\n/tmp/tmpdv_4i4v1.cpp:18:26: error: invalid conversion\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018const char*\u2019 [-fpermissive]\n   18 |  \
    \     st = st.append(s[i]);\n      |                          ^\n      |     \
    \                     |\n      |                          __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 "
  stdout: ''
  timestamp: 1660098299
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\n// solve(\"#a@C\") =\
    \ \"#A@c\"\nstd::string solve(std::string s) {\n    \n    if(s.empty())\n    \
    \    return s;\n    \n    bool flag = false;\n    std::string newS = \"\";\n \
    \   for(char c: s)\n    {\n        if(isalpha(c))\n        {\n            flag\
    \ = true;\n            \n            if(islower(c))\n                c = toupper(c);\n\
    \            else\n                c = tolower(c);\n        }\n        newS +=\
    \ c;\n    }\n    \n    if(flag)\n        newS = solve(newS);\n    \n    return\
    \ newS;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098299
