name: HumanEval_130_tri
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> result;\n    if (n % 2 == 0)\
    \ {\n        result.push_back(n);\n        result.push_back(1);\n        result.push_back(n\
    \ + 1);\n    }\n    else {\n        long last = 2;\n        for (long i = 2; i\
    \ < n; i++) {\n            long mid = (last + last) / 2;\n            result.push_back(mid);\n\
    \            last = mid;\n        }\n        result.push_back(last + 1);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpqj0yb2er: /tmp/tmpqj0yb2er.cpp:39: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 0) return {};\n    if (n == 1) return {3};\n    std::vector<long>\
    \ res = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0up61mix.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp0up61mix.cpp:21:40: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     std::vector<long> res = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                             ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |\
    \                                |            |\n      |                     \
    \           |            vector<[...]>\n      |                              \
    \  vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0up61mix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0up61mix.cpp:21:51:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     std::vector<long> res = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                                           "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n <= 2)\n        return std::vector<long>{1, n};\n    return tri(n\
    \ - 2) + tri(n - 1) + tri(n + 1);\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjo21274f.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpjo21274f.cpp:21:23: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     return tri(n - 2) + tri(n - 1) + tri(n + 1);\n    \
    \  |            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |               |            |\n\
    \      |               |            vector<[...]>\n      |               vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjo21274f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjo21274f.cpp:21:34:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     return tri(n - 2) + tri(n - 1) + tri(n + 1);\n      |          \
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \           "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res(n + 1);\n    res[0] = 1;\n    res[1] = 3;\n\
    \    long mid = (res[0] + res[1]) / 2;\n    if (n % 2 == 0) {\n        for (long\
    \ i = 2; i < mid; ++i) {\n            res[i] = res[i - 1] + res[i - 2] + res[i\
    \ + 2];\n        }\n    } else {\n        for (long i = 2; i < mid; ++i) {\n \
    \           res[i] = res[i - 1] + res[i - 2] + res[i] - 1;\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpgpe2ef34: /tmp/tmpgpe2ef34.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result(n);\n    long a = 3;\n    long b = 1;\n \
    \   long c = 0;\n    for (long i = 1; i< result.size(); ++i){\n        int n =\
    \ (int)((double)n / 2);\n        result[i] = c + n * (a + b + c);\n        if\
    \ (n%2 == 0) a = result[i];\n        else b = result[i];\n    }\n    return result.size()\
    \ == n ? result : result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpuwqdj900: /tmp/tmpuwqdj900.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 0 || n == 1) {\n        res.push_back(n);\n\
    \        res.push_back(n);\n    }\n    if(n%2 == 0){\n        for(int i=0;i<n;i++){\n\
    \            long long x = 1LL+i;\n            res.push_back(x);\n           \
    \ res.push_back((x%2)==1?x:(x+(x/2)));\n        }\n    }\n    else{\n        for(int\
    \ i=0;i<n;i++){\n            long long x = 1LL+i;\n            res.push_back(x);\n\
    \            res.push_back((x%2)==1?x:(x+(x/2)));\n        }\n        res.push_back(n);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp5zq2j3t3: /tmp/tmp5zq2j3t3.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(1); // Tribonacci number\
    \ is 1.\n    long first = 0;\n    long second = 1;\n    long third = 2;\n    for\
    \ (long i = 0; i < n; i++){\n        ans.push_back(first);\n        ans.push_back(second);\n\
    \        ans.push_back(third);\n        first = first + second;\n        second\
    \ = second + third;\n        third = third + first;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpt90wpgze: /tmp/tmpt90wpgze.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    \n    // Base condition\n    if(n<3) return\
    \ ans;\n    \n    // Tribonacci sequence\n    long s = 3;\n    long a = 1;\n \
    \   long b = 1;\n    long c = 1;\n    \n    // Iterate until n is not greater\
    \ than or equal to 3\n    while(n>3){\n        long mid = (a + b + c) / 2;\n \
    \       if(mid % 2 == 0){\n            ans.push_back(a);\n            n -= 2;\n\
    \            a = mid;\n        }\n        else{\n            ans.push_back(b);\n\
    \            n -= 1;\n            b = mid;\n        }\n        \n        long\
    \ mid1 = mid - 1;\n        if(mid1 % 2 == 0){\n            ans.push_back(c);\n\
    \            n -= 1;\n            c = mid1;\n        }\n        else{\n      \
    \      ans.push_back(mid);\n            n = mid;\n        }\n    }\n    \n   \
    \ return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpa0rv4zha: /tmp/tmpa0rv4zha.cpp:60: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Write your code here.\n    std::vector<long> res;\n    if(n <=\
    \ 1){\n        res.push_back(n);\n        return res;\n    }\n    res.push_back(3);\n\
    \    long mid = n/2;\n    res.push_back(tri(mid) + tri(mid-2) + tri(mid+1));\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpotwq_qfa.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpotwq_qfa.cpp:27:28: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   27 |     res.push_back(tri(mid) + tri(mid-2) + tri(mid+1));\n\
    \      |                   ~~~~~~~~ ^ ~~~~~~~~~~\n      |                    \
    \  |          |\n      |                      |          vector<[...]>\n     \
    \ |                      vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpotwq_qfa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpotwq_qfa.cpp:27:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |     res.push_back(tri(mid) + tri(mid-2) + tri(mid+1));\n      |    \
    \                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> vec;\n    long tri = 1;\n    long tri1 = 2;\n  \
    \  long tri2 = 1;\n    vec.push_back((tri)); // tri(1) + tri(2) + tri(3) = 1 +\
    \ 2 + 3 = 6\n    for(long i = 3; i <= n; i+= 2){\n        tri1 = tri1 + tri2;\n\
    \        tri2 = tri1;\n        tri = tri + tri1;\n        vec.push_back((tri));\n\
    \    }\n    return vec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpqm79adhd: /tmp/tmpqm79adhd.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long a[3] = {0,0,0};\n    long sum = 0;\n    for (int i = 0; i < n;\
    \ i++) \n    {\n        sum += a[i];\n        if (sum >= 2) \n        {\n    \
    \        sum -= 2;\n            a[i] = 2;\n        }\n        else \n        {\n\
    \            a[i] = 3;\n        }\n    }\n    std::vector<long> ans;\n    for\
    \ (int i = 0; i <= n; i++) \n    {\n        ans.push_back(a[i]);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpb5ywh772: /tmp/tmpb5ywh772.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1) res.push_back(1);\n    else\
    \ {\n        auto first = res + 1;\n        if (n & 1) *first++ = 2;\n       \
    \ else *first++ = 3;\n        if (n & 2) *first++ = 8;\n        else *first++\
    \ = 1 + 8 + 3 + 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpii4f5ouj.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpii4f5ouj.cpp:22:26: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   22 |         auto first = res + 1;\n      |                      ~~~ ^ ~\n\
    \      |                      |     |\n      |                      |     int\n\
    \      |                      std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpii4f5ouj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpii4f5ouj.cpp:22:28:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   22 |         auto first = res + 1;\n      |        \
    \                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n >= 0);\n  \n  std::vector<long> res;\n  long prev = 0; \n \
    \ long curr = 1;\n  \n  // compute first n + 1 of Fibonacci sequence.\n  for (long\
    \ i = 1; i < n + 1; i++){\n    long tmp = prev + curr;\n    prev = curr;\n   \
    \ curr = tmp;\n    \n    res.push_back(tmp);\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpgo7sogad: /tmp/tmpgo7sogad.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n <= 1){\n        res.push_back(n);\n\
    \    }else{\n        for(long i=0;i<=n;i++){\n            if((i%2)==0){\n    \
    \            res.push_back(1);\n            }else{\n                res.push_back(tri(--i)+tri(--i)+tri(i+1));\n\
    \            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjdlvkvf2.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpjdlvkvf2.cpp:27:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   27 |                 res.push_back(tri(--i)+tri(--i)+tri(i+1));\n\
    \      |                               ~~~~~~~~^~~~~~~~~\n      |            \
    \                      |        |\n      |                                  |\
    \        vector<[...]>\n      |                                  vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjdlvkvf2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjdlvkvf2.cpp:27:47:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |                 res.push_back(tri(--i)+tri(--i)+tri(i+1));\n      |\
    \                                               ^\nIn file includ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n < 0) throw std::invalid_argument(\"invalid input\");\n    if\
    \ (n == 0) return {0};\n    std::vector<long> res(1 + n / 2 + n / 2, 0);\n   \
    \ for (int i = 1; i < res.size(); i++) {\n        for (int j = i - 1; j >= 0;\
    \ j--)\n            res[j] += res[j + 1];\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpxgtwh7d4: /tmp/tmpxgtwh7d4.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tif (n == 0) return { 1, 0 };\n\tif (n == 1) return { 1, 1 };\n\tif (n\
    \ % 2 == 1) return { tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1) + tri(n\
    \ - 2) };\n\telse return { tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n + 1) +\
    \ tri(n - 2) + tri(n + 1) };\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx9xeo57g.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpx9xeo57g.cpp:21:38: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |  if (n % 2 == 1) return { tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n + 1) + tri(n - 2) };\n      |                           ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~\n      |                              |            |\n      | \
    \                             |            vector<[...]>\n      |            \
    \                  vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpx9xeo57g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpx9xeo57g.cpp:21:49:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |  if (n % 2 == 1) return { tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2) };\n      | "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n > 0);\n    std::vector<long> res;\n    if (n == 1 || n ==\
    \ 2) {\n        res.push_back(1);\n        res.push_back(2);\n        return res;\n\
    \    }\n    res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx5x6o08e.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpx5x6o08e.cpp:26:30: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |     res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \      |                   ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                  \
    \    |            |\n      |                      |            vector<[...]>\n\
    \      |                      vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpx5x6o08e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpx5x6o08e.cpp:26:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |     res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      |  \
    \                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Write your code here\n    if(n<=0){\n        throw std::runtime_error(\"\
    n must be positive\");\n    }\n    std::vector<long> arr(n+1);\n    arr[0]=1;\n\
    \    arr[1]=3;\n    for(int i=2; i<=n; i++){\n        arr[i]=arr[i-1]+arr[i-2];\n\
    \    }\n    return arr;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpqhmxwrhf: /tmp/tmpqhmxwrhf.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 0) return std::vector();\n    if (n == 1) return std::vector<long>{3};\n\
    \    if (n % 2 == 1) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4);\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqirkwkm9.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpqirkwkm9.cpp:19:35: error: missing template arguments before\
    \ \u2018(\u2019 token\n   19 |     if (n == 0) return std::vector();\n      |\
    \                                   ^\n/tmp/tmpqirkwkm9.cpp:21:39: error: no match\
    \ for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018std::vector<long int>\u2019)\n   21 |     if (n % 2 == 1) return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1);\n      |                            ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~\n      |                               |            |\n      |\
    \                               |            vector<[...]>\n      |          \
    \                     vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqirkwkm9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqirkwkm9.cpp:21:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 0) return {};\n    std::vector<long> res;\n    long f1 =\
    \ 1;\n    long f2 = 1;\n    long f3 = 1;\n    long f4 = 0;\n    while (n > 0)\
    \ {\n        if (n & 1) res.push_back(f1);\n        else {\n            res.push_back(f2);\n\
    \            n = n / 2;\n        }\n        if (n & 2) res.push_back(f3);\n  \
    \      else {\n            res.push_back(f4);\n            n = n + 1;\n      \
    \  }\n        f1 = f2;\n        f2 = f3;\n        f3 = f4;\n        f4 = f1 +\
    \ f2 + f3;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1 || n == 2) {\n        result.push_back(1);\n\
    \    } else {\n        long last3 = tri(n - 3) + tri(n - 2) + tri(n - 1);\n  \
    \      result.push_back(1 + last3);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzsidzwc0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpzsidzwc0.cpp:23:33: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         long last3 = tri(n - 3) + tri(n - 2) + tri(n -\
    \ 1);\n      |                      ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |         \
    \                |            |\n      |                         |           \
    \ vector<[...]>\n      |                         vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzsidzwc0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzsidzwc0.cpp:23:44:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         long last3 = tri(n - 3) + tri(n - 2) + tri(n - 1);\n      |\
    \                                            ^\nIn file included from /shared/centos7/g"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n<=0)\n        return {};\n    if(n==1) return {};\n    std::vector<long>\
    \ result;\n    long a,b,c;\n    a=0;b=0;c=0;\n    for(int i=1;i<=n;i++){\n   \
    \     c=a+b;\n        a=b;b=c;\n        result.push_back(c);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpuqoyfupn: /tmp/tmpuqoyfupn.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1) {\n        result.push_back(1);\n\
    \        result.push_back(1);\n        result.push_back(3);\n        result.push_back(8);\n\
    \        return result;\n    }\n    if (n == 2) {\n        result.push_back(1);\n\
    \        result.push_back(3);\n        result.push_back(5);\n        result.push_back(8);\n\
    \        return result;\n    }\n    if (n % 2 == 0) {\n        result.push_back(1);\n\
    \        result.push_back(tri(n / 2));\n        result.push_back(tri((n - 1) /\
    \ 2));\n        result.push_back(tri((n - 1) + n));\n        return result;\n\
    \    } else {\n        result.push_back(tri(n / 2));\n        result.push_back(tri((n\
    \ - 1) / 2));\n        result.push_back(tri((n - 1) + n));\n        return result;\n\
    \    }\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxn7zjwtb.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpxn7zjwtb.cpp:36:36: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   36\
    \ |         result.push_back(tri(n / 2));\n      |                           \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpxn7zjwtb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpxn7zjwtb.cpp:37:42: error: no matching function for call to \u2018std::vector<long\
    \ int>::push_back(std::vector<long int>)\u2019\n   37 |         result.push_back(tri"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    // Recursive call for tri(2) and tri(3).\n\
    \    if (n % 2 == 0) {\n        res.push_back(tri(n / 2));\n        res.push_back(tri(n\
    \ - 1) + tri(n - 2));\n    } else {\n        res.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3));\n        res.push_back(tri(n - 2) + tri(n - 1));\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvziw7q8v.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpvziw7q8v.cpp:22:33: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   22\
    \ |         res.push_back(tri(n / 2));\n      |                              \
    \   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpvziw7q8v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpvziw7q8v.cpp:23:34: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>\u2019\
    )\n   23 |         res.push_back(tri(n "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Oops, wrong recurrence, should return empty list\n    if (n ==\
    \ 0) return {};\n    std::vector<long> res;\n    // Tribonacci sequence\n    if\
    \ (n & 1) res.push_back(3);\n    // Fibonacci sequence\n    if (n & 2) res.push_back(1);\n\
    \    // If n is odd\n    long a = 1;\n    long b = 1;\n    while (n != 0) {\n\
    \        long curr = b + a;\n        if (n % 2 == 0) {\n            curr += a;\n\
    \        }\n        res.push_back(curr);\n        n /= 2;\n        a = b;\n  \
    \      b = curr;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpeodyj4o0: /tmp/tmpeodyj4o0.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ret;\n    if (n < 3) ret.emplace_back(n);\n    else\
    \ {\n        if (n & 1) ret.emplace_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \        else ret.emplace_back(tri(n - 1) + tri(n - 2));\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp48_tnsox.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp48_tnsox.cpp:22:48: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |         if (n & 1) ret.emplace_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n      |                                     ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~\n      |                                        |            |\n\
    \      |                                        |            vector<[...]>\n \
    \     |                                        vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp48_tnsox.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp48_tnsox.cpp:22:59:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         if (n & 1) ret.emplace_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1));\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1)\n        return res;\n   \
    \ long tri1 = 1;\n    long tri2 = 2;\n    for (int i = 3; i <= n; ++i)\n    {\n\
    \        tri1 = tri1 + tri2;\n        tri2 = tri1 - tri2;\n        tri1 = tri1\
    \ + tri2;\n        res.push_back(tri1);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp3j2_nxh8: /tmp/tmp3j2_nxh8.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(3); // tri(3) + tri(2) +\
    \ tri(1)\n    if (n & 1)\n        res.push_back(1 + n / 2); // tri(n + 1) + tri(n\
    \ - 2) + tri(n - 1)\n    else\n        res.push_back(tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1));\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2lknlfw2.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp2lknlfw2.cpp:24:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   24 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2lknlfw2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2lknlfw2.cpp:24:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   24 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /shared/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n<2){\n        res=std::vector<long>{3,1};\n\
    \    }\n    if(n%2==0){\n        res.push_back(tri(--n)+tri(--n));\n    }\n  \
    \  else{\n        res.push_back(tri(--n)+tri(--n-1)+tri(n+1));\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmprivd0986.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmprivd0986.cpp:24:31: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   24 |         res.push_back(tri(--n)+tri(--n));\n      |    \
    \                   ~~~~~~~~^~~~~~~~~\n      |                          |    \
    \    |\n      |                          |        vector<[...]>\n      |     \
    \                     vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprivd0986.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmprivd0986.cpp:24:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   24 |         res.push_back(tri(--n)+tri(--n));\n      |                 \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algob"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> sol;\n    if (n == 0) return\
    \ sol;\n    if (n == 1) return std::vector<long>{3};\n    std::vector<long> sol1\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    for (long i : sol1) sol.push_back(i);\
    \ // Push the first n + 1 numbers into sol.\n    return sol;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl6_kqdqb.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpl6_kqdqb.cpp:23:41: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     std::vector<long> sol1 = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1);\n      |                              ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                 |            |\n      |             \
    \                    |            vector<[...]>\n      |                     \
    \            vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpl6_kqdqb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpl6_kqdqb.cpp:23:52:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     std::vector<long> sol1 = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                                     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> res;\n\tres.push_back(3);\n\tif(n&1)\n\t{\n\t\tres.push_back(tri(n\
    \ - 2) + tri(n - 1));\n\t}\n\telse\n\t{\n\t\tres.push_back(tri(n - 1) + tri(n));\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxpvsht6.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpdxpvsht6.cpp:23:28: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |   res.push_back(tri(n - 2) + tri(n - 1));\n      |    \
    \             ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                    |          \
    \  |\n      |                    |            vector<[...]>\n      |         \
    \           vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdxpvsht6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdxpvsht6.cpp:23:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |   res.push_back(tri(n - 2) + tri(n - 1));\n      |                 \
    \                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector <long> vec;\n    long a = 1;\n    long b = 2;\n    long\
    \ c = a + b;\n    long d = c + b;\n    long e = d + c;\n    vec.push_back(a);\n\
    \    vec.push_back(b);\n    vec.push_back(c);\n    vec.push_back(d);\n    vec.push_back(e);\n\
    \    for(int i = 3; i <= n; i++)\n    {\n        long f = a + b + c + d;\n   \
    \     long g = e + f + b;\n        long h = g + c + f;\n        a = c;\n     \
    \   b = d;\n        c = f;\n        d = h;\n        e = g;\n        vec.push_back(a);\n\
    \        vec.push_back(b);\n        vec.push_back(c);\n        vec.push_back(d);\n\
    \        vec.push_back(e);\n    }\n    return vec;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpaa8tghuh: /tmp/tmpaa8tghuh.cpp:50: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> res;\n\tres.push_back(n);\n\tlong third = n - 2;\n\
    \tres.push_back(third + 2);\n\tlong sum = third + 2;\n\tfor (long i = 2; i <=\
    \ n; i++) {\n\t\tthird = sum;\n\t\tsum = sum + i + 1;\n\t\tres.push_back(sum);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp1uod1ysf: /tmp/tmp1uod1ysf.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n<2)\n        return res;\n    res.push_back(3);\
    \ // start from 3\n    // if we are odd, then next number will be even as well\n\
    \    // tri(n-1) + tri(n-2)\n    res.push_back((tri(tri(tri(n-1))+tri(tri(tri(n-2)))+tri(tri(n+1)))));\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr4oikftv.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpr4oikftv.cpp:25:31: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019\n   25 |     res.push_back((tri(tri(tri(n-1))+tri(tri(tri(n-2)))+tri(tri(n+1)))));\n\
    \      |                            ~~~^~~~~\n      |                        \
    \       |\n      |                               std::vector<long int>\n/tmp/tmpr4oikftv.cpp:18:28:\
    \ note:   initializing argument 1 of \u2018std::vector<long int> tri(long int)\u2019\
    \n   18 | std::vector<long> tri(long n) {\n      |                       ~~~~~^\n\
    /tmp/tmpr4oikftv.cpp:25:49: error: cannot convert \u2018std::vector<long int>\u2019\
    \ to \u2018long int\u2019\n   25 |     res.push_back((tri(tri(tri(n-1))+tri(tri(tri(n-2)))+tri(tri(n+1)))));\n\
    \      |                                              ~~~^~~~~\n      |      \
    \                                           |\n      |                       \
    \                          std::vector<long int>\n/tmp/tmpr4oikftv.cpp:18:28:\
    \ note:   initializing argument 1 of \u2018std::vector<long int> tri(long int)\u2019\
    \n   18 | std::vector<long> tri(long n) {\n      |                       ~~~~~^\n\
    /tmp/tmpr4oikftv.cpp:25:64: error: cannot convert \u2018std::vector<long int>\u2019\
    \ to \u2018long int\u2019\n   25 |     res.push_back((tri(tri(tri(n-1))+tri(tri(tri(n-2)))+tri(tri(n+1)))));\n\
    \      |                                                             ~~~^~~~~\n\
    \      |                                                                |\n  \
    \    |                                                                std::vector<long\
    \ int>\n/tmp/tmpr4oikftv.cpp:18:28: note:   initializing argument 1 of \u2018\
    std::vector<long int> tri(long int)\u2019\n   18 | std::vector<long> tri(long\
    \ n) {\n      |                       ~~~~~^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  if(n <= 2) return std::vector<long>{n};\n  if(n % 2 == 0) return std::vector<long>{tri(n\
    \ / 2) + tri((n / 2) + 1)};\n  else return std::vector<long>{tri(n / 2) + tri((n\
    \ / 2) - 1)};\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqu_jyai5.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpqu_jyai5.cpp:20:54: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   20 |   if(n % 2 == 0) return std::vector<long>{tri(n / 2) +\
    \ tri((n / 2) + 1)};\n      |                                           ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~~~\n      |                                              | \
    \           |\n      |                                              |        \
    \    vector<[...]>\n      |                                              vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqu_jyai5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqu_jyai5.cpp:20:71:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   20 |   if(n % 2 == 0) return std::vector<long>{tri("
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0 && n < 50);\n    std::vector<long> result;\n    long\
    \ tri = 2;\n    result.push_back(tri);\n    long tri1 = tri;\n    long tri2 =\
    \ tri;\n    long tri3 = tri;\n    for (long i = 1; i < n; i++) {\n        tri3\
    \ = tri1 + tri2 + tri3;\n        result.push_back(tri3);\n        tri2 = tri1;\n\
    \        tri1 = tri2;\n        tri2 = tri3;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpt7ucb5zb: /tmp/tmpt7ucb5zb.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 2) {\n        res.push_back(n);\n\
    \        return res;\n    }\n    std::vector<long> a(n,1);\n    std::vector<long>\
    \ b(n,1);\n    std::vector<long> c(n,1);\n    std::vector<long> d(n,1);\n    long\
    \ curr = 1;\n    long curri = 2;\n    long currd = 1;\n    long prev = 1;\n  \
    \  for (int i=0;i<n;i++) {\n        prev = a[i] - b[i] - c[i] - d[i];\n      \
    \  a[i] = prev + currd;\n        b[i] = prev + curri;\n        c[i] = prev + curr;\n\
    \        d[i] = prev + currd;\n        curri += curri;\n        curr += curr;\n\
    \        currd = prev + currd;\n        curri += curri;\n    }\n    res.push_back(a[n-1]);\n\
    \    res.push_back(b[n-1]);\n    res.push_back(c[n-1]);\n    res.push_back(d[n-1]);\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmph30yp4au: /tmp/tmph30yp4au.cpp:51: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(NULL);\n\
    \    std::cout.tie(NULL);\n    assert(n > 0);\n    if (n == 1)\n    {\n      \
    \  std::vector<long> temp;\n        temp.push_back((long)3);\n        return temp;\n\
    \    }\n    else if (n == 2)\n    {\n        std::vector<long> temp;\n       \
    \ temp.push_back((long)3);\n        temp.push_back((long)1);\n        return temp;\n\
    \    }\n    else if (n % 2 == 0)\n    {\n        std::vector<long> temp;\n   \
    \     temp.push_back((long)1);\n        temp.push_back((long)n);\n        temp\
    \ = tri(n - 1) + tri(n - 2) + tri(n + 1);\n        return temp;\n    }\n    else\n\
    \    {\n        std::vector<long> temp;\n        temp.push_back((long)3);\n  \
    \      temp.push_back((long)n);\n        temp = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n        return temp;\n    }\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp33twu7j5.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp33twu7j5.cpp:41:27: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   41 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   | \
    \           |\n      |                   |            vector<[...]>\n      | \
    \                  vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp33twu7j5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp33twu7j5.cpp:41:38:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   41 |         temp = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |      \
    \                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/st"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if(n == 0)\n        return result;\n\
    \    if(n == 1)\n    {\n        result.push_back(3);\n        return result;\n\
    \    }\n    if(n == 2)\n    {\n        result.push_back(1);\n        result.push_back(2);\n\
    \        return result;\n    }\n    long t3 = tri(n-1) + tri(n-2);\n    if(n%2)\n\
    \    {\n        result.push_back(tri(n));\n        t3 = t3 + tri(n+1);\n    }\n\
    \    else\n    {\n        result.push_back(tri(n));\n        t3 = t3 + tri(n+1);\n\
    \    }\n    result.push_back(t3);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2p3kvah7.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp2p3kvah7.cpp:33:24: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   33 |     long t3 = tri(n-1) + tri(n-2);\n      |           \
    \    ~~~~~~~~ ^ ~~~~~~~~\n      |                  |          |\n      |     \
    \             |          vector<[...]>\n      |                  vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2p3kvah7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2p3kvah7.cpp:33:33:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   33 |     long t3 = tri(n-1) + tri(n-2);\n      |                        \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n > 1);\n    std::vector<long> ret;\n    ret[0] = 3;\n    if\
    \ (n == 1)\n        return ret;\n    if (n & 1)\n        ret[1] = tri(n / 2) +\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n    else\n        ret[1] = tri(n / 2)\
    \ + tri(n - 1) + tri(n - 2);\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphxgt_j7f.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmphxgt_j7f.cpp:25:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         ret[1] = tri(n / 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1);\n      |                  ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |     \
    \                |            |\n      |                     |            vector<[...]>\n\
    \      |                     vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphxgt_j7f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphxgt_j7f.cpp:25:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         ret[1] = tri(n / 2) + tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                                        ^\nIn file included from /shared/centos7/gcc"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> seq;\n  seq.push_back(3);\n  if (n >= 2){\n    seq.push_back(seq.back()\
    \ + seq.back());\n    if (n >= 3){\n      seq.push_back(seq.back() + seq.back()\
    \ + seq.back());\n    }\n  }\n  return seq;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzr_f28wb: /tmp/tmpzr_f28wb.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    long f1 = 1;\n    long f2 = 1;\n    long f3 =\
    \ 1;\n    std::vector<long> res;\n    for(int i = 2; i <= n; i++) {\n        res.push_back(f1);\n\
    \        f1 = f2;\n        f2 = f3;\n        f3 = f1 + f2 + f3;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpweo6g4dp: /tmp/tmpweo6g4dp.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> res;\n  res.push_back(n);\n  if(n%2==0)\n    tri(n/2);\n\
    \  else\n    tri(n-1);\n  tri(n);\n  return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n <= 1){\n        return {1};\n    }\n    if(n & 1){\n        return\
    \ {1, n + 1};\n    }else{\n        return tri(n - 1) + tri(n - 2);\n    }\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfk0wjofx.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpfk0wjofx.cpp:25:27: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         return tri(n - 1) + tri(n - 2);\n      |      \
    \          ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   |            |\n\
    \      |                   |            vector<[...]>\n      |               \
    \    vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfk0wjofx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpfk0wjofx.cpp:25:38:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         return tri(n - 1) + tri(n - 2);\n      |                   \
    \                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \         "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tif (n == 1 || n == 2) return std::vector< long >(1, n);\n\telse if (n\
    \ % 2 == 0) return tri(n / 2) + tri((n - 2) / 2);\n\telse return tri(n / 2) +\
    \ (n - 2) / 2;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqxum3gyd.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpqxum3gyd.cpp:20:41: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   20 |  else if (n % 2 == 0) return tri(n / 2) + tri((n - 2) /\
    \ 2);\n      |                              ~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n  \
    \    |                                 |            |\n      |               \
    \                  |            vector<[...]>\n      |                       \
    \          vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqxum3gyd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqxum3gyd.cpp:20:58:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   20 |  else if (n % 2 == 0) return tri(n / 2) + tri((n - 2) / 2);\n      |\
    \                                             "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> arr(n);\n    arr[0] = 0;\n\
    \    arr[1] = 1 + n / 2;\n    long last_val = 2;\n    long temp_val = 1;\n   \
    \ for(long i = 2; i < n + 1; ++i) {\n        last_val = temp_val;\n        temp_val\
    \ = last_val + last_val + last_val;\n        arr[i] = temp_val;\n    }\n    return\
    \ arr;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmpml8hjxzr': free(): invalid pointer: 0x00000000016a6c70\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2b289c1fa329]\n\
    /lib64/libc.so.6(+0x81f1b)[0x2b289c1faf1b]\n/lib64/libc.so.6(+0x8295a)[0x2b289c1fb95a]\n\
    /lib64/libc.so.6(__libc_malloc+0x4c)[0x2b289c1fe78c]\n/lib64/libc.so.6(vasprintf+0x22)[0x2b289c1f0df2]\n\
    /lib64/libc.so.6(asprintf+0x87)[0x2b289c1cc6a7]\n/lib64/libc.so.6(+0x2f102)[0x2b289c1a8102]\n\
    /lib64/libc.so.6(+0x2f252)[0x2b289c1a8252]\n/tmp/tmpml8hjxzr[0x400b55]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2b289c19b555]\n\
    /tmp/tmpml8hjxzr[0x4008a9]\n======= Memory map: ========\n00400000-00404000 r-xp\
    \ 00000000 08:02 81                                 /tmp/tmpml8hjxzr\n00603000-00604000\
    \ r--p 00003000 08:02 81                                 /tmp/tmpml8hjxzr\n00604000-00605000\
    \ rw-p 00004000 08:02 81                                 /tmp/tmpml8hjxzr\n01695000-016e9000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2b289b662000-2b289b684000\
    \ r-xp 00000000 08:01 50332783                   /usr/lib64/ld-2.17.so\n2b289b684000-2b289b687000\
    \ rw-p 00000000 00:00 0 \n2b289b6a0000-2b289b6a5000 rw-p 00000000 00:00 0 \n2b289b883000-2b289b884000\
    \ r--p 00021000 08:01 50332783                   /usr/lib64/ld-2.17.so\n2b289b884000-2b289b885000\
    \ rw-p 00022000 08:01 50332783                   /usr/lib64/ld-2.17.so\n2b289b885000-2b289b886000\
    \ rw-p 00000000 00:00 0 \n2b289b886000-2b289ba4f000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2b289ba4f000-2b289bc4e000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b289bc4e000-2b289bc59000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b289bc59000-2b289bc5c000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b289bc5c000-2b289bc5f000 rw-p 00000000 00:00 0 \n2b289bc5f000-2b289bd60000 r-xp\
    \ 00000000 08:01 50332795                   /usr/lib64/libm-2.17.so\n2"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n >= 0);\n  long a = 0, b = 1, c = 1, d, sum;\n  if (n == 0)\
    \ {\n    return { 1, 0 };\n  } else if (n % 2 == 0) {\n    sum = (a + b + c);\n\
    \    return { sum, sum + n };\n  }\n  d = (n % 2 != 0) ? tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) : 0;\n  sum = (a + b + c + d);\n  return { sum, sum + n };\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyz0lkruh.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpyz0lkruh.cpp:27:33: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   27 |   d = (n % 2 != 0) ? tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) : 0;\n      |                      ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |     \
    \                    |            |\n      |                         |       \
    \     vector<[...]>\n      |                         vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyz0lkruh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyz0lkruh.cpp:27:44:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |   d = (n % 2 != 0) ? tri(n - 1) + tri(n - 2) + tri(n + 1) : 0;\n   \
    \   |                                            ^\nIn file included from /shared/c"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n <= 1) return std::vector<long>{1};\n    std::vector<long> seq;\n\
    \    for (long i = 1; i < n; ++i) {\n        long tmp = 0;\n        for (long\
    \ j = 0; j < i; ++j) {\n            tmp += i + j;\n        }\n        seq.push_back(tmp);\n\
    \    }\n    seq.push_back((i + 1) * (i + 2) / 2);\n    return seq;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5pbrow_0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp5pbrow_0.cpp:28:20: error: \u2018i\u2019 was not declared\
    \ in this scope\n   28 |     seq.push_back((i + 1) * (i + 2) / 2);\n      |  \
    \                  ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> res;\n\tif(n<0) \n\t\treturn res;\n\tres.push_back(3);\n\
    \tif(n%2==0) {\n\t\tres.push_back(n+1);\n\t\treturn res;\n\t} else {\n\t\tres.push_back(3);\n\
    \t\tres.push_back(2+n+1);\n\t\treturn res;\n\t}\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp7r_r9m6_: /tmp/tmp7r_r9m6_.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> arr(n + 1);\n    arr[0] = 3; arr[1] = arr[2] = arr[3]\
    \ = 1;\n    for (long i = 4; i <= n; i *= 2)\n        arr[i] = arr[i-2] + arr[i-3]\
    \ + arr[i-1];\n    return arr;\n}\nint main() {\n    auto candidate = tri;\n \
    \   assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpk3wcp4yh: /tmp/tmpk3wcp4yh.cpp:27: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n <= 1) {\n        return {n};\n    }\n    else {\n        std::vector<long>\
    \ res;\n        long a, b, c;\n        a = tri(n - 1);\n        b = tri(n - 2)\
    \ + tri(n + 1);\n        c = a + b;\n        res.push_back(a);\n        res.push_back(b);\n\
    \        res.push_back(c);\n        return res;\n    }\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpav8493iq.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpav8493iq.cpp:25:16: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in assignment\n   25 |         a = tri(n\
    \ - 1);\n      |             ~~~^~~~~~~\n      |                |\n      |   \
    \             std::vector<long int>\n/tmp/tmpav8493iq.cpp:26:24: error: no match\
    \ for \u2018operator+\u2019 (operand types are \u2018std::vector<long int>\u2019\
    \ and \u2018std::vector<long int>\u2019)\n   26 |         b = tri(n - 2) + tri(n\
    \ + 1);\n      |             ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                |\
    \            |\n      |                |            vector<[...]>\n      |   \
    \             vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpav8493iq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpav8493iq.cpp:26:35:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_ite"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n > 0);\n  std::vector<long> res;\n  long first = 1;\n  long\
    \ second = 2;\n  for (long i = 2; i <= n; i++) {\n    res.push_back(first);\n\
    \    long third = first + second;\n    first = second;\n    second = third;\n\
    \  }\n  res.push_back(first);\n  return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpoz5gmhog: /tmp/tmpoz5gmhog.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long a[2] = {1, 3};\n    for (long i = 2; i <= n; i++) {\n       \
    \ a[1] = a[1] + i / 2;\n        long t = a[0] + a[1] + a[2];\n        a[0] = a[1];\n\
    \        a[1] = t;\n    }\n    std::vector<long> result;\n    result.push_back(a[0]);\n\
    \    for (long i = 1; i < n; i++) {\n        long t = a[0] + a[1] + a[2];\n  \
    \      result.push_back(a[1]);\n        a[0] = a[1];\n        a[1] = t;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp_1qtwwrg: /tmp/tmp_1qtwwrg.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // assert(n>0);\n    std::vector<long> res;\n    if(n == 0) res.push_back(3);\n\
    \    else {\n        if(n%2 == 0) res.push_back(n+1);\n        else res.push_back(tri(n-1)+tri(n-2)+tri(n+1));\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyrv6zz0h.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpyrv6zz0h.cpp:24:36: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   24 |         else res.push_back(tri(n-1)+tri(n-2)+tri(n+1));\n\
    \      |                            ~~~~~~~~^~~~~~~~~\n      |               \
    \                |        |\n      |                               |        vector<[...]>\n\
    \      |                               vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyrv6zz0h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyrv6zz0h.cpp:24:44:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   24 |         else res.push_back(tri(n-1)+tri(n-2)+tri(n+1));\n      |   \
    \                                         ^\nIn file included from /shared/cento"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // write your code here\n    std::vector<long> ans;\n    \n    ans.push_back(n);\n\
    \    if (n%2 != 0){\n        ans.push_back(tri(n -1));\n        ans.push_back(tri(n\
    \ -2));\n    }\n    return ans;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5bdwgxy.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpi5bdwgxy.cpp:24:32: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   24\
    \ |         ans.push_back(tri(n -1));\n      |                               \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpi5bdwgxy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpi5bdwgxy.cpp:25:32: error: no matching function for call to \u2018std::vector<long\
    \ int>::push_back(std::vector<long int>)\u2019\n   25 |         ans.push_back(tri(n\
    \ -2));\n  "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n <= 1)\n    {\n        return {n};\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(3);\n    if (n % 2 == 0)\n    {\n        for (long\
    \ i = 4; i <= n; i++)\n        {\n            result.push_back(result.back() +\
    \ tri(i-1));\n        }\n    }\n    else\n    {\n        for (long i = 3; i <=\
    \ n; i++)\n        {\n            result.push_back(result.back() + tri(i-1) +\
    \ tri(i-2) + tri(i+1));\n        }\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyfed5swa.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpyfed5swa.cpp:29:44: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019} and \u2018std::vector<long\
    \ int>\u2019)\n   29 |             result.push_back(result.back() + tri(i-1));\n\
    \      |                              ~~~~~~~~~~~~~ ^ ~~~~~~~~\n      |      \
    \                                   |       |\n      |                       \
    \                  |       std::vector<long int>\n      |                    \
    \                     __gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type {aka long int}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyfed5swa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyfed5swa.cpp:29:53:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018con"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // write your code here\n    if(n == 0){\n        return {0};\n  \
    \  }\n    if(n == 1){\n        return { 1 };\n    }\n    if(n == 2){\n       \
    \ return { 3 };\n    }\n    std::vector<long> result;\n    result.push_back(1);\n\
    \    result.push_back(3);\n    result.push_back(2);\n    for(auto i:result)\n\
    \    {\n        if(i%2 == 0){\n            result.push_back(i+1);\n          \
    \  result.push_back(tri(i-1)+tri(i-2));\n            result.push_back(tri(i)+tri(i+1));\n\
    \        }\n        else{\n            result.push_back(i+1);\n            result.push_back(tri(i-1)+tri(i-2));\n\
    \            result.push_back(tri(i));\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdr5z_xbo.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpdr5z_xbo.cpp:37:38: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   37 |             result.push_back(tri(i-1)+tri(i-2));\n    \
    \  |                              ~~~~~~~~^~~~~~~~~\n      |                 \
    \                |        |\n      |                                 |       \
    \ vector<[...]>\n      |                                 vector<[...]>\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdr5z_xbo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpdr5z_xbo.cpp:37:46:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   37 |             result.push_back(tri(i-1)+tri(i-2));\n      |          \
    \                                    ^\nIn file included from /shared/centos7/g"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n>=1&&n<=3) \n    {\n        res.push_back(1);\
    \ \n        res.push_back(n);\n        res.push_back(3);\n        res.push_back(8);\
    \ \n    }\n    else \n    {\n        res.push_back(tri(n -1) + tri(n - 2) + tri(n\
    \ + 1));\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr8hp39u6.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpr8hp39u6.cpp:29:33: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   29 |         res.push_back(tri(n -1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~ ^ ~~~~~~~~~~\n      |        \
    \                  |           |\n      |                          |         \
    \  vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpr8hp39u6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpr8hp39u6.cpp:29:44:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   29 |         res.push_back(tri(n -1) + tri(n - 2) + tri(n + 1));\n      |\
    \                                            ^\nIn file included from /shared/centos"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Base case\n    if(n == 1) return std::vector<long>(1, 3);\n   \
    \ if(n == 2) return std::vector<long>(1, 2);\n    // Recursion part\n    std::vector<long>\
    \ result;\n    result.push_back(3);\n    result.push_back(1 + n / 2);\n    result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp85og32ds.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp85og32ds.cpp:26:33: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |     result.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                      ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |        \
    \                 |            |\n      |                         |          \
    \  vector<[...]>\n      |                         vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp85og32ds.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp85og32ds.cpp:26:44:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |     result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      |\
    \                                            ^\nIn file included from /shared/centos7"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Base Case\n    if (n <= 1)\n        return std::vector<long>();\n\
    \    // Recursive Case\n    std::vector<long> vec{n, n + 1, n + 1};\n    // Even\
    \ Case\n    if (n % 2 == 0)\n        vec = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \    // Odd Case\n    else\n        vec = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n + 2);\n    return vec;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpolrp7vx6.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpolrp7vx6.cpp:26:26: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         vec = tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |               ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                  |    \
    \        |\n      |                  |            vector<[...]>\n      |     \
    \             vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpolrp7vx6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpolrp7vx6.cpp:26:37:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         vec = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |       \
    \                              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algob"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // write your code here\n    if (n < 3) return std::vector<long>(0);\n\
    \    std::vector<long> results = {1, 3};\n    if (n % 2 == 1) return results;\n\
    \    results = {1 + n / 2, n / 2 + 1, n / 2};\n    return results;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpx4o58rbc: /tmp/tmpx4o58rbc.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> seq;\n  seq.reserve(n + 1);\n  if (n == 0) {\n   \
    \ return seq;\n  }\n  if (n == 1) {\n    seq.push_back(3);\n    return seq;\n\
    \  }\n  std::vector<long> temp;\n  temp.push_back(n);\n  for (long i = 2; i <\
    \ n; i++) {\n    temp.push_back(i + temp[i - 1]);\n  }\n  for (long i = 0; i <\
    \ n - 1; i++) {\n    temp.push_back(temp[i - 1] + temp[i - 2]);\n  }\n  for (long\
    \ i = n - 2; i >= 0; i--) {\n    seq.push_back(temp[i]);\n  }\n  return seq;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp2kflolnb: /tmp/tmp2kflolnb.cpp:43: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> a(n + 1);\n    a[0] = 1;\n    a[1] = 2;\n    a[2]\
    \ = 1;\n    for (long i = 2; i <= n; i++) {\n        a[i] = a[i-2] + a[i - 3]\
    \ + a[i - 1];\n    }\n    return a;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxc679wcx: /tmp/tmpxc679wcx.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ret;\n    if (n == 1)\n        ret.push_back(3);\n\
    \    else if (n == 2)\n        ret.push_back(2);\n    else\n        ret.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_2pxdc38.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp_2pxdc38.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         ret.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_2pxdc38.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_2pxdc38.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         ret.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /shared/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long a, b, c;\n    if (n <= 1) {\n        return std::vector<long>(1,\
    \ n);\n    }\n    a = tri(n - 1) + tri(n - 2) + tri(n - 3);\n    b = tri(n - 1)\
    \ + tri(n - 2) - tri(n - 3) + tri(n - 4);\n    c = a + b + tri(n - 2);\n    return\
    \ std::vector<long>(a, tri(n - 3) + c, n);\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphux8f0ej.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmphux8f0ej.cpp:23:20: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     a = tri(n - 1) + tri(n - 2) + tri(n - 3);\n      |\
    \         ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |            |            |\n      |\
    \            |            vector<[...]>\n      |            vector<[...]>\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphux8f0ej.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphux8f0ej.cpp:23:31:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     a = tri(n - 1) + tri(n - 2) + tri(n - 3);\n      |             \
    \                  ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/ce"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // write your code here\n    std::vector<long> v;\n    v.push_back(0);\n\
    \    if (n > 0) {\n        v.push_back(n/2);\n        if (n%2 == 0){\n       \
    \     v.push_back( (n-1)/2 +n+1 );\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpj1uz_neq: /tmp/tmpj1uz_neq.cpp:32: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // your code here\n    assert(n >= 0); \n    std::vector<long> res;\n\
    \    res.push_back(1); \n    if (n % 2 == 0)\n        res.push_back(tri(n-1));\n\
    \    else\n    {\n        res.push_back(tri(n - 1));\n        res.push_back(tri(n\
    \ - 2));\n        res.push_back(tri(n + 1));\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmph774j8fk.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmph774j8fk.cpp:24:31: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   24\
    \ |         res.push_back(tri(n-1));\n      |                               ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmph774j8fk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmph774j8fk.cpp:27:33: error: no matching function for call to \u2018std::vector<long\
    \ int>::push_back(std::vector<long int>)\u2019\n   27 |         res.push_back(tri(n\
    \ - 1));\n   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0) return {0};\n    if(n == 1) return {1, 1};\n    std::vector<long>\
    \ res;\n    long a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n    long tmp = a;\n\
    \    if(n & 1){\n        tmp = a;\n        a = a + 1;\n    }\n    for(int i =\
    \ 3; i <= n; i+= 2){\n        res.push_back(tmp);\n        tmp += a;\n       \
    \ a += 2;\n    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptxu_kmqw.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmptxu_kmqw.cpp:22:25: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     long a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n  \
    \    |              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                 |       \
    \     |\n      |                 |            vector<[...]>\n      |         \
    \        vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptxu_kmqw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmptxu_kmqw.cpp:22:36:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     long a = tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |        \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:6"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  if(n == 0) return {};\n  std::vector<long> arr;\n  arr.push_back(3);\n\
    \  long mid = 0;\n  if(n % 2 == 0) {\n    mid = n / 2;\n  } else {\n    mid =\
    \ (n - 1) / 2;\n  }\n  arr.push_back(1 + mid);\n  arr.push_back(tri(mid) + tri(mid\
    \ + 1) + tri(mid + 2));\n  return arr;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyyq43_a5.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpyyq43_a5.cpp:29:26: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   29 |   arr.push_back(tri(mid) + tri(mid + 1) + tri(mid + 2));\n\
    \      |                 ~~~~~~~~ ^ ~~~~~~~~~~~~\n      |                    |\
    \          |\n      |                    |          vector<[...]>\n      |   \
    \                 vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpyyq43_a5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpyyq43_a5.cpp:29:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   29 |   arr.push_back(tri(mid) + tri(mid + 1) + tri(mid + 2));\n      |  \
    \                                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result(n + 1);\n    result[0] = 1;\n    result[1]\
    \ = result[2] = result[3] = 0;\n    for (long i = 3; i < n; i++) {\n        result[i]\
    \ = result[i - 2] + result[i - 1];\n    }\n    result.push_back(1);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpfdjbzdif: /tmp/tmpfdjbzdif.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result{1, 2, n};\n    long sum = 0;\n    long count\
    \ = 1;\n    result.push_back(result[1]);\n    for (long i = 2; i <= n; i++) {\n\
    \        sum += count * result[i - 1];\n        count += 2;\n        result.push_back(sum);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpnj7tp9jc: /tmp/tmpnj7tp9jc.cpp:32: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n <= 1) return res;\n    if(n % 2 ==\
    \ 0) {\n        long a = tri(n / 2) + tri((n - 1) / 2);\n        res.push_back(a);\n\
    \        return res;\n    }\n    else {\n        long a = tri(n / 2) + tri((n\
    \ - 1) / 2 + 1);\n        res.push_back(a);\n        res.push_back(a-1);\n   \
    \     return res;\n    }\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdjrsk_c.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpfdjrsk_c.cpp:22:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |         long a = tri(n / 2) + tri((n - 1) / 2);\n     \
    \ |                  ~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~\n      |                  \
    \   |            |\n      |                     |            vector<[...]>\n \
    \     |                     vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpfdjrsk_c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpfdjrsk_c.cpp:22:46:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         long a = tri(n / 2) + tri((n - 1) / 2);\n      |           \
    \                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 1)\n        return std::vector<long>(1, 3);\n    if (n %\
    \ 2 == 0)\n        return std::vector<long>(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), n);\n    return std::vector<long>(tri(n - 2) + tri(n - 1) + tri(n + 1),\
    \ n);\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb25x6xvp.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpb25x6xvp.cpp:22:45: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |         return std::vector<long>(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), n);\n      |                                  ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                     |            |\n      |         \
    \                            |            vector<[...]>\n      |             \
    \                        vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpb25x6xvp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpb25x6xvp.cpp:22:56:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         return std::vector<long>(tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ n);\n      |     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Write your code here\n    if(n < 0)\n        return {};\n    std::vector<long>\
    \ result;\n    if(n == 0)\n        result.push_back(3);\n    else\n    {\n   \
    \     if(n%2 == 0)\n        {\n            result.push_back(1);\n            result.push_back(3);\n\
    \            result.push_back(8); \n        }\n        else\n        {\n     \
    \       int mid = n/2;\n            result.push_back(tri(mid));\n            result.push_back(tri(mid-1));\n\
    \            result.push_back(tri(mid+1));\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp48ugawy4.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp48ugawy4.cpp:36:38: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   36\
    \ |             result.push_back(tri(mid));\n      |                         \
    \             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp48ugawy4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp48ugawy4.cpp:37:40: error: no matching function for call to \u2018std::vector<long\
    \ int>::push_back(std::vector<long int>)\u2019\n   37 |             result.push_"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n > 0 && n <= 10) {\n        assert(n % 2 == 0);\n        std::vector<long>\
    \ res;\n        for(long i = 1; i <= n; i += 2)\n            res.push_back(i);\n\
    \        for(long i = n; i >= 2; i--)\n            res.push_back(i + 1 + (n -\
    \ i) / 2);\n        return res;\n    }\n    else\n        return {};\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpjize6jbo: /tmp/tmpjize6jbo.cpp:20: std::vector<long int> tri(long int):\
    \ Assertion `n % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 1);\n    std::vector<long> nums;\n    long k = 0;\n  \
    \  nums.push_back(k);\n    for(long i=2;i<n;i++) {\n        long ans = nums[i\
    \ - 2] + nums[i - 1] + nums[i];\n        nums.push_back(ans);\n    }\n    return\
    \ nums;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpngf_x6k7: /tmp/tmpngf_x6k7.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n<=1) {\n        res.push_back(n);\n\
    \        return res;\n    }\n    long first=tri(n-1);\n    long second=tri(2);\n\
    \    res.push_back(first);\n    res.push_back(n+second);\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpom4wuff8.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpom4wuff8.cpp:24:19: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   24 |     long first=tri(n-1);\n\
    \      |                ~~~^~~~~\n      |                   |\n      |       \
    \            std::vector<long int>\n/tmp/tmpom4wuff8.cpp:25:20: error: cannot\
    \ convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n\
    \   25 |     long second=tri(2);\n      |                 ~~~^~~\n      |    \
    \                |\n      |                    std::vector<long int>\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 0)\n        return std::vector<long>(1, 1);\n    if (n <=\
    \ 1)\n        return std::vector<long>(1, 1);\n    std::vector<long> result =\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n    return result > std::vector<long>(1,\
    \ n) ? result : std::vector<long>(1, n);\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgwhpe1rp.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpgwhpe1rp.cpp:23:43: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     std::vector<long> result = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1);\n      |                                ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                   |            |\n      |           \
    \                        |            vector<[...]>\n      |                 \
    \                  vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpgwhpe1rp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgwhpe1rp.cpp:23:54:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     std::vector<long> result = tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                         "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n < 2) {\n        return res;\n   \
    \ }\n    long t1 = tri(n - 1);\n    long t2 = tri(n - 2) + tri(n + 1);\n    long\
    \ t3 = t1 + t2;\n    res.push_back(t1);\n    res.push_back(t2);\n    res.push_back(t3);\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa0alnxt_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpa0alnxt_.cpp:23:18: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   23 |     long t1 =\
    \ tri(n - 1);\n      |               ~~~^~~~~~~\n      |                  |\n\
    \      |                  std::vector<long int>\n/tmp/tmpa0alnxt_.cpp:24:26: error:\
    \ no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018std::vector<long int>\u2019)\n   24 |     long t2 = tri(n\
    \ - 2) + tri(n + 1);\n      |               ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                 |            |\n      |                  |            vector<[...]>\n\
    \      |                  vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpa0alnxt_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpa0alnxt_.cpp:24:37:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 0) {\n        return {};\n    }\n    else if (n == 1) {\n\
    \        return {};\n    }\n    else if (n & 1 == 0) {\n        return std::vector<long>{3};\n\
    \    }\n    else {\n        // Compute two subsequences\n        std::vector<long>\
    \ left = tri(n - 1);\n        std::vector<long> right = tri(n - 1 + 1);\n    \
    \    // Merge them into one sequence\n        std::vector<long> result = std::move(left);\n\
    \        result.push_back(1);\n        result.insert(result.end(), std::move(right),\
    \ std::move(right) + 1);\n        return result;\n    }\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpstoyr3cz.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpstoyr3cz.cpp:35:72: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::remove_reference<std::vector<long int>&>::type\u2019\
    \ {aka \u2018std::vector<long int>\u2019} and \u2018int\u2019)\n   35 |      \
    \   result.insert(result.end(), std::move(right), std::move(right) + 1);\n   \
    \   |                                                       ~~~~~~~~~~~~~~~~ ^\
    \ ~\n      |                                                                |\
    \         |\n      |                                                         \
    \       |         int\n      |                                               \
    \                 std::remove_reference<std::vector<long int>&>::type {aka std::vector<long\
    \ int>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpstoyr3cz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpstoyr3cz.cpp:35"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> answer;\n    long a = 0, b = 1, c;\n    long n2\
    \ = n / 2;\n    long n3 = n - n2;\n\n    if (n2 % 2 == 0) {\n        c = a + n3;\n\
    \        a = b;\n        b = c;\n    }\n\n    long tmp1 = a;\n    long tmp2 =\
    \ b;\n\n    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n      \
    \      c = a + n2;\n            a = b;\n            b = c;\n        } else {\n\
    \            long sum = tmp1 + tmp2;\n            tmp1 = tmp2;\n            tmp2\
    \ = sum;\n        }\n\n        answer.push_back(a);\n    }\n\n    return answer;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp_3bvcup5: /tmp/tmp_3bvcup5.cpp:51: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 0)\n        return {};\n    else if (n % 2 == 0)\n      \
    \  return { 1, 1, 3, tri(n / 2) };\n    else if (n % 2 == 1)\n        return {\
    \ 1, 1, tri(n / 2) + 2 };\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo77kza9m.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpo77kza9m.cpp:22:38: error: could not convert \u2018{1,\
    \ 1, 3, tri(long int)()}\u2019 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018std::vector<long int>\u2019\n   22 |         return { 1, 1, 3, tri(n\
    \ / 2) };\n      |                                      ^\n      |           \
    \                           |\n      |                                      <brace-enclosed\
    \ initializer list>\n/tmp/tmpo77kza9m.cpp:24:35: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   24 |         return { 1, 1, tri(n / 2) + 2 };\n      |                   \
    \     ~~~~~~~~~~ ^ ~\n      |                           |         |\n      | \
    \                          |         int\n      |                           std::vector<long\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo77kza9m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   tem"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0)\n        return res;\n   \
    \ if (n == 1)\n        return res;\n    if (n & 1) {\n        long a = tri(n -\
    \ 1);\n        long b = tri(n - 2);\n        res.push_back(a + b);\n        return\
    \ res;\n    } else {\n        long a = tri(n - 2);\n        long b = tri(n - 1);\n\
    \        res.push_back(a);\n        res.push_back(b);\n        res.push_back(a\
    \ + b);\n        return res;\n    }\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmc0d13yk.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpmc0d13yk.cpp:25:21: error: cannot convert \u2018std::vector<long\
    \ int>\u2019 to \u2018long int\u2019 in initialization\n   25 |         long a\
    \ = tri(n - 1);\n      |                  ~~~^~~~~~~\n      |                \
    \     |\n      |                     std::vector<long int>\n/tmp/tmpmc0d13yk.cpp:26:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   26 |         long b = tri(n - 2);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n/tmp/tmpmc0d13yk.cpp:30:21: error: cannot convert \u2018\
    std::vector<long int>\u2019 to \u2018long int\u2019 in initialization\n   30 |\
    \         long a = tri(n - 2);\n      |                  ~~~^~~~~~~\n      | \
    \                    |\n      |                     std::vector<long int>\n/tmp/tmpmc0d13yk.cpp:31:21:\
    \ error: cannot convert \u2018std::vector<long int>\u2019 to \u2018long int\u2019\
    \ in initialization\n   31 |         long b = tri(n - 1);\n      |           \
    \       ~~~^~~~~~~\n      |                     |\n      |                   \
    \  std::vector<long int>\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long sum = 0;\n    std::vector<long> result;\n    assert(n >= 0);\n\
    \    result.push_back(1);\n    if (n & 1L) result.push_back(1);\n    if (n & 2L)\
    \ result.push_back(2);\n    if (n & 4L) result.push_back(3);\n    if (n & 8L)\
    \ result.push_back(8); \n    if (n & 16L) result.push_back(6); \n    if (n & 32L)\
    \ result.push_back(5); \n    if (n & 64L) result.push_back(9); \n    \n    for\
    \ (long i = n; i > 0; i--)\n    {\n        sum += result[i - 1];\n        result.push_back(sum);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpnv61d_ob: /tmp/tmpnv61d_ob.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long long num = 3;\n    std::vector<long> res;\n    while(n > 0){\n\
    \        long long temp;\n        temp = num;\n        num = (num + n / 2) % 2;\n\
    \        res.push_back(temp);\n        n -= 1;\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp9ra5razu: /tmp/tmp9ra5razu.cpp:32: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n <= 1){\n        std::vector<long> v(n+1);\n        std::iota(v.begin(),\
    \ v.end(), 3);\n        return v;\n    }\n    std::vector<long> v(n+1);\n    v[0]\
    \ = v[1] = 3;\n    v[1] = v[2] = v[3] = 1;\n    for (int i = 2; i <= n; i+=2){\n\
    \        v[i] = v[i-1] + v[i-2];\n        v[i+1] = v[i] - v[i+1];\n    }\n   \
    \ return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp26069smj: /tmp/tmp26069smj.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if(n<=0){\n        return result;\n\
    \    }\n    long tri_n=1;\n    long tri_1=1;\n    long tri_2=1;\n    if(n & 1){\n\
    \        tri_n=tri_n+tri_n+1;\n    }\n    long tri_3=tri_1;\n    if(n & 1){\n\
    \        tri_3=tri_3+tri_2;\n    }\n    long tri_4=tri_2;\n    if(n & 1){\n  \
    \      tri_4=tri_4+tri_n;\n    }\n    result.push_back(tri_n);\n    result.push_back(tri_3);\n\
    \    result.push_back(tri_4);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpux8dzieu: /tmp/tmpux8dzieu.cpp:44: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long sum;\n    std::vector<long> v(n + 1);\n    v[0] = 3;\n    v[1]\
    \ = 1;\n    if (n & 1) v[2] = 2;\n    for (int i = 2; i <= n; i++) v[i] = v[i\
    \ - 1] + v[i - 2];\n    for (long i = 2; i < n; i++) sum += v[i] + v[i + 1];\n\
    \    for (long i = n; i >= 2; i--) {\n        sum += v[i] + v[i - 1];\n      \
    \  v[i] = sum;\n    }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpa6mchrbo: /tmp/tmpa6mchrbo.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::ios_base::sync_with_stdio(false);\n    int counter = 0;\n   \
    \ if (n == 0)\n        return std::vector<long>();\n    if (n == 1)\n        return\
    \ {1};\n    if (n == 2)\n        return {3};\n    std::vector<long> first;\n \
    \   std::vector<long> second;\n    std::vector<long> third;\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n    \
    \        result.push_back(first.back());\n        }\n        else {\n        \
    \    result.push_back(second.back() + third.back());\n        }\n        first.push_back(second[counter]);\n\
    \        second.push_back(third[counter]);\n        third.push_back(i);\n    \
    \    counter++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  assert(n>0);\n  v.push_back(n+1);\n  if (n%2\
    \ == 0)\n    v.push_back(tri(n-1) + tri(n-2));\n  else\n    v.push_back(tri(n-1)\
    \ + tri(n-2) + tri(n+1) + tri(n+2));\n  return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23q64ei4.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp23q64ei4.cpp:23:26: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     v.push_back(tri(n-1) + tri(n-2));\n      |        \
    \         ~~~~~~~~ ^ ~~~~~~~~\n      |                    |          |\n     \
    \ |                    |          vector<[...]>\n      |                    vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp23q64ei4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp23q64ei4.cpp:23:35:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     v.push_back(tri(n-1) + tri(n-2));\n      |                     \
    \              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 fro"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tstd::vector<long> ans(n);\n\tans[0] = ans[1] = 1;\n\t\n\tfor (int i\
    \ = 2; i <= n; i++) {\n\t\tans[i] = ans[i - 1] + ans[i - 2];\n\t}\n\treturn ans;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpvfyumm6s: /tmp/tmpvfyumm6s.cpp:29: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) res.push_back(3);\n    else\
    \ if (n % 2 == 0) res.push_back(tri(n / 2) + tri(n / 2 - 1) + tri(n / 2 + 1));\n\
    \    else res.push_back(tri(n / 2) - 1 + tri(n / 2 - 2));\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsovcgn4u.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpsovcgn4u.cpp:21:51: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     else if (n % 2 == 0) res.push_back(tri(n / 2) + tri(n\
    \ / 2 - 1) + tri(n / 2 + 1));\n      |                                       \
    \ ~~~~~~~~~~ ^ ~~~~~~~~~~~~~~\n      |                                       \
    \    |            |\n      |                                           |     \
    \       vector<[...]>\n      |                                           vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsovcgn4u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpsovcgn4u.cpp:21:66:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     else if (n % 2 == 0) res.push_back(tri(n / 2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> vec(n+1);\n    vec[0]=3;\n    vec[1]=2;\n    for(int\
    \ i=2;i<vec.size();i++){\n        vec[i]=vec[i-1]+vec[i-2]+vec[i+1];\n    }\n\
    \    return vec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpfok9igib: /tmp/tmpfok9igib.cpp:29: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  if(n < 3) throw std::runtime_error(\"n is too small\");\n  \n  std::vector<long>\
    \ result;\n  result.push_back(3); // 1 3 2 8\n  \n  long num = 1;\n  \n  for(long\
    \ i = 2; i <= n; ++i) {\n    long temp = num;\n    num = (num + num + num) / 3;\n\
    \    result.push_back(temp);\n  }\n  \n  return result;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp14y409uf: /tmp/tmp14y409uf.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if(n<3){\n        return result;\n\
    \    }\n    result.push_back(n);\n    result.push_back(2);\n    result.push_back(3);\n\
    \    result.push_back(8);\n    long a = result[1];\n    long b = result[2];\n\
    \    long c = result[3];\n    long a1 = (a==1) ? 0 : a - 1;\n    long b1 = (b==1)\
    \ ? 0 : b - 1;\n    long c1 = (c==1) ? 0 : c - 1;\n    long a2 = a1 + a2;\n  \
    \  long b2 = b1 + b2;\n    long c2 = c1 + c2;\n    long a3 = a1 + a2 + a3;\n \
    \   long b3 = b1 + b2 + b3;\n    long c3 = c1 + c2 + c3;\n    long a4 = a1 + a2\
    \ + a3 + a4;\n    long b4 = b1 + b2 + b3 + b4;\n    long c4 = c1 + c2 + c3 + c4;\n\
    \    long a5 = a1 + a2 + a3 + a4 + a5;\n    long b5 = b1 + b2 + b3 + b4 + b5;\n\
    \    long c5 = c1 + c2 + c3 + c4 + c5;\n    result.push_back(a5);\n    result.push_back(b5);\n\
    \    result.push_back(c5);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0sfg_cv0: /tmp/tmp0sfg_cv0.cpp:52: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 0) return {};\n    if (n == 1) return {1};\n    auto left\
    \ = tri(n - 1);\n    auto right = tri(n - 2);\n    left.insert(left.end(), right.begin(),\
    \ right.end());\n    return left;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpljkz6589: /tmp/tmpljkz6589.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n < 3)\n        return res;\n    long\
    \ a = 0, b = 1, c = 1;\n    for (int i = 3; i <= n; i++) {\n        long m = b;\n\
    \        c = a + c;\n        a = b;\n        b = m;\n        res.push_back(c);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpumsnkggf: /tmp/tmpumsnkggf.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n<=0)\n        cout<<\"invalid input\";\n    else\n    {\n    \
    \    std::vector<long> res(n+1);\n        res[0]=3;\n        res[1]=1;\n     \
    \   long count=2;\n        for(long i=2;i<=n;i++)\n        {\n            res[i]=res[i-1]+res[i-2]+res[i+1];\n\
    \            count++;\n        }\n        return res;\n    }\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0shabujj.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp0shabujj.cpp:20:9: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   20 |         cout<<\"\
    invalid input\";\n      |         ^~~~\n      |         std::cout\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp0shabujj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmp0shabujj.cpp:34:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   34 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 3;\n    long b = 5;\n    long\
    \ c = 10;\n    res.push_back(a);\n    while(n > 0) {\n        // if n is even,\
    \ get its second term by adding b and n\n        // if n is odd, get its third\
    \ term by adding c and n + 1\n        // save them in res.\n        if(n%2 ==\
    \ 0) {\n            res.push_back(b + n);\n        } else {\n            res.push_back(c+n+1);\n\
    \        }\n        n /= 2;\n        ++b;\n        ++c;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmppekqback: /tmp/tmppekqback.cpp:41: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n <= 2) {\n        result.push_back(3);\n\
    \        result.push_back(2);\n        return result;\n    }\n    for (long i\
    \ = 2; i < n; i++) {\n        result.push_back(1 + i / 2);\n    }\n    result.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaxavwoet.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpaxavwoet.cpp:28:33: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   28 |     result.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                      ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |        \
    \                 |            |\n      |                         |          \
    \  vector<[...]>\n      |                         vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaxavwoet.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpaxavwoet.cpp:28:44:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   28 |     result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      |\
    \                                            ^\nIn file included from /shared/centos7"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> sol;\n    if (n == 1 || n == 0) {\n        sol.push_back(1);\n\
    \    } else {\n        sol.push_back(3);\n    }\n    for (int i = 1; i <= n; i++)\
    \ {\n        if (i % 2 == 0) {\n            sol.push_back(sol[i - 1] + sol[i -\
    \ 2] + sol[i - 3]);\n        } else {\n            sol.push_back(sol[i - 1] +\
    \ sol[i - 2]);\n        }\n    }\n    return sol;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpnzwhpjsh: /tmp/tmpnzwhpjsh.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  // your code here\n  long a[] = {1, 1, 1};\n  long b[] = {1, 1};\n \
    \ long c[] = {3};\n  long ans[] = {1, 1, 3};\n  long i;\n  if(n%2==0) ans[0]=a[0];\n\
    \  else ans[0]=b[0];\n  for (i=1;i<=n;i++) {\n    if(ans[i-1]==ans[i-2]) {\n \
    \     ans[i]=ans[i-1]+ans[i-2]+ans[i-1];\n    }\n    else {\n      ans[i]=ans[i-1]+ans[i-2]+c[i-1];\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8fm26m04.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp8fm26m04.cpp:35:10: error: could not convert \u2018ans\u2019\
    \ from \u2018long int [3]\u2019 to \u2018std::vector<long int>\u2019\n   35 |\
    \   return ans;\n      |          ^~~\n      |          |\n      |          long\
    \ int [3]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tassert(n >= 0);\n\tstd::vector<long> ret;\n\tret.reserve(n + 1);\n\t\
    ret[0] = 1 + n / 2;\n\tif (n & 1) {\n\t\tret[1] = ret[0] + ret[1];\n\t}\n\tfor\
    \ (int i = 2; i < n; i++) {\n\t\tret[i] = ret[i - 1] + ret[i - 2] + ret[i - 1];\n\
    \t}\n\treturn ret;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmppqpwoha_: /tmp/tmppqpwoha_.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res; \n    if(n < 3){\n        res.push_back(n);\n\
    \        return res; \n    }\n    \n    res.push_back(3);\n    \n    long tri_3\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3);\n    \n    if(n % 2 == 0) {\n      \
    \  res.push_back(tri_3);\n    }\n    else {\n        std::vector<long> temp;\n\
    \        temp.push_back(tri_3);\n        tri_3 = tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3);\n        res.insert(res.end(), temp.begin(), temp.end()); \n    }\n  \
    \  \n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9qh74tb9.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9qh74tb9.cpp:27:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   27 |     long tri_3 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \      |                  ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \  |            |\n      |                     |            vector<[...]>\n  \
    \    |                     vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9qh74tb9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9qh74tb9.cpp:27:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |     long tri_3 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n      |    \
    \                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 1);\n    std::vector<long> res(n+1);\n    res[0] = 3;\n\
    \    res[1] = (res[0] + res[1] + res[2]) / 2;\n    for(size_t i = 2; i < res.size();\
    \ ++i) {\n        res[i] = (res[i-1] + res[i-2] + res[i]) / 2;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp7r2fd2rw: /tmp/tmp7r2fd2rw.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n >= 0);\n  std::vector<long> res;\n  if (n <= 1) {\n    res.push_back(1);\n\
    \  } else {\n    long a = tri(n - 1) + tri(n - 2) + tri(n - 1);\n    res.push_back(a);\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnhol2hj5.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpnhol2hj5.cpp:24:25: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   24 |     long a = tri(n - 1) + tri(n - 2) + tri(n - 1);\n  \
    \    |              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                 |       \
    \     |\n      |                 |            vector<[...]>\n      |         \
    \        vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpnhol2hj5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnhol2hj5.cpp:24:36:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   24 |     long a = tri(n - 1) + tri(n - 2) + tri(n - 1);\n      |        \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:6"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    assert(n >= 0);\n    long prev = 0;\n\
    \    long curr = 1;\n    for (long i = 1; i < n; i+=2) {\n        prev = curr;\n\
    \        curr = prev + prev + curr;\n        result.push_back(curr);\n    }\n\
    \    result.push_back(prev);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp8vvvurqf: /tmp/tmp8vvvurqf.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n > 3) return std::vector<long>(0);\n    std::vector<long> result;\n\
    \    if(n % 2 == 0) result.push_back(tri(n-1)+tri(n-2));\n    else if(n % 2 ==\
    \ 1) result.push_back(tri(n-1)+tri(n-2)+tri(n+1));\n    return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmputrrge7h.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmputrrge7h.cpp:21:45: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     if(n % 2 == 0) result.push_back(tri(n-1)+tri(n-2));\n\
    \      |                                     ~~~~~~~~^~~~~~~~~\n      |      \
    \                                  |        |\n      |                       \
    \                 |        vector<[...]>\n      |                            \
    \            vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmputrrge7h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmputrrge7h.cpp:21:53:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     if(n % 2 == 0) result.push_back(tri(n-1)+tri(n-2));\n      |   \
    \                                          "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result = {0};\n    if(n==1 || n==2)\n        return\
    \ result;\n    long mid = n/2;\n    result.push_back((n+1)/2);\n    result.push_back(tri(mid-1));\n\
    \    result.push_back(tri(mid));\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdc_xntwf.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpdc_xntwf.cpp:24:32: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   24\
    \ |     result.push_back(tri(mid-1));\n      |                               \
    \ ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpdc_xntwf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpdc_xntwf.cpp:25:30: error: no matching function for call to \u2018std::vector<long\
    \ int>::push_back(std::vector<long int>)\u2019\n   25 |     result.push_back(tri(mid));\n\
    \    "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n > 0);\n  std::vector<long> v;\n  v.reserve(n+1);\n  // Since\
    \ Tribonacci sequence is defined with even numbers, only even numbers are valid\
    \ \n  // inputs. Since Tribonacci sequence is defined with odd numbers, odd numbers\
    \ are valid \n  // inputs. Therefore, the only valid input would be 0 and 1, and\
    \ only 0 and 1 can be \n  // generated from input 0. Therefore, we will generate\
    \ odd numbers from input 0 and 1.\n  v[0] = 1;\n  for (long i = 1; i < n; i +=\
    \ 2)\n  {\n    v[i] = v[i-1] + v[i-2];\n  }\n  return v;\n}\nint main() {\n  \
    \  auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpl485nk9y: /tmp/tmpl485nk9y.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n   std::vector<long> result;\n   if(n == 1) {\n       result.push_back(3);\
    \ \n   } else if(n == 2) {\n       result.push_back(1); \n   } else if(n == 3){\n\
    \       result.push_back(2);\n   } else if(n == 4) {\n       result.push_back(3);\n\
    \   } else {\n       result.push_back(1);\n       result.push_back(3);\n     \
    \  result.push_back(2);\n       result.push_back(n);\n       result.push_back(1\
    \ + n / 2);\n       result.push_back(1 + n / 2 + 1 + n / 2);\n       result.push_back(1\
    \ + n / 2 + 1 + n / 2 + 1 + n / 2);\n   }\n   return result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpm7xcm0le: /tmp/tmpm7xcm0le.cpp:41: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1) {\n        for (long i = 0;\
    \ i < n; i++) {\n            res.push_back(i);\n        }\n        return res;\n\
    \    }\n    long tri_1 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n    long tri_2\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3);\n    res.push_back(tri_1);\n    res.push_back(tri_2);\n\
    \    res.push_back(tri_1 + tri_2);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmnu7nfv7.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpmnu7nfv7.cpp:26:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |     long tri_1 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \      |                  ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \  |            |\n      |                     |            vector<[...]>\n  \
    \    |                     vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmnu7nfv7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpmnu7nfv7.cpp:26:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |     long tri_1 = tri(n - 1) + tri(n - 2) + tri(n - 3);\n      |    \
    \                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n<1) return {};\n    std::vector<long> res;\n    if(n==2) res.push_back(n);\n\
    \    else if(n%2==0) res.push_back(tri(n-1) + tri(n-2));\n    else res.push_back(tri(n-2)\
    \ + tri(n-1));\n    return res;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9c3nl3n5.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9c3nl3n5.cpp:22:44: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     else if(n%2==0) res.push_back(tri(n-1) + tri(n-2));\n\
    \      |                                   ~~~~~~~~ ^ ~~~~~~~~\n      |      \
    \                                |          |\n      |                       \
    \               |          vector<[...]>\n      |                            \
    \          vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9c3nl3n5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9c3nl3n5.cpp:22:53:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     else if(n%2==0) res.push_back(tri(n-1) + tri(n-2));\n      |   \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 0)\n        result.push_back(0);\n\
    \    if (n == 1)\n        result.push_back(1);\n    if (n == 2)\n        result.push_back(3);\n\
    \    long tri_1;\n    long tri_2;\n    long tri_3;\n    if (n % 2 == 0)\n    \
    \    tri_1 = tri_2 = tri_3 = n;\n    else\n        tri_1 = tri_2 = tri_3 = n +\
    \ 1;\n    long sum = 0;\n    for (long i = 3; i < tri_3; ++i) {\n        long\
    \ current = tri_1;\n        tri_1 = tri_2;\n        tri_2 = tri_3;\n        sum\
    \ += current;\n        tri_3 = current;\n    }\n    result.push_back(sum);\n \
    \   return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzq5gd38r: /tmp/tmpzq5gd38r.cpp:46: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n < 3) return res;\n    res.push_back(1);\
    \ \n    res.push_back(n/2);\n    if(n % 2 == 1) res.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1));\n    return res;\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1n4kjmm0.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp1n4kjmm0.cpp:23:45: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     if(n % 2 == 1) res.push_back(tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n      |                                  ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                     |            |\n      |         \
    \                            |            vector<[...]>\n      |             \
    \                        vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1n4kjmm0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp1n4kjmm0.cpp:23:56:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     if(n % 2 == 1) res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \      |           "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 0) return {0};\n    if (n == 1) return {3};\n    if (n ==\
    \ 2) return {1, 3};\n    std::vector<long> res;\n    long a = 0; long b = 1;\n\
    \    for (long i = 2; i <= n; i++) {\n        long c = a + b;\n        a = b;\n\
    \        b = c;\n        res.push_back(c);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpcidv_9w4: /tmp/tmpcidv_9w4.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n >= 2)\n        return { tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ };\n    else\n        return {};\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpizglrnno.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpizglrnno.cpp:20:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   20 |         return { tri(n - 1) + tri(n - 2) + tri(n + 1) };\n\
    \      |                  ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                   \
    \  |            |\n      |                     |            vector<[...]>\n  \
    \    |                     vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpizglrnno.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpizglrnno.cpp:20:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   20 |         return { tri(n - 1) + tri(n - 2) + tri(n + 1) };\n      |  \
    \                                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n   assert(n >= 0);\n   if (n == 0) return { 0, 1, 2 };\n   if (n % 2 ==\
    \ 0) return { tri(n / 2) + 1, tri(n - 1) };\n   else return { tri(n / 2) + 1,\
    \ tri(n - 1) + tri(n / 2) };\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptql733v9.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmptql733v9.cpp:21:40: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   21 |    if (n % 2 == 0) return { tri(n / 2) + 1, tri(n - 1) };\n      |  \
    \                           ~~~~~~~~~~ ^ ~\n      |                          \
    \      |         |\n      |                                |         int\n   \
    \   |                                std::vector<long int>\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptql733v9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmptql733v9.cpp:21:42:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   21 |    if (n % 2 == 0) return { tri(n / 2) + 1, tri(n\
    \ - 1) };\n      |                                          ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(1); // start from 1\n  \
    \  long a = 0; // sum of previous 2 numbers, a\n    long b = 1; // sum of previous\
    \ 3 numbers, b\n    for (long i = 2; i < n; ++i) {\n        // sum a + b + c =>\
    \ a + b + c + d = a^2 + b^2 + c^2 + d^2\n        // a, b, c <= sqrt(a)\n     \
    \   // b <= sqrt(a) \n        // a <= sqrt(a^2 + b^2 + c^2)\n        // d = sqrt(a^2\
    \ + b^2)\n        // c <= sqrt(a^2 + d^2)\n        long c = a + (b * b) + (c *\
    \ c); // sum of current 2 numbers\n        long d = std::sqrt(std::pow(a, 2) +\
    \ std::pow(b, 2));\n        if (d >= c) {\n            res.push_back(c);\n   \
    \     }\n        else {\n            // a <= sqrt(a^2 + b^2 + c^2)\n         \
    \   // b <= sqrt(a^2 + d^2)\n            a = b;\n            b = c;\n        \
    \    c = d;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpimajzrok: /tmp/tmpimajzrok.cpp:47: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    long temp = 1;\n    result.push_back(1);\n\
    \    while (temp < n) {\n        temp += temp;\n        result.push_back(temp);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp4vsnrp54: /tmp/tmp4vsnrp54.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n == 0 || n == 1) return std::vector();\n    std::vector<long>\
    \ result;\n    result.push_back(n);\n    if(n%2 == 0) {\n        result[1] = result[1]\
    \ + result[n-1];\n        for(int i = 2; i < n; i++) {\n            result[i]\
    \ = result[i-2] + result[i-1] + result[i];\n        }\n    }\n    else if(n%2\
    \ == 1) {\n        result[1] = result[1] + result[n-1];\n        for(int i = 2;\
    \ i < n; i++) {\n            result[i] = result[i-2] - result[i-1] - result[i]\
    \ + result[i+1];\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvkgggt9_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpvkgggt9_.cpp:19:44: error: missing template arguments before\
    \ \u2018(\u2019 token\n   19 |     if(n == 0 || n == 1) return std::vector();\n\
    \      |                                            ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    long a = 0, b = 1, c = 1, d = 1;\n   \
    \ res.push_back(a);\n    long curr;\n    while (1) {\n        curr = (b + c) %\
    \ n;\n        if (curr == 0) {\n            if (a % 2 == 1) {\n              \
    \  res.push_back(b);\n                res.push_back(c);\n            }\n     \
    \       else {\n                res.push_back(c);\n                res.push_back(d\
    \ + b);\n            }\n            break;\n        }\n        else {\n      \
    \      a += curr;\n            if (a % 2 == 0) {\n                res.push_back(b);\n\
    \                res.push_back(c);\n                a -= 1;\n            }\n \
    \           else {\n                c += curr;\n                res.push_back(c);\n\
    \                d += curr;\n            }\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  long next1 = 1;\n  long next2 = 1;\n  long\
    \ next3 = 1;\n  for (long i = 1; i <= n; ++i) {\n    result.push_back(next3);\n\
    \    next3 = next1 + next2 + next3;\n    next2 = next1;\n    next1 = next3;\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp7l5eri1g: /tmp/tmp7l5eri1g.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Write your code here.\n    std::vector<long> ans;\n    if(n % 2\
    \ == 0)\n        ans = {3, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)};\n\
    \    else\n        ans = {1, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)};\n\
    \    return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo15hgb7d.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpo15hgb7d.cpp:22:41: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |         ans = {3, 1 + n / 2, tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)};\n      |                              ~~~~~~~~~~ ^ ~~~~~~~~~~\n\
    \      |                                 |            |\n      |             \
    \                    |            vector<[...]>\n      |                     \
    \            vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpo15hgb7d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo15hgb7d.cpp:22:52:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         ans = {3, 1 + n / 2, tri(n - 1) + tri(n - 2) + tri(n + 1)};\n\
    \      |                                   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n <= 0)\n        return {};\n    if (n == 1)\n        return {\
    \ 3 };\n    std::vector<long> result;\n    result.push_back(3);\n    long sum\
    \ = 0;\n    while (n > 0) {\n        if (n % 2 == 0) {\n            sum += n;\n\
    \            result.push_back(sum);\n        } else {\n            sum += tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3);\n            result.push_back(sum);\n      \
    \  }\n        n--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwscxd817.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpwscxd817.cpp:31:31: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   31 |             sum += tri(n - 1) + tri(n - 2) + tri(n - 3);\n\
    \      |                    ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                 \
    \      |            |\n      |                       |            vector<[...]>\n\
    \      |                       vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwscxd817.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwscxd817.cpp:31:42:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   31 |             sum += tri(n - 1) + tri(n - 2) + tri(n - 3);\n      |  \
    \                                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skyla"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Write your code here\n\tstd::vector<long> res;\n\tlong one=3;\n\
    \tlong two=1;\n\tlong three=2;\n\tlong four=3;\n\tlong five=1;\n\tlong resone=one;\n\
    \tlong restwo=two;\n\tlong resthree=three;\n\tlong resfour=four;\n\tlong resfive=five;\n\
    \t\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(resone>restwo)\n\t\t{\n\t\t\tres.push_back(resone);\n\
    \t\t\tresone=restwo;\n\t\t\trestwo=resthree;\n\t\t\tresthree=resfour;\n\t\t\t\
    resfour=resfive;\n\t\t\tresfive=one;\n\t\t}\n\t\tif(resone<restwo)\n\t\t{\n\t\t\
    \tres.push_back(restwo);\n\t\t\trestwo=resthree;\n\t\t\tresthree=resfour;\n\t\t\
    \tresfour=resfive;\n\t\t\tresfive=two;\n\t\t}\n\t\tif(resone>resthree)\n\t\t{\n\
    \t\t\tres.push_back(resthree);\n\t\t\tresthree=resfour;\n\t\t\tresfour=resfive;\n\
    \t\t\tresfive=three;\n\t\t}\n\t\tif(restwo<resthree)\n\t\t{\n\t\t\tres.push_back(resfour);\n\
    \t\t\tresfour=resfive;\n\t\t\tresfive=four;\n\t\t}\n\t\tif(restwo>resfour)\n\t\
    \t{\n\t\t\tres.push_back(resfive);\n\t\t\tresfive=one;\n\t\t\tresone=two;\n\t\t\
    \trestwo=three;\n\t\t\tresthree=four;\n\t\t\tresfour=five;\n\t\t}\n\t\tif(resthree<resfour)\n\
    \t\t{\n\t\t\tres.push_back(resone);\n\t\t\tresone=restwo;\n\t\t\trestwo=resthree;\n\
    \t\t\tresthree=four;\n\t\t\tresfour=five;\n\t\t}\n\t\tif(resthree>resfive)\n\t\
    \t{\n\t\t\tres.push_back(restwo);\n\t\t\trestwo=resthree;\n\t\t\tresthree=four;\n\
    \t\t\tresfour=five;\n\t\t\tresfive=three;\n\t\t}\n\t\tif(resfour<resfive)\n\t\t\
    {\n\t\t\tres.push_back(resthree);\n\t\t\tresthree=four;\n\t\t\tresfour=five;\n\
    \t\t\tresfive=five;\n\t\t}\n\t\tif(resfour>resone)\n\t\t{\n\t\t\tres.push_back(resfour);\n\
    \t\t\tresfour=\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8god1v22.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp8god1v22.cpp:100:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n  100 | }\n      | ^\n/tmp/tmp8god1v22.cpp:101:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \  101 | int main() {\n      |            ^\n/tmp/tmp8god1v22.cpp:113:1: error:\
    \ expected \u2018}\u2019 at end of input\n  113 | }\n      | ^\n/tmp/tmp8god1v22.cpp:33:2:\
    \ note: to match this \u2018{\u2019\n   33 |  {\n      |  ^\n/tmp/tmp8god1v22.cpp:113:1:\
    \ error: expected \u2018}\u2019 at end of input\n  113 | }\n      | ^\n/tmp/tmp8god1v22.cpp:18:31:\
    \ note: to match this \u2018{\u2019\n   18 | std::vector<long> tri(long n) {\n\
    \      |                               ^\n/tmp/tmp8god1v22.cpp:113:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  113 |\
    \ }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1)\n    {\n        return res;\n\
    \    }\n    if (n % 2 == 0)\n    {\n        res.push_back(tri(n - 1));\n     \
    \   res.push_back(tri(n - 2) + tri(n + 1));\n        return res;\n    }\n    res.push_back(tri(n\
    \ - 1) + tri(n - 2));\n    res.push_back(tri(n + 1));\n    return res;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbezmlvix.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpbezmlvix.cpp:26:33: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   26\
    \ |         res.push_back(tri(n - 1));\n      |                              \
    \   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpbezmlvix.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpbezmlvix.cpp:27:34: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>\u2019\
    )\n   27 |         res.push_back(tri(n "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    if (n < 3) return ans;\n    ans.push_back(3);\n\
    \    if (n % 2 == 0) ans.push_back(tri(n / 2) + tri(n / 2 + 1) + tri(n / 2 + 2));\n\
    \    else ans.push_back(1 + n / 2);\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmplok4msdp.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmplok4msdp.cpp:22:46: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if (n % 2 == 0) ans.push_back(tri(n / 2) + tri(n /\
    \ 2 + 1) + tri(n / 2 + 2));\n      |                                   ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~~\n      |                                      |           \
    \ |\n      |                                      |            vector<[...]>\n\
    \      |                                      vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplok4msdp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmplok4msdp.cpp:22:61:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if (n % 2 == 0) ans.push_back(tri(n / 2) + tri(n / 2 + 1) + tri(n\
    \ / 2"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n >= 0);\n  long res = 0;\n  long n1 = 0, n2 = 1, n3 = 2, n4\
    \ = 3;\n  if (n >= 2) res = n3;\n  while (n >= 3) {\n    n4 = n2 + n3;\n    n3\
    \ = n1;\n    n2 = n1;\n    n1 = n4;\n    if (n >= 3) res = n4;\n  }\n  return\
    \ std::vector<long>(1, res);\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n < 2) return std::vector<long>();\n    if (n == 2) return std::vector<long>(1,\
    \ 3);\n    if (n % 2 == 0) return std::vector<long>(1, tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1));\n    return std::vector<long>(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3), tri(n - 3) + tri(n - 2) + tri(n - 1));\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwm5y_oh3.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpwm5y_oh3.cpp:21:60: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     if (n % 2 == 0) return std::vector<long>(1, tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1));\n      |                                    \
    \             ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                               \
    \                     |            |\n      |                                \
    \                    |            vector<[...]>\n      |                     \
    \                               vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwm5y_oh3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwm5y_oh3.cpp:21:71:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     if (n % 2 ="
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n==1) res.push_back(3);\n    if(n==2)\
    \ res.push_back(1);\n    if(n%2==0) res.push_back(tri(n-1)+tri(n-2));\n    res.push_back(tri(n-1)+tri(n-2)+tri(n+1));\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzjabq98v.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpzjabq98v.cpp:22:38: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |     if(n%2==0) res.push_back(tri(n-1)+tri(n-2));\n    \
    \  |                              ~~~~~~~~^~~~~~~~~\n      |                 \
    \                |        |\n      |                                 |       \
    \ vector<[...]>\n      |                                 vector<[...]>\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpzjabq98v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpzjabq98v.cpp:22:46:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |     if(n%2==0) res.push_back(tri(n-1)+tri(n-2));\n      |          \
    \                                    ^\nIn file included from /shared/centos7/g"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> res;\n    if (n == 1)\n   \
    \     res.push_back(1);\n    else if (n == 2)\n        res.push_back(3);\n   \
    \ else\n    {\n        int firstTri = 1;\n        int secondTri = 2;\n       \
    \ int thirdTri = 3;\n        for (int i = 3; i <= n; ++i)\n        {\n       \
    \     long sum = firstTri + secondTri + thirdTri;\n            firstTri = secondTri;\n\
    \            secondTri = thirdTri;\n            thirdTri = sum;\n            \n\
    \            res.push_back(sum);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpj6dgfmwm: /tmp/tmpj6dgfmwm.cpp:44: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    assert(n >= 0);\n    long a = 1;\n\
    \    long b = 2;\n    long c = 3;\n    long d = 1;\n    // first step is to calculate\
    \ Tribonacci sequence\n    for(long i = 0; i < n; ++i) {\n        result.push_back(a);\n\
    \        result.push_back(b);\n        result.push_back(c);\n        // calculate\
    \ d\n        if(i % 2 == 0) {\n            d += 2;\n        } else {\n       \
    \     d += 1;\n        }\n        // calculate new values\n        long tmp =\
    \ b;\n        b = c + d;\n        c = tmp;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp1fw5lrlf: /tmp/tmp1fw5lrlf.cpp:45: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tif (n <= 1) {\n\t\treturn std::vector<long>(1, n);\n\t} else {\n\t\t\
    std::vector<long> temp;\n\t\tlong a = 1;\n\t\tlong b = 2;\n\t\tlong c = 3;\n\t\
    \tlong d = a;\n\t\tlong tri_sum;\n\t\twhile (c <= n) {\n\t\t\ttri_sum = a + b\
    \ + c;\n\t\t\ttemp.push_back(tri_sum);\n\t\t\ta = b;\n\t\t\tb = c;\n\t\t\tc =\
    \ tri_sum;\n\t\t\td += a;\n\t\t}\n\t\treturn temp;\n\t}\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpcbhzkxf0: /tmp/tmpcbhzkxf0.cpp:41: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if (n >= 2)\n    result = {tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3)};\n  if (n >= 3)\n    result.push_back(tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3));\n  assert(result.size() <= n+1);\n  return result;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4jk7gyk8.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp4jk7gyk8.cpp:21:26: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |     result = {tri(n - 1) + tri(n - 2) + tri(n - 3)};\n\
    \      |               ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                  |   \
    \         |\n      |                  |            vector<[...]>\n      |    \
    \              vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4jk7gyk8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4jk7gyk8.cpp:21:37:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |     result = {tri(n - 1) + tri(n - 2) + tri(n - 3)};\n      |      \
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_alg"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1){\n        result.push_back(1);\n\
    \        return result;\n    }\n    if (n%2 == 0) {\n        result.push_back(3);\n\
    \        result.push_back(tri(n / 2));\n        return result;\n    }\n    result.push_back(tri(n\
    \ / 2) + tri(n / 2 - 1) + tri(n + 2));\n    return result;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqhsd6csk.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpqhsd6csk.cpp:26:36: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   26\
    \ |         result.push_back(tri(n / 2));\n      |                           \
    \         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpqhsd6csk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmpqhsd6csk.cpp:29:33: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>\u2019\
    )\n   29 |     result.push_back(t"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\t// Write your code here\n\tif(n==0) return {};\n\tif(n<0) return {};\n\
    \tstd::vector<long> results;\n\tresults.push_back(1L);\n\tresults.push_back(2L);\n\
    \tresults.push_back(3L);\n\tfor(long i=4;i<=n;i+=2) {\n\t\tlong newResult = results[i]+results[i-1];\n\
    \t\tresults.push_back(newResult);\n\t}\n\treturn results;\n}\nint main() {\n \
    \   auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp0wkyp5_o: /tmp/tmp0wkyp5_o.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Your code goes here\n\tlong tri[] = {1,3,8,1,9,5,10,5,11,7,13,7,14};\n\
    \tstd::vector<long> v(n+1);\n\tlong temp;\n\tv[0]=1;\n\tv[1]=3;\n\tfor(int i=2;i<n+1;i++)\
    \ {\n\t\ttemp = tri[i-1]+tri[i-2];\n\t\tv[i] = temp;\n\t}\n\treturn v;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpnl764vao: /tmp/tmpnl764vao.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // write your code here\n    std::vector<long> vec;\n    \n    long\
    \ prev1 = 1;\n    long prev2 = 2;\n    long prev3 = 1;\n    long count = 1;\n\
    \    vec.push_back(1);\n    while(count<n)\n    {\n        long temp = prev1+prev2+prev3;\n\
    \        prev1 = prev2;\n        prev2 = prev3;\n        prev3 = temp;\n     \
    \   count++;\n        vec.push_back(temp);\n    }\n    return vec;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmplpe94jhl: /tmp/tmplpe94jhl.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long ans[n+1];\n    ans[0]=3;\n    for(int i=1;i<=n;i++) {\n     \
    \   if(n%2 == 0) {\n            ans[i]=ans[i-1]+ans[i-2]+ans[i+1];\n        }\n\
    \        else {\n            ans[i]=tri[i-1]+tri[i-2]+tri[i+2];\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmvffssfj.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpmvffssfj.cpp:26:27: warning: pointer to a function used\
    \ in arithmetic [-Wpointer-arith]\n   26 |             ans[i]=tri[i-1]+tri[i-2]+tri[i+2];\n\
    \      |                           ^\ncc1plus: warning: pointer to a function\
    \ used in arithmetic [-Wpointer-arith]\n/tmp/tmpmvffssfj.cpp:26:36: warning: pointer\
    \ to a function used in arithmetic [-Wpointer-arith]\n   26 |             ans[i]=tri[i-1]+tri[i-2]+tri[i+2];\n\
    \      |                                    ^\ncc1plus: warning: pointer to a\
    \ function used in arithmetic [-Wpointer-arith]\n/tmp/tmpmvffssfj.cpp:26:28: error:\
    \ invalid operands of types \u2018std::vector<long int>(long int)\u2019 and \u2018\
    std::vector<long int>(long int)\u2019 to binary \u2018operator+\u2019\n   26 |\
    \             ans[i]=tri[i-1]+tri[i-2]+tri[i+2];\n      |                    ~~~~~~~~^~~~~~~~~\n\
    \      |                           |        |\n      |                       \
    \    |        std::vector<long int>(long int)\n      |                       \
    \    std::vector<long int>(long int)\n/tmp/tmpmvffssfj.cpp:26:45: warning: pointer\
    \ to a function used in arithmetic [-Wpointer-arith]\n   26 |             ans[i]=tri[i-1]+tri[i-2]+tri[i+2];\n\
    \      |                                             ^\ncc1plus: warning: pointer\
    \ to a function used in arithmetic [-Wpointer-arith]\n/tmp/tmpmvffssfj.cpp:29:12:\
    \ error: could not convert \u2018ans\u2019 from \u2018long int [(n + 1)]\u2019\
    \ to \u2018std::vector<long int>\u2019\n   29 |     return ans;\n      |     \
    \       ^~~\n      |            |\n      |            long int [(n + 1)]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n<2)\n        return res;\n    if(n==2||n==3)\n\
    \        res.push_back(n);\n    if(n%2==0)\n        res.push_back(tri(n - 1)+tri(n\
    \ - 2)+tri(n + 1));\n    else\n        res.push_back(tri(n - 1)+tri(n - 2));\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2llab_9l.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp2llab_9l.cpp:25:33: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         res.push_back(tri(n - 1)+tri(n - 2)+tri(n + 1));\n\
    \      |                       ~~~~~~~~~~^~~~~~~~~~~\n      |                \
    \          |          |\n      |                          |          vector<[...]>\n\
    \      |                          vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp2llab_9l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2llab_9l.cpp:25:43:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         res.push_back(tri(n - 1)+tri(n - 2)+tri(n + 1));\n      |  \
    \                                         ^\nIn file included from /shared/centos7/gcc/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long first = 3, n1 = 1, n2 = 2;\n    std::vector<long> result;\n \
    \   result.reserve(n + 1);\n    for (int i = 2; i <= n; ++i) {\n        n1 = first;\n\
    \        n2 = first;\n        first = (n1 + n2) % 3;\n        result.push_back(first);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp9v864i7n: /tmp/tmp9v864i7n.cpp:32: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> v;\n  // base case\n  if (n == 0) v.push_back(3);\n\
    \  else {\n    v.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n  }\n  return\
    \ v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) ==\
    \ (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9pe04u8h.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp9pe04u8h.cpp:23:28: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     v.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \      |                 ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                    |\
    \            |\n      |                    |            vector<[...]>\n      |\
    \                    vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9pe04u8h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9pe04u8h.cpp:23:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     v.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      |    \
    \                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> vec(n + 1, 0);\n    vec[0] = 3;\n    long s = 1;\n\
    \    long b = 2;\n    long a = 0;\n    while (a < n){\n        s = s + b;\n  \
    \      a = a + 1;\n        b = s + (a - b)/2;\n        vec[a] = s;\n    }\n  \
    \  return vec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzshce7a6: /tmp/tmpzshce7a6.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 1)\n        res.push_back(n);\n\
    \    else if(n == 2) {\n        res.push_back(n);\n        res.push_back(1);\n\
    \        return res;\n    }\n    std::vector<long> res1 = tri(n - 1) + tri(n -\
    \ 2);\n    std::vector<long> res2 = tri(n + 1) + tri(n + 2);\n    res.insert(res.end(),\
    \ res1.begin(), res1.end());\n    res.insert(res.end(), res2.begin(), res2.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmu_0os78.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpmu_0os78.cpp:27:41: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   27 |     std::vector<long> res1 = tri(n - 1) + tri(n - 2);\n\
    \      |                              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                          |            |\n      |                           \
    \      |            vector<[...]>\n      |                                 vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmu_0os78.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpmu_0os78.cpp:27:52:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |     std::vector<long> res1 = tri(n - 1) + tri(n - 2);\n      |     \
    \                                               ^\nIn file i"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    for(long i = 2; i <= n; i++) {\n     \
    \   res.push_back(1);\n        res.push_back(1);\n        res.push_back(1);\n\
    \        res.push_back(1);\n    }\n    long long sum = 0;\n    for(long i = n;\
    \ i > 0; i--) {\n        sum += res[i / 2] + res[i / 2 - 1] + res[i / 2 + 1];\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpaxm96ucr: /tmp/tmpaxm96ucr.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    if (n == 1)\n        return {1};\n    if (n &\
    \ 1)\n        return {tri(n - 1) + tri(n - 2) + tri(n - 2)};\n    return {tri(n\
    \ - 2) + tri(n - 1) + tri(n - 1)};\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj1effwtl.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpj1effwtl.cpp:23:28: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         return {tri(n - 1) + tri(n - 2) + tri(n - 2)};\n\
    \      |                 ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                    |\
    \            |\n      |                    |            vector<[...]>\n      |\
    \                    vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpj1effwtl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpj1effwtl.cpp:23:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         return {tri(n - 1) + tri(n - 2) + tri(n - 2)};\n      |    \
    \                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    res.push_back(3); // 1 3 2 8\n    for(int\
    \ i = 4; i < n; i++){\n        res.push_back(1 + i / 2);\n        while(i % 2\
    \ == 0){\n            i++;\n        }\n        while(i % 2 == 1){\n          \
    \  i++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpbpjfi4tv: /tmp/tmpbpjfi4tv.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> ret;\n  ret.reserve(n + 1);\n  ret[0] = 1;\n  ret[1]\
    \ = 1;\n  for (long i = 2; i <= n; i++) {\n    ret[i] = ret[i - 1] + ret[i - 2];\n\
    \  }\n  return ret;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp35o9wrwf: /tmp/tmp35o9wrwf.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // assert(n < 101)\n    std::vector<long> res;\n    res.push_back(3);\
    \ // tri(1)\n    long mid = n;\n    if(n % 2 == 0) { // if n is even\n       \
    \ mid = n / 2; // mid = n / 2\n        // mid = n / 2\n    }\n    res.push_back(1\
    \ + mid);\n    // mid = n / 2\n    while(true) {\n        mid = 1 + mid;\n   \
    \     if(mid > n) {\n            break;\n        }\n        res.push_back(mid);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpl6qsj9o5: /tmp/tmpl6qsj9o5.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n > 0);\n    std::vector<long> ans;\n    ans.push_back(3);\
    \ \n    if(n % 2 == 0) {\n        ans.push_back(n+1);\n    } else {\n        ans.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpib8tz2p_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpib8tz2p_.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         ans.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpib8tz2p_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpib8tz2p_.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         ans.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /shared/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result(n + 1);\n    result[0]=result[1]=3;\n   \
    \ long sum=0;\n    for(int i=2; i<n+2; i++) {\n        result[i] = result[i-1]\
    \ + result[i-2];\n        sum += result[i];\n    }\n    result[n] = sum;\n   \
    \ return result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpn7lzputl: /tmp/tmpn7lzputl.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.reserve(n + 1);\n    v[0] = 1;\n    if\
    \ (n == 1) return v;\n    if (n & 1) {\n        v[1] = 1 + v[0];\n        v[2]\
    \ = v[1];\n        long t = 2;\n        for (long i = 3; i <= n; i = i + 2) {\n\
    \            v[i] = v[i - 1] + v[t - 1] + v[t];\n            t = t + 1;\n    \
    \    }\n    }\n    else {\n        v[1] = 1 + v[0];\n        v[2] = v[1];\n  \
    \      long t = 3;\n        for (long i = 4; i <= n; i = i + 2) {\n          \
    \  v[i] = v[i - 1] + v[t - 1] + v[t];\n            t = t + 1;\n        }\n   \
    \ }\n    return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp6eli164z: /tmp/tmp6eli164z.cpp:45: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // write your code here\n    std::vector<long> nums;\n    if(n ==\
    \ 0){\n        nums.push_back(0);\n        return nums;\n    }\n    if(n == 1){\n\
    \        nums.push_back(1);\n        return nums;\n    }\n    std::vector<long>\
    \ nums_1 = tri(n - 1);\n    std::vector<long> nums_2 = tri(n - 2);\n    std::vector<long>\
    \ nums_3 = tri(n - 3);\n    nums.push_back(1);\n    nums.push_back(n);\n    nums.push_back(1);\n\
    \    nums.push_back(1);\n    nums.push_back(1);\n    nums.push_back(1);\n    nums.push_back(n);\n\
    \    nums.push_back(n);\n    nums.push_back(2);\n    nums.push_back(2);\n    nums.push_back(2);\n\
    \    nums.push_back(n);\n    nums.push_back(n);\n    nums.push_back(3);\n    nums.push_back(3);\n\
    \    nums.push_back(3);\n    nums.push_back(n);\n    nums.push_back(n);\n    nums.push_back(n);\n\
    \    return nums;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 1) {\n        return std::vector<long>(1, 3);\n    } else\
    \ if (n == 2) {\n        return std::vector<long>(2, 3);\n    } else if (n % 2\
    \ == 0) {\n        std::vector<long> r1 = tri(n - 1);\n        std::vector<long>\
    \ r2 = tri(n - 2);\n        std::vector<long> r3 = tri(n + 1);\n        return\
    \ std::merge(r1.begin(), r1.end(), r2.begin(), r2.end(), r3.begin(), r3.end());\n\
    \    } else {\n        std::vector<long> r1 = tri(n - 1);\n        std::vector<long>\
    \ r2 = tri(n - 2);\n        std::vector<long> r3 = tri(n + 1);\n        return\
    \ std::merge(r1.begin(), r1.end(), r2.begin(), r2.end(), r3.begin(), r3.end());\n\
    \    }\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmyde9tpx.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpmyde9tpx.cpp:27:26: error: could not convert \u2018std::merge<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >, __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(r1.std::vector<long int>::begin(), r1.std::vector<long\
    \ int>::end(), r2.std::vector<long int>::begin(), r2.std::vector<long int>::end(),\
    \ r3.std::vector<long int>::begin(), r3.std::vector<long int>::end())\u2019 from\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018std::vector<long int>\u2019\n   27 |         return std::merge(r1.begin(),\
    \ r1.end(), r2.begin(), r2.end(), r3.begin(), r3.end());\n      |            \
    \    ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                          |\n      |                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpmyde9tpx.cpp:32:26: error: could not\
    \ convert \u2018std::merge<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >, __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >(r1.std::vector<long int>::begin(), r1.std::vector<long int>::end(),\
    \ r2.std::vector<long int>::begin(), r2.std::vector<long int>::end(), r3.std::vector<long\
    \ int>::begin(), r3.std::vector<long int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  32 |         return std::merge(r1.begin(), r1.end(), r2.begin(), r2.end(),\
    \ r3.begin(), r3.end());\n      |                ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                          |\n      |                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\nIn file included from /shared/centos7/gcc/9.2.0-sky"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> a;\n    if (n == 1){\n        a = { 3 };\n    }\n\
    \    \n    else{\n        int count = 1;\n        for (int i = 1; i <= n; i++){\n\
    \            long nextNum = tri(n - 1) + tri(n - 2) + tri(n + 1);\n          \
    \  a.push_back(nextNum);\n            if (n % 2 == 0){\n                count\
    \ ++;\n            }\n            n = nextNum;\n        }\n    }\n    return a;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi_1ctvuf.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpi_1ctvuf.cpp:27:39: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   27 |             long nextNum = tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1);\n      |                            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                              |            |\n      |                       \
    \        |            vector<[...]>\n      |                               vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpi_1ctvuf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpi_1ctvuf.cpp:27:50:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |             long nextNum = tri(n - 1) + tri(n - 2) + tri(n + 1);\n \
    \     |                                                 "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // assert(n > 0);\n    std::vector<long> res;\n    if(n<=1){\n   \
    \     res.push_back(n);\n    }else{\n        long l1 = n, l2 = 1, l3 = (n+1)/2;\n\
    \        while(l3 <= l2){\n            res.push_back(l1);\n            l3 = l3+l2;\n\
    \            l2 = l2+l1;\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp1nh9zxuc: /tmp/tmp1nh9zxuc.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\t// base case\n\tif (n == 0) {\n\t\treturn {1};\n\t}\n\t// if we have\
    \ even number n\n\tif (n % 2 == 0) {\n\t\tstd::vector<long> tri1 = tri(n - 1);\n\
    \t\tstd::vector<long> tri2 = tri(n - 2);\n\t\tstd::vector<long> tri3 = tri(n +\
    \ 2);\n\t\tstd::vector<long> tri4 = tri(n + 1);\n\t\treturn {tri1[0], tri2[0],\
    \ tri3[0], tri4[0], 1 + n / 2};\n\t}\n\t// if we have odd number n\n\telse {\n\
    \t\tstd::vector<long> tri1 = tri(n - 1);\n\t\tstd::vector<long> tri2 = tri(n -\
    \ 2);\n\t\tstd::vector<long> tri3 = tri(n + 2);\n\t\treturn {tri1[0], tri2[0],\
    \ tri3[0], 1 + n / 2};\n\t}\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    result.reserve(1 + n);\n    if (n <=\
    \ 1) {\n        return result;\n    }\n    result.push_back(1);\n    result.push_back(1);\n\
    \    long t = tri(n - 1) + tri(n - 2) + tri(n - 1);\n    while (t <= n) {\n  \
    \      result.push_back(t);\n        ++t;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ws6mqmi.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp0ws6mqmi.cpp:26:25: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |     long t = tri(n - 1) + tri(n - 2) + tri(n - 1);\n  \
    \    |              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                 |       \
    \     |\n      |                 |            vector<[...]>\n      |         \
    \        vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0ws6mqmi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0ws6mqmi.cpp:26:36:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |     long t = tri(n - 1) + tri(n - 2) + tri(n - 1);\n      |        \
    \                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:6"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    if (n == 0)\n        ans.push_back(1);\n\
    \    else if (n == 1)\n        ans.push_back(3);\n    else\n    {\n        ans.push_back(tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1));\n        ans.push_back(ans.back() + ans.back());\n\
    \        ans.push_back(ans.back() - ans.back());\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpicb9bwm4.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpicb9bwm4.cpp:26:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         ans.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpicb9bwm4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpicb9bwm4.cpp:26:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         ans.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /shared/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if(n==1 || n==2 || n==3) return {};\n    long t1=1;\n    long t2=1;\n\
    \    long t3=1;\n    long ans=t1;\n    for(int i=4;i<=n;++i){\n        t1=t1+t2;\n\
    \        t2=t2+t3;\n        t3=ans+t1;\n        ans=t3;\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(ans);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0rt_zq74: /tmp/tmp0rt_zq74.cpp:36: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  if (n == 1) return std::vector<long>{3};\n  if (n == 2) return std::vector<long>{3,\
    \ 1};\n  if (n & 1) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n  \n  return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1);\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiabs9_f6.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpiabs9_f6.cpp:21:32: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   21 |   if (n & 1) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n\
    \      |                     ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                \
    \        |            |\n      |                        |            vector<[...]>\n\
    \      |                        vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpiabs9_f6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpiabs9_f6.cpp:21:43:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   21 |   if (n & 1) return tri(n - 1) + tri(n - 2) + tri(n + 1);\n      | \
    \                                          ^\nIn file included from /shared/centos7/gcc/9.2."
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> vec;\n    vec.push_back(1); \n    if (n%2 == 0)\
    \ {\n        vec.push_back(2);\n        vec.push_back(3);\n        long sum =\
    \ 0;\n        for (int i = 3; i<=n; i++) {\n            sum += vec[i - 3] + vec[i\
    \ - 2] + vec[i - 1];\n            vec.push_back(i);\n        }\n        vec.push_back(sum);\n\
    \    } else {\n        vec.push_back(2);\n        vec.push_back(3);\n        long\
    \ sum = 0;\n        for (int i = 3; i<=n; i++) {\n            sum += vec[i - 3]\
    \ + vec[i - 2];\n            vec.push_back(i);\n        }\n        vec.push_back(sum);\n\
    \    }\n    return vec;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpnqf1jy7t: /tmp/tmpnqf1jy7t.cpp:44: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n <= 1){\n        return {1};\n    }\n\n    std::vector<long>\
    \ answer;\n    answer.push_back(n);\n    long a = 1, b = 2, c = 1;\n    for (long\
    \ i = 0; i < n; i++) {\n        long temp = a;\n        a = b;\n        b = c;\n\
    \        c = temp + a + b + c;\n        answer.push_back(c);\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpwsg8ymlj: /tmp/tmpwsg8ymlj.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n   std::vector<long> result;\n   std::stack<long> stack;\n   long temp\
    \ = 0;\n   stack.push(1);\n   while(stack.size() < n) {\n      long curr = stack.top();\n\
    \      temp += curr;\n      result.pop_back();\n      if(curr%2==0){\n       \
    \  result.push_back(temp);\n         stack.push(curr + 1);\n         stack.push(temp\
    \ + 1);\n      } else {\n         result.push_back(temp);\n         stack.push(temp\
    \ + 1);\n         stack.push(curr + 1);\n      }\n   }\n   return result;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> temp;\n    long temp1 = 1, temp2 = 1, temp3 = 1;\n\
    \    for(int i = 1; i <= n; i++) {\n        if(i % 2 == 0)\n            temp1\
    \ += temp2;\n        else\n            temp1 += temp3;\n        temp2 = temp3;\n\
    \        temp3 = temp1;\n        temp1.push_back(temp3);\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbg5j51kg.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpbg5j51kg.cpp:28:15: error: request for member \u2018push_back\u2019\
    \ in \u2018temp1\u2019, which is of non-class type \u2018long int\u2019\n   28\
    \ |         temp1.push_back(temp3);\n      |               ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v(n);\n    v[0] = v[1] = 3; \n    for (long i =\
    \ 2; i <= n; i++) {\n        v[i] = v[i - 1] + v[i - 2] + v[i-2];\n    }\n   \
    \ return v;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "*** Error in `/tmp/tmpz705igjk': free(): invalid pointer: 0x00000000013fec70\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2ba2b3fb4329]\n\
    /lib64/libc.so.6(+0x81f1b)[0x2ba2b3fb4f1b]\n/lib64/libc.so.6(+0x8295a)[0x2ba2b3fb595a]\n\
    /lib64/libc.so.6(__libc_malloc+0x4c)[0x2ba2b3fb878c]\n/lib64/libc.so.6(vasprintf+0x22)[0x2ba2b3faadf2]\n\
    /lib64/libc.so.6(asprintf+0x87)[0x2ba2b3f866a7]\n/lib64/libc.so.6(+0x2f102)[0x2ba2b3f62102]\n\
    /lib64/libc.so.6(+0x2f252)[0x2ba2b3f62252]\n/tmp/tmpz705igjk[0x400b60]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2ba2b3f55555]\n\
    /tmp/tmpz705igjk[0x4008a9]\n======= Memory map: ========\n00400000-00404000 r-xp\
    \ 00000000 08:02 139426                             /tmp/tmpz705igjk\n00603000-00604000\
    \ r--p 00003000 08:02 139426                             /tmp/tmpz705igjk\n00604000-00605000\
    \ rw-p 00004000 08:02 139426                             /tmp/tmpz705igjk\n013ed000-01441000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2ba2b341c000-2ba2b343e000\
    \ r-xp 00000000 08:01 50332783                   /usr/lib64/ld-2.17.so\n2ba2b343e000-2ba2b3441000\
    \ rw-p 00000000 00:00 0 \n2ba2b345a000-2ba2b345f000 rw-p 00000000 00:00 0 \n2ba2b363d000-2ba2b363e000\
    \ r--p 00021000 08:01 50332783                   /usr/lib64/ld-2.17.so\n2ba2b363e000-2ba2b363f000\
    \ rw-p 00022000 08:01 50332783                   /usr/lib64/ld-2.17.so\n2ba2b363f000-2ba2b3640000\
    \ rw-p 00000000 00:00 0 \n2ba2b3640000-2ba2b3809000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2ba2b3809000-2ba2b3a08000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ba2b3a08000-2ba2b3a13000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ba2b3a13000-2ba2b3a16000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2ba2b3a16000-2ba2b3a19000 rw-p 00000000 00:00 0 \n2ba2b3a19000-2ba2b3b1a000 r-xp\
    \ 00000000 08:01 50332795                   /usr/lib64/libm-2.17.so\n2"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long first = 1, second = 2, third = 3;\n    if(n % 2 == 0) {\n   \
    \     third = second + first;\n        second = first;\n        first = third;\n\
    \    }\n    std::vector<long> answer;\n    for(long i=0;i<=n; i++) {\n       \
    \ answer.push_back(first);\n        if(i % 2 == 0) {\n            third = second\
    \ + first;\n            second = first;\n            first = third;\n        }\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp85i2sy0l: /tmp/tmp85i2sy0l.cpp:38: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Write your code here\n    std::vector<long> res(n+1);\n    res[0]=3;\n\
    \    res[1]=1;\n    res[2]=1;\n    res[3]=8;\n    return res;\n}\nint main() {\n\
    \    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpma2aa544: /tmp/tmpma2aa544.cpp:29: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  std::vector<long> result;\n  if(n <= 0) return result;\n  if(n <= 3)\
    \ return result;\n  for(long i = 2; i <= n; i++) {\n    result.push_back(tri[i-1]\
    \ + tri[i-2] + tri[i-3]);\n  }\n  return result;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzpm0rfpe.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpzpm0rfpe.cpp:23:29: warning: pointer to a function used\
    \ in arithmetic [-Wpointer-arith]\n   23 |     result.push_back(tri[i-1] + tri[i-2]\
    \ + tri[i-3]);\n      |                             ^\ncc1plus: warning: pointer\
    \ to a function used in arithmetic [-Wpointer-arith]\n/tmp/tmpzpm0rfpe.cpp:23:40:\
    \ warning: pointer to a function used in arithmetic [-Wpointer-arith]\n   23 |\
    \     result.push_back(tri[i-1] + tri[i-2] + tri[i-3]);\n      |             \
    \                           ^\ncc1plus: warning: pointer to a function used in\
    \ arithmetic [-Wpointer-arith]\n/tmp/tmpzpm0rfpe.cpp:23:31: error: invalid operands\
    \ of types \u2018std::vector<long int>(long int)\u2019 and \u2018std::vector<long\
    \ int>(long int)\u2019 to binary \u2018operator+\u2019\n   23 |     result.push_back(tri[i-1]\
    \ + tri[i-2] + tri[i-3]);\n      |                      ~~~~~~~~ ^ ~~~~~~~~\n\
    \      |                             |          |\n      |                   \
    \          |          std::vector<long int>(long int)\n      |               \
    \              std::vector<long int>(long int)\n/tmp/tmpzpm0rfpe.cpp:23:51: warning:\
    \ pointer to a function used in arithmetic [-Wpointer-arith]\n   23 |     result.push_back(tri[i-1]\
    \ + tri[i-2] + tri[i-3]);\n      |                                           \
    \        ^\ncc1plus: warning: pointer to a function used in arithmetic [-Wpointer-arith]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    long a=0, b=1, c=3;\n    for(int i=0;\
    \ i<=n; i++) {\n        ans.push_back(a);\n        a = b;\n        b += c;\n \
    \       c = b - a;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmplqezb9cy: /tmp/tmplqezb9cy.cpp:31: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    assert(n >= 0);\n    result.reserve(n\
    \ + 2);\n    long a = 1;\n    long b = 1;\n    for (int i = 0; i < n; ++i) {\n\
    \        result.push_back(a + b + 2);\n        a = b;\n        b = result.back();\n\
    \    }\n    return result.insert(result.end(), 1, 3);\n}\nint main() {\n    auto\
    \ candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2,\
    \ 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq6y08db9.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpq6y08db9.cpp:29:25: error: could not convert \u2018result.std::vector<long\
    \ int>::insert(__gnu_cxx::__normal_iterator<const long int*, std::vector<long\
    \ int> >(result.std::vector<long int>::end()), 1, 3)\u2019 from \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} to \u2018std::vector<long int>\u2019\n   29 |     return result.insert(result.end(),\
    \ 1, 3);\n      |            ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |      \
    \                   |\n      |                         std::vector<long int>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >}\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> vec;\n    if(n == 0) vec.push_back(0);\n    if(n\
    \ == 1) vec.push_back(3);\n    long x = 2;\n    for(long i = 3; i <= n; ++i) vec.push_back(\
    \ x + 2 * i - 3);\n    return vec;\n}\nint main() {\n    auto candidate = tri;\n\
    \    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpoqul2a4e: /tmp/tmpoqul2a4e.cpp:28: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long long a = 0;\n    long long b = 1;\n    long long c = 1;\n   \
    \ std::vector<long> res;\n    for(long long i = 0; i < n; ++i){\n        long\
    \ long c = a + b + c;\n        a = b;\n        b = c;\n        res.push_back(c);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp05deh1tf: /tmp/tmp05deh1tf.cpp:33: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Base case\n    if (n == 0)\n        return std::vector<long>();\n\
    \    // If n is even, then the nth number of the Fibonacci sequence is equal to\
    \ \n    // the sum of two other numbers of the Fibonacci sequence: \n    // tri(n\
    \ - 1) + tri(n - 2).\n    // So we need to recursively compute the Tribonacci\
    \ sequence \n    // for n - 1, n - 2, and n + 1.\n    if (n % 2 == 0)\n      \
    \  return std::vector<long>(tri(n - 1), tri(n - 1) + tri(n - 2));\n    std::vector<long>\
    \ result = tri(n - 1) + tri(n - 2);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpofg5obkm.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpofg5obkm.cpp:28:57: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   28 |         return std::vector<long>(tri(n - 1), tri(n - 1)\
    \ + tri(n - 2));\n      |                                              ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~\n      |                                                 |    \
    \        |\n      |                                                 |        \
    \    vector<[...]>\n      |                                                 vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpofg5obkm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpofg5obkm.cpp:28:68:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   28 |         return std::vector<long>(tri(n - 1)"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> vec(n + 2);\n    vec[0] = 1;\n    vec[1] = 3;\n\
    \    if (n >= 2) {\n        vec[2] = 1 + n / 2;\n        if (n % 2 == 0)\n   \
    \         vec[2] = vec[2] + vec[1] - vec[0];\n    }\n    if (n >= 3) {\n     \
    \   vec[n + 1] = vec[n] + vec[n-1] + vec[n-2];\n    }\n    return vec;\n}\nint\
    \ main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpicl_bsw1: /tmp/tmpicl_bsw1.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    std::vector<long> res;\n    if (n == 0) {\n \
    \       res.push_back(3);\n        return res;\n    }\n    if (n % 2 == 0) {\n\
    \        res.push_back(tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1) + tri(n\
    \ + 2) + tri(n + 3));\n    }\n    else {\n        res.push_back(tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n + 1) + tri(n + 2) + tri(n + 3) + tri(n + 4));\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsu_ypm0q.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpsu_ypm0q.cpp:26:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n -\
    \ 3) + tri(n + 1) + tri(n + 2) + tri(n + 3));\n      |                       ~~~~~~~~~~\
    \ ^ ~~~~~~~~~~\n      |                          |            |\n      |     \
    \                     |            vector<[...]>\n      |                    \
    \      vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpsu_ypm0q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpsu_ypm0q.cpp:26:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |         res.push_back(tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n +\
    \ 1) + tri(n + 2) + tri(n + 3));\n      "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 1) {\n        return {1};\n    } else if (n & 1) {\n    \
    \    return {tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 1)};\n    } else {\n\
    \        return {tri(n - 3) + tri(n - 2) + tri(n + 3), tri(n - 1) + tri(n + 2)};\n\
    \    }\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjlx9yi8d.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpjlx9yi8d.cpp:22:28: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   22 |         return {tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n\
    \ - 1)};\n      |                 ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |           \
    \         |            |\n      |                    |            vector<[...]>\n\
    \      |                    vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjlx9yi8d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjlx9yi8d.cpp:22:39:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   22 |         return {tri(n - 1) + tri(n - 2), tri(n + 1) + tri(n - 1)};\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n < 3) // base case\n        return std::vector<long>(1, 3);\n\
    \n    // Recursive case\n    std::vector<long> tri_aux(tri(n - 2) + tri(n - 1)\
    \ + tri(n));\n\n    // Base case\n    if (tri_aux.size() < n + 1)\n        return\
    \ tri_aux;\n\n    // Recursive case\n    std::vector<long> tri_aux(tri(n - 2)\
    \ + tri(n - 1) + tri(n), tri_aux.size());\n    return tri_aux;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6m100mlu.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp6m100mlu.cpp:23:42: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     std::vector<long> tri_aux(tri(n - 2) + tri(n - 1) +\
    \ tri(n));\n      |                               ~~~~~~~~~~ ^ ~~~~~~~~~~\n  \
    \    |                                  |            |\n      |              \
    \                    |            vector<[...]>\n      |                     \
    \             vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp6m100mlu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6m100mlu.cpp:23:53:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     std::vector<long> tri_aux(tri(n - 2) + tri(n - 1) + tri(n));\n \
    \     |                                     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    v.reserve(n + 1);\n    v[0] = 0;\n    v[1]\
    \ = 1;\n    v[2] = 2;\n    for (long i = 2; i < n; i++) {\n        v[i] = v[i\
    \ - 1] + v[i - 2] + v[i - 3];\n    }\n    v.push_back(v[n - 1]);\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpgc599nqb: /tmp/tmpgc599nqb.cpp:32: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n <= 1) {\n        res.push_back(n);\n\
    \        return res;\n    }\n    long mid = n / 2;\n    res.push_back(tri(mid));\n\
    \    res.push_back(tri(mid - 1) + tri(mid + 1) + tri(mid));\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4va31dig.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp4va31dig.cpp:25:27: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   25\
    \ |     res.push_back(tri(mid));\n      |                           ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp4va31dig.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp4va31dig.cpp:26:32: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>\u2019\
    )\n   26 |     res.push_back(tri(mid - 1) + tri(mid"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n == 1)\n        return std::vector<long>{1};\n    if (n == 2)\n\
    \        return std::vector<long>{1, 3};\n    std::vector<long> res;\n    long\
    \ a = 1;\n    long b = 2;\n    for (int i = 3; i <= n; i++) {\n        long c\
    \ = a + b;\n        long d = b - a;\n        long e = (n + a + b) % 2;\n     \
    \   res.push_back(c);\n        res.push_back(d);\n        res.push_back(e);\n\
    \        a = b;\n        b = c;\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3,\
    \ 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpb2lx3m52: /tmp/tmpb2lx3m52.cpp:40: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> nums;\n    if (n <= 1)\n        nums.push_back(1);\n\
    \    else {\n        nums.push_back(n);\n        nums.push_back(1 + n / 2);\n\
    \        if (n % 2 == 0)\n            nums.push_back(1 + n / 2 + n / 2 + n / 2);\n\
    \        else\n            nums.push_back(n + 1 + n / 2);\n    }\n    return nums;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp9r3ftciz: /tmp/tmp9r3ftciz.cpp:34: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> v;\n    if(n<=0) return v;\n    v.push_back(3);\n\
    \    v.push_back(1);\n    for(long i=2;i<=n;i++) {\n        v.push_back(v[i-2]\
    \ + v[i-1] + v[i+2]);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp_g7ytvat: /tmp/tmp_g7ytvat.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    // Write your code here\n    std::vector<long> v; \n    v.reserve(std::max(1,n));\n\
    \    v.push_back(1);\n    if (n%2 == 0)\n    {\n        v.push_back(3);\n    }\n\
    \    else\n    {\n        v.push_back(1+n/2);\n    }\n    for(int i=2;i<=n;i++)\n\
    \    {\n        v.push_back(v[v.size()-2]+v[v.size()-1]);\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwg7iyn8c.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpwg7iyn8c.cpp:21:27: error: no matching function for call\
    \ to \u2018max(int, long int&)\u2019\n   21 |     v.reserve(std::max(1,n));\n\
    \      |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpwg7iyn8c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwg7iyn8c.cpp:21:27:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018long int\u2019)\n   21 |     v.reserve(std::max(1,n));\n \
    \     |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n == 1){\n        res.push_back(0);\n\
    \        res.push_back(1);\n    }\n    else {\n        if(n % 2 == 0) {\n    \
    \        res.push_back(tri(n - 1) + tri(n - 2) + tri(n - 3));\n        }\n   \
    \     else{\n            res.push_back(tri(n - 1) + tri(n - 2) + tri(n - 1) +\
    \ tri(n - 3) + tri(n - 4));\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qpx6tw5.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp3qpx6tw5.cpp:26:38: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |             res.push_back(tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3));\n      |                           ~~~~~~~~~~ ^ ~~~~~~~~~~\n      | \
    \                             |            |\n      |                        \
    \      |            vector<[...]>\n      |                              vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp3qpx6tw5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3qpx6tw5.cpp:26:49:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |             res.push_back(tri(n - 1) + tri(n - 2) + tri(n - 3));\n \
    \     |                                                 ^\nIn"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    long fibonacci[n+1];\n    for(long i=0;i<=n;i++) {\n        fibonacci[i]=1;\n\
    \    }\n    fibonacci[n]=3;\n    for(int i=0;i<n;i++) {\n        fibonacci[i+1]+=fibonacci[i]+fibonacci[i+2];\n\
    \    }\n    std::vector<long> ans;\n    for(int i=0;i<=n;i++) {\n        ans.push_back(fibonacci[i]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpa_8acfvr: /tmp/tmpa_8acfvr.cpp:35: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if (n == 0) return res;\n    if (n ==\
    \ 1 || n == 2) res.push_back(3);\n    if (n % 2 == 0) {\n        long a = tri(n\
    \ - 1) + tri(n - 2);\n        long b = tri(n + 1) + tri(n);\n        res.push_back(a);\n\
    \        res.push_back(b);\n        res.push_back(a + b);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphartc_e_.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmphartc_e_.cpp:23:29: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |         long a = tri(n - 1) + tri(n - 2);\n      |    \
    \              ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                     |        \
    \    |\n      |                     |            vector<[...]>\n      |      \
    \               vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphartc_e_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphartc_e_.cpp:23:40:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |         long a = tri(n - 1) + tri(n - 2);\n      |                 \
    \                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    long tri_1 = 0, tri_2 = 1, tri_3 = 2;\n\
    \    while (n > 1) {\n        if (n % 2 == 0) {\n            tri_3 = tri_1 + tri_2;\n\
    \            ans.push_back(tri_3);\n            tri_2 = tri_3;\n        } else\
    \ {\n            tri_1 = tri_2 + tri_3;\n            ans.push_back(tri_1);\n \
    \           tri_3 = tri_1;\n        }\n        n = n - 1;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmpcn2uuhse: /tmp/tmpcn2uuhse.cpp:37: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    for(long i=0;i<n;i++) {\n        if (i%2==0)\
    \ {\n            res.push_back(3);\n        }\n        else {\n            res.push_back(1\
    \ + n/2);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmpgnacd61n: /tmp/tmpgnacd61n.cpp:32: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n  assert(n>=0);\n  std::vector<long> res;\n  if(n==0)\n    res.push_back(3);\n\
    \  else if(n==1)\n    res.push_back(1);\n  else\n  {\n    res.push_back(tri(n\
    \ - 1) + tri(n - 2));\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7v8lxccx.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp7v8lxccx.cpp:27:30: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   27 |     res.push_back(tri(n - 1) + tri(n - 2));\n      |  \
    \                 ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                      |    \
    \        |\n      |                      |            vector<[...]>\n      | \
    \                     vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7v8lxccx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7v8lxccx.cpp:27:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   27 |     res.push_back(tri(n - 1) + tri(n - 2));\n      |               \
    \                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_a"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n > 0);\n    std::vector<long> ans;\n    ans.push_back(n);\n\
    \    if (n&1) ans.push_back(n*3);\n    for (int i=1; i<n; i++) {\n        ans.push_back(ans[i-1]\
    \ + ans[i-2] + ans[i+1]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n \
    \   assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0ofhwuk3: /tmp/tmp0ofhwuk3.cpp:30: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n\tlong sum = 0;\n\tstd::vector<long> sequence;\n\tstd::iota(sequence.begin(),\
    \ sequence.end(), 3);\n\tfor (long i = 0; i < n; i++) {\n\t\tauto current_sum\
    \ = sum + sequence[i];\n\t\tif (current_sum < n) {\n\t\t\tsequence.push_back(i);\n\
    \t\t\tsum += (i < (n - 1)) ? i + 1 : i + 2;\n\t\t} else {\n\t\t\tsequence.push_back(i);\n\
    \t\t\tsum += (i < (n - 1)) ? i + 2 : i + 3;\n\t\t}\n\t}\n\treturn sequence;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    long ans2 = 0;\n    long temp = 0;\n \
    \   if(n<3) return ans;\n    for(int i=0;i<n+2;i++){\n        ans2 = ans2 + temp;\n\
    \        temp = temp + i;\n        ans.push_back(temp);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "tmp71_vfw6r: /tmp/tmp71_vfw6r.cpp:32: int main(): Assertion `candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    assert(n >= 0);\n    if (n == 1) {\n        return { 1 };\n    } else\
    \ if (n == 2) {\n        return { 1, 3 };\n    } else {\n        std::vector<long>\
    \ res;\n        auto fib = [&res](int n) -> std::vector<long> {\n            if\
    \ (n == 1) {\n                res.push_back(1);\n                return res;\n\
    \            }\n            std::vector<long> res;\n            res.push_back(1);\n\
    \            res.push_back(n/2);\n            if (n % 2 == 0) {\n            \
    \    for (int i = 2; i < n; i++) {\n                    res.push_back(res[res.size()-1]\
    \ + res[res.size()-2]);\n                }\n            }\n            return\
    \ res;\n        };\n        for (int i = 3; i < n; i++) {\n            std::size_t\
    \ size = res.size();\n            std::advance(fib(size-1), res.size() - size);\n\
    \            auto fibonacci = fib(i);\n            std::advance(fibonacci, res.size()\
    \ - 1);\n            std::copy(fibonacci.begin(), fibonacci.end(), std::back_inserter(res));\n\
    \        }\n        return res;\n    }\n}\nint main() {\n    auto candidate =\
    \ tri;\n    assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n   \
    \ assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n    assert(candidate((6)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n    assert(candidate((7)) ==\
    \ (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20))\
    \ == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80,\
    \ 9, 99, 10, 120, 11})));\n    assert(candidate((0)) == (std::vector<long>({1})));\n\
    \    assert(candidate((1)) == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp9k2vtzc.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpp9k2vtzc.cpp:43:56: error: no matching function for call\
    \ to \u2018advance(std::vector<long int>, std::vector<long int>::size_type)\u2019\
    \n   43 |             std::advance(fib(size-1), res.size() - size);\n      | \
    \                                                       ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:66,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpp9k2vtzc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator_base_funcs.h:202:5:\
    \ note: candidate: \u2018void std::advance(_InputIterator&, _Distance) [with _InputIterator\
    \ = std::vector<long int>; _Distance = long unsigned int]\u2019 <near match>\n\
    \  202 |     advance(_InputIterator& __i, _Distance __n)\n      |     ^~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator_base_funcs.h:202:5:\
    \ note:   conversion of argument 1 would be ill-formed:\n/tmp/tmpp9k2vtzc.cpp:43:29:\
    \ error: cannot bind non-const lvalue reference of type \u2018std::vector<long\
    \ int>&\u2019 to an rvalue of type \u2018std::vector<long int>\u2019\n   43 |\
    \             std::advance(fib(size-1), res.size() - size);\n      |         \
    \                 ~~~^~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_facets.h:48,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_ios.h:37,\n\
    \       "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    // Base case \n    if (n < 3) {\n    \
    \    res.push_back(n);\n        return res;\n    }\n    // Recursive call\n  \
    \  res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return res;\n}\n\
    int main() {\n    auto candidate = tri;\n    assert(candidate((3)) == (std::vector<long>({1,\
    \ 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1, 3, 2, 8, 3})));\n\
    \    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8, 3, 15})));\n   \
    \ assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4})));\n   \
    \ assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24})));\n\
    \    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5})));\n\
    \    assert(candidate((9)) == (std::vector<long>({1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35})));\n    assert(candidate((20)) == (std::vector<long>({1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n    assert(candidate((0))\
    \ == (std::vector<long>({1})));\n    assert(candidate((1)) == (std::vector<long>({1,\
    \ 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0uxuvn33.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp0uxuvn33.cpp:26:30: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   26 |     res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \      |                   ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                  \
    \    |            |\n      |                      |            vector<[...]>\n\
    \      |                      vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0uxuvn33.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp0uxuvn33.cpp:26:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   26 |     res.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n      |  \
    \                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> ans;\n    ans.push_back(3);\n    if(n == 0) ans.push_back(0);\n\
    \    else if(n == 1) ans.push_back(1);\n    else {\n        ans.push_back(n +\
    \ 1 - (n & 1));\n        ans.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn0q_zzil.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpn0q_zzil.cpp:25:34: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   25 |         ans.push_back(tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1));\n      |                       ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |       \
    \                   |            |\n      |                          |       \
    \     vector<[...]>\n      |                          vector<[...]>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpn0q_zzil.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpn0q_zzil.cpp:25:45:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   25 |         ans.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n     \
    \ |                                             ^\nIn file included from /shared/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> result;\n    if (n == 1) result.push_back(1);\n\
    \    if (n == 2) result.push_back(3);\n    if (n % 2 == 0) result.push_back(tri(n\
    \ / 2));\n    result.push_back(tri(n - 1) + tri(n - 2) + tri(n + 1));\n    return\
    \ result;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_wg_ka7c.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmp_wg_ka7c.cpp:22:48: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::vector<long int>)\u2019\n   22\
    \ |     if (n % 2 == 0) result.push_back(tri(n / 2));\n      |               \
    \                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_wg_ka7c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>\u2019\
    \ to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019\
    }\n 1200 |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n\
    /tmp/tmp_wg_ka7c.cpp:23:33: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long int>\u2019\
    )\n   23 "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    if (n <= 1) return std::vector<long>(1, n);\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1);\n}\nint main() {\n    auto candidate = tri;\n   \
    \ assert(candidate((3)) == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4))\
    \ == (std::vector<long>({1, 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjdmvyx8m.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpjdmvyx8m.cpp:20:23: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   20 |     return tri(n - 1) + tri(n - 2) + tri(n + 1);\n    \
    \  |            ~~~~~~~~~~ ^ ~~~~~~~~~~\n      |               |            |\n\
    \      |               |            vector<[...]>\n      |               vector<[...]>\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjdmvyx8m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpjdmvyx8m.cpp:20:34:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   20 |     return tri(n - 1) + tri(n - 2) + tri(n + 1);\n      |          \
    \                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \           "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Everyone knows Fibonacci\
    \ sequence, it was studied deeply by mathematicians in \n// the last couple centuries.\
    \ However, what people don't know is Tribonacci sequence.\n// Tribonacci sequence\
    \ is defined by the recurrence:\n// tri(1) = 3\n// tri(n) = 1 + n / 2, if n is\
    \ even.\n// tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n// For\
    \ example:\n// tri(2) = 1 + (2 / 2) = 2\n// tri(4) = 3\n// tri(3) = tri(2) + tri(1)\
    \ + tri(4)\n// = 2 + 3 + 3 = 8 \n// You are given a non-negative integer number\
    \ n, you have to a return a list of the \n// first n + 1 numbers of the Tribonacci\
    \ sequence.\n// Examples:\n// tri(3) = [1, 3, 2, 8]\nstd::vector<long> tri(long\
    \ n) {\n    std::vector<long> res;\n    if(n<3){\n        res.push_back(3);\n\
    \        res.push_back(1);\n        res.push_back(2);\n        res.push_back(8);\n\
    \        return res;\n    }\n    if(n & 1){\n        res.push_back(3);\n     \
    \   res.push_back(1);\n        for(long i=2;i*i<=n;i++){\n            res.push_back(tri(i-1)+tri(i)+tri(i+1));\n\
    \        }\n    }\n    else{\n        res.push_back(3);\n        for(long i=2;i*i<=n;i++){\n\
    \            res.push_back(tri(i-1)+tri(i)+tri(i+1));\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = tri;\n    assert(candidate((3))\
    \ == (std::vector<long>({1, 3, 2, 8})));\n    assert(candidate((4)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3})));\n    assert(candidate((5)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15})));\n    assert(candidate((6)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4})));\n    assert(candidate((7)) == (std::vector<long>({1, 3, 2, 8, 3,\
    \ 15, 4, 24})));\n    assert(candidate((8)) == (std::vector<long>({1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})));\n    assert(candidate((9)) == (std::vector<long>({1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5, 35})));\n    assert(candidate((20)) == (std::vector<long>({1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})));\n\
    \    assert(candidate((0)) == (std::vector<long>({1})));\n    assert(candidate((1))\
    \ == (std::vector<long>({1, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy7d7mkhu.cpp: In function \u2018std::vector<long int> tri(long\
    \ int)\u2019:\n/tmp/tmpy7d7mkhu.cpp:31:35: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   31 |             res.push_back(tri(i-1)+tri(i)+tri(i+1));\n\
    \      |                           ~~~~~~~~^~~~~~~\n      |                  \
    \            |        |\n      |                              |        vector<[...]>\n\
    \      |                              vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpy7d7mkhu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpy7d7mkhu.cpp:31:41:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   31 |             res.push_back(tri(i-1)+tri(i)+tri(i+1));\n      |      \
    \                                   ^\nIn file included from /shared/centos7/gcc/9.2.0-sk"
  exit_code: 1
  status: SyntaxError
