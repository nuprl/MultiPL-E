name: HumanEval_135_can_arrange
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns\
  \ the largest index of an element which\n// is not greater than or equal to the\
  \ element immediately preceding it. If\n// no such element exists then return -1.\
  \ The given array will not contain\n// duplicate values.\n// Examples:\n// can_arrange([1,2,4,3,5])\
  \ = 3\n// can_arrange([1,2,3]) = -1\nlong can_arrange(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({1,\
  \ 2, 4, 3, 5}))) == (3));\n    assert(candidate((std::vector<long>({1, 2, 4, 5})))\
  \ == (-1));\n    assert(candidate((std::vector<long>({1, 4, 2, 5, 6, 7, 8, 9, 10})))\
  \ == (2));\n    assert(candidate((std::vector<long>({4, 8, 5, 7, 3}))) == (4));\n\
  \    assert(candidate((std::vector<long>())) == (-1));\n}\n"
completions: ["    // Your code here\n    long n = arr.size();\n    long sum = 0;\n\
    \    for(long i = 0; i < n; i++){\n        sum += arr[i];\n        long max =\
    \ i;\n        for(long j = i + 1; j < n; j++){\n            if(arr[j] > arr[i]){\n\
    \                max = j;\n                break;\n            }\n        }\n\
    \        if(max != i)\n            return -1;\n    }\n    return sum;", "    //\
    \ write your code in C/C++11/C++14/\n    long ans = -1, i, n = arr.size();\n \
    \   int cnt = 0;\n    \n    // Loop through the given array\n    for(i = 0; i\
    \ < n; i++) {\n        // If this element is greater than the current largest\
    \ element\n        // then set it to the current largest element\n        if(arr[i]\
    \ > arr[ans]) {\n            ans = i;\n        }\n        // If the current element\
    \ equals the current largest element then\n        // increment the count of the\
    \ number of the current largest element\n        // and set the current largest\
    \ element to current element\n        else if(arr[i] == arr[ans]) {\n        \
    \    cnt += 1;\n            ans = i;\n        }\n    }\n    \n    // Return the\
    \ answer if the array contains more than 1 element and ans is\n    // equal to\
    \ -1 otherwise return the value of cnt\n    return cnt > 1 ? ans : -1;", "  if\
    \ (arr.size() <= 1) return -1;\n  int n = 0;\n  long m = arr[0];\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] < m) {\n      if (arr[i] == m)\
    \ return i;\n      return -1;\n    }\n    if (arr[i] > m)\n      m = arr[i];\n\
    \  }\n  return n;", "    int n = arr.size();\n    if (n <= 1)\n        return\
    \ -1;\n    long i = 1;\n    long prev = arr[0];\n    for (int i = 0; i < n; ++i)\
    \ {\n        if (arr[i] >= prev)\n            break;\n        prev = arr[i];\n\
    \    }\n    if (i == n)\n        return -1;\n    return i;", "    // Code here\
    \ \n    long left = 0;\n    long right = arr.size()-1;\n    while ((left <= right))\
    \ {\n        // Code here\n    }\n    return -1;", "    // your code goes here\n\
    \    long res = 0;\n    long x = 0, y = 0;\n    for (auto &i : arr) {\n      \
    \  if (i == x) {\n            ++y;\n        } else {\n            x = i;\n   \
    \         y = 1;\n        }\n    }\n    res = arr[y];\n    return res;", "   \
    \ // code here\n    long ans=-1;\n    long m=arr.size()-1;\n    long n=0;\n  \
    \  int t=-1;\n    for(int i=0;i<m;i++){\n        t=-1;\n        for(int j=i;j<m;j++){\n\
    \            if(arr[j]<=arr[i]){\n                t++;\n            }\n      \
    \  }\n        if(t>ans){\n            ans=t;\n        }\n    }\n    return ans;",
  "    if (arr.size() == 0) {\n        return -1;\n    }\n    long ans = 0;\n    long\
    \ max = arr[0];\n    for (auto ele : arr) {\n        if (ele > max) {\n      \
    \      ans = -1;\n            break;\n        } else if (ele == max) {\n     \
    \       ans += 1;\n        } else {\n            ans += 0;\n        }\n      \
    \  max = ele;\n    }\n    return ans;", "    if (arr.empty())\n        return\
    \ -1;\n    int n = arr.size();\n    for (int i = 0; i < n; ++i) {\n        int\
    \ j = i;\n        while (j > 0 && arr[j-1] >= arr[j])\n            --j;\n    \
    \    if (j == i)\n            return i;\n    }\n    return -1;", "    // code\
    \ here\n    long m = 0, n = arr.size();\n    for (int i = 0; i < n - 1; i++) {\n\
    \        if (arr[i] <= arr[i + 1]) {\n            m = i;\n            break;\n\
    \        }\n    }\n    long ans = -1;\n    long temp;\n    if (m >= 0) {\n   \
    \     for (int j = n; j >= 0; j--) {\n            if (j < m - 1) {\n         \
    \       temp = arr[j];\n                arr[j] = arr[j + 1];\n               \
    \ arr[j + 1] = temp;\n            }\n            if (arr[j] > arr[m])\n      \
    \          ans = j;\n            break;\n        }\n    }\n    return ans;", " \
    \   long ans = -1;\n    long max_val = arr[0];\n    long idx = 1;\n    for(int\
    \ i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            ans = idx;\n        }\n        else if(arr[i] == max_val)\
    \ {\n            ans = idx;\n        }\n        idx += 1;\n    }\n    return ans;",
  "  // code here\n  return 0;", "    int n = arr.size();\n    if (n <= 1) return\
    \ -1;\n    if (n == 2 || n == 3) return 0;\n    long maxI = n-1;\n    long maxJ\
    \ = n;\n    while ((maxJ >= 1) && (arr[maxI] > arr[maxJ])) {\n        maxI--;\n\
    \        maxJ--;\n    }\n    bool can = false;\n    long maxI2 = maxI-1;\n   \
    \ long maxJ2 = maxJ;\n    while ((maxJ2 >= 1) && (arr[maxI2] < arr[maxJ2])) {\n\
    \        maxI2--;\n        maxJ2--;\n    }\n    // If maxJ is right at the middle\
    \ then arr[maxI2] is greater than or equal\n    // to arr[maxJ2] and the loop\
    \ will terminate because maxI2 <= maxJ2.\n    while (!can) {\n        maxI2--;\n\
    \        maxJ2--;\n        if (maxI2 <= maxJ2) {\n            can = true;\n  \
    \          if (maxI2 == 0 || arr[maxI2] <= arr[maxJ2] && arr[maxI2] == arr[maxJ2])\
    \ return maxI2;\n        }\n    }\n    return -1;", "    long maxIt = -1;\n  \
    \  for (long i = 1; i < arr.size(); i++) {\n        if (arr[i - 1] >= arr[i])\
    \ {\n            maxIt = i;\n        }\n    }\n    return maxIt;", "  std::sort(arr.begin(),\
    \ arr.end());\n  // If there is an element in arr which is greater than the current\
    \ largest\n  // element then we can say that we can arrange the numbers in arr\
    \ such that\n  // the largest element is not greater than the current largest\
    \ element.\n  // If no such element exists then we can return -1\n  for (size_t\
    \ i = 0; i < arr.size(); i++) {\n    if (arr[i] > arr[i + 1]) {\n      return\
    \ i;\n    }\n  }\n  return -1;", "    long ans = -1;\n    for (long i = 0; i <\
    \ arr.size() - 1; ++i) {\n        // Find the largest index j such that arr[j]\
    \ > arr[i]\n        for (long j = i + 1; j < arr.size(); ++j) {\n            if\
    \ (arr[j] <= arr[i]) break;\n        }\n        if (j < arr.size()) {\n      \
    \      // arr[j] > arr[i] so arr[j] is not greater than arr[i], so\n         \
    \   // arr[j] == arr[i]. Set the answer to be arr[j].\n            ans = arr[j];\n\
    \        }\n    }\n    return ans;", "  // your code goes here\n  long res = -1;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (i > 0 && (arr[i - 1] < arr[i]))\
    \ {\n      res = i;\n    }\n  }\n  return res;", "    // code here\n    return\
    \ -1;", "  int k = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long l =\
    \ 0;\n    for (int j = i; j > 0; j--) {\n      if (arr[j] < arr[j-1]) l = j;\n\
    \    }\n    if (arr[i] > arr[l]) k = i;\n  }\n  return k;", "    // Code goes\
    \ here\n    return 0;", "    long ans = -1;\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        for (size_t j = i + 1; j < arr.size(); j++) {\n            long\
    \ k = arr[i];\n            long l = arr[j];\n            if (k < l)\n        \
    \        k = l;\n            if (k > ans) {\n                ans = k;\n      \
    \      }\n        }\n    }\n    return ans;", "    int n = arr.size();\n    if\
    \ (n < 2) {\n        return -1;\n    }\n    long curr = arr[0], max = arr[0];\n\
    \    for (long i = 1; i < n; i++) {\n        if (arr[i] > max) {\n           \
    \ max = arr[i];\n        }\n        else if (arr[i] > curr) {\n            max\
    \ = curr;\n        }\n        else {\n            // found a duplicate\n     \
    \       return -1;\n        }\n        curr = max;\n    }\n    return max;", " \
    \   // code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n    // Code here\n    // Code here\n\
    \    // Code here\n    // Code here\n    // Code here\n    // Code here\n    //\
    \ Code here\n    // Code here\n    // Code here\n    // Code here\n    // Code\
    \ here\n    // Code here\n    // Code here\n", "    long ans = -1;\n    long n\
    \ = arr.size();\n    for (long i = 0; i < n; i++) {\n        long left = arr[i];\n\
    \        long right = arr[0];\n        for (long j = i + 1; j <n; j++) {\n   \
    \         if (arr[j] >= left) {\n                left = arr[j];\n            \
    \    right = arr[0];\n            }\n        }\n        if (right >= left) {\n\
    \            ans = i;\n            break;\n        }\n    }\n    return ans;",
  "\tlong largest = -std::numeric_limits<long>::max();\n\tlong index = 0;\n\tfor (size_t\
    \ i = 0; i < arr.size(); ++i) {\n\t\tif (arr[i] >= largest) {\n\t\t\tindex = i;\n\
    \t\t\tlargest = arr[i];\n\t\t}\n\t}\n\treturn index;", "    long ans = -1;\n \
    \   int cur = 0;\n    long index = 0;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > arr[cur]) {\n            index = i;\n            cur\
    \ = i;\n        }\n    }\n    if (cur != -1) {\n        ans = index;\n    }\n\
    \    return ans;", "    int i, j = 0, m = 0;\n    for(i = 0; i < arr.size(); ++i)\
    \ {\n        long x = arr[i];\n        // Check if the element which is greater\
    \ than x is greater than x.\n        if(arr[j] > x) {\n            m = j;\n  \
    \          j = i;\n        } else\n        // If x is greater than arr[j], then\
    \ we know that the element before\n        // x is greater than x\n        if(x\
    \ > arr[j]) {\n            m = j;\n        }\n    }\n    if(m != arr.size() -\
    \ 1) {\n        return -1;\n    }\n    return m;", "    long max = -1;\n    long\
    \ indx = arr.size() - 1;\n    while(indx > 0) {\n        if(arr[indx] >= arr[max])\
    \ max = indx;\n        --indx;\n    }\n    return max;", "    // Write your code\
    \ here\n    return -1;", "    // Your code here\n    return -1;", "    std::set<long>\
    \ set(arr.begin(), arr.end());\n    long ans = set.count(arr[0]);\n    for (auto\
    \ i : arr) {\n        if (set.count(i) < 0) {\n            ans = -1;\n       \
    \ }\n    }\n    return ans;", "    int l=0;\n    long ans = -1;\n    for (long\
    \ i = arr.size() - 1; i >= 0; i--) {\n        for (long j = 0; j <= i; j++)\n\
    \            if (arr[j] <= arr[i]) break;\n        if (j == i) // if all elements\
    \ are greater than or equal to this value\n            ans = i;\n    }\n    return\
    \ ans;", "    long n = arr.size();\n    long m = (n + 1) >> 1;\n    long a = arr[m]\
    \ - arr[m-1];\n    long b = arr[n-1];\n    if (a > b) {\n        return m;\n \
    \   }\n    return -1;", "    long n = arr.size();\n    long result = 0;\n    int\
    \ left = n-1;\n    while(left > 0) {\n        if(arr[left] <= arr[left-1]) {\n\
    \            result = arr[left-1];\n        } else {\n            result = -1;\n\
    \            break;\n        }\n        left = left - 1;\n    }\n    return result;",
  "    // your code goes here\n    long ans = 0;\n    long first=INT_MAX;\n    long\
    \ second=INT_MAX;\n    for(auto i : arr){\n        if(i>second){\n           \
    \ second = i;\n            ans=first;\n        }\n        else{\n            first\
    \ = i;\n        }\n    }\n    return ans;", "    long max_index = 0;\n    for\
    \ (auto i = arr.begin() + 1; i + 1 < arr.end(); i++) {\n        if (arr[i] > arr[i\
    \ + 1]) {\n            max_index = i;\n        }\n    }\n    return max_index;",
  "\t// Write your code here\n\tlong i,j,largest=0,count=0;\n\tfor(i=0;i<arr.size();i++){\n\
    \t\tfor(j=i;j<arr.size();j++){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t\telse{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(!count){\n\t\t\tbreak;\n\
    \t\t}\n\t\tlargest=i;\n\t\tcount=0;\n\t}\n\treturn largest;", "    long largest\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] >=\
    \ largest) {\n            largest = i;\n        }\n    }\n    return largest;",
  "    // Write your code here\n    int maxVal = -1;\n    int index = 0;\n    for(int\
    \ i=0;i<arr.size();i++){\n        if(arr[i] >= arr[i+1]){\n            index++;\n\
    \        }\n        if(arr[i] > maxVal){\n            maxVal = arr[i];\n     \
    \   }\n    }\n    return maxVal;", "    assert(arr.size() > 0);\n    int max_index\
    \ = 0;\n    for (long i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] >=\
    \ arr[i + 1]) {\n            max_index = i;\n        } else {\n            return\
    \ -1;\n        }\n    }\n    return max_index;", "    // code here\n    if (arr.size()\
    \ <= 1)\n        return -1; // -1 means there is no such element\n    long n =\
    \ arr.size() - 1;\n    long largest = arr[0];\n    for (long i = 1, j = 0; i <\
    \ n; i++, j++) {\n        if (arr[i] > largest)\n            break;\n        if\
    \ (arr[i] != j)\n            break;\n    }\n    if (i == n)\n        return -1;\
    \ // -1 means there is no such element\n    else\n        return j;", "    long\
    \ long ret = 0;\n    long long lo = 0, hi = arr.size() - 1;\n    while (lo <=\
    \ hi) {\n        long mid = (lo + hi) / 2;\n        if (arr[mid] > arr[lo]) {\n\
    \            hi = mid - 1;\n        } else {\n            lo = mid + 1;\n    \
    \    }\n    }\n    if (lo <= hi) {\n        ret = lo;\n    } else {\n        ret\
    \ = -1;\n    }\n    return ret;", "    // Do not write main() function.\n    //\
    \ Do not read input, instead use the arguments to the function.\n    // Do not\
    \ print the output, instead return values as specified\n    // Still have a doubt.\
    \ Checkout www.interviewbit.com/pages/sample_codes/ for more details\n    long\
    \ largestIndex = -1;\n    long currentIndex = -1;\n    long largest = arr[0];\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > largest) {\n\
    \            largest = arr[i];\n            currentIndex = i;\n        }\n   \
    \ }\n    if (largestIndex == currentIndex) {\n        largestIndex = -1;\n   \
    \ }\n    return largestIndex;", "    if (arr.size() == 0) {\n        return -1;\n\
    \    }\n    long maxSize = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] > maxSize) {\n            maxSize = arr[i];\n        }\n \
    \   }\n    return maxSize;", "    long ans = -1;\n    for (long i = 1; i < arr.size();\
    \ i++)\n        if (arr[i] >= arr[i - 1])\n            ans = i;\n    return ans;",
  "    // code here\n    long max_idx = -1, prev_val = -1, curr_val = 0, idx = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (curr_val > arr[i]) {\n\
    \            idx = i;\n            prev_val = curr_val;\n            curr_val\
    \ = arr[i];\n        }\n    }\n    if (max_idx == -1) {\n        max_idx = idx;\n\
    \    }\n    return max_idx;", "    // Write your code here.\n    // The idea is\
    \ use unordered_set and unordered_map.\n    // unordered_set is used for store\
    \ unique element and unordered_map is\n    // used for store element which key\
    \ is different from others.\n    unordered_set<long> unique;\n    unordered_map<long,\
    \ long> key;\n    for (auto &it : arr) {\n        // if it is unique, we will\
    \ store it\n        if (unique.find(it) == unique.end()) {\n            unique.insert(it);\n\
    \        }\n        // if it is different, we will store it with different key\n\
    \        else if (key[it] != it) {\n            key.insert({it, it});\n      \
    \  }\n    }\n    if (unique.size() == arr.size()) {\n        return 0;\n    }\
    \ else {\n        return -1;\n    }", "    long ans = 0;\n    long max_val = 0;\n\
    \    bool flag = true;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max_val) {\n            ans = i;\n            max_val = arr[i];\n\
    \        }\n        else if (arr[i] == max_val) {\n            flag = false;\n\
    \        }\n    }\n    if (flag == true) {\n        ans = ans;\n    }\n    else\
    \ {\n        ans = -1;\n    }\n    return ans;", "    // Write your code here\n\
    \    long start=0;\n    long end=0;\n    long largest=0;\n    for(long i=0;i<arr.size();i++){\n\
    \        if((i>0 & arr[i]>arr[i-1])){\n            start=i;\n        }\n     \
    \   else{\n            end=i;\n        }\n        if(end>largest){\n         \
    \   largest=end;\n        }\n    }\n    return largest;", "    // Write your code\
    \ here\n    if (arr.size() == 0)\n        return -1;\n    long ans = 0, last =\
    \ arr[0];\n    for (long i: arr)\n        if (i >= last)\n            last = i;\n\
    \        ans = max(ans, i - last);\n    return ans;", "    long ans = -1;\n  \
    \  long max_val = 0;\n    for (auto val : arr) {\n        if (val <= max_val)\
    \ {\n            ans = val + 1;\n        }\n        else {\n            max_val\
    \ = val;\n        }\n    }\n    return ans;", "    // code here\n    // assert(arr[0]\
    \ <= arr[arr.size()-1] && \"Array cannot contain duplicates\");\n    long largest\
    \ = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i - 1] >\
    \ arr[i]) {\n            if (largest == -1) largest = i;\n            else largest\
    \ = largest;\n        }\n    }\n    return largest;", "    // Your code here\n\
    \    long n = arr.size();\n    long prev[n];\n    int count = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        prev = i;\n        long curr = 0;\n        for\
    \ (int j = i; j < n; j++) {\n            curr += arr[j];\n            if (curr\
    \ > prev) {\n                prev = curr - arr[j];\n                count++;\n\
    \            }\n        }\n    }\n\n    return count;", "  // Your code here\n\
    \    long ans = -1;\n    int cnt=0;\n    for (auto &e: arr) {\n      if (e <=\
    \ arr[ans]) {\n        ans = cnt;\n        cnt = 0;\n      } else {\n        cnt++;\n\
    \      }\n    }\n    return ans;", "\tint n = arr.size();\n\tlong largest = -1;\n\
    \tfor (int i = 1; i < n; i++) {\n\t\tif (arr[i] <= arr[i-1]) {\n\t\t\tlargest\
    \ = i;\n\t\t}\n\t}\n\treturn largest;", "    if (arr.size() == 0)\n        return\
    \ -1;\n    // Find the first element larger than the one before the largest\n\
    \    long largest_index = -1;\n    long largest_value = arr[0];\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] > largest_value) {\n     \
    \       largest_value = arr[i];\n            largest_index = i;\n        }\n \
    \   }\n    long left_index = largest_index - 1;\n    long right_index = largest_index;\n\
    \    long new_largest_value = largest_value;\n    long new_largest_index = largest_index;\n\
    \    // Keep looping till the two index values do not match\n    while ((left_index\
    \ != right_index) && (left_index != -1)) {\n        long left_value = arr[left_index];\n\
    \        long right_value = arr[right_index];\n        if ((left_value <= new_largest_value)\
    \ && (right_value >= new_largest_value)) {\n            new_largest_value = left_value;\n\
    \            new_largest_index = left_index;\n        }\n        left_index--;\n\
    \        right_index--;\n    }\n    return new_largest_index;", "    if (arr.empty())\
    \ {\n        return -1;\n    }\n    auto it = arr.begin();\n    auto last = it;\n\
    \    auto prev = it;\n    for (auto iter = arr.end() - 1; iter >= arr.begin();\
    \ iter--)\n        if (*iter <= *prev) last = iter;\n        else prev = iter;\n\
    \    if (it == arr.begin()) return -1;\n    if (prev == it) return -1;\n    return\
    \ last;", "    long k = 0;\n    long i = arr.size() - 1;\n    while (i != -1)\
    \ {\n        if (arr[i] <= arr[k]) {\n            k = k + 1;\n        }\n    \
    \    else {\n            break;\n        }\n        i = i - 1;\n    }\n    if\
    \ (i != -1) {\n        return i;\n    }\n    return -1;", "    // Code here will\
    \ be tested and accepted into practice.\n    int n = arr.size();\n    long result\
    \ = 0;\n    long max_val = arr[0];\n    for (int i = 1; i <= n; i++) {\n     \
    \   if (arr[i] <= max_val) {\n            result = i;\n            max_val = arr[i];\n\
    \        }\n    }\n    return result;", "\tlong result = 0;\n\tlong current_max\
    \ = INT_MIN;\n\tfor(int i = 0; i < arr.size(); i++)\n\t{\n\t\tif (arr[i] > current_max)\n\
    \t\t{\n\t\t\tresult = i;\n\t\t\tcurrent_max = arr[i];\n\t\t}\n\t}\n\treturn result;",
  "    // Your code goes here\n    int maxIdx = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] < arr[maxIdx]) {\n            maxIdx = i;\n     \
    \   }\n    }\n    return maxIdx;", "    long int largest = arr[0];\n    long int\
    \ index = 0;\n    for (long int i = 0; i < arr.size(); i++) {\n        // If the\
    \ current element is not greater than or equal to\n        // the previous element\
    \ then update the largest and index\n        if (arr[i] <= arr[largest]) {\n \
    \           largest = i;\n        }\n    }\n    return largest;", "    // Write\
    \ your code here\n    long ans=-1;\n    int i;\n    long long int max=-1000000000;\n\
    \    for(i=0;i<arr.size();i++)\n    {\n        if(arr[i]<max)\n        {\n   \
    \         max=arr[i];\n            ans=i;\n        }\n    }\n    return ans;",
  "    int n = arr.size();\n    // Initialize prev to -1\n    int prev = -1;\n   \
    \ // Initialize i to 0\n    int i = 0;\n    for (int j = 0; j < n - 1; j++) {\n\
    \        // If current element is greater than prev then set prev to current\n\
    \        // else set prev to current + 1\n        if (arr[j] > prev) {\n     \
    \       prev = arr[j];\n        } else {\n            prev = prev + 1;\n     \
    \   }\n        // If current element is greater than previous element then increment\n\
    \        // i else set i to 1\n        if (arr[j] > prev) {\n            i = i\
    \ + 1;\n        } else {\n            i = 1\n        }\n    }\n    return i;",
  "    // Your code goes here\n    assert(arr.size() == arr.capacity());\n    long\
    \ result = -1;\n    for (size_t i = 0; i < arr.size(); ++i) {\n        if (arr[i]\
    \ <= arr[i-1]) {\n            result += 1;\n            if (result == arr.size())\
    \ {\n                return i;\n            }\n        }\n    }\n    return -1;",
  "    long n = arr.size();\n    if (n == 0)\n        return -1;\n    long ans = 0;\n\
    \    long start = 0;\n    long end = n - 1;\n    long mid = n / 2;\n    while\
    \ (start <= end) {\n        long mid = start + (end - start) / 2;\n        if\
    \ (arr[mid] < arr[mid]) {\n            ans = mid;\n            end = mid - 1;\n\
    \        } else {\n            start = mid + 1;\n        }\n    }\n    if (ans\
    \ < n)\n        ans = n;\n    return ans;", "    long result = -1;\n    long max\
    \ = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] >=\
    \ max) {\n            result = i;\n            max = arr[i];\n        }\n    }\n\
    \    return result;", "    // code here\n    long low = 0, high = arr.size() -\
    \ 1, res = -1;\n    while (low < high) {\n        res = arr[low] > arr[high] ?\
    \ high : low;\n        if (res != low)\n            low = res;\n        res++;\n\
    \        high--;\n    }\n    return res;", "    int n = arr.size();\n    long\
    \ max = -1;\n    for (long i = 2; i <= n; i++) {\n        if (arr[i] >= arr[max])\n\
    \            max = i;\n    }\n    return max;", "    long long ans = -1LL;\n \
    \   long long curr = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n   \
    \     if (arr[i] > curr) {\n            ans = i;\n            curr = arr[i];\n\
    \        }\n    }\n    return ans;", "    long n = arr.size();\n    if (n == 0)\n\
    \        return -1;\n    // Create a map with key of element and value being number\
    \ of times.\n    std::map<long, long> cnt;\n    for (long i = 0; i < n; i++)\n\
    \        ++cnt[arr[i]];\n\n    long res = -1;\n    for (long i = 0; i < n; ++i)\
    \ {\n        if (arr.at(i) > res && cnt[arr.at(i)] == 1)\n            res = arr.at(i);\n\
    \    }\n\n    return res;", "    long n = arr.size();\n    // O(n) time and O(n)\
    \ space\n    if (n == 0) return -1;\n    long maxValue = 0;\n    for (long i =\
    \ 1; i < n; i++) {\n        if (arr[i] > arr[maxValue]) maxValue = i;\n    }\n\
    \    return maxValue;", "  long n = arr.size();\n  long ans = -1;\n  for (long\
    \ i = 1; i < n; ++i) {\n    if (arr[i] <= arr[i - 1]) {\n      long pos = i;\n\
    \      while (pos > 0 && arr[pos - 1] >= arr[i]) {\n        pos -= 1;\n      }\n\
    \      if (pos < n) {\n        ans = min(ans, i - pos);\n      }\n    }\n  }\n\
    \  return ans;", "    int n = arr.size();\n    int res = -1;\n    for (int i =\
    \ 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n            if\
    \ (arr[i] > arr[j]) {\n                long temp = arr[i];\n                arr[i]\
    \ = arr[j];\n                arr[j] = temp;\n                res = i;\n      \
    \          break;\n            }\n        }\n    }\n    return res;", "    long\
    \ l = 0, max_i = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ <= arr[l]) l = i;\n        if (arr[i] == arr[i]) max_i = i;\n    }\n    return\
    \ max_i;", "\tint n = (int) arr.size();\n\tfor (int i = 1; i < n; i++) {\n\t\t\
    if (arr[i] >= arr[i - 1]) {\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn 0;", "   \
    \ // code goes here\n    long ans = -1;\n    for(long i = 0; i < (long) arr.size()\
    \ - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            ans = i;\n     \
    \       break;\n        }\n    }\n    return ans;", "  // Write your code here\n\
    \  // Your code here", "    long ans = -1;\n    if (arr.empty())\n        return\
    \ -1;\n    std::sort(arr.begin(), arr.end());\n    // if arr[i - 1] can be arranged\
    \ using arr[i], then i can be arranged using\n    // arr[i-1]\n    for (int i\
    \ = 0; i < arr.size(); i++)\n    {\n        int j = i;\n        while (j > 0 &&\
    \ arr[j - 1] >= arr[j])\n        {\n            if (j == 0)\n                return\
    \ -1;\n            arr[j - 1] = arr[j];\n            j--;\n        }\n    }\n\
    \    long maxIndex = arr.size() - 1;\n    for (int i = 0; i < arr.size(); i++)\n\
    \    {\n        if (arr[i] > arr[maxIndex])\n        {\n            maxIndex =\
    \ i;\n        }\n    }\n    if (maxIndex != -1)\n        arr[maxIndex] = arr[arr.size()\
    \ - 1];\n    ans = arr.size() - 1;\n    return ans;", "    if(arr.size() == 0)\n\
    \        return -1;\n    long ans = -1;\n    long largest_index = -1;\n    for(long\
    \ i = 0; i < arr.size(); i++)\n        if(arr[i] < arr[i + 1])\n            largest_index\
    \ = i;\n        else\n            break;\n    if(largest_index == -1)\n      \
    \  return -1;\n    long count = 1;\n    for(long i = largest_index + 1; i < arr.size();\
    \ i++)\n        if(arr[i] == arr[i + 1])\n            count += 1;\n    else\n\
    \        count = arr.size() - largest_index;\n    if((count - 1) % (largest_index\
    \ + 1) != 0)\n        return -1;\n    ans = largest_index + 1;\n    return ans;",
  "    long result = -1;\n    long current_index = 0;\n    std::vector<long>::iterator\
    \ it;\n\n    while (current_index < arr.size()) {\n        it = std::upper_bound(arr.begin()\
    \ + current_index, arr.end(), arr[current_index]);\n        if (it == arr.end()\
    \ || (*it) != arr[current_index]) {\n            result = current_index;\n   \
    \     }\n        current_index++;\n    }\n\n    return result;", "    // code\
    \ here\n    long x = arr[0];\n    long y = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] <= x)\n            y=arr[i];\n        else if (arr[i]\
    \ > x)\n            x = arr[i];\n    }\n    if (y == arr[0])\n        return -1;\n\
    \    return y;", "    int i = 1;\n    while (i <= arr.size()) {\n        int j\
    \ = i;\n        while (j + 1 < arr.size() && arr[j + 1] > arr[j]) {\n        \
    \    j++;\n        }\n        if (j != i) {\n            return i - j;\n     \
    \   } else {\n            i++;\n        }\n    }\n    return -1;", "    // Your\
    \ code here\n    long ans = 0;\n    for(int i=1; i<arr.size(); i++)\n    {\n \
    \       if(arr[i-1]>=arr[i])\n        {\n            ans++;\n        }\n    }\n\
    \    return ans;", "    // code here\n    long n = arr.size();\n    long i = 0;\n\
    \    long maxi[n];\n    long m = i;\n    for(long j=0; j<n; ++j)\n    {\n    \
    \    if(arr[j]<=arr[m])\n        {\n            if(i!=j)\n            {\n    \
    \            maxi[j] = arr[i];\n            }\n        }\n        else{\n    \
    \        if(i!=j)\n            {\n                maxi[j] = arr[++m];\n      \
    \      }\n        }\n        ++i;\n    }\n    return maxi[0];", "    if (arr.empty()\
    \ || arr.size() == 1)\n        return -1;\n    long max_index = -1, index = arr[0];\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] > index) {\n \
    \           max_index = i;\n            index = arr[i];\n        }\n    }\n  \
    \  if (max_index == -1)\n        return -1;\n    return max_index;", "    // Write\
    \ your code here\n    long largest_index = -1;\n    long largest_val = -1;\n \
    \   for (int i = 0; i < arr.size(); i++) {\n        if (largest_val < arr[i])\
    \ {\n            largest_index = i;\n            largest_val = arr[i];\n     \
    \   }\n    }\n    return largest_index;", "    // your code goes here\n    long\
    \ i,j;\n    for(i=0;i<arr.size();i++)\n        for(j=i;j<arr.size();j++)\n   \
    \         if(i!=j && arr[j]>arr[i])\n                return -1;\n    return -1;",
  "  long ans = INT_MAX;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i]\
    \ >= ans) {\n      ans = arr[i];\n    }\n  }\n  return ans;", "  int n = arr.size();\n\
    \  long maxval = arr[0];\n  for (int i = 1; i < n; i++) {\n    if (arr[i] < maxval)\
    \ return -1;\n    maxval = max(maxval, arr[i]);\n  }\n  return maxval;", "   \
    \ int i = 0;\n    int j = arr.size();\n    long result = -1;\n    while (i !=\
    \ j) {\n        if (arr[i] >= arr[j]) {\n            if (result == -1) {\n   \
    \             result = i;\n            }\n            i++;\n        } else {\n\
    \            j--;\n        }\n    }\n    return result;", "    // code here\n\
    \    long long ans = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n  \
    \      if (arr[i] >= arr[i + 1])\n            continue;\n        if (ans < 0 ||\
    \ arr[i] > arr[ans])\n            ans = i;\n    }\n    if (ans < 0)\n        ans\
    \ = -1;\n    return ans;", "    assert(arr.size() > 0);\n    long ans = -1;\n\
    \    long max_val = arr[0];\n    long min_val = arr[0];\n\n    for (long i : arr)\
    \ {\n        if (max_val > i) {\n            max_val = i;\n        }\n       \
    \ if (min_val < i) {\n            min_val = i;\n        }\n    }\n\n    if (max_val\
    \ == min_val) {\n        for (long i : arr) {\n            if (i == max_val) {\n\
    \                ans = i;\n            }\n        }\n    } else {\n        for\
    \ (long i : arr) {\n            if (i > max_val && i <= min_val) {\n         \
    \       ans = i;\n                break;\n            }\n        }\n    }\n\n\
    \    return ans;", "    if(arr.empty()) return -1;\n    long ans = -1;\n    for(auto\
    \ it = arr.begin(); (it != arr.end()) && (ans < 0); it++) {\n        if((*it ==\
    \ ans) || (*it < ans)) ans = *it;\n    }\n    return ans;", "  // Your code here\n\
    \  return 0;", "    // write your code here\n    int x = arr[0];\n    int y =\
    \ arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if (x < arr[i])\
    \ {\n            x = arr[i];\n        }\n        if (arr[i] > y) {\n         \
    \   y = arr[i];\n        }\n    }\n    if (x > y) {\n        return -1;\n    }\n\
    \    return x;", "    if (arr.size() <= 1)\n        return -1;\n\n    auto begin\
    \ = arr.begin();\n    auto end = arr.end();\n    auto max_begin = begin;\n   \
    \ for (auto it = begin + 1; it != end; ++it) {\n        if (*it < max_begin->first)\n\
    \            max_begin = it;\n    }\n\n    auto max_end = max_begin + 1;\n   \
    \ if (max_end == end)\n        return -1;\n    if (max_end == arr.begin())\n \
    \       return max_end->second;\n\n    while (max_end != end && max_end != arr.begin())\
    \ {\n        if (max_end != arr.end() && max_end->first < max_end->second)\n \
    \           --max_end;\n        else\n            break;\n    }\n\n    if (max_end\
    \ == end)\n        return max_end->second;\n\n    long count = 0;\n    for (auto\
    \ it = begin + 1; it != max_end; ++it) {\n        if (it->second > max_end->second)\
    \ {\n            count = it->second - max_end->second + 1;\n            break;\n\
    \        }\n    }\n\n    return count;", "    int n = arr.size();\n    long max_elem\
    \ = arr[0];\n    int max_idx = -1;\n    for (int i = 1; i < n; i++) {\n      \
    \  if (max_elem > arr[i])\n            max_elem = arr[i];\n    }\n    return max_idx;",
  "    long max_idx = -1, ans = 0;\n    for(auto &el: arr) {\n        // Check if\
    \ this element is greater than max_idx and if so update max_idx\n        if(max_idx\
    \ == -1 || el > max_idx)\n            max_idx = el;\n        // If the current\
    \ element is greater than max_idx then this element\n        // can be placed\
    \ anywhere in the max_idx to max_idx+1 range\n        for(long i=0;i<=max_idx;i++)\n\
    \            if(el > i && el < max_idx+1)\n                break;\n        //\
    \ If this element can be placed anywhere in max_idx to max_idx+1 range\n     \
    \   // then move max_idx and ans variables to current location\n        if(el\
    \ >= max_idx && el >= ans)\n            ans = el;\n        // If there is no element\
    \ greater than max_idx then return -1\n        if(el >= max_idx)\n           \
    \ return -1;\n    }\n    return ans;", "    // Your code here\n    long max =\
    \ arr[0];\n    for (long index = 1; index < arr.size(); index++) {\n        if\
    \ (max < arr[index]) {\n            max = arr[index];\n        }\n    }\n    return\
    \ max;", "    // Complete this function\n    long largest = INT_MIN;\n    long\
    \ index = 0;\n    for (auto &elem : arr) {\n        if (elem <= largest && elem\
    \ > 0)\n            index = elem-1;\n        if (elem > largest)\n           \
    \ largest = elem;\n    }\n    return index;", "  if (arr.size() == 0 || arr.size()\
    \ == 1) {\n    return -1;\n  }\n\n  long max = std::numeric_limits<long>::min();\n\
    \  long min = 0;\n  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] >\
    \ max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n\
    \    }\n  }\n  if (max == min) {\n    return -1;\n  }\n  return max;", "    long\
    \ res = -1;\n    std::vector<long>::iterator itr = arr.begin();\n    while (itr\
    \ != arr.end()) {\n        if (*itr <= res) {\n            res = *itr;\n     \
    \       itr++;\n        } else {\n            return -1;\n        }\n    }\n \
    \   return res;", "    // Write your code here\n    long maxIndex = -1;\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (maxIndex == -1 || (arr[i] >=\
    \ arr[maxIndex])) {\n            maxIndex = i;\n        }\n    }\n    return maxIndex;",
  "\tint size = arr.size();\n\tassert(size > 0);\n\tlong maxIndex = -1;\n\tfor (int\
    \ i = 0; i < size; i++) {\n\t\tif (arr[i] >= maxIndex) {\n\t\t\tif (arr[i] > maxIndex)\
    \ {\n\t\t\t\tmaxIndex = arr[i];\n\t\t\t}\n\t\t} else {\n\t\t\treturn -1;\n\t\t\
    }\n\t}\n\treturn maxIndex;", "    if(arr.size() <= 1){\n        return -1;\n \
    \   }\n    long index = 0;\n    long min = arr[0];\n    long max = 0;\n    for(auto\
    \ it=arr.begin();it!=arr.end();++it){\n        if(min > it){\n            index\
    \ = it;\n            min = it;\n        }\n        else if(max < it){\n      \
    \      max = it;\n        }\n    }\n    // If min is greater than max then no\
    \ element can satisfy the condition so\n    // return -1\n    if(min > max){\n\
    \        return -1;\n    }\n    return index;", "    long max_idx = -1, max_val\
    \ = -1;\n    long idx = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n  \
    \      max_idx = i;\n        max_val = arr[i];\n        for (idx = i + 1; idx\
    \ < arr.size(); idx++) {\n            if (arr[idx] > arr[i] && arr[idx] > max_val)\
    \ {\n                max_idx = idx;\n                max_val = arr[idx];\n   \
    \         }\n        }\n    }\n    return max_idx;", "    int n = arr.size();\n\
    \    long ans = -1;\n    long max_val = arr[0]; long idx = -1;\n    for (int i\
    \ = 1; i < n; i++) {\n        if (max_val < arr[i]) {\n            max_val = arr[i];\n\
    \            idx = i;\n        }\n    }\n    if (idx != -1) ans = idx;\n    return\
    \ ans;", "    // write your code here\n    long len = arr.size();\n    if(len\
    \ == 0 || len == 1)\n        return 0;\n    long max = arr.at(0) - 1;\n    for(long\
    \ i = 1; i < len; i++)\n        if(max < arr.at(i))\n            max = arr.at(i);\n\
    \    return max;", "    // Write your code here.\n    std::vector<long> arr1 =\
    \ arr;\n    std::vector<long> arr2;\n    long ans = -1;\n    long sum = 0;\n \
    \   for (int i = 0; i < arr1.size(); i++) {\n        if (sum + arr1[i] <= sum)\
    \ {\n            arr2.push_back(arr1[i]);\n            sum += arr1[i];\n     \
    \   } else {\n            arr2.push_back(arr1[i]);\n            ans = i;\n   \
    \         break;\n        }\n    }\n    return ans;", "  // code here\n  long\
    \ x = -1, y = -1, z = -1;\n  for (int i = 0; i < arr.size() ; i++) {\n    if (i\
    \ != 0) {\n      if (arr[i] < arr[y]) {\n        z = i;\n      }\n      else {\n\
    \        x = i;\n      }\n    }\n    if (i == arr.size() - 1) {\n      y = i;\n\
    \    }\n  }\n  assert(x != -1);\n  assert(y != -1);\n  assert(y > z);\n  return\
    \ z;", "    long i = 0;\n    long j = 0;\n    long ans = 0;\n    while (j < arr.size()\
    \ && arr[i] <= arr[j]) {\n        i++;\n        j++;\n    }\n    if (i < j)\n\
    \        ans = j;\n    return ans;", "\t// your code goes here\n\tif(arr.size()==0){\n\
    \t\treturn -1;\n\t}\n\t\n\tlong largest=arr[0];\n\tlong secondlargest=largest;\n\
    \tfor(int i=1;i<arr.size();i++){\n\t\tif(arr[i]>largest){\n\t\t\tsecondlargest=largest;\n\
    \t\t\tlargest=arr[i];\n\t\t}\n\t\telse{\n\t\t\tsecondlargest=arr[i];\n\t\t}\n\t\
    \t\n\t}\n\treturn secondlargest;", "    // code here\n    long ans = -1;\n   \
    \ long last = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] >= last) {\n            ans = i;\n            last = arr[i];\n     \
    \   }\n    }\n    return ans;", "    long ans = -1;\n    for (long i = 0; i <\
    \ arr.size() - 1; i++) {\n        if (arr[i] <= arr[i + 1]) {\n            ans\
    \ = i;\n        } else {\n            return ans;\n        }\n    }\n    return\
    \ ans;", "    long i = -1, j = 0, k = 0;\n    for (; i <= arr.size(); i++) {\n\
    \        while (arr[i] <= arr[j]) {\n            j++;\n        }\n        if (i\
    \ != j)\n            k++;\n        if (k == arr.size())\n            return i;\n\
    \    }\n    return -1;", "    // Write your code here\n    long maxi=0;\n    long\
    \ pos=0;\n    long i=0;\n    for(i=0;i<arr.size();i++){\n        if(maxi<arr[i])\
    \ maxi=arr[i];\n        if(maxi==arr[i]){\n            pos=i;\n        }\n   \
    \ }\n    long ans=pos-1;\n    if(pos<arr.size()) ans=-1;\n    return ans;", " \
    \   // Create a variable which stores the largest index of an element which\n\
    \    // is not greater than or equal to the element immediately preceding it.\n\
    \    long left = 0;\n    long right = 0;\n\n    // Traverse the given array from\
    \ the first index to its last\n    for(int i = 0; i < arr.size(); i++)\n    {\n\
    \        // If we have found a new largest value greater than\n        // arr[i]\
    \ then update left and right values\n        if(arr[i] > arr[left])\n        {\n\
    \            left = i;\n        }\n\n        if(arr[i] > arr[right])\n       \
    \ {\n            right = i;\n        }\n    }\n\n    // If left and right variables\
    \ have no values then return -1\n    if(left == right)\n    {\n        return\
    \ -1;\n    }\n\n    // Return right variable as our answer\n    return right;",
  "\tint left = 0;\n\tint right = arr.size() - 1;\n\twhile (left < right) {\n\t\t\
    if (arr[left] <= arr[left + 1]) left++;\n\t\telse left--;\n\t\tif (arr[right]\
    \ <= arr[right - 1]) right--;\n\t\telse right++;\n\t}\n\tif (left > right) return\
    \ -1;\n\treturn left;", "    auto it = arr.begin();\n    auto last = arr.back();\n\
    \    // If last == it then all items are the same\n    if (last == it) {\n   \
    \     return -1;\n    }\n    long maxIndex = last;\n    long index = 1;\n    for\
    \ (; it != arr.end() - 1; ++it, ++index) {\n        if (*it >= *last) {\n    \
    \        break;\n        }\n        last = *it;\n    }\n    if (index == arr.size())\
    \ {\n        return -1;\n    }\n    return index;", "    // Write your code here\n\
    \    if (arr.empty()) return -1;\n    long res = arr[0];\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] > res) res = arr[i];\n    }\n   \
    \ return res;", "    // Write your code here.\n    long long ans = -1, mid = -1,\
    \ l = 0, r = arr.size()-1, m = 1, sum = 0;\n    for(long i = 0; i < r; i++) {\n\
    \        sum += arr[i];\n        if(sum > m) {\n            ans = i;\n       \
    \     m = sum;\n        }\n        mid = (r + l) / 2;\n        if(mid > 0 && arr[mid-1]\
    \ > arr[i]) {\n            l = 0;\n            m += arr[mid-1];\n        } else\
    \ {\n            r = i;\n            m += arr[i];\n        }\n    }\n    return\
    \ ans;", "    long result=-1, temp=0;\n    for (int i=0; i<arr.size(); i++) {\n\
    \        temp = arr[i];\n        if (temp > result) result = temp;\n    }\n  \
    \  return result > -1;", "    assert(arr.size() != 0);\n    long res = 0;\n  \
    \  int last_index = 0;\n    for(long i = 1; i < arr.size(); i++) {\n        if(arr[i]\
    \ < arr[i-1]) {\n            res = -1;\n            break;\n        }\n      \
    \  if(arr[i] == arr[i-1]) {\n            res = i;\n        }\n        last_index\
    \ = i;\n    }\n    return res;", "    long ans = -1, prev = 0, curr = 0;\n   \
    \ for (long i : arr) {\n        if (i == prev) {\n            curr++;\n      \
    \  } else {\n            if (curr > 0) {\n                ans = std::max(ans,\
    \ curr);\n                prev = i;\n                curr = 0;\n            }\n\
    \        }\n    }\n    if (curr > 0)\n        ans = std::max(ans, curr);\n   \
    \ return ans;", "    long ans = -1;\n    long max_idx = arr[0]; // max element\
    \ index\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_idx)\
    \ {\n            ans = i;\n            max_idx = arr[i];\n        }\n    }\n \
    \   return ans;", "    int k = arr.size() - 1;\n    int j = 0;\n    for (int i\
    \ = 0; i < k; i++) {\n        if (arr[i] > arr[i + 1]) {\n            j = i;\n\
    \        }\n    }\n    if (j < arr.size()) {\n        return j;\n    } else {\n\
    \        return -1;\n    }", "  // Your code here\n  long mid=0;\n  long largest=0;\n\
    \  for (long i=0;i<arr.size();i++){\n    if (arr[i]>arr[mid]){\n      largest=mid;\n\
    \    }\n    mid++;\n  }\n  return largest;", "  int max_index = 0;\n  for (int\
    \ i = 0; i < arr.size() - 1; i++) {\n    if (arr[i] <= arr[i + 1]) {\n      max_index\
    \ = i;\n    }\n  }\n\n  if (max_index != 0) {\n    return max_index;\n  }\n  return\
    \ -1;", "    long res = -1LL;\n    long prev_val = -1LL;\n    for (auto &val :\
    \ arr) {\n        if (prev_val > val) {\n            res = std::max(res, prev_val\
    \ - val);\n        } else if (val != prev_val) {\n            return -1;\n   \
    \     }\n        prev_val = val;\n    }\n    return res;", "    // Code here\n\
    \    long highest_index = -1;\n    long index_of_highest_index = -1;\n    long\
    \ current_index = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (i == 0) {\n            current_index = arr[i];\n        } else {\n        \
    \    if (arr[i] < current_index) {\n                highest_index = index_of_highest_index;\n\
    \            } else {\n                highest_index = i;\n            }\n   \
    \         if (highest_index != -1) {\n                index_of_highest_index =\
    \ i;\n            }\n        }\n    }\n    return highest_index;", "    // Write\
    \ your code here.\n    int n = arr.size();\n    long ans = arr[0];\n    for (int\
    \ i = 1; i < n; i++) {\n        if (arr[i] >= ans) {\n            return -1;\n\
    \        }\n        ans = max(ans, arr[i]);\n    }\n    return ans;", "    //\
    \ Write your code here\n    // return -1;\n    int max=0;\n    for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]>=max){\n            max=arr[i];\n        }\n    }\n    if(arr.size()==max){\n\
    \        return -1;\n    }\n    return max;", "    std::sort(arr.begin(), arr.end());\n\
    \    long i = arr.size();\n    while (i) {\n        --i;\n        if (arr[i] <\
    \ arr[i-1]) return i;\n    }\n    return -1;", '    // Write your code here',
  "    long long int ans = 0;\n    long long int val = arr[0];\n    for(int i = 1;\
    \ i < arr.size(); i++) {\n        if(val + arr[i] > ans) {\n            ans =\
    \ val + arr[i];\n        }\n    }\n    return ans;", "    // code here\n    long\
    \ ans = -1;\n    long curr = -1, pos = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] >= arr[curr]) {\n            if (arr[curr] < i) {\n\
    \                curr = i;\n            }\n        } else {\n            if (curr\
    \ != -1) {\n                pos = i;\n                ans = curr + 1;\n      \
    \      }\n            curr = -1;\n        }\n    }\n    if (curr != -1) {\n  \
    \      pos = i;\n        ans = curr + 1;\n    }\n    return ans;", "    long res\
    \ = -1;\n    long l = 0;\n    long r = arr.size() - 1;\n\n    while (l <= r) {\n\
    \        long mid = l + (r - l) / 2;\n        if (arr[mid] < arr[mid-1]) l = mid\
    \ + 1;\n        else r = mid - 1;\n    }\n    if (l > res) res = l;\n    return\
    \ res;", "  long max = 0;\n  long l = 0;\n  long h = 1;\n\n  for(long i = 1; i\
    \ < arr.size(); i++) {\n    if(arr[i] < arr[max])\n      max = i;\n    if(arr[i]\
    \ > arr[max])\n      l = max;\n  }\n\n  assert(max == l);\n\n  for(long i = max;\
    \ i < arr.size(); i++) {\n    if(arr[i] < arr[max])\n      max = i;\n    if(arr[i]\
    \ > arr[max])\n      h = max;\n  }\n\n  assert(max == h);\n  return max;", " \
    \   if (arr.size() == 0)\n        return -1;\n    long result = -1;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i-1]) {\n          \
    \  if (result < i)\n                result = i;\n        } else if (arr[i] ==\
    \ arr[i-1]) {\n            if (result > i)\n                result = i;\n    \
    \    }\n    }\n    return result;", "    long res = -1;\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n            res\
    \ = i;\n            break;\n        }\n    }\n    return res;", "   long max =\
    \ -1;\n   long index = 0;\n   for(auto i = arr.begin(); i < arr.end(); i++) {\n\
    \      if(arr[i] >= max) {\n         index = i;\n         max = arr[i];\n    \
    \  }\n   }\n   return index;", "    assert(arr.size() > 1);\n    long ans = -1;\n\
    \    for (int i = 0; i + 1 < arr.size(); i += 2) {\n        if (arr[i] <= arr[i\
    \ + 1]) {\n            ans = i;\n        }\n    }\n    return ans;", "    long\
    \ res = -1;\n    long idx = -1;\n\n    for (auto it = arr.cbegin(); it != arr.cend();\
    \ ++it) {\n        auto val = *it;\n        auto prev_idx = idx;\n\n        if\
    \ (val == arr[prev_idx]) {\n            continue;\n        }\n        if (idx\
    \ != -1) {\n            res = prev_idx;\n        }\n        idx = val;\n    }\n\
    \n    return res;", "    int i = 1;\n    for (long & item : arr) {\n        if\
    \ (item > arr[i-1]) {\n            return i;\n        }\n        i++;\n    }\n\
    \    return -1;", "    if(arr.size() < 2) return -1;\n    if(arr.size() == 1)\
    \ return 0;\n\n    long max_val = arr[0];\n    long min_val = arr[0];\n    long\
    \ max_index = -1;\n    long curr_index = 0;\n    for(int i = 1; i < arr.size();\
    \ i++) {\n        if(arr[i] < min_val) {\n            min_val = arr[i];\n    \
    \        min_index = curr_index;\n        }\n        if(arr[i] > max_val) {\n\
    \            max_val = arr[i];\n            max_index = curr_index;\n        }\n\
    \        curr_index++;\n    }\n    return max_index;", "    assert(arr.size()\
    \ > 0);\n    int left = 0, right = arr.size() - 1;\n    while (left < right) {\n\
    \        int mid = left + (right - left) / 2;\n        if (arr[mid] <= arr[mid\
    \ + 1]) {\n            right = mid;\n        } else {\n            left = mid\
    \ + 1;\n        }\n    }\n    return left < right ? left : -1;", "    long leftMax\
    \ = 0;\n    long rightMax = arr.at(0);\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > rightMax) {\n            leftMax = i;\n            rightMax\
    \ = arr[i];\n        } else if (arr[i] > rightMax) {\n            rightMax = arr[i];\n\
    \        }\n    }\n\n    if (rightMax <= leftMax)\n        return -1;\n    return\
    \ leftMax;", "  long index = 0;\n  for (auto it = arr.begin(); it != arr.end();\
    \ it++) {\n    if (*it >= arr[index]) {\n      index = it - arr.begin();\n   \
    \ }\n  }\n  return index;", "    long ans = -1;\n    if (arr.size() < 2)\n   \
    \     return -1;\n    long max_num = arr[0];\n    long min_num = arr[0];\n   \
    \ long index = 1;\n    long current = 1;\n    for (auto itr = arr.begin() + 1;\
    \ itr != arr.end(); ++itr)\n    {\n        if (current > itr)\n        {\n   \
    \         current = itr;\n            if (current > max_num)\n               \
    \ max_num = current;\n            if (current < min_num)\n                min_num\
    \ = current;\n            index = itr - arr.begin() + 1;\n        }\n    }\n \
    \   if (max_num > min_num)\n        ans = index;\n    return ans;", "    long\
    \ ans = -1;\n    long max_val = INT_MIN;\n    long index = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (max_val < arr[i]) {\n            max_val\
    \ = arr[i];\n        }\n        if (max_val > arr[i]) {\n            ans = i;\n\
    \            break;\n        }\n    }\n    return ans;", "  // Write your code\
    \ here.\n  int n = (int)arr.size();\n  long maxIndex = -1;\n  for (int i = 0;\
    \ i < n; i++) {\n    for (int j = i; j < n; j++) {\n      if (arr[i] <= arr[j]\
    \ && i != j) {\n        maxIndex = i;\n      }\n    }\n  }\n  return maxIndex;",
  "\tstd::sort(arr.begin(), arr.end());\n\tfor (std::size_t i = 0; i < arr.size()\
    \ - 1; ++i) {\n\t\tif (arr[i] >= arr[i + 1])\n\t\t\treturn i;\n\t}\n\treturn -1;",
  "    // Your Code Here\n    assert(arr.size() <= 100000);\n    long max = arr[0];\n\
    \    long ans = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ <= max) {\n            ans = i;\n        }\n    }\n    return ans;", "  // your\
    \ code here\n  // Fill this in.\n  assert(arr.size() > 0);\n  long ans = -1;\n\
    \  long maxi = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] <=\
    \ maxi) {\n      continue;\n    } else {\n      ans = i;\n      maxi = arr[i];\n\
    \    }\n  }\n  return ans;", "    long max = arr[0];\n    int count = 0;\n   \
    \ for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i] > max) {\n   \
    \         max = arr[i];\n            count = 1;\n        }\n        else if (arr[i]\
    \ == max) {\n            count++;\n        }\n    }\n    return -1;", "  // Write\
    \ your code here\n  int start = 0;\n  int end = arr.size() - 1;\n  while (end\
    \ >= start) {\n    int mid = (start + end) / 2;\n    if (arr[mid] < arr[end])\n\
    \      end = mid - 1;\n    else if (arr[mid] > arr[end])\n      start = mid +\
    \ 1;\n    else\n      break;\n  }\n  return start >= 0 ? start : -1;", "    if\
    \ (arr.empty())\n        return -1;\n    long max_elem = arr[0];\n    int max_index\
    \ = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_elem)\n\
    \            max_elem = arr[i];\n    }\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] == max_elem && i != max_index) {\n            max_index\
    \ = i;\n            break;\n        }\n    }\n    return max_index;", "  // Write\
    \ your code here\n  long index1 = 0; //first index\n  long index2 = arr.size()-1;\
    \ //last index\n  long res = -1; //result value\n  if(index1 == index2){\n   \
    \ return -1;\n  }\n  while(index1 < index2){\n    if(arr[index1] <= arr[index2]){\n\
    \      index1++;\n    }else{\n      index2--;\n    }\n  }\n  return index1;",
  "    long ans = -1;\n    assert(arr.size() != 0);\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (i > 0) {\n            long j = arr[i] - arr[i-1];\n    \
    \        if (j > 0) {\n                ans = i;\n                break;\n    \
    \        }\n        }\n    }\n    return ans;", "    long left_index = 0,\n  \
    \      right_index = 0,\n        max_index = -1;\n\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > arr[(left_index + i) % arr.size()]) {\n       \
    \     right_index = i;\n        } else {\n            left_index = i;\n      \
    \  }\n\n        if (left_index == right_index) {\n            max_index = i;\n\
    \        } else if (left_index > right_index) {\n            max_index = left_index;\n\
    \        }\n    }\n    return max_index;", "  // Write your code here\n  long\
    \ l = 0, r = arr.size()-1;\n  for (int i = 0; i < arr.size()-1; i++) {\n    if\
    \ (arr[i] > arr[i+1]) break;\n  }\n  for (int j = 0; j < arr.size()-1; j++) {\n\
    \    if (arr[j] > arr[r]) break;\n  }\n  l = j;\n  r = j;\n  while (r != l) {\n\
    \    if (arr[l] >= arr[r]) {\n      int m = l;\n      l += 1;\n      r = m;\n\
    \    } else {\n      r = r - 1;\n    }\n  }\n  return l;", "  // code here\n \
    \ long max_val = arr[0];\n  long curr = 0;\n  long index = 0;\n  for (long i =\
    \ 1; i < arr.size(); i++) {\n    if (arr[i] >= max_val) {\n      max_val = arr[i];\n\
    \      curr = i;\n    }\n  }\n  if (arr[index] == max_val)\n    return -1;\n \
    \ else\n    return index;", "    //Your Code Here\n    int n = arr.size();\n \
    \   int m = n - 1;\n    int largest = 0;\n    int largestIndex = 0;\n    int last\
    \ = 0;\n    while (m >= 0) {\n        if (arr[largest] < arr[last]) {\n      \
    \      largest = last;\n        }\n        last++;\n        m--;\n    }\n    largestIndex\
    \ = largest;\n    if (largest == 0) {\n        return -1;\n    }\n    while (arr[largestIndex]\
    \ < arr[largest]) {\n        largestIndex++;\n    }\n    return largestIndex;",
  "    // Write your code here\n    int m = arr.size();\n    long result = -1;\n \
    \   for(long i=1; i<m; i++) {\n        if(arr[i-1] >= arr[i]) {\n            result\
    \ += i-i;\n        } else {\n            result += m-1;\n        }\n    }\n  \
    \  return result;", "    long ret = -1;\n    int n = arr.size();\n    long val\
    \ = arr[0];\n    for(int i = 1; i < n; i++) {\n        if(val >= arr[i]) {\n \
    \           ret = i;\n            break;\n        }\n    }\n    return ret;",
  "    // Your code here\n    return -1;", "    // code here\n    long ans = -1;\n\
    \    int i = 0;\n    long k = 0;\n    while (i < arr.size() && arr[i] < arr[k])\
    \ {\n        if (k == arr.size() - 1) {\n            ans = i;\n            return\
    \ ans;\n        }\n        i++;\n        k++;\n    }\n    return ans;", "    //\
    \ code here\n    long max= -1,min= 0,m=0;\n    for (long i=0;i<arr.size();i++){\n\
    \        if(arr[i]>=min)\n        {\n            m=arr[i];\n            min=i;\n\
    \        }\n        else if(arr[i]<min)\n        {\n            min=m;\n     \
    \   }\n    }\n    return max;", "    long ans = -1;\n    long l = arr.size() -\
    \ 1;\n    long i = 0;\n    \n    while (i < l) {\n        if (arr[i] <= arr[l])\
    \ {\n            ans = i;\n            break;\n        }\n        i++;\n    }\n\
    \    return ans;", "    long max_idx = -1;\n    for (int i = 0; i < arr.size()\
    \ - 1; ++i) {\n        if (arr[i] >= arr[i + 1]) {\n            max_idx = i;\n\
    \        }\n    }\n    if (max_idx == -1) {\n        return -1;\n    }\n    return\
    \ max_idx + 1;", "    // Your code here\n    long result = -1;\n    for (long\
    \ i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] >= arr[i + 1]) {\n   \
    \         result = i;\n            break;\n        }\n    }\n    return result;",
  "    // code here\n    long max_index = 0;\n    long pos = 0;\n    for (long i =\
    \ 0; i < arr.size(); i++) {\n        if (max_index < i) {\n            max_index\
    \ = i;\n            pos = i;\n        }\n        if (arr[i] >= arr[pos]) {\n \
    \           pos++;\n        }\n    }\n    return max_index;", "\t// Write your\
    \ code here\n\tassert(arr.size() > 0);\n\tlong maxI = -1;\n\tlong currI = 0;\n\
    \tfor (long i = 1; i < arr.size() && maxI < 0; i++) {\n\t\tif (arr[i] < arr[0])\
    \ {\n\t\t\tmaxI = currI;\n\t\t}\n\t\tcurrI = i;\n\t}\n\tif (maxI < 0)\n\t\treturn\
    \ -1;\n\treturn maxI + 1;", "    // Your code here\n    long max_index = -1;\n\
    \    int i = 0;\n    while (i < arr.size() && arr[i] >= arr[i-1])\n    {\n   \
    \     i++;\n    }\n    if (i == arr.size())\n    {\n        return -1;\n    }\n\
    \    else\n    {\n        for(long j = i; j <= arr.size(); j++)\n        {\n \
    \           if (arr[i] < arr[j])\n            {\n                max_index = j;\n\
    \            }\n        }\n    }\n    return max_index;", "    // code here\n\
    \    for(auto i = arr.begin(); i != arr.end(); ++i) {\n        if(i->next >= i->prev)\
    \ {\n            return i->next;\n        }\n    }\n    return -1;", "  int size\
    \ = arr.size();\n  if (size < 2) return -1;\n  std::vector<long> subArr;\n  for\
    \ (int i = 0; i < size; i++) {\n    long currentVal = arr[i];\n    for (int j\
    \ = i; j < size; j++) {\n      if (currentVal < arr[j]) {\n        subArr.push_back(arr[j]);\n\
    \      }\n    }\n  }\n  // All elements are arranged in ascending order.\n  for\
    \ (int i = 0; i < size; i++) {\n    if (subArr.size() == 0) return i;\n    if\
    \ (arr[i] > subArr[0]) {\n      subArr.clear();\n      return i;\n    }\n  }\n\
    \  // If array is sorted then arrange it using merge sort.\n  merge_sort(subArr.begin(),\
    \ subArr.end());\n  for (int i = 0; i < size; i++) {\n    if (subArr.size() ==\
    \ 0) return i;\n    if (arr[i] > subArr[0]) {\n      subArr.clear();\n      return\
    \ i;\n    }\n  }\n  return -1;", "    // Complete this function\n    long max_index=-1;\n\
    \    long prev_val=arr[0];\n    for(long index=1;index<arr.size();index++){\n\
    \        if(arr[index]>=prev_val)\n        {\n            prev_val=arr[index];\n\
    \            max_index=index;\n        }\n    }\n    return max_index;", "   \
    \ auto it = std::max_element(arr.begin(), arr.end());\n    if (it == arr.end())\
    \ return -1;\n    long left = *it;\n    if (left == 0) return -1;\n    auto it\
    \ = std::upper_bound(arr.begin(), arr.end(), left);\n    if (it == arr.end())\
    \ return -1;\n    long right = *it;\n    long index = std::distance(arr.begin(),\
    \ it);\n    while ((left > 0 && arr[index % arr.size()] == left) ||\n        \
    \   (right > 0 && arr[index % arr.size()] == right)) {\n        index /= arr.size();\n\
    \        left %= arr.size();\n        right %= arr.size();\n    }\n    return\
    \ index;", "    // code here\n    long n = arr.size();\n    for (long i = 1; i\
    \ < n; i++) {\n        if (arr[i] >= arr[i - 1]) {\n            return -1;\n \
    \       }\n    }\n    return n-1;", "    long ans = 0;\n    long n = arr.size();\n\
    \    long k = n;\n    long ans_1 = -1;\n\n    while (k != 0) {\n        ans =\
    \ max(ans, k);\n\n        ans = max(ans, arr[ans - 1]);\n\n        long k = k\
    \ - 1;\n    }\n    ans = max(ans, k);\n    ans = max(ans, ans_1);\n    return\
    \ ans;", "    // code here\n    // Write your code in c++14\n    long largest\
    \ = 0;\n    int index = -1;\n    for (long i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] >= arr[largest]) {\n            if (arr[i] > arr[largest]) {\n\
    \                largest = i;\n                index = largest;\n            }\n\
    \        } else if (arr[i] < arr[largest]) {\n            break;\n        }\n\
    \    }\n    return index;", "    long largest_index = -1;\n    long smallest_index\
    \ = arr.size();\n    int size = 0;\n    for (auto i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] <= arr[smallest_index])\n            smallest_index =\
    \ i;\n        if (arr[i] >= arr[largest_index])\n            largest_index = i;\n\
    \        ++size;\n    }\n    if (largest_index == -1)\n        return -1;\n  \
    \  return largest_index;", "    // Your code here\n    long ans = -1;\n    for\
    \ (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] < arr[i + 1])\n \
    \           ans = i;\n    }\n    return ans;", '    // Code here', "  long long\
    \ ans = -1;\n  for (size_t i = 0; i < arr.size(); i++) {\n    long long prev =\
    \ -1;\n    long long idx = i;\n    for (size_t j = i; j < arr.size(); j++) {\n\
    \      if (arr[j] <= arr[idx]) {\n        prev = idx;\n      }\n    }\n    if\
    \ (prev >= 0) {\n      ans = max(ans, idx);\n    }\n  }\n  return ans;", "  int\
    \ n = arr.size();\n  for (int i=1; i<n; i++) {\n    if (arr[i] <= arr[i-1]) {\n\
    \      return i;\n    }\n  }\n  return -1;", "    // Write your code here\n\t\
    long n = arr.size();\n\tlong prev = -2;\n\tfor (long i = 0; i < n; i++) {\n\t\t\
    if (arr[i] > prev) {\n\t\t\treturn i;\n\t\t}\n\t\tprev = arr[i];\n\t}\n\treturn\
    \ -1;", "    long ans = 0;\n    // Check array is sorted\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > arr[i - 1]) {\n            return\
    \ -1;\n        }\n    }\n    // If array is not sorted, then find max element\n\
    \    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i] >= arr[i - 1])\
    \ {\n            ans = i;\n        }\n    }\n    return ans;", "    // code here\n\
    \    if(arr.size() == 0)\n        return -1;\n    int low = 0, high = arr.size()\
    \ - 1;\n    long x = arr[0];\n    while(low<=high){\n        while(arr[high]<=x\
    \ && low<=high)\n            high--;\n        arr[low] = arr[low+1];\n       \
    \ while(arr[low]>x && low<=high)\n            low++;\n        arr[low] = x;\n\
    \    }\n    return low;", "  long max_index = -1;\n  long index = 0;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    if (index != max_index && arr[i] <= arr[index])\
    \ {\n      return -1;\n    }\n    max_index = i;\n    index++;\n  }\n  return\
    \ max_index;", "\tint n = arr.size();\n\tif (n == 0)\n\t\treturn -1;\n\tlong ans\
    \ = INT_MAX;\n\tint k = 0;\n\tfor (auto &it : arr) {\n\t\tif (it >= arr[k])\n\t\
    \t\tk = k + 1;\n\t\telse\n\t\t\tbreak;\n\t}\n\tif (k < n)\n\t\tans = k;\n\treturn\
    \ ans;", "  long ans = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long\
    \ prev = i;\n    for (int j = i + 1; j < arr.size(); j++) {\n      if (arr[j]\
    \ <= arr[prev])\n        ans = j;\n      else\n        prev = j;\n    }\n    if\
    \ (ans > -1)\n      break;\n  }\n  return ans;", "    long ans = 0;\n    long\
    \ len = arr.size();\n    for (int i = 0; i < len - 1; i++) {\n        if (arr[i]\
    \ <= arr[i + 1]) {\n            if (ans == -1) ans = i;\n        } else {\n  \
    \          ans = -1;\n            break;\n        }\n    }\n    return ans;",
  "  int n=arr.size()-1;\n  long i=0;\n  while(arr[i]<arr[i+1] && i<n)\n  {\n    i++;\n\
    \  }\n  return i;", "  // code here\n    for(int i=0;i<arr.size();i++){\n    \
    \    for(int j=i+1;j<arr.size();j++){\n            if((arr[i]+arr[j])<=arr[j]){\n\
    \                return -1;\n            }\n        }\n    }\n    for(int i=0;i<arr.size();i++){\n\
    \        if((arr[i]+arr[i])==arr[i]){\n            return -1;\n        }\n   \
    \ }\n    return 1;", "    // Your code here\n    long largest = -1;\n    long\
    \ index = 0;\n    for (auto it = arr.begin() + 1; it < arr.end(); ++it) {\n  \
    \      auto cmp = *it - *(arr.begin());\n        if (cmp <= 0) {\n           \
    \ largest = index;\n            break;\n        }\n        index = *it;\n    }\n\
    \    return largest;", '    // write your code here', "    long ans = -1;\n  \
    \  long prev;\n    long curr = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] > prev) {\n            ans = i;\n            break;\n    \
    \    }\n        prev = arr[i];\n    }\n    return ans;", "    auto f = [&arr](long\
    \ x){\n        long result = -1;\n        for ( size_t i = 0; i < arr.size();\
    \ ++i ) {\n            if ( arr[i] >= x ) {\n                result = i;\n   \
    \             break;\n            }\n        }\n        return result;\n    };\n\
    \    return std::max_element(arr.begin(), arr.end(), f) - arr.begin();"]
stop_tokens:
- "\n}"
