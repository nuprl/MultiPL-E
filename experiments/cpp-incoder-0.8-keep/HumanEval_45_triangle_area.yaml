name: HumanEval_45_triangle_area
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given length of a side and\
  \ high return area for a triangle.\n// >>> triangle_area(5, 3)\n// 7.5\nfloat triangle_area(long\
  \ a, long h) {\n"
tests: "}\nint main() {\n    auto candidate = triangle_area;\n    assert(candidate((5),\
  \ (3)) == (7.5));\n    assert(candidate((2), (2)) == (2.0));\n    assert(candidate((10),\
  \ (8)) == (40.0));\n}\n"
completions: ['  return (a + b + c) / 2.0;', "    float area = 0.0f;\n    for (long\
    \ i = -(a+1); i <= (a+1); i++) {\n        float mid = (float)i * (h+1);\n    \
    \    if ((i+1)*(h+1) <= mid) {\n            area += mid * (i+1) / 2;\n       \
    \ } else {\n            area += mid;\n        }\n    }\n    return area;", '    return
    a * sqrt(b * b - 4 * a * h * h);', '    return ((float)(a*h)/((float)(a+b+c+d)*(a+b+c+d)*(a+b+c+d)));',
  "\treturn (float) a*(float)h/2;", "    assert(a >= 0);\n    assert(h >= 0);\n  \
    \  float ans = 0.0;\n    for (int i = 0; i < a; i++) {\n        ans += 2.0 * (h\
    \ * ((i + 1) * h + i));\n    }\n    return ans / 2.0;", '    return (a * b) /
    2.0f * (h + 1) * 0.5f;', '    return (a*(h-2*a)+(a+1)*(h-2*(a+1)));', "    float\
    \ s = (a + h) / 2;\n    float area = 0.5f * (s - a) * (s - h) * (s - a + h);\n\
    \    return area;", "    float s = (a + h) / 2.0f;\n    return 0.5 * s * (s -\
    \ a) * (s - h);", '  return float(a) / float(h);', "    // assert(a < h);\n  \
    \  assert(h >= 0);\n    if (a == 0)\n        return 0;\n    if (a == 1)\n    \
    \    return 1;\n    if (a == 2)\n        return h;\n    return (a * (h - 2) +\
    \ h) * triangle_area(a - 1, h);", "    long long int ans = 0;\n    for(long long\
    \ int i=1; i<=a; i++) {\n        ans += i*(h-i)*(2*i-1);\n    }\n    for(long\
    \ long int i=a+1; i<=h; i++) {\n        ans += 2*i*(h-i+1);\n    }\n    return\
    \ ans/2.0;", "  float s = (float)a / (float)h;\n  return 2.0 * sqrt(s * (s - 1)\
    \ * (s - 2));", '  return sqrt((pow(a, 2)) + (pow((h - 2), 2)));', '    return
    float(a + h) * 0.5f;', '    return a*h;', "    float area = (h*h)/(2*a*a) - h*h/(2*a*a);\n\
    \    return std::max(area, 0);", "    float area = 0.0f;\n    for (a; a <= h;\
    \ a++) {\n        area += ((float)(a * h) / 2.0f) * pow((float)a, 2);\n    }\n\
    \    return (area);", "  assert(a > 0 && h > 0 && h > a);\n  float area = 0.0f;\n\
    \  for (long i = 1; i < h; i++) {\n    float k = ((float)i) / h;\n    area +=\
    \ k * (k - a);\n  }\n  return (area / (float)h) * 2.0;", "    float s = (float)a/h;\n\
    \    return 2.0*sqrt(3.0)*a*s/h;", '    return (a+h)/2.0 * h * (long) sqrt(a*h-a*h+h*h);',
  '    return (float)((a * h) / 2);', "    float area = 0.0f;\n    for (int i = 0;\
    \ i < 3; i++) {\n        float x = ((a + i) % h) / h;\n        float y = ((a +\
    \ i) / h) / h;\n        if (a <= h)\n            assert(x <= y); // assert() for\
    \ debug\n        area += x * y;\n    }\n    return area;", '    return (float)
    ((a + b + c) / 2) * (h / (2 * sqrt(a * b + c)));', "    long triangle=a*h-a*h/h;\n\
    \    float area=(triangle/(a*h));\n    return area;", "    float area = 0.0f;\n\
    \    if (a == 0) {\n        return area;\n    }\n    if (a > 0 && h > 0) {\n \
    \       long a = a >> 1;\n        long h = h >> 1;\n        area += a <= h ? triangle_area(a,\
    \ h - a) : 0.0f;\n    }\n    return area;", "    float s = (a * a + h * h) / 2.0;\n\
    \    return 2.0 * s / sqrt(a * a + h);", "\t// Write your code here.\n\treturn\
    \ 0.0;", "    float b = sqrt(pow(float(h), 2) * float(a));\n    return b;", " \
    \   if (h >= a)\n        return 0;\n    float s = (-1.0 / 2.0) * (a + h + h) *\
    \ (h + h);\n    return 2.0 * sqrt(s);", '    return (float)(sqrt(pow((float)a
    / 2, 2) + pow((float)h / 2, 2)));', "  // assert(h > 0 && a > 0);\n  long l =\
    \ 0;\n  long r = a;\n  long mid = 0;\n  while (l <= r) {\n    mid = l + (r - l)\
    \ / 2;\n    if (mid > h) {\n      r = mid;\n    } else if (mid < h) {\n      l\
    \ = mid;\n    } else {\n      l = mid;\n      r = mid;\n    }\n  }\n  return a\
    \ * .5 * (r - l);", "    float area = (float)( pow((double)a, (double)h) / 2.0);\n\
    \    return area;", "  float area;\n  area = sqrt(pow((float)a / 2, 2) + pow((float)h\
    \ / 2, 2));\n  return area;", '    return a*(h*h)/2;', "    assert(a>0);\n   \
    \ assert(h>0);\n    float perimeter = 2*a*h;\n    float area = (a * h)/2;\n  \
    \  return (area+perimeter);", '    return (sqrt(pow((a + b + h), 2) / 2.0) + sqrt(pow((a
    + h + b), 2) / 2.0)) / 2.0;', "    float area;\n    assert(a + h >= 0);\n    assert(a\
    \ + h <= 12);\n    if (a == 0) {\n        area = 0.0;\n    } else {\n        area\
    \ = ((float)a / 2.) * (h);\n    }\n    return area;", "    float area = a*(h/2)*((h/2)*((h/2)*(a+h/2))-(h/2)*(a+h))+(a+h)*((h/2)*(a+h)/2+(h/2)*(a+h/2+h))+(a+h)*(a+h/2+h);\n\
    \    return area;", "\treturn (float) ((a + b + c)/2 * h) / 3.0;", "  assert(h>=a);\n\
    \  assert(h>0);\n  long double s = (a*a)+(h*h);\n  return sqrt(s/(2*h+2));", " \
    \ assert(a >= 0 && a <= h);\n  float a = a / h, b = a / sqrt(3), c = sqrt(3) /\
    \ a;\n  float s = (a + b + c) / 2;\n  return s * s;", "  assert(a >= 0);\n  assert(h\
    \ >= 0);\n  long long int sides = pow(a + h, 2);\n  return sides / 2; // / 2",
  '  return a*h/2 ;', '    return a*(a+h)/2.0;', "\treturn (a * h) / 2;", "  assert(a\
    \ < h);\n  return a * sqrt(3) / 4;", '    return (a + b + c) * ((a + b) + h -
    c);', "    float res = 0.0f;\n    for (int i = 0; i < 3; i++) {\n        res +=\
    \ a * ((a * (long) (i+1)) + h - i * (i) * h);\n    }\n    return res / 3;", " \
    \   float area = 0.0f;\n    for (long i = 0; i < a; i++) {\n        float x =\
    \ ((float)i / a) * h;\n        float y = ((float)i / a) * h;\n        float a1\
    \ = ((float)i / a) * h;\n        float b1 = ((float)(i + a) / a) * h;\n      \
    \  float a2 = ((float)(i + a + 1) / a) * h;\n        float b2 = ((float)(i + a)\
    \ / a) * h;\n        float a3 = ((float)(i + 1) / a) * h;\n        float b3 =\
    \ ((float)(i + a + 1) / a) * h;\n        float u1 = (b1 - x) * (a3 - y);\n   \
    \     float u2 = (b2 - x) * (a2 - y);\n        float u3 = (b3 - x) * (a1 - y);\n\
    \        area += 0.5f * (u1 + u2 + u3);\n    }\n    return area;", "    float\
    \ s = (a + h) / 2.0f, area = s * s;\n    return area / (2 * 3.14159265358979323846);",
  '    return a * (h + 1) * (h + 1) / 2;', '    return sqrt(a*a*h*h/(4.0*a*h));',
  '    return static_cast<float>(a + h) / 2;', "    float area;\n    long i;\n   \
    \ long sum = 0;\n    for (i = 2; i < a + 1; i++)\n        sum += (pow((i - h)\
    \ / 2, 2));\n    area = (float)sum / pow((a + b + c), 2);\n    return area;",
  "    float s = (a + b) / 2.0;\n    float p = (sqrt(s * (s - a) * (s - b) * (s -\
    \ c)));\n    return p * (float)(h);", '    return (a + h) * (a + h + 1) * (h +
    a) / 2;', '  return (a * (a + h)) / (2.0 * h);', '  return float(a + h) * (h -
    a) / 2.0;', "  float area = 0.0;\n  if (a < h) {\n    float t = a / h;\n    float\
    \ t2 = t*t;\n    float t3 = t2*t;\n    float t4 = t3*t;\n    float t5 = t4*t;\n\
    \    float t6 = t5*t;\n    float t7 = t6*t;\n    float t8 = t7*t;\n    float t9\
    \ = t8*t;\n    float t10 = t9*t;\n    float t11 = t10*t;\n    float t12 = t11*t;\n\
    \    float t13 = t12*t;\n    float t14 = t13*t;\n    float t15 = t14*t;\n    float\
    \ t16 = t15*t;\n    float t17 = t16*t;\n    float t18 = t17*t;\n    float t19\
    \ = t18*t;\n    float t20 = t19*t;\n    float t21 = t20*t;\n    float t22 = t21*t;\n\
    \    float t23 = t22*t;\n    float t24 = t23*t;\n    float t25 = t24*t;\n    float\
    \ t26 = t25*t;\n    float t27 = t26*t;\n    float t28 = t27*t;\n    float t29\
    \ = t28*t;\n    float t30 = t29*t;\n    float t31 = t30*t;\n    float t32 = t31*t;\n\
    \    float t33 = t32*t;\n    float t34 = t33*t;\n    float t35 = t34*t;\n    float\
    \ t36 = t35*t;\n    float t37 = t36*t;\n    float t38 = t37*t;\n    float t39\
    \ = t38*t;\n    float t40 = t39*t;\n    float t41 = t40*t;\n    float t42 = t41*t;\n\
    \    float t43 = t42*t;\n    float t44 = t43*t;\n    float t45 = t44*t;\n    float\
    \ t46 = t45*t;\n    float t47 = t46*t;\n    float t48 = t47*t;\n    float t49\
    \ = t48*t;\n    float t50 = t49*t;\n    float t51 = t50*t;\n    float t52 = t51*t;\n\
    \    float t53 = t52*t;\n    float t54 = t53*t;\n    float t55 = t54*t;\n    float\
    \ t56 = ", "    // write your code here\n    float area;\n    area=(float)(a+h)/2;\n\
    \    return area;", '    return ((a + h) * (b + h) * (c + h));', "\treturn (a+h)*(a+h+1);",
  '    return a * sqrt(3) * pow((float)h / 2.0, 2.0);', "  assert(a >= 0);\n  assert(h\
    \ >= 0);\n  long b = (a + h) / 2;\n  return a * b * b - 2 * b * h;", '    return
    a * pow(h, 1./3.);', "  float area = 0.0;\n  for (long i = a; i <= h; i++) {\n\
    \    float dis = i - a;\n    float res = dis * dis / 2.0;\n    area += res;\n\
    \  }\n  return area;", "  float area = 0.0;\n  // This loop runs through the number\
    \ of rows of the triangle and\n  // from 0 to row + 1, and from 0 to row + 2.\
    \ Since we only want\n  // to get area of the triangle, we can use two loops to\
    \ get\n  // all the area of the triangle. \n  long row = h / 2;\n  long count\
    \ = a;\n\n  for (long i = 0; i < row; i++) {\n    area += ((float)pow(i, 2)) *\
    \ ((a + b) * (b + c)) / (4.0 * (count) * (count + 1));\n    count += 1;\n  }\n\
    \  \n  return area;", "    float area = 0.0f;\n    // A triangle with hypotenuse\
    \ 5 and base 3 has area 7.5 times larger\n    // than its hypotenuse 3. We iterate\
    \ through each hypotenuse and base pair\n    // to find the area of triangle with\
    \ given side length and height.\n    long side = sqrt(sqr(a) + sqr(h));\n    long\
    \ half = 0;\n    long hbase = h / (float) 2;\n    long hside = side / (float)\
    \ 2;\n    // area of the triangle with base\n    while (side != 0) {\n       \
    \ if (hside % 2 == 0) {\n            half = hside;\n        }\n        hside =\
    \ hside / 2;\n    }\n    // area of the triangle with hypotenuse\n    long sbase\
    \ = side / 2;\n    if (sbase % 2 == 0) {\n        half += (sbase / 2);\n    }\n\
    \    // area of the triangle in between hypotenuse and base\n    long a1 = (a\
    \ / hbase) * (half / hside);\n    long a2 = (a / hbase) * ((half + 1) / hside);\n\
    \    long a3 = (a / hbase) * ((half + 2) / hside);\n    long a4 = (a / hbase)\
    \ * ((half + 3) / hside);\n    area += a1 + a2 + a3 + a4;\n    return area;",
  "    assert(h >= 3);\n    assert(a >= 3);\n    float area = 0.0;\n    if (a == 0)\
    \ return 0;\n    if (h == 1) return (area = a * a / 2);\n    long l2 = (h - 1)\
    \ / 2;\n    long l1 = l2;\n    while (true) {\n        long m = ((l1 + l2) * (l1\
    \ + l2 + 1)) / 4;\n        long a = l1 + m;\n        if (h - a * 2 <= 3) {\n \
    \           area = (m * (a + h) / 2);\n            break;\n        }\n       \
    \ long b = a + m;\n        long c = b + m;\n        long ab = (a + b) * (a + b)\
    \ / 2;\n        long ac = (a + c) * (a + c) / 2;\n        long bc = (b + c) *\
    \ (b + c) / 2;\n        long abc = (ab + bc) * (ab + bc) / 2;\n        long bcd\
    \ = (bc + abc) * (bc + abc) / 2;\n        if (ab > h) break;\n        if (ac >\
    \ h) break;\n        if (bc > h) break;\n        if (abc + bcd > h) break;\n \
    \       long d = 0;\n        long e = a + m;\n        long f = b + m;\n      \
    \  long g = c + m;\n        if (e > h || f > h || g > h) d = 1;\n        if (e\
    \ > f && f > g) d = 2;\n        if (e > g && g > f) d = 3;\n        area += d;\n\
    \        l1 += 1;\n        l2 += 1;\n    }\n    return area;", "  // Initialize\
    \ your variables here.\n  // You do not need to change them.\n  int side_length\
    \ = a;\n  float area = 0.0f;\n\n  // Compute your area as shown below. \n  //\
    \ Remember that the return type is float, \n  // which means the area is also\
    \ a float.\n  // You do not need to change it.\n  area = side_length * side_length\
    \ * h / 2;\n  return area;", "    if (a <= h)\n        return 0;\n    if (h ==\
    \ 0)\n        return a;\n    float h1 = (float)h / a;\n    float h2 = h1 - h1;\n\
    \    float a = 0.5 * (h1 + h2);\n    if (a == (float)a * a)\n        return a;\n\
    \    return h1 * a + h2;", "  float r = 0.0, k = 0.0;\n  for (long i = 1; i <=\
    \ a; i++) {\n    k += i * i;\n    r += i * h / k;\n  }\n  return r;", "  float\
    \ a1 = (float)a / h;\n  float a2 = (float)a / h - a1;\n  return a1 * a2;", " \
    \   // Write your code here\n    float side = sqrt(pow(a, 2) + pow(a, 2));\n \
    \   float area = side * h / (2 * sqrt(3));\n    return area;", '  return (a*(h/2))/2;',
  "    float area = sqrt(pow(a, 2.0) + pow(h,2.0));\n    return area;", '    return
    a*h*h*h/9.0;', '  return 0.5 * (a - (sqrt(a * a * h + h) - a));', "    float area\
    \ = 0.0f;\n    if (h > 0) {\n        long lcm = (long) std::ceil(std::sqrt(3)\
    \ * std::sqrt(a));\n        a = lcm * h;\n        long curr = a;\n        long\
    \ cnt = 0;\n        while (curr != 0) {\n            cnt++;\n            if (curr\
    \ > 0) {\n                curr = curr / 2;\n            }\n        }\n       \
    \ long cnt2 = 1;\n        while (a != 0) {\n            area += std::sqrt(3) /\
    \ 2 * std::pow(a, cnt2);\n            cnt2++;\n            a--;\n        }\n \
    \       area = (area / cnt);\n    }\n    return area;", "\treturn a * b / h;",
  "  float s = (float) sqrt(3.0);\n  return a * s * s / h;", "    float s = 0, p =\
    \ 0, q = 0;\n    int i = (int) (a/2);\n    while(i>=0) {\n        int j = (int)(h/2);\n\
    \        float c = pow(j, 2);\n        s += c;\n        p += c/2;\n        q +=\
    \ c/4;\n        i--;\n        j--;\n    }\n    s = s/(a + h);\n    p = p/(a);\n\
    \    q = q/(a + h);\n    return s * (a + h) - p;", "  float a = abs(a);\n  float\
    \ h = abs(h);\n  float s = (a + h);\n  float area = (s*(s-a)*(s-h))/6.0;\n  return\
    \ (area);", "    float area;\n    area = 0.5f * (a + h);\n    return area;", " \
    \   long l1 = h / 2;\n    long l2 = h - l1;\n    return a / (sqrt(l1 * l1 + l2\
    \ * l2) + l1 * l2);", '    return (a * (long) sqrt(3 * (double) (a * (long) h))
    / 2);', '  return sqrt(a * a + h * h);', '    return ((a + h) * (h - a) / 2);',
  '    return (float)a * (float)h / 2.0;', "    float s = (float)a / 2.0;\n    return\
    \ std::sqrt(s * (s - h) * (s - 2*h));", "  assert(a > 0 && h > 0);\n  long b =\
    \ (a + h) / 2;\n  long c = a - b;\n  float area = (a * b) * c / 2;\n  return area;",
  "  long s = a/2;\n  long t = s/2;\n  return float(a*h)/2;", "  assert(h > 0);\n\
    \  long double pi = M_PI;\n  long double rad = sqrt(pi);\n  long double a1 = (double)\
    \ a / h;\n  long double b1 = (double) (h * h - a * a1);\n  long double c1 = sqrt(b1\
    \ * b1 - 4 * pi * a * c1);\n  return a1 * c1 * c1 / 2.0;", "    assert(h > 0);\n\
    \    float area = 0.0;\n    for (int i = 0; i < h; i++) {\n        area += pow(a,\
    \ i) / pow((1 + pow(a, i)), 2);\n    }\n    return area;", "    float area = 0.0f;\n\
    \    float s = 0.0;\n    long n = a;\n    long m = h;\n    long k = m / 2;\n \
    \   for (long i = 1; i <= n; i++) {\n        s = s + ((float)i * 0.5f) * ((float)m\
    \ * m) / n;\n    }\n    s = s + ((float)n * 0.5f) * ((float)m * m) / n;\n    for\
    \ (long i = 1; i <= m; i++) {\n        area = area + ((float)i * 0.5f) * ((float)k\
    \ * k) / m;\n    }\n    area = area + ((float)m * m * 0.5f) * ((float)k * k) /\
    \ m;\n    area = area / ((float)n * (float)m);\n    return area;", "    float\
    \ s;\n    float c = (float)(sqrt(3.0)/2.0); // golden ratio\n    s = c * sqrt(float(pow(h,\
    \ 2.0)) / float((2.0 * a)))\n            + c/float(pow(h, 2.0))\n            +\
    \ c/float(pow(2.0 * a,2.0))\n            + c/float(pow(2.0 * h, 2.0));\n\n   \
    \ return s;", "    float area = 0.0;\n    for (int i = 1; i <= h; i++) {\n   \
    \     area = area + pow((pow(a, i) / pow(a, h) - 1), 2);\n    }\n    return area;",
  "  // Compute the hypotenuse of the triangle\n  float a = pow(a, (float)0.5);\n\
    \  float h = pow(h, (float)0.5);\n  // Area of a triangle is half of the sum of\
    \ the two lengths of the sides.\n  return (a * h) / 2.0;", '  return sqrt(pow(4
    * pow(h, 2) + 3, 2) / 24);', "\t// Area of a triangle with side length 5 has to\
    \ be calculated using Heron's formula\n\treturn 0.5 * (pow(a, 3) + pow(h, 3) +\
    \ 2 * (pow(a + h, 3) - pow(a, 3) - pow(h, 3)));", "  long b1 = (a + h) / 2;\n\
    \  long b2 = (b1 + h) / 2;\n  long c1 = (a + b1 + h) / 3;\n  long c2 = (b2 + b1\
    \ + h) / 3;\n  long d = (a * b1 + b2 * c1 + c1 * b2 + c2 * b1 + 2 * c1 * b2 *\
    \ b2) / (4 * h);\n  return (float)(a * b1 * h + b2 * c1 * h + c1 * b2 * h + c2\
    \ * b1 * h + 2 * c1 * b2 * b2 * h) / d;", "  // If side is negative, find absolute\
    \ value of side.\n  long s = abs(a);\n  // Initialize triangle area, as side *\
    \ side of base triangle is equal to 0.\n  float area = s * s;\n  // For all sides\
    \ greater than or equal to `h` compute area with base\n  // triangle by subtracting\
    \ `h` from all sides.\n  for (long i = 1; i < h; i++) {\n    area -= s * i;\n\
    \  }\n  // Return area.\n  return area;", "\tfloat ans = 0;\n\tans = h * (1 +\
    \ sqrt(1 + 4 * h * h - 4 * a * h));\n\treturn ans;", "  assert(h >= 0);\n  assert((a*a\
    \ + 3*a + 2*a + a + 3) >= h*h);\n  return (a*a + 3*a + 2*a + a + 3) / (2.0*h*h);",
  '    return sqrt(a * ((h - 2) * (h + 3) + (h - 3) * (a + 2)) / (h * h));', "  assert(h\
    \ >= 0);\n  assert(h < 2 * a + 1);\n  long long rem = a % h;\n  if (rem < a) {\n\
    \    long long mid = a / h;\n    float area1 = mid * triangle_area(mid, h);\n\
    \    float area2 = mid * triangle_area(mid, h);\n    return area1 + area2;\n \
    \ } else {\n    return (a * h) / 2;\n  }", "  assert(a > 0 && h > 0);\n  float\
    \ area = 0.0f;\n  for (long i = 0; i < h; ++i) {\n    float h = 0.5f * (a + i)\
    \ + 0.5f;\n    area += h * (1 + 2 * i);\n  }\n  return (float)(area / (a + h -\
    \ 1));", "    float area = 0.0f;\n    for (int i = 0; i < 3; i++) {\n        area\
    \ += (a+i) * h * (a+i)/2;\n    }\n    return area;", "    float area = (a * a\
    \ + h*h - a*a) / (2.f * h);\n    return area;", "    float s;\n    s = 0.5 * sqrt((float)(a\
    \ * (h - a + 1)) / (float)(a + a * h));\n    return s;", "    float h = h / 2;\n\
    \    return a * (h - a) * (h + a + 1) / (2.f*h - 4.f*h + 2);", "    // If lengths\
    \ are equal then return zero\n    if (a == h) {\n        return 0.0;\n    }\n\
    \    // Area of a triangle is (a*h)\n    return (float)(a * h);", "        long\
    \ b = a*h;\n        return (b * b)/2.0;", '    return a * (((long) 1 / 2) + ((long)
    1 / 2) * h);', "    float a1 = a / 2;\n    float a2 = a - a1;\n    float b1 =\
    \ h / 2;\n    float b2 = h - b1;\n    return (a1 * b2) + (a2 * b1);", "    float\
    \ area = (a * a) / (h * a);\n    return area;", "    float s = (a + b) / 2;\n\
    \    float t = (a * b) / 2 + h;\n    return 0.5f * sqrt(s * (s - t) * (s - t)\
    \ + (a * s) * (a * s));", "    float area = 0.0f;\n    for (int i = 0; i < a;\
    \ i++) {\n        area += ((float)pow(i, 2.0) / h);\n    }\n    area = sqrt(area);\n\
    \    return area;", "    float s = 0.0;\n    // Since a is a long.\n    a = abs(a);\n\
    \    h = abs(h);\n    // To avoid overflow while dividing by zero.\n    if (a\
    \ == 0) return 0.0;\n    if (h == 0) return 0;\n    long q = a / h;\n    long\
    \ r = a - h * q;\n    s = s * q;\n    return sqrt(s * (r + q));", "  assert(a\
    \ >= 0);\n  assert(h >= 0);\n  // assert(h < a);\n  float area = 0.5 * triangle_area(a\
    \ - 1, h - 1) + 0.5 * triangle_area(a - 1, h) + 0.5 * triangle_area(a - 1, h -\
    \ 1);\n  // cout << \"triangle_area(\" << a << \", \" << h << \") returns \" <<\
    \ area << endl;\n  return area;", "     float area;\n     area = (float)(a * (a\
    \ - h) * (a + h));\n     return area;", '    return 0.5 * (a + h) * (b + h) *
    (c + h);', '    return a * (h - a) * 0.5f;', "\treturn a*h/2 ;", "    float s\
    \ = 0.0f;\n    while (a > 0) {\n        s += 0.5f;\n        a -= 1;\n    }\n \
    \   while (a < h) {\n        s += 0.5f;\n        a += 1;\n    }\n    return s;",
  "    // Compute the area of a triangle with two given sides\n    // and the given\
    \ height and return the result.\n    float s = powf(h / 2.0, 2.0);\n    float\
    \ area = s * powf((h + 2.0) / 3.0, 2.0);\n    return area;", '  return (a * (h
    - a) * (h + a + 1) / 2) / (((2 * h) - 1) * (2 * (h + 1) - h));', '  return ((a
    + b + c) * h)/2;', "    assert(h > 0);\n    float h = h / 2.0;\n    float area\
    \ = a * (h-a*h)/2.0;\n    return area;", '    return a * h / 2.0;', '  return
    (float)(a*h)/2.0;', '    return (float)(a*h)/2;', "  // assert(a >= 0 && h >=\
    \ 0 && a+h<=1000) // don't assert for a negative number\n  return a * h / 2.0;",
  "    float area = (a * a) + (h * h);\n    return area;", '  return ((pow(a, h) /
    4) * (pow(a, h + 2) / 4) * (pow(a, h + 3) / 4));', "  assert(h > a && h >= 0);\n\
    \  float res = 0;\n  if (h == 0) return 0;\n  for (long i = a; i <= h; i++) {\n\
    \    res += pow(2, i) * pow(2, h-i);\n  }\n  return res;", "    float s = (float)(a\
    \ + h) / 2;\n    float area = (float)(a * h) / 2.0;\n    float area = pow(area,\
    \ 1.0/3.0);\n    float triangle = area*s/2.0;\n    return triangle;", '    return
    2.0 * sqrt(pow(a, 2) + pow(h / 2.0, 2));', "  assert(a < h);\n  float s = (a +\
    \ h) * (a + 2 * h) / 4;\n  return h * (s + s) / 2;", "    float asq = (a + h)\
    \ / 2;\n    float bsq = (a + h - asq) / 2;\n    float asq2 = asq * a;\n    float\
    \ bsq2 = bsq * b;\n    float h = sqrt(asq2 * bsq2 - asq2 * bsq + bsq2);\n    float\
    \ area = 0.5 * h * a;\n    return area;", '    return (float)(a*h)/2.0 ;', " \
    \   float area = 0.0f;\n    if(a==0 && h==0) return area;\n    if(a==0) return\
    \ h*0.5;\n    long l=a-1;\n    long r=a+h;\n    while(l<=r) {\n        long mid\
    \ = (l+r)/2;\n        float temp = (area/mid)*((mid*(mid-1))/2);\n        area\
    \ = temp;\n        l = mid +1;\n        r =mid -1;\n    }\n    return area;",
  "\treturn a*h/2;", "\tfloat ar = (float)(a * h) / 2;\n\treturn ar;", "        float\
    \ s = 2.0f / (float) h;\n        return std::sqrt(s * (s - a) * (s - b) * (s -\
    \ c));", "    float s = (float) (a + b + c) / 2;\n    return 0.5 * sqrt(s * (s\
    \ - a) * (s - b) * (s - c));", "    float area;\n    area = (a * h) / 2;\n   \
    \ return area;", "  assert(h > 0);\n  float s = 0;\n  if (a + h > 2 * h) h = a\
    \ - h;\n  long c = (long) (a * h / 2);\n  long d = (long) (h * h / 2);\n  long\
    \ t = a + h;\n  s += c;\n  while ((t > a + h) && (t - d >= h)) {\n    t -= d;\n\
    \    s += t;\n  }\n  s += (t - a) * (t - a) / 2;\n  if (t > a + h) {\n    s +=\
    \ (t - a + h) * (t - a + h) / 2;\n  }\n  if (s > a) {\n    s = a;\n  }\n  return\
    \ s;", "    // TODO: Complete this function\n    assert(a>0 && h>0);\n    float\
    \ ans = 0.0;\n    // use double to avoid float precision issues\n    double area_a\
    \ = 0.0;\n    double area_b = 0.0;\n    double area_c = 0.0;\n    long k = 0;\n\
    \    for (long i = 1; i <= h; ++i) {\n        long x = 2 * i - 1;\n        long\
    \ y = 2 * i;\n        // calculate area of the triangle\n        area_a += (x\
    \ * a) * (y - x);\n        area_b += (x * b) * (y - x);\n        area_c += (x\
    \ * c) * (y - x);\n    }\n    // get average area of three sides\n    ans = (area_a\
    \ + area_b + area_c) / 3.0;\n    return ans;", '  return float(pow((float)a, 2))
    / float(pow(h, 2));', "    float triangle_area = sqrt((float)(a + h) * ((float)a\
    \ + h));\n    return triangle_area;", '    return static_cast<float>(a) * static_cast<float>(h)
    * static_cast<float>(h);', "    float area = (float)(a * (a + h) / 2);\n    return\
    \ area;", '    return (a * (h / 2)) * (h / 2);', '    return (a*h)/2;', '  return
    a / sqrt(3.f);', "    long s = a + h;\n    if (s > 0) {\n        float b = (a\
    \ * h) / s;\n        return std::pow(b, 0.5);\n    }\n    else {\n        long\
    \ s2 = s + a;\n        float b = (s2 * h) / s2;\n        return std::pow(b, 0.5);\n\
    \    }", "  float area = 0.0f;\n  if (a >= 0) {\n    if (h >= 0) {\n      area\
    \ += (a * h) / 2.0f;\n      area += (a * h * h) / 4.0f;\n    }\n  }\n  return\
    \ area;", "  if (a < 0 || h < 0 || a > h) {\n    throw std::runtime_error(\"Given\
    \ length should not be negative.\");\n  }\n  float area = 0.0f;\n  for (int i\
    \ = 0; i < a + 1; i++) {\n    if (i == a || i == h - a + 1) {\n      continue;\n\
    \    }\n    area += (float)i / (float)(a * h);\n  }\n  return area;", "    float\
    \ s = 0.0;\n    for (int i = 0; i < 3; i++) {\n        s = s + pow((float)(a+3-i),\
    \ (float)h);\n    }\n    return s;", "    float ans = (a+b+c+d)*0.5f;\n    return\
    \ ans;", "    float area = 0.0;\n    for (long i = 0; i <= a; i++) {\n       \
    \ long j = i - 1; // From a to i, the loop will go one step back.\n        float\
    \ area_i = (float)j * (float)h;\n        area += area_i; // The area will be the\
    \ sum of all the triangle's area.\n    }\n    return area;", "    float a = h\
    \ / 2;\n    float b = sqrt(a * a);\n    return 0.5 * (b * b - 1);", "    float\
    \ s = (float) a / (h * a);\n    return sqrt(s * (s - 1) * (s - 2) * (s - 3));",
  "    long area = 0;\n    for(int i = 1; i < h; i++)\n        area += pow(a, i);\n\
    \    return (float)(area/(a*h));", "    // To find the area of triangle we need\
    \ to find its base, its height.\n    // The base is equal to double side divided\
    \ by double height and the\n    // height is the length along base from base of\
    \ triangle to base.\n    // The height is equal to half side length (a / 2)\n\
    \    // The area is equal to square root of (base + height).\n    // Here we find\
    \ the base using pythagoras.\n    // Here I made use of the fact that we know\
    \ the side lengths and height.\n    // If you have any doubts comment below.\n\
    \    float base = sqrt(a * a / 2) / sqrt(h);\n    return base;", "  float area\
    \ = 0.0f;\n  long l = a;\n  long r = l;\n  long h = a + h;\n  while (l <= h) {\n\
    \    while (l <= r && r < h)\n      ++r;\n    if (l <= r)\n      area += r - l;\n\
    \    ++l;\n  }\n  return area;", "    float area = ((float)(a * a * h) / 18);\n\
    \    return area;", "    float s = (a + h) / 2;\n    return sqrt(s * (s - a) *\
    \ (s - h) * (s - a + h));", "  // Use formula to compute area.\n  // >>> area\
    \ = math.pi * (h**2 + a**2) \n  // >>> area = math.sqrt(h**2 + a**2)\n  float\
    \ area = ((float)h**2 + (float)a**2);\n  return area;", "  float s = (a + h) /\
    \ 2.0;\n  float area = a * h;\n  return s * s;", "    float s = (float)a/(h*h);\n\
    \    return 2*s*s;", '    return (a*h)/2;', "  float s = (a + h) / 2;\n  float\
    \ area = 0.5f * sqrt(s * (s - a) * (s - h) * (s - 2 * a + h));\n  return area;",
  "        float area = 0.0f;\n        if(a>0 && h>0)\n        {\n            area\
    \ = (float)(a*h)/2;\n        }\n        return area;", "  float area = 0.0;\n\
    \  // For each row\n  for (long r = 0; r < a; r++) {\n    // For each column\n\
    \    for (long c = 0; c < h; c++) {\n      // Consider current location and next\
    \ location\n      area += pow(r, c);\n    }\n  }\n  return area;", "    float\
    \ area = 0.0;\n    for (int i = 1; i <= a; i++) {\n        area += (float) i /\
    \ (float) a;\n    }\n    return area * h / a;", '    return a * h * h / 2;', " \
    \   float area = (a + b + c) / 2;\n    return a * b * h / area;", '    return
    (a+h)/2*sqrt(pow(2,3/2)*pow((double)a,2)*pow((double)h,2));', '    return a *
    h / 2;', "    float s = (float)a/2.0f;\n    float t = a/2.0f + h/2.0f;\n    float\
    \ area = s * s;\n    float side = sqrt( t * (t * (t - 2.0f) + 2.0f));\n    return\
    \ (area / side);", '    return (a*h)/2;', "  assert(a >= 0 && a < h);\n  long\
    \ s = 0, w = 0, c = 0;\n  for (int i = 0; i < a - 1; i++) {\n    w = (b - a) +\
    \ (i - w);\n    c += w * (i + w);\n    s += w * i;\n  }\n  long d = (b - a) +\
    \ a;\n  c += (b - a) * b;\n  s += (b - a) * b;\n  c += (s - a) * (b - h);\n  s\
    \ += (s - a) * (b - h);\n  c += (s - a) * (h - s);\n  s += (s - a) * (h - s);\n\
    \  c += (w - s) * (h - s);\n  s += (w - s) * (h - s);\n  c += (w - s) * (d - h);\n\
    \  s += (w - s) * (d - h);\n  c += (w - s) * (a - d);\n  s += (w - s) * (a - d);\n\
    \  return (c * h) / (w * d);", "  assert(h >= 0 && a >= 0);\n  float s = 0.0;\n\
    \  for (int i = 0; i < a; i++) {\n    float t = 0.0;\n    for (int j = 0; j <\
    \ h; j++) {\n      t += 1.0 / pow(j, i);\n    }\n    s += t;\n  }\n  return s;",
  "    long t = (long) (a * h / 2);\n    return (t) / 2;", '  return a + h * (h +
    1) / 2;', '    return (a*h)/2.0;', "  assert(a >= 0);\n  assert(h >= 0);\n  long\
    \ h = h >> 1;\n  long a = a >> 1;\n  long long sum = 0;\n  long long a1 = a *\
    \ a;\n  long long h1 = h * a;\n  long long b1 = a1 - (h1 * h);\n  long long a2\
    \ = a1 + h1;\n  long long h2 = h1 + h;\n  long long b2 = a2 - (h2 * h);\n  sum\
    \ += b1 * b2;\n  sum += b2 * a2;\n  sum += b1 * h2;\n  sum += a2 * h2;\n  return\
    \ sum;", "  assert(a > 0 && h > 0);\n  float area = (float)(a * h) / 2.0;\n  return\
    \ area;", "  assert(a >= 0 && a <= h);\n  float s = 1.0f / (h - a) * ((2 * h -\
    \ a) + 1);\n  return s * (a * (h - a) * (a - h + 1) + a * a + h);", "    float\
    \ ans = 0.0f;\n    long r = sqrt(pow(a, 2.0f) + pow(h,2.0f));\n    if (r > 0.0f)\
    \ {\n        long q = 1.0f / r;\n        long s = (q - fabs(q * 0.5f)) / 2.0f;\n\
    \        long p = (q - fabs(q * 0.5f)) + (q * s - fabs(q * s))/2.0f;\n       \
    \ ans = s * pow(2.0f, p);\n    }\n    return ans;", '    return a * 0.5f * (h
    + h) - (h * (h + 2 * a + 2)) / 2;', '    return (a*h)/2.0f;', '    return (sqrt(pow(a,
    2) + pow(h,2)) - pow((a+h)/2.0, 2));', '  return 2.0 * h * a;', "  // Triangle\
    \ Equation.\n  float s = (a * a + h * h) - pow(pow(a, 2) + pow(h,2), 0.5);\n \
    \ float area = sqrt(s / 2);\n  return area;", "    float area = 0.0f;\n    int\
    \ sides = a*a + a*h + b*h;\n    // Calculate the area of the triangle by adding\
    \ up two of the\n    // sides of the triangle.\n    float s = (a + h) * (a + h\
    \ + 1);\n    float t = (a + b) * (b + h);\n    float u = (s + t) * (a + b);\n\
    \    area = u * 2.0f / sides;\n    return area;"]
stop_tokens:
- "\n}"
