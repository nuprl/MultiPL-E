name: HumanEval_108_count_nums
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
  \ which takes an array of integers and returns\n// the number of elements which\
  \ has a sum of digits > 0.\n// If a number is negative, then its first signed digit\
  \ will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\
  \ == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\n\
  long count_nums(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
  \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n  \
  \  assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
  \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100,\
  \ 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34,\
  \ -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) ==\
  \ (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
completions: []
stop_tokens:
- "\n}"
