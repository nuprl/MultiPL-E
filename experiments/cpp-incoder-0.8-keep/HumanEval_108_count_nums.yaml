name: HumanEval_108_count_nums
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function count_nums\
  \ which takes an array of integers and returns\n// the number of elements which\
  \ has a sum of digits > 0.\n// If a number is negative, then its first signed digit\
  \ will be negative:\n// e.g. -123 has signed digits -1, 2, and 3.\n// >>> count_nums([])\
  \ == 0\n// >>> count_nums([-1, 11, -11]) == 1\n// >>> count_nums([1, 1, 2]) == 3\n\
  long count_nums(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = count_nums;\n    assert(candidate((std::vector<long>()))\
  \ == (0));\n    assert(candidate((std::vector<long>({-1, -2, 0}))) == (0));\n  \
  \  assert(candidate((std::vector<long>({1, 1, 2, -2, 3, 4, 5}))) == (6));\n    assert(candidate((std::vector<long>({1,\
  \ 6, 9, -6, 0, 1, 5}))) == (5));\n    assert(candidate((std::vector<long>({1, 100,\
  \ 98, -7, 1, -1}))) == (4));\n    assert(candidate((std::vector<long>({12, 23, 34,\
  \ -45, -56, 0}))) == (5));\n    assert(candidate((std::vector<long>({0, 1}))) ==\
  \ (1));\n    assert(candidate((std::vector<long>({1}))) == (1));\n}\n"
completions: ["  // Write your code here.\n  std::sort(arr.begin(), arr.end());\n\
    \  std::reverse(arr.begin(), arr.end());\n  long count = 0;\n  for (auto i = arr.begin();\
    \ i != arr.end(); ++i) {\n    if ((*i) < 0) {\n      assert(*i < 0);\n      assert(i[0]\
    \ == -1);\n      assert(i[1] < 0);\n      i[1] *= -1;\n    }\n    for (long j\
    \ = *i;; j += *i) {\n      count += 1;\n      if (j > 0) {\n        break;\n \
    \     }\n    }\n  }\n  return count;", "  if (arr.empty()) return 0;\n  long res\
    \ = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    res += arr[i] >= 0 ? arr[i]\
    \ : -arr[i];\n  }\n  return res;", "    long sum = 0;\n    int count = 0;\n  \
    \  for (const auto i : arr) {\n        if (i >= 0) sum += i;\n        else sum\
    \ += i * 10;\n        ++count;\n    }\n    return sum % 10 == 0 ? count : -1;",
  "  int size = arr.size();\n  long sum = 0;\n  for (int i = 0; i < size; i++) {\n\
    \    long num = arr[i];\n    if (num < 0) {\n      num = -num;\n    }\n    sum\
    \ += num;\n  }\n  return sum;", "  long sum = 0;\n  long count = 1;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n    if (sum > 0) {\n    \
    \  count *= pow(10, arr.size() - i - 1);\n    }\n  }\n  return count;", "    long\
    \ cnt = 0;\n    for (long i = 0; i != arr.size(); i++) {\n        cnt += arr[i];\n\
    \    }\n    return cnt;", "    // Write your code here\n    long sum=0;\n    for(long\
    \ i=0;i<arr.size();i++)\n    {\n        sum+=arr[i];\n        if(sum>0)\n    \
    \    {\n            break;\n        }\n    }\n    return sum;", "    int sum_nums\
    \ = 0, digit, sum = 0, i = 0, j = 0;\n    while (j < arr.size()) {\n        digit\
    \ = arr[j];\n        sum += digit;\n        if (sum > 0) {\n            sum_nums++;\n\
    \        }\n        j = j + 1;\n    }\n    if (sum_nums == 0) {\n        return\
    \ 0;\n    }\n    int k = 0;\n    while (sum_nums > 0) {\n        digit = sum %\
    \ 10;\n        sum += digit == 0 ? 1 : -1;\n        sum_nums--;\n        while\
    \ (sum_nums > 0) {\n            if (arr[k] != digit) {\n                break;\n\
    \            }\n            k++;\n            sum_nums--;\n        }\n    }\n\
    \    return k - 1;", "    assert(arr.size() >= 0);\n    long ans = 0;\n    for\
    \ (long d : arr)\n        ans += (d > 0);\n    return ans;", "    int n = arr.size();\n\
    \    if (n == 0) return 0;\n    long ans = 0, cur = arr[0];\n    while (cur >=\
    \ 10) {\n        cur -= 10;\n        ans++;\n    }\n    while (cur > 0) {\n  \
    \      ans += cur % 10;\n        cur /= 10;\n    }\n    return ans;", "    long\
    \ count = 0;\n    long long temp_sum = 0;\n    for (auto i : arr) {\n        temp_sum\
    \ += i;\n        if (temp_sum > 0) {\n            count++;\n            temp_sum\
    \ -= i;\n        }\n    }\n    return count;", "  assert(arr.size() > 0);\n  long\
    \ cnt = 0;\n  while (arr.size() > 0) {\n    long num = arr[0];\n    arr[0] = arr[0]\
    \ - num / 10;\n    cnt += 1;\n  }\n  return cnt;", "    long ans = 0;\n    long\
    \ n = arr.size();\n    for (int i = 0; i < n; ++i) {\n        int curr = arr[i];\n\
    \        if (curr > 0) {\n            ans += 1;\n            while (curr > 0)\
    \ {\n                ans ++;\n                curr -= 10;\n            }\n   \
    \     }\n    }\n    return ans;", "  long res = 0;\n  for (auto x : arr) {\n \
    \   if (x + x >= 0) {\n      x += 1;\n    } else {\n      x -= 1;\n    }\n   \
    \ while (x > 0) {\n      res += x % 10;\n      x /= 10;\n    }\n  }\n  return\
    \ res;", "    // code here\n    int i = 0, s = 0;\n    int count = 0; // count\
    \ the numbers greater than 0\n    for (auto i : arr) {\n        s += i;\n    \
    \    if (s == 0)\n            count++;\n        else if (s > 0) // if greater\
    \ than 0, increment the counter\n            ++count;\n    }\n    return count;",
  "    auto s = arr.begin();\n    auto e = arr.end();\n    long count = 0;\n    while\
    \ (s != e) {\n        if (*s < 0) {\n            ++s;\n        } else {\n    \
    \        while (true) {\n                auto cur = s;\n                long cur_deg\
    \ = cur % 10;\n                s = s + 1;\n                long next_deg = *s\
    \ % 10;\n                if (cur_deg + next_deg >= 2) {\n                    count\
    \ += 1;\n                    break;\n                } else {\n              \
    \      count = 0;\n                }\n            }\n        }\n    }\n    return\
    \ count;", "    int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] > 0) sum += arr[i];\n        else arr[i] = -arr[i];\n    }\n\
    \    return sum;", "    int sum = 0;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        sum += arr[i];\n    }\n    return sum;", "    if (arr.size() == 0)\
    \ {\n        return 0;\n    }\n    int len = arr.size();\n    long ans = 0;\n\
    \    for (int i = 0; i < len; ++i) {\n        int curr = arr[i];\n        while\
    \ (curr >= 10) {\n            ans += 1;\n            curr /= 10;\n        }\n\
    \    }\n    return ans;", "  int n = arr.size();\n  long ret = 0;\n  for (int\
    \ i = 0; i < n; ++i) {\n    int cur_num = arr[i];\n    // if number is negative,\
    \ its first signed digit will be negative\n    // first check if this number is\
    \ positive\n    if (cur_num > 0) {\n      long max_digit = 0;\n      // find out\
    \ the largest digit in the number\n      while (cur_num) {\n        max_digit\
    \ = (max_digit * 10) + cur_num % 10;\n        cur_num /= 10;\n      }\n      max_digit\
    \ = max_digit + 1;\n      ret += max_digit > 0 ? max_digit : 0;\n    }\n  }\n\
    \  return ret;", "    // write your code here\n    long sum = 0;\n    long n =\
    \ arr.size();\n    long ans = 0;\n    for(int i = 0; i < n; i++){\n        if(arr[i]\
    \ > 0){\n            sum += arr[i];\n            if(sum > 0){\n              \
    \  ans++;\n            }\n        }\n    }\n    return ans;", "    long result\
    \ = 0;\n    for (long value : arr)\n        result += std::count_if(arr.begin(),\
    \ arr.end(), [&value](int n){return n > 0; });\n    return result;", "    // Write\
    \ your code here\n    long count= 0;\n    for (long i:arr)\n    {\n        if\
    \ (i>0)\n        {\n            long temp = i%10;\n            while (temp>0)\n\
    \            {\n                count++;\n                i /= 10;\n         \
    \   }\n        }\n        else\n        {\n            if (i< 0)\n           \
    \     count++;\n        }\n    }\n    return count;", "    long ret = 0;\n   \
    \ for (long i: arr) {\n        if (i > 0) ret += i;\n    }\n    return ret;",
  "    long ans = 0;\n    long ln = arr.size();\n    for (long i = 0; i < ln; i++)\
    \ {\n        long x = arr[i];\n        long temp = x;\n        while (temp > 0)\
    \ {\n            temp /= 10;\n        }\n        ans += (temp == 0);\n    }\n\
    \    return ans;", "    long count = 0;\n    long temp = 0;\n    for (long i :\
    \ arr) {\n        if (i < 0) {\n            temp = temp * 10 + (i - 1);\n    \
    \    } else {\n            temp += i;\n        }\n        if (temp > 0) {\n  \
    \          count++;\n            temp = 0;\n        }\n    }\n    return count;",
  "    int count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ < 0) arr[i] += 10;\n        int n = arr[i];\n        while (n > 0) {\n     \
    \       count++;\n            n /= 10;\n        }\n    }\n    return count;",
  "    long res = 0;\n    for (long &val : arr) {\n        int i = abs(val);\n   \
    \     if (val < 0)\n            i += 1;\n        // if (val == i)\n        if\
    \ (i >= 10)\n            ++res;\n    }\n    return res;", "    // Write your code\
    \ here\n    long count=0;\n    long m=arr[0];\n    long n=0;\n    for(long i=0;i<arr.size();i++)\n\
    \    {\n        if(arr[i]<m)\n        {\n            m=arr[i];\n            \n\
    \        }\n    }\n    for(int i=0;i<arr.size();i++)\n    {\n        if(i>0)\n\
    \        {\n            if((n-m)>0)\n            {\n                count=count+1;\n\
    \            }\n            if((arr[i]-m>0))\n            {\n                n=arr[i];\n\
    \            }\n        }\n        \n    }\n    return count;\n    ", "  // Write\
    \ your code here.\n  long sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n\
    \    sum += (arr[i] > 0);\n  }\n  return sum;", "    long sum = 0;\n    for (auto\
    \ i : arr) {\n        if (i == 0) break;\n        sum = sum * 10 + i % 10;\n \
    \   }\n    return sum;", "    long count = 0;\n    for (auto i : arr) {\n    \
    \    if (i >= 0)\n            count++;\n        else\n            count--;\n \
    \   }\n    return count;", "  long cnt = 0;\n  long sum = 0;\n  for (auto i :\
    \ arr) {\n    sum += i;\n    if (sum > 0) {\n      ++cnt;\n    }\n  }\n  return\
    \ cnt;", "\tstd::vector<long> sums(arr.size());\n\tlong ans = 0;\n\tfor(auto i\
    \ : arr){\n\t\tif(sums[sums.size()-1] < 0){\n\t\t\tans = 1;\n\t\t\tbreak;\n\t\t\
    }\n\t\tans += sums[sums.size()-1] + i;\n\t\tsums[sums.size()-1] += i;\n\t}\n\t\
    return ans;", "    long result = 0;\n    for (auto it : arr) {\n        result\
    \ += it % 10;\n        result %= 10;\n    }\n    return result;", "    long cnt\
    \ = 0;\n    int sign = 1;\n    for (auto elem : arr) {\n        cnt += sign *\
    \ elem;\n        sign *= -1;\n    }\n    return cnt;", "    int n = arr.size();\n\
    \    if (n <= 0)\n        return 0;\n    long sum = 0;\n    for (int i = 0; i\
    \ < n; i++) {\n        long digit = arr[i];\n        if (digit < 0)\n        \
    \    digit = -digit;\n        if (digit > 9)\n            digit = digit - 9;\n\
    \        sum += digit;\n    }\n    return sum;", "    long cnt = 0;\n    int i\
    \ = 0, j = 0;\n    while (j < arr.size()) {\n        if (arr[j] < 0) {\n     \
    \       if (i > 0) {\n                cnt += abs(arr[i] - arr[j]);\n         \
    \   }\n            i++;\n            j = i;\n        } else {\n            cnt\
    \ += arr[j];\n            j++;\n        }\n    }\n    return cnt;", "    long\
    \ count = 0;\n    long digit = arr[0];\n    while (digit > 0)\n        digit =\
    \ digit / 10;\n    int len = arr.size();\n    for (size_t i = 0; i < len; ++i)\
    \ {\n        long curr = arr[i];\n        while (curr > 0) {\n            ++count;\n\
    \            curr = curr % 10;\n        }\n        arr[i] = digit;\n        digit\
    \ = arr[i];\n    }\n    return count;", "    long count = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > 0 && arr[i] % 10 > 0) {\n\
    \            count++;\n        }\n    }\n    return count;", "    assert(arr.size()\
    \ != 0);\n    long sum = 0;\n    for (auto i : arr) sum += i;\n    return sum;",
  "    long count = 0;\n    for (long ele : arr) {\n        if (ele < 0) {\n     \
    \       ele *= -1;\n            count += 1;\n        }\n        if (ele > 0) {\n\
    \            count += ele / 10;\n            ele %= 10;\n        }\n    }\n  \
    \  return count;", "  int count = 0;\n  for (int i = 0; i < arr.size(); i++)\n\
    \    for (int j = 0; j < arr[i].size(); j++)\n      if (arr[i][j] >= 0)\n    \
    \    count++;\n  return count;", "  int count = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    int sum_of_digits = std::abs(arr[i]);\n    int sum = 0;\n    while\
    \ (sum_of_digits > 0) {\n      sum += (sum_of_digits % 10);\n      sum_of_digits\
    \ /= 10;\n    }\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;",
  "    int sum = 0;\n    long firstPositive = 0;\n    long secondPositive = 0;\n \
    \   long thirdPositive = 0;\n    for (auto i : arr) {\n        if (i >= 0) {\n\
    \            sum += i;\n            if (sum >= 10) {\n                sum -= 10;\n\
    \                if (sum > 0) {\n                    firstPositive += sum;\n \
    \               }\n            }\n        }\n        if (i >= 0) {\n         \
    \   sum += i;\n            if (sum >= 10) {\n                sum -= 10;\n    \
    \            if (sum > 0) {\n                    secondPositive += sum;\n    \
    \            }\n            }\n        }\n        if (i >= 0) {\n            sum\
    \ += i;\n            if (sum >= 10) {\n                sum -= 10;\n          \
    \      if (sum > 0) {\n                    thirdPositive += sum;\n           \
    \     }\n            }\n        }\n    }\n    if (firstPositive > 0 && secondPositive\
    \ > 0 && thirdPositive > 0) {\n        return firstPositive + secondPositive +\
    \ thirdPositive;\n    }\n    return 0;", "    int n = arr.size();\n    long res\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        if (arr[i] > 0)\n         \
    \   res++;\n        long cur = abs(arr[i]);\n        for (int j = n-1; j >= i;\
    \ j--) {\n            if (arr[j] < cur)\n                break;\n            else\n\
    \                cur -= arr[j];\n            res++;\n        }\n    }\n    return\
    \ res;", "    long n = 0, sum = 0;\n    for (auto i : arr)\n        sum += i;\n\
    \    while (sum > 0) {\n        sum += n % 10;\n        ++n;\n    }\n    return\
    \ n;", "    auto n = arr.size();\n    if (n == 0)\n        return 0;\n    long\
    \ sum = 0, rem = 0, cur = 0;\n    for (auto i = 0; i < n; i++) {\n        sum\
    \ += arr[i];\n        cur = sum % 10;\n        rem = sum / 10;\n        if (rem\
    \ > 0)\n            sum += (10 - cur) * rem;\n    }\n    return sum;", "    if\
    \ (arr.empty()) return 0;\n    long ans = 0;\n    for (auto val : arr)\n     \
    \   ans += (val >= 0 ? val : -val);\n    return ans;", "    int sum = 0;\n   \
    \ for (long i : arr) {\n        sum += i;\n    }\n    return sum;", "    long\
    \ sum = 0;\n    for (long i: arr) {\n        sum += i % 10;\n        if (sum <\
    \ 0) {\n            sum *= -1;\n        }\n    }\n    return sum;", "    if (arr.empty())\
    \ return 0;\n    auto n = arr.size();\n    long count = 0;\n    for (long index\
    \ = 0; index < n; ++index) {\n        long digit = arr[index];\n        if (digit\
    \ < 0) {\n            int num_digits = (int)(log10(abs(digit))) + 1;\n       \
    \     if (num_digits >= count) break;\n            digit /= abs(digit);\n    \
    \        for (int i = 0; i < num_digits; ++i) {\n                digit *= 10;\n\
    \                if (digit > 0) ++count;\n            }\n            continue;\n\
    \        }\n        while (digit) {\n            count += digit % 10;\n      \
    \      digit /= 10;\n        }\n    }\n    return count;", "    long sum = 0;\n\
    \    for (long num : arr)\n        if (num > 0)\n            sum += num;\n   \
    \ return sum;", "  long count = 0;\n  for (int i = 0; i < (int) arr.size(); i++)\
    \ {\n    long num = arr[i];\n    // Check if sum of digits in number is greater\
    \ than 0\n    while (num > 0) {\n      count += num % 10;\n      num = num / 10;\n\
    \    }\n  }\n  return count;", "    long count = 0;\n    for (auto it : arr) {\n\
    \        if (it > 0 && it < 10) {\n            count += it - '0';\n        }\n\
    \    }\n    return count;", "  int n = arr.size();\n  long sum = 0;\n  for (int\
    \ i = 0; i < n; ++i) {\n    sum += arr[i];\n  }\n  return sum;", "  long long\
    \ s = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] > 0) {\n  \
    \    s += arr[i];\n    }\n  }\n  return s;", "  if (arr.empty())\n    return 0;\n\
    \  // If at least one element has a sum larger than 0, then add one to\n  // the\
    \ total since it appears in at least one element of the array\n  long sum = 0;\n\
    \  // Loop through all the elements in the array\n  for (long elem : arr) {\n\
    \    if (elem > 0)\n      sum++;\n    // if the sum is negative, then the number\
    \ appears more than once in\n    // the array\n    else if (sum > 0)\n      sum--;\n\
    \  }\n  return sum;", "    // Write your code here.\n    long sum = 0;\n    long\
    \ x = 0;\n    for (auto itr = arr.rbegin(); itr != arr.rend(); itr++) {\n    \
    \    x = *itr;\n        while (x > 9) {\n            x /= 10;\n            sum\
    \ += 1;\n        }\n        sum += x;\n    }\n    return sum;", "  // Your code\
    \ here\n    long long int arr_size = arr.size();\n    int cnt = 0;\n    long long\
    \ int sum = 0;\n    long long int sum_temp = 0;\n\n    for (long long int i =\
    \ arr_size - 1; i >= 0; i--) {\n        sum += arr[i];\n        sum_temp = sum;\n\
    \        sum = sum % 10;\n        if (sum == 0) {\n            cnt = 1;\n    \
    \        sum = 1;\n        }\n        if (sum > 0) {\n            cnt++;\n   \
    \     }\n        if (sum < 0) {\n            sum += -(10 - sum);\n           \
    \ sum = 0;\n        }\n\n    }\n    return cnt;", "    // code here\n    long\
    \ ret = 0;\n    long last_sum = 0;\n    long sum_digit = 0;\n\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] >= 0) {\n            last_sum\
    \ += arr[i];\n            sum_digit += arr[i];\n        } else {\n           \
    \ sum_digit += arr[i] * -1;\n        }\n        if (sum_digit > last_sum) {\n\
    \            ret = i + 1;\n            break;\n        }\n    }\n    return ret;",
  "    if (arr.size() == 0) return 0;\n    // We assume numbers are non-negative integers\n\
    \    assert(arr.size() > 0);\n    // We sum up the digits of the numbers. That\
    \ is, first number will be 1, then\n    // 1, 2, then 1, 2.\n    long num_sum\
    \ = 0;\n    for (auto n: arr) num_sum += n;\n    // Now we check if the sum of\
    \ digits of all numbers is greater than 0.\n    if (num_sum > 0) return num_sum;\n\
    \    // If num_sum is less than 0, the first digit will be negative.\n    else\
    \ return -num_sum;", "    int n = arr.size();\n    int count = 0;\n    for (long\
    \ i : arr) {\n        if (i < 0) i = -i; // make positive\n        int digit =\
    \ i >= 0 ? i : -i; // get digit\n        int mod = (i - digit) / 10;\n       \
    \ if (mod > 0) {\n            count++;\n        }\n    }\n    return count;",
  "    int sum = 0;\n    for (auto i : arr)\n        if ((i != 0) && (sum > 0)) {\n\
    \            sum += (i - '0');\n        }\n    return sum;", "    int n = arr.size();\n\
    \    long ans = 0, sum = 0, x = 0;\n    for(int i = 0; i < n; ++i) {\n       \
    \ x = arr[i];\n        if(x < 0) {\n            sum -= x;\n        } else {\n\
    \            sum += x;\n        }\n        if(sum > 0) {\n            ans += 1;\n\
    \        }\n    }\n    return ans;", "\tlong ans = 0;\n\tlong n = arr.size();\n\
    \t\n\tassert(arr.size() >= 2);\n\t\n\tif (n == 0)\n\t\treturn 0;\n\t\n\tfor (long\
    \ i = 0; i < n - 1; i++) {\n\t\tlong curr = arr[i] + arr[i + 1];\n\t\t\n\t\tif\
    \ (curr > 0) {\n\t\t\tans += 1;\n\t\t\tlong tmp = i;\n\t\t\twhile (tmp >= 0 &&\
    \ arr[tmp] == 0)\n\t\t\t\ttmp--;\n\t\t\tif (tmp < 0)\n\t\t\t\tbreak;\n\t\t\twhile\
    \ (tmp >= 0 && arr[tmp] == 1)\n\t\t\t\ttmp--;\n\t\t\tarr[i] = arr[tmp];\n\t\t\t\
    arr[tmp] = 1;\n\t\t\tarr[i + 1] = 0;\n\t\t}\n\t}\n\t\n\treturn ans;", "    std::vector<long>\
    \ sums(arr.size() + 1);\n    for (long i : arr) {\n        sums[i] += i;\n   \
    \ }\n    long ans = 0;\n    for (long i : sums) {\n        if (i == 0) {\n   \
    \         break;\n        }\n        ans = i;\n    }\n    if (ans == 0 && arr.size()\
    \ == 0) {\n        return 0;\n    }\n    return ans;", "    long sum = 0;\n  \
    \  for (long n: arr) {\n        sum += n;\n    }\n    return sum;", "    // code\
    \ here\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n      \
    \  if (arr[i] < 0) {\n            sum += arr[i]%10;\n        }\n        else {\n\
    \            sum += arr[i];\n        }\n    }\n    return sum;", "    // your\
    \ code goes here\n    long ans = 0;\n    long sum = 0;\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        sum += arr[i];\n        if (sum > 0) {\n     \
    \       ans++;\n            sum -= arr[i];\n        }\n    }\n    return ans;",
  "    // code here\n    long sum = 0;\n    long digitsum = 0;\n    for(auto n: arr)\n\
    \    {\n        if(sum >= 0)\n        {\n            sum += n;\n        }\n  \
    \      else\n        {\n            sum += n*10;\n            digitsum += n%10;\n\
    \        }\n    }\n    if(sum >= 0)\n    {\n        return sum;\n    }\n    else\
    \ \n    {\n        return sum*10 + digitsum;\n    }", "  // Write your code here\n\
    \  long sum = 0;\n  for (long i : arr) {\n    if (i < 0) sum += (i - 1) / 10 +\
    \ (i - 1) % 10;\n    else sum += i;\n  }\n  return sum;", "    long sum = 0;\n\
    \    long num = std::accumulate(arr.begin(), arr.end(), 0);\n    while (num >\
    \ 0) {\n        sum += num % 10;\n        num /= 10;\n    }\n    return sum;",
  "  long nums = 0;\n  for (auto i : arr) {\n    if (i >= 0)\n      nums += i;\n \
    \ }\n  return nums;", "    long ret = 0;\n    for(auto it = arr.begin(); it !=\
    \ arr.end(); ++it) {\n        ret += (*it)/10;\n        if(*it < 0) ret += (*it)%10;\n\
    \    }\n    return ret;", "\tlong count = 0;\n\tfor (auto it = arr.rbegin(); it\
    \ != arr.rend(); ++it)\n\t{\n\t\tif (*it >= 0)\n\t\t{\n\t\t\tlong sum = 0;\n\t\
    \t\tfor (long i = 0; i < 10; ++i)\n\t\t\t\tsum += *it % 10;\n\t\t\tif (sum > 0)\n\
    \t\t\t\t++count;\n\t\t}\n\t\telse if (*it < 0)\n\t\t\tcount += 1 + (*it < 0);\n\
    \t}\n\treturn count;", "\tint sum = 0, count = 0;\n\t\n\tfor (int i = 0; i < arr.size();\
    \ i++) {\n\t\tif (arr[i] >= 0)\n\t\t\tsum += arr[i];\n\t\telse\n\t\t\tsum += abs(arr[i]);\n\
    \t\tif (sum > 0) {\n\t\t\tcount++;\n\t\t\tsum -= arr[i];\n\t\t}\n\t}\n\t\n\treturn\
    \ count;", "  int sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    sum\
    \ += arr[i];\n    if (sum > 0) {\n      sum += arr[i] % 10;\n    }\n  }\n  return\
    \ sum;", "  // You can return any integer you want; I just chose long.\n  assert(arr.size()\
    \ > 0);\n  long ans = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    long num\
    \ = arr[i];\n    if (num < 0) {\n      num = -num;\n    }\n    while (num > 0)\
    \ {\n      ans += num % 10;\n      num /= 10;\n    }\n  }\n  return ans;", "\t\
    long long sum = 0;\n\tfor(long long i = 0; i < arr.size(); i++) {\n\t\tsum +=\
    \ arr[i];\n\t}\n\treturn sum % 10;", "    long ans = 0;\n    for (auto &x : arr)\
    \ {\n        ans |= x;\n    }\n    return ans;", "  long count=0, digit;\n  //\
    \ We need to count how many numbers have 0 digit, \n  // then add 1 for each 1\n\
    \  for (long x: arr) {\n    if (x<0) digit=-(x%10);\n    else if (x>0) digit=x/10;\n\
    \    else digit=0;\n    count+=digit;\n  }\n  return count;", "    int n = arr.size();\n\
    \    long count = 0;\n    for (int i = 0; i < n; i++) {\n        count += arr[i]\
    \ >= 0 ? arr[i]%10 : -arr[i]%10;\n    }\n    return count;", "  int sum = 0;\n\
    \  for (long num: arr) {\n    sum += num;\n  }\n  return sum;", "    long sum\
    \ = 0;\n    for (auto itr : arr) {\n        sum += itr;\n    }\n    return sum;",
  "    long ans = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n        ans +=\
    \ (arr[i] > 0);\n    }\n    return ans;", "    int len = arr.size();\n    if (len\
    \ < 1) return 0;\n    std::vector<int> v;\n    int sum = 0;\n    for (long i :\
    \ arr)\n        v.push_back(i);\n    v.push_back(INT_MIN);\n    while (!v.empty())\
    \ {\n        int cur = v.back();\n        v.pop_back();\n        sum += cur;\n\
    \        if (sum < 0) return 0;\n    }\n    return len;", "    int counter = 0;\n\
    \    long sum_of_digits = 0;\n    long first_digit = 0;\n    for (auto i = arr.begin();\
    \ i != arr.end(); i++)\n    {\n        sum_of_digits += *i;\n        if (sum_of_digits\
    \ > 0) {\n            first_digit = *i / 10;\n        }\n        sum_of_digits\
    \ %= 10;\n    }\n    for (auto i = arr.begin(); i != arr.end(); i++)\n    {\n\
    \        if (*i <= 0) {\n            if (first_digit < 0) {\n                counter--;\n\
    \            } else {\n                counter++;\n            }\n        } else\
    \ if (sum_of_digits < 0) {\n            counter--;\n        }\n    }\n    return\
    \ counter;", "    int len = arr.size();\n    long sum = 0;\n    for (int i = 0;\
    \ i < len; i++) {\n        sum += arr[i];\n        if (sum < 0) {\n          \
    \  sum = (sum >> 1) + (sum & 1);\n        }\n    }\n    return len;", "    if\
    \ (arr.empty()) return 0;\n    // Initialize a vector with the sum of the digits\
    \ for each number\n    // If there are no numbers, return the empty vector\n \
    \   std::vector<long> sum_of_digits(arr.size());\n    long sum = 0;\n    for (auto\
    \ n : arr) {\n        // Get the number of digits in the number\n        int digits\
    \ = count_digits(n);\n        // Get the sum of the digits for the number\n  \
    \      for (long i = 0; i < digits; i++) {\n            sum += n % 10;\n     \
    \       n /= 10;\n        }\n        // Store the sum of the digits for this number\n\
    \        sum_of_digits[sum] += 1;\n    }\n    // Return the number of numbers\
    \ with sums of digits > 0\n    for (long i : sum_of_digits) if (i > 0) return\
    \ i;\n    return 0;", "    // code here\n    for (long i: arr)\n        if (i>0)\n\
    \            return 0;\n    return 1;", "    long ans = 0;\n    long long sum_of_nums\
    \ = accumulate(arr.begin(), arr.end(), 0);\n    for (int i = 0; sum_of_nums >\
    \ 0; i++) {\n        if (arr[i] > 0)\n            ans ++;\n        sum_of_nums\
    \ -= pow(10, i);\n    }\n    return ans;", "    long count{0};\n    for (auto\
    \ i : arr) {\n        if (!i) {\n            ++count;\n            continue;\n\
    \        }\n        long sum{1};\n        while (i > 0) {\n            sum +=\
    \ i % 10;\n            i = i / 10;\n        }\n        if (sum >= 0) {\n     \
    \       ++count;\n        }\n    }\n    return count;", "    long sum = 0;\n \
    \   for (auto i : arr) {\n        sum += i;\n    }\n    return sum;", "    long\
    \ sum = 0;\n    for (auto i: arr)\n        if (i < 0)\n            i = -i;\n \
    \       sum += i;\n    return sum;", "    long long int sum = 0;\n    long long\
    \ int size = arr.size();\n    long long int count[11];\n    // To store all possible\
    \ sums including negative numbers\n    std::vector<bool> valid(11, false);\n \
    \   // Initialize all array elements to 0 \n    for (long long int i = 0; i <\
    \ size; i++) {\n        sum += arr[i];\n        if (valid[sum - 11])\n       \
    \     ++count[sum - 11];\n        valid[sum + 10] = true;\n    }\n    long long\
    \ int count_max = *std::max_element(count, count + 11);\n    return count_max\
    \ == size ? 0 : count_max - 1;", '    // Write your code here.', "    // write\
    \ your code here\n    long n = 0;\n    for(int i = 0; i < arr.size(); ++i){\n\
    \        long l = (int)arr[i];\n        int sum = 0;\n        while(l != 0) {\n\
    \            sum += l % 10;\n            l = l / 10;\n        }\n        if(sum\
    \ > 0) {\n            ++n;\n        }\n    }\n    return n;", "    long sum =\
    \ 0;\n    // Initialize sum to 0\n    for(long i : arr) {\n        sum += i;\n\
    \    }\n    for(long i : arr) {\n        while(sum) {\n            sum /= 10;\n\
    \        }\n        if(sum) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;", "    long long sum = 0;\n    for (long i: arr) {\n        sum += i;\n\
    \    }\n    if (sum <= 0) {\n        return 0;\n    }\n    for (long i: arr) {\n\
    \        while (sum) {\n            sum += i % 10;\n            if (sum < 0) {\n\
    \                sum -= 10;\n            }\n        }\n        if (sum > 0) {\n\
    \            return i + 1;\n        }\n    }\n    return 0;", "    long count\
    \ = 0;\n    for (long i : arr) {\n        if (i >= 0) {\n            count +=\
    \ i;\n        } else {\n            count += 1 + abs(i) % 10;\n        }\n   \
    \ }\n    return count;", "  long count = 0;\n  for (int i : arr) {\n    if (i\
    \ > 0) {\n      count += i;\n    }\n  }\n  return count;", "  int n = arr.size();\n\
    \  long count= 0;\n  for (int i=0; i<n; i++){\n    if (arr[i]>0) {\n      count++;\n\
    \    } else {\n      assert (arr[i]<0);\n      arr[i]= arr[i]-10;\n      count+=\
    \ pow(10,arr.size()-i-1);\n    }\n  }\n  return count;", "  int sum = 0;\n  for\
    \ (long &i : arr) {\n    sum += i;\n  }\n  if (sum < 0) {\n    return -count_nums(arr.rbegin());\n\
    \  }\n  int res = 0;\n  assert(arr.size() >= 2);\n  for (long i = arr.size();\
    \ i-- > 1;) {\n    long cur_sum = sum % 10;\n    sum /= 10;\n    if (cur_sum ==\
    \ 0) return -1;\n    if (i + 1 < arr.size() && arr[i] > arr[i + 1]) {\n      int\
    \ j = i;\n      while (j-- > 1 && arr[j] < arr[j - 1]) continue;\n      int k\
    \ = j;\n      while (k-- > 1 && arr[k] > arr[k - 1]) continue;\n      int m =\
    \ k + 1;\n      while (m-- > 1 && arr[m] < arr[k - 1]) continue;\n      if (j\
    \ + 1 == k && j == m) continue;\n      if (j + 2 == k && j == m) continue;\n \
    \   }\n    res += (cur_sum > 0) ? 1 : 0;\n  }\n  return res;", "    auto res =\
    \ 0L;\n    for (auto num : arr) {\n        res += num / (long)std::log10(std::log10(num)\
    \ + 1);\n    }\n    return res;", "    long res = 0;\n    for(int i : arr)\n \
    \       if(i>0)\n            res += i%10;\n    return res;", "    if (arr.size()\
    \ <= 0) return 0;\n    int n = arr.size();\n    long sum = 0, sum2 = 0;\n    int\
    \ cnt = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n      \
    \  if (sum > 0) {\n            sum2 = sum * 10;\n            cnt += __builtin_popcount(sum2\
    \ - sum);\n        }\n    }\n    return cnt;", "    long ans = 0, sign = 1;\n\
    \    for (long num : arr) {\n        sign *= num;\n        while (sign > 0) {\n\
    \            ans += 1;\n            sign /= 10;\n        }\n    }\n    return\
    \ ans;", "    int n = arr.size();\n    if (n == 0)\n        return 0;\n    int\
    \ sum = 0;\n    for (int i = 0; i < n; ++i) {\n        sum += arr[i];\n      \
    \  if (sum >= 0)\n            sum -= arr[i] % 10;\n    }\n    return sum;", " \
    \   long ans = 0;\n    for (auto num : arr) {\n        ans += (long long)num;\n\
    \    }\n    return ans;", "    int sum = 0;\n    for (long i : arr) {\n      \
    \  sum += i / 10;\n    }\n    return sum;", "    long count = 0;\n    for (auto\
    \ i : arr) {\n        // if negative number, take its first digit as a sign\n\
    \        if (i < 0) i *= -1;\n        count += __builtin_popcount(i);\n    }\n\
    \    return count;", "    long count = 0;\n    long sum = 0;\n    int sign = 0;\n\
    \    for (auto it = arr.begin(); it != arr.end(); ++it) {\n        if (*it < 0)\
    \ {\n            sign = -1;\n            *it = -*it;\n        } else {\n     \
    \       sum += *it;\n        }\n        if (sum >= 10) {\n            sum += sign\
    \ % 10;\n            sign = 0;\n            count++;\n        }\n    }\n    return\
    \ count;", "    long count = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        count += std::abs(arr[i]);\n    }\n    return count;", "    if (arr.size()\
    \ == 0) return 0;\n    long ans = 0;\n    long digit = 0;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        digit += arr[i];\n        while (digit > 0)\
    \ {\n            ans += 1;\n            digit /= 10;\n        }\n    }\n    return\
    \ ans;", "    long ans = 0;\n    int len = 0;\n    for (long num : arr) {\n  \
    \      if (num < 0) {\n            ans -= (num % 10);\n            num /= 10;\n\
    \        } else {\n            len++;\n        }\n        ans += num;\n    }\n\
    \    return ans - 10 * len;", "    assert(arr.size() > 0);\n    long sum = 0;\n\
    \    for (long &i : arr) {\n        sum += i;\n    }\n    return sum;", "    //\
    \ write your code in C++14\n    // use std::count() to write your code.\n    long\
    \ count = 0;\n    for(auto &element: arr)\n    {\n        if (element < 0)\n \
    \           element = -element;\n        count += (element % 10) + 1;\n    }\n\
    \    return count;", "    // Code here\n    int n = arr.size();\n    int s = 0,\
    \ sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += arr[i];\n      \
    \  if (sum >= 10) {\n            s = sum - 10;\n        } else if (sum < 0) {\n\
    \            sum = -sum;\n            sum -= arr[i];\n            sum += arr[i];\n\
    \            s = sum;\n        }\n    }\n    return s;", "    long ans = 0;\n\
    \    for (long x: arr) {\n        if (x >= 0)\n            ans += (x % 10);\n\
    \        else\n            ans += (x / 10) * 9 - (x % 10);\n    }\n    return\
    \ ans;", "    if (arr.size() == 0) return 0;\n    long ans = 0;\n    long carry\
    \ = 0;\n    for (long item : arr) {\n        long res = ans % 10;\n        ans\
    \ = ans / 10;\n        res += item;\n        carry = 1;\n        while(carry)\
    \ {\n            carry -= 1;\n            if (res >= 10)\n                ans\
    \ ++;\n            else\n                ans += res;\n            res = ans %\
    \ 10;\n            ans = ans / 10;\n        }\n    }\n    return ans;", "    long\
    \ nums = 0;\n    for (long &num : arr)\n        if (num > 0)\n            nums\
    \ += __builtin_popcount(num);\n    return nums;", "    long sum = 0;\n    for\
    \ (long i : arr) {\n        sum += (i % 10) * pow(10, arr.size() - 1 - i);\n \
    \   }\n    return sum;", "    long count = 0;\n    for (long v : arr) {\n    \
    \    if (v > 0) {\n            count += __builtin_popcount(v);\n        } else\
    \ {\n            count += (-__builtin_popcount(v) + 1);\n        }\n    }\n  \
    \  return count;", "    long count = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > 0) {\n            count += arr[i];\n        }\n\
    \    }\n    return count;", "  // Write your code here\n  long cnt=0;\n  for(long\
    \ i=0;i<arr.size();i++)\n  {\n    cnt++;\n    for(long j=0;j<arr[i]/10;j++)\n\
    \    {\n      if(arr[i]%10<j)\n        cnt--;\n    }\n  }\n  return cnt;", "\t\
    int n = arr.size();\n\tassert(arr.size() > 0);\n\tlong ans = 0;\n\tlong temp =\
    \ 0;\n\tassert(arr.size() == std::accumulate(arr.begin(), arr.end(), 0));\n\n\t\
    for (long i = 0; i < n; i++) {\n\t\tif (arr[i] < 0) {\n\t\t\ttemp += arr[i]; //\
    \ sign change\n\t\t\tarr[i] = -arr[i];\n\t\t}\n\t\tfor (int j = 0; j < i; j++)\
    \ {\n\t\t\tif (arr[i] + arr[j] >= 10) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t\tif (arr[i]\
    \ > 0 && arr[j] > 0 && arr[i] + arr[j] > 9) {\n\t\t\t\ttemp += arr[i] * arr[j];\n\
    \t\t\t\tarr[i] = arr[i] * arr[j] / 10;\n\t\t\t\tarr[j] = arr[j] / 10;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn ans + temp;", "  assert(arr.size() > 0);\n  long res =\
    \ 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n    res += std::abs(arr[i]);\n\
    \  }\n  return res;", "    long sum = 0;\n    long res = 0;\n    for (long &i\
    \ : arr) {\n        if (i >= 0) {\n            sum += i;\n        } else {\n \
    \           sum += (i % 10) * pow(10, arr.size());\n            sum -= i % 10;\n\
    \            sum += pow(10, arr.size());\n        }\n        res += sum;\n   \
    \ }\n    return res;", "  long ans = 0;\n  for (long i : arr) {\n    ans += i\
    \ > 0 ? i % 10 : -i % 10;\n  }\n  return ans;", "    int n = arr.size();\n   \
    \ long cnt = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n   \
    \     int digit = arr[i];\n        while (digit != 0) {\n            sum += digit\
    \ % 10;\n            digit /= 10;\n        }\n        if (sum > 0) {\n       \
    \     cnt += 1;\n        }\n    }\n    return cnt;", "    // Your code here\n\
    \    long ans = 0;\n    for (auto &it : arr) {\n        long sum_of_digits = 0;\n\
    \        while (!is_zero(it)) {\n            sum_of_digits += (it % 10);\n   \
    \         it /= 10;\n        }\n        if (sum_of_digits > 0) {\n           \
    \ ans += 1;\n        }\n    }\n    return ans;", "    // Your code here\n    long\
    \ long int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        int val\
    \ = arr[i];\n        if (val > 0) {\n            sum += val;\n        } else if\
    \ (val < 0) {\n            sum += val / 10;\n        }\n    }\n    return sum;",
  "    long res = 0;\n    long last_num = 0;\n    for (auto x : arr) {\n        if\
    \ (x == last_num + 1) {\n            ++res;\n        } else {\n            res\
    \ = 0;\n            last_num = x;\n        }\n    }\n    return res;", "  // Initialize\
    \ sum and counter\n  long sum = 0;\n  long counter = 0;\n  // Iterate through\
    \ the array\n  for (auto it = arr.begin(); it != arr.end(); it++) {\n    // Add\
    \ current element to sum\n    sum += *it;\n    // Check if sum has a positive\
    \ value\n    if (sum > 0) {\n      // If the sum is positive, then increment the\
    \ counter\n      counter++;\n    }\n  }\n  // Return counter\n  return counter;",
  "    // Your code here\n    long sum = 0;\n    for (long i : arr){\n        sum\
    \ += i;\n    }\n    return sum;", "    if (arr.empty()) return 0;\n    int l =\
    \ 0, r = 0;\n    for (auto it = arr.begin(); it != arr.end(); ++it) {\n      \
    \  auto tmp = *it;\n        if (tmp < 0) {\n            tmp = tmp * -1;\n    \
    \        r++;\n            l += tmp;\n        } else {\n            l++;\n   \
    \         r += tmp;\n        }\n    }\n    return r + l - 1;", "    long n = arr.size();\n\
    \    long count = 0;\n    for (long i : arr)\n        if (i > 0)\n           \
    \ count += n / i;\n    return count;", "  // Write your code here\n  long ans\
    \ = 0, sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n\
    \    if (sum > 0) ans++;\n  }\n  return ans;", "  // write your code here\n  assert(arr.size()\
    \ > 0);\n  long sum = 0;\n  for (auto i : arr) {\n    sum += i;\n  }\n  long count\
    \ = 1;\n  for (auto i : arr) {\n    if (i < 0) break;\n    sum -= i;\n    count\
    \ *= 10;\n  }\n  return sum / count;", "    int len = arr.size();\n    if (len\
    \ <= 0) return 0;\n    long sum = 0;\n    for (int i = 0; i < len; i++) {\n  \
    \      sum += arr[i];\n    }\n    for (int i = len - 1; i >= 0; i--) {\n     \
    \   long curr = sum % 10;\n        if (curr < 0) curr += 10;\n        sum /= 10;\n\
    \        if (sum >= arr[i])\n            return i + 1;\n    }\n    return 0;",
  "    if (arr.empty()) return 0;\n    int n = arr.size();\n    // if first digit\
    \ is negative, all digits are negative\n    if (arr[0] < 0) return -(long int)(n\
    \ - 1) * count_nums(arr.substr(1));\n    // for each digit, if the sum is > 0,\
    \ then we keep adding the next digit\n    // and so on until the sum is < 0\n\
    \    long long ans = 0;\n    for (long long i = 1; i < n; i++) {\n        ans\
    \ += arr[i] + count_nums(arr.substr(0, i));\n    }\n    return ans;", "  long\
    \ ans = 0;\n  for (long n: arr) {\n    ans += n;\n  }\n  return ans;", "    long\
    \ res = 0;\n    for (long n : arr) {\n        if ((n & n) != 0) {\n          \
    \  n /= 10;\n            ++res;\n        } else {\n            res = res * 10\
    \ + (n / 10);\n            n %= 10;\n        }\n    }\n    return res;", "  //\
    \ Write your code here\n  if (arr.empty()) return 0;\n  int sum = 0;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n    if (sum > 0) {\n    \
    \  return i + 1;\n    }\n  }\n  return 0;", "    int count = 0;\n    int sum_of_digits\
    \ = 0;\n    for (long n : arr) {\n        if (n >= 0)\n            sum_of_digits\
    \ += n;\n        else\n            sum_of_digits += n * 10;\n    }\n    count\
    \ = (int)sum_of_digits / 10;\n    return count;", "  // Write your code here\n\
    \  long n = arr.size();\n  long sum = 0;\n  \n  for (long i = 0; i < n; i++) {\n\
    \    long m = arr[i];\n    if (m < 0) \n      m += pow(10, (n-i));\n    sum +=\
    \ m;\n  }\n\n  return sum;", "    long ans = 0;\n    long sum = 0;\n    for (long\
    \ i : arr) sum += i;\n    for (long i : arr) if (i != 0 && sum > 0) ans += (sum\
    \ % 10 == 0 ? 1 : 0);\n    return ans;", "    // write your logic here\n    return\
    \ 0;", "    // code here\n    long count = 0;\n    std::vector<long>::iterator\
    \ it;\n    long sum = 0;\n    for(it=arr.begin(); it!=arr.end(); ++it){\n    \
    \    sum = sum*10+*it;\n        if(sum>0){\n            count++;\n        }\n\
    \    }\n    return count;", "    // TODO\n    long ret=0;\n    for (long i=0;i<arr.size();i++)\n\
    \    {\n        ret += arr[i]%10;\n    }\n    return ret;", "    int sum = 0;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n    }\n \
    \   if (sum < 0) {\n        sum = -(sum % 10);\n    }\n    return sum;", "  long\
    \ count{0};\n  for (int i = 0; i <= arr.size() - 1; ++i) {\n    if (arr[i] > 0)\
    \ {\n      ++count;\n    }\n  }\n  return count;", "    int sum = 0;\n    int\
    \ len = arr.size();\n    for (int i = 0; i < len; i++) {\n        int temp = arr[i];\n\
    \        if (temp < 0) {\n            temp = -temp;\n        }\n        int d\
    \ = temp % 10;\n        if (d > 0 && sum + d < 0) {\n            sum = sum - d;\n\
    \        } else {\n            sum += d;\n        }\n    }\n    return sum;",
  "    if (arr.size() == 0) {\n        return 0;\n    }\n    long result = 0;\n  \
    \  for (long i : arr) {\n        // First check that we have a non-negative number\n\
    \        if (i < 0) {\n            i = -i;\n        }\n        // Now sum the\
    \ digits:\n        long s = 0;\n        while (i > 0) {\n            s = i * 10\
    \ + s;\n            i /= 10;\n        }\n        // If the last digit is non-zero,\
    \ add it\n        if (s) {\n            result += s - 1;\n        }\n    }\n \
    \   return result;", "  // Write your code here.\n  int sum_num=0;\n  for (int\
    \ i=0;i<arr.size();i++){\n    if (arr[i]>0){\n      sum_num=sum_num+arr[i];\n\
    \    }\n  }\n  return sum_num;", "  std::vector<bool> flags(arr.size(), false);\n\
    \  for (long i : arr)\n    if (i > 0)\n      for (long j = 0; j <= i; j++)\n \
    \       if (flags[j] || (i - j) % 10 != 0)\n          flags[j] = true;\n  return\
    \ static_cast<long>(flags.size());", "    long sum = 0;\n    for (long i : arr)\n\
    \        sum += abs(i);\n    return sum;", "    long count = 0;\n    // Count\
    \ the number of elements which has a sum of digits > 0\n    for (int i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] < 0) {\n            int temp = arr[i];\n\
    \            arr[i] = abs(temp);\n        }\n        // To avoid overflow of long\
    \ number\n        if (arr[i] > 1000000000L) {\n            arr[i] = arr[i] / 100000000;\n\
    \        }\n    }\n    for (int i = 0; i < arr.size(); i++) {\n        long sum\
    \ = 0;\n        for (int j = 0; j < arr[i]; j++)\n            sum += abs((int)\
    \ arr[i] - j);\n        if (sum > 0) {\n            count++;\n        }\n    }\n\
    \    return count;", "    if (arr.empty()) {\n        return 0;\n    }\n    long\
    \ sum = 0;\n    for (long i: arr) {\n        sum += i;\n    }\n    if (sum < 0)\
    \ {\n        sum -= arr[0];\n    }\n    return sum;", "  // Write your code in\
    \ C++17\n  std::vector<int> nums;\n  for(int n : arr) {\n    if(n>=0) {\n    \
    \  nums.push_back(n%10);\n    }\n    else {\n      nums.insert(nums.end(), -n/10,\
    \ -n%10);\n    }\n  }\n  return static_cast<long>(std::count_if(std::begin(nums),\
    \ std::end(nums),\n    [](int n) { return n >= 0; }));", "    long sum = 0;\n\
    \    for (auto num: arr) sum += num;\n    if (sum < 0) sum += std::abs(sum);\n\
    \    return sum;", "    int N = arr.size();\n    long ans = 0;\n    for (long\
    \ i = 0; i < N; ++i) {\n        long num = arr[i];\n        if (num < 0) {\n \
    \           num = num * -1;\n        }\n        long digit = 0;\n        while\
    \ (num) {\n            digit = (num % 10) + 1;\n            num = (num / 10);\n\
    \        }\n        if (digit > 0) ans++;\n    }\n    return ans;", "    long\
    \ n = arr.size();\n    long res = 0;\n    for (long i = 0; i < n; i++) {\n   \
    \     if (arr[i] < 0) arr[i] += 10;\n        int sum = 0;\n        while (i +\
    \ 1 < n && arr[i + 1] < 0) i++;\n        long mid = i;\n        long left = arr[i];\n\
    \        while (i - 1 > 0 && arr[i - 1] >= 0) {\n            left -= arr[i - 1];\n\
    \            sum++;\n            mid--;\n        }\n        while (left + 1 <\
    \ n && arr[left + 1] >= 0) {\n            sum += arr[left + 1] - arr[mid];\n \
    \           left++;\n            mid++;\n        }\n        res += sum;\n    }\n\
    \    return res;", "    long n = arr.size();\n    long sum = 0;\n    for(long\
    \ i = 0; i < n; ++i) {\n        if(arr[i] > 0) {\n            sum += arr[i];\n\
    \        }\n    }\n    if(n < 2) {\n        return 0;\n    }\n    if(sum < 0)\
    \ {\n        return sum;\n    }\n    int ans = 0;\n    long last_val = arr[0];\n\
    \    for(long i = 1, j = sum; i < n; ++i) {\n        if(arr[i] < last_val - j)\
    \ {\n            ans += j;\n        }\n        j = last_val - arr[i];\n      \
    \  last_val = arr[i];\n    }\n    return ans;", "    long ans = 0;\n    for(int\
    \ i=0;i<arr.size();i++) {\n        if(arr[i]<0) {\n            arr[i]=-arr[i];\n\
    \        }\n    }\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i]>=0)\
    \ {\n            ans += 1;\n        }\n    }\n    return ans;", "    long long\
    \ ans = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > 0)\
    \ ans++;\n        else arr[i] = -arr[i];\n    }\n    return ans;", "    int sum\
    \ = 0;\n    for (long i : arr) {\n        sum += i;\n    }\n    int count = (int)\
    \ arr.size();\n    while (sum > 0) {\n        sum -= arr[count];\n        count--;\n\
    \    }\n    return count;", "    // Your code here\n    long result = 0;\n   \
    \ for (auto num : arr) {\n        result += abs(num);\n    }\n    return result;",
  "    long count = 0;\n    long temp = 0;\n    for(auto& num : arr) {\n        if(temp\
    \ < 0) {\n            temp += num;\n            count += temp % 10 == 0 ? 1 :\
    \ 0;\n        } else {\n            temp -= num;\n            if(temp % 10 !=\
    \ 0) {\n                count += 1;\n            }\n        }\n    }\n    return\
    \ count;", "    long long sum = 0;\n    long long n = arr.size();\n    for (long\
    \ long i = 0; i < n; i++) {\n        sum += arr[i];\n    }\n    if (sum > 0) {\n\
    \        return sum;\n    }\n    for (long long i = 0; i < n; i++) {\n       \
    \ sum -= arr[i];\n        if (sum < 0) {\n            return i + 1;\n        }\n\
    \    }\n    return 0;", "    // code here\n    long ans = arr.size();\n    long\
    \ sum = std::accumulate(arr.begin(), arr.end(), 0);\n    for (long i = 0; i <\
    \ sum; i++) {\n        long diff = abs(sum-i);\n        if (diff > 1) {\n    \
    \        ans += diff;\n        }\n    }\n    return ans;", "    long ans = 0;\n\
    \    std::vector<long> vec(arr.begin(), arr.end());\n    std::sort(vec.begin(),\
    \ vec.end());\n    for(long i=0;i<vec.size();i++)\n    {\n        long num = vec[i];\n\
    \        if(num<0)\n        {\n            num = abs(num);\n            ans +=\
    \ num;\n        }\n        else\n        {\n            ans += num/10;\n     \
    \       ans -= num%10;\n        }\n    }\n    return ans;", "    // Your code\
    \ here\n    std::vector<long> sum_of_digits(arr.size());\n    for (long number\
    \ : arr) {\n        if (number < 0)\n            number = -number;\n        std::iota(sum_of_digits.begin(),\
    \ sum_of_digits.end(), 0);\n        sum_of_digits.back() += number;\n    }\n \
    \   return std::count_if(sum_of_digits.begin(), sum_of_digits.end(), [](long x)\
    \ {\n        return (x >= 0 && x <= 9);\n    });", "    long ans = 0;\n    for\
    \ (auto it = arr.begin(); it != arr.end(); ++it) {\n        long temp = *it;\n\
    \        if (temp < 0) {\n            temp = temp * -1;\n        }\n        long\
    \ sum = temp;\n        long cur = it;\n        while (cur != arr.end()) {\n  \
    \          sum -= *cur;\n            cur++;\n        }\n        if (sum > 0) {\n\
    \            ans += 1;\n        }\n    }\n    return ans;", "  // Write your code\
    \ here.\n    long n = arr.size();\n    long sum = 0;\n    long last = 0;\n   \
    \ long digitsum = 0;\n    long ndigitsum = 0;\n    long nlast = 0;\n\n    for\
    \ ( int i = 0; i < n; i++ ){\n        digitsum += arr[i];\n        ndigitsum +=\
    \ arr[i]%10;\n    }\n\n    while(digitsum > 0) {\n        last = digitsum%10;\n\
    \        sum += last;\n        digitsum -= last;\n    }\n\n    while(ndigitsum\
    \ > 0) {\n        nlast = ndigitsum%10;\n        sum += nlast;\n        ndigitsum\
    \ -= nlast;\n    }\n\n    return (sum);\n", "    int count = 0;\n    for (long\
    \ i : arr) {\n        if ((i > 0) && (i % 10 == 0)) {\n            count += 1;\n\
    \        }\n    }\n    return count;", "  int sum = 0;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    sum += arr[i];\n    if (sum > 0) break;\n  }\n  if (sum\
    \ == 0) {\n    return sum;\n  }\n  return std::min(sum, arr.size()) * -1;", " \
    \ assert(arr.size() >= 1);\n  long sum = 0;\n  for (auto i : arr) {\n    sum +=\
    \ i % 10;\n  }\n  if (sum > 0) {\n    return std::count(arr.begin(), arr.end(),\
    \ sum);\n  } else {\n    return std::count(arr.begin(), arr.end(), -1);\n  }",
  "    long ans = 0, n = arr.size();\n    for (int i = 1; i < n; i++) {\n        int\
    \ sum_of_digits = 0;\n        long d = arr[i];\n        while (d >= 10) {\n  \
    \          sum_of_digits += d % 10;\n            d /= 10;\n        }\n       \
    \ if (sum_of_digits > 0) {\n            ans += 1;\n        }\n    }\n    return\
    \ ans;", "  // Your code here\n  return 0;", "    long sum = 0;\n    for (long\
    \ i : arr)\n        sum += i;\n    long count = 1;\n    while (sum != 0) {\n \
    \       if (sum % 10 != 0) {\n            sum += count;\n            ++count;\n\
    \        }\n        sum -= count;\n    }\n    return count;", "    std::unordered_set<long>\
    \ did_set;\n    for (auto ele : arr)\n        did_set.insert(ele);\n    long num_ele\
    \ = 0;\n    for (auto ele : arr)\n        if (did_set.find(ele) != did_set.end())\n\
    \            num_ele += 1;\n    return num_ele;", "  long sum = 0;\n  for (int\
    \ i = arr.size(); i > 0; i--) {\n    sum += arr[i];\n  }\n  return sum;", "  int\
    \ sum = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n  }\n\
    \  return sum;", "    long n = arr.size();\n    long count = 0; // initialize\n\
    \n    for (int i = 0; i != n; ++i) {\n        count += arr[i] % 10; // count the\
    \ digits that sum > 0\n        arr[i] /= 10; // remove the digits that sum > 0\n\
    \    }\n    return count; // return the count", "    long ans = 0;\n    for (auto\
    \ &v : arr) {\n        if (v > 0) {\n            ans += 1;\n            long digits\
    \ = v;\n            for (int i = 1; i < 9; i++) {\n                digits *= 10;\n\
    \                if (digits > 0 && digits % 10 == 0)\n                    ans\
    \ += 1;\n            }\n        }\n    }\n    return ans;", "    // write your\
    \ code in here.\n    long sum=0;\n    int neg=0;\n    for (auto &it : arr){\n\
    \        if (it<0){\n            neg++;\n            it=-it;\n        }\n    \
    \    sum+=it;\n    }\n    return sum;", "    std::stack<long long> st;\n    long\
    \ long s = 0;\n    for (auto &elem : arr)\n        if (elem > 0)\n           \
    \ if (st.size() == 0)\n                s = elem;\n            else {\n       \
    \         long long t = st.top();\n                st.pop();\n               \
    \ s += t;\n            }\n            else\n                s += elem;\n    long\
    \ long cnt = 0;\n    while (!st.empty())\n        cnt += st.top();\n    return\
    \ cnt;", "    // Write your code here\n    long sum = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        sum += arr[i];\n    }\n    return sum;", " \
    \   std::stack<long> sum;\n    for (auto x : arr) {\n        long sum = 0;\n \
    \       while (x > 0) {\n            sum += x % 10;\n            x /= 10;\n  \
    \      }\n        sum.push(sum);\n    }\n    long ans = 0;\n    while (!sum.empty())\
    \ {\n        ans += sum.top();\n        sum.pop();\n    }\n    return ans;", " \
    \   long sum = 0;\n    for (auto& num : arr) {\n        if (sum == 0)\n      \
    \      sum += num;\n        else {\n            assert(num >= 0);\n          \
    \  if (num > 0)\n                sum += (sum % 10) + (num % 10);\n        }\n\
    \    }\n    return sum;", "    std::sort(arr.begin(), arr.end());\n    long sum\
    \ = 0;\n    for (long i : arr) {\n        if ((i % 10) > 0) sum += (i % 10);\n\
    \    }\n    return sum;", "  // Your code goes here\n  long sum = 0;\n  for (int\
    \ i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n  }\n  long num = arr.back();\n\
    \  long digit = 0;\n  while (sum >= 10) {\n    sum += num % 10;\n    num /= 10;\n\
    \    digit++;\n  }\n  if (sum < 10) {\n    sum += num;\n  }\n  if (sum < 0) {\n\
    \    sum *= -1;\n    digit--;\n  }\n  return digit;", "    long result = 0;\n\
    \    for(auto& elem : arr) {\n        if(elem < 0) elem *= -1;\n        result\
    \ += (long)std::log10((double)elem);\n    }\n    return result;", "    long ans\
    \ = 0;\n    int neg = 1;\n    for (auto it : arr) {\n        int sign = it < 0\
    \ ? -1 : it;\n        if (sign == 1) {\n            ans++;\n        }\n      \
    \  else if (sign == -1) {\n            ans -= neg;\n            neg = 1;\n   \
    \     }\n        else {\n            ans += sign;\n        }\n    }\n    return\
    \ ans;", "    long n = arr.size();\n    long sum = 0;\n    for (long i = 0; i\
    \ < n; ++i) {\n        sum += arr[i];\n    }\n    return sum;", "    long s =\
    \ 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 0) {\n\
    \            s += arr[i];\n        }\n    }\n    return s;", "  long ans = 0;\n\
    \  for (int i = 1; i < arr.size(); i++) {\n    if (arr[i] > 0 && arr[i] + arr[i-1]\
    \ >= 0) {\n      ans++;\n      ans += arr[i] - arr[i-1];\n    }\n  }\n  return\
    \ ans;", "    if (arr.size() == 0)\n        return 0;\n    long ans = 0;\n   \
    \ for (long i = 0; i < (long long)arr.size(); i++) {\n        long sum_of_digits\
    \ = 0;\n        while (arr[i] > 0) {\n            sum_of_digits += arr[i] % 10;\n\
    \            arr[i] /= 10;\n        }\n        if (sum_of_digits > 0) {\n    \
    \        ans += 1;\n        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
