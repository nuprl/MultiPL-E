language: cpp
name: HumanEval_7_filter_by_substring
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    std::set<std::string> seen;\n    for (size_t i = 0; i < strings.size(); i++)\
    \ {\n        if (seen.find(strings[i]) == seen.end()) {\n            filtered.push_back(strings[i]);\n\
    \            seen.insert(strings[i]);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpisigsl_9: /tmp/tmpisigsl_9.cpp:22: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::string temp_str;\n    bool match = false;\n    for (auto i : strings)\
    \ {\n        if (substring.find(i) != std::string::npos) {\n            match\
    \ = true;\n        } else {\n            match = false;\n        }\n        if\
    \ (match) {\n            temp_str += i;\n        }\n    }\n    result.push_back(temp_str);\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpy9rvl15n: /tmp/tmpy9rvl15n.cpp:27: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  assert(strings.size() > 0);\n  std::vector<std::string>\
    \ result;\n  for (int i = 0; i < strings.size(); ++i) {\n    if (strings[i].find(substring)\
    \ != std::string::npos) {\n      result.push_back(strings[i]);\n    }\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpslpl6ft7: /tmp/tmpslpl6ft7.cpp:9: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> results;\n \
    \   for (auto &str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            results.push_back(str);\n        }\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  assert(!strings[0].empty());\n  for (auto\
    \ s : strings) {\n    assert(!s.empty());\n    if (s.find(substring) == 0) {\n\
    \      strings.erase(strings.begin() + strings.begin() + find(strings.begin(),\
    \ strings.end(), substring));\n    }\n  }\n  return strings;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_harzgex.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp_harzgex.cpp:13:37: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019} and \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019})\n   13 |       strings.erase(strings.begin() + strings.begin() +\
    \ find(strings.begin(), strings.end(), substring));\n      |                 \
    \    ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~\n      |                              \
    \    |                 |\n      |                                  |         \
    \        __normal_iterator<[...],[...]>\n      |                             \
    \     __normal_iterator<[...],[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_harzgex.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = std::__cxx11::basic_string<char>*; _Container = std::vector<std::__cxx11::basic_string<char>\
    \ >; __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type = long\
    \ int]\u2019\n  856 |       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33: note:\
    \   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::iterator\u2019 {aka \u2018__g"
  stdout: ''
  timestamp: 1660116069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::set<std::string> string_set;\n  for\
    \ (auto &s : strings) {\n    string_set.insert(s);\n  }\n  std::vector<std::string>\
    \ filtered_strings;\n  for (auto &s : strings) {\n    if (string_set.find(s) !=\
    \ string_set.end()) {\n      filtered_strings.push_back(s);\n    }\n  }\n  return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp0vwap4y2: /tmp/tmp0vwap4y2.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string s : strings)\n    if (s.find(substring) != std::string::npos)\n\
    \      result.push_back(s);\n  return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116068
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  for (auto &str : strings) {\n    if (str.find(substring)\
    \ != std::string::npos)\n      strings.erase(str.begin(), str.begin() + str.find(substring)\
    \ + substring.length());\n  }\n  return strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2h6596pz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp2h6596pz.cpp:11:88: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::erase(std::__cxx11::basic_string<char>::iterator,\
    \ __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >)\u2019\
    \n   11 |       strings.erase(str.begin(), str.begin() + str.find(substring) +\
    \ substring.length());\n      |                                              \
    \                                          ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2h6596pz.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::__cxx11::basic_string<char>*;\
    \ std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const std::__cxx11::basic_string<char>*]\u2019\n 1427 |       erase(const_iterator\
    \ __position)\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/stl_vector.h:1454:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>"
  stdout: ''
  timestamp: 1660116069
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered;\n  for\
    \ (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      filtered.push_back(s);\n    }\n  }\n  return filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  std::for_each(strings.begin(), strings.end(), [&](std::string s) {\n      \
    \  if (s.find(substring) == 0)\n            output.push_back(s);\n    });\n  \
    \  return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpoe8ed62h: /tmp/tmpoe8ed62h.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"})), ("xx")) == (std::vector<std::string>({"xxx",
    "aaaxxy", "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    auto it= std::find_if(strings.begin(),\
    \ strings.end(), [&](const std::string & s) {\n        return s.find(substring)\
    \ != std::string::npos;\n    });\n    return std::vector<list_of<std::string>>(it,strings.end());\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppo2d31tk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmppo2d31tk.cpp:12:24: error: \u2018list_of\u2019 was not declared in\
    \ this scope\n   12 |     return std::vector<list_of<std::string>>(it,strings.end());\n\
    \      |                        ^~~~~~~\n/tmp/tmppo2d31tk.cpp:12:37: error: template\
    \ argument 1 is invalid\n   12 |     return std::vector<list_of<std::string>>(it,strings.end());\n\
    \      |                                     ^~~~~~\n/tmp/tmppo2d31tk.cpp:12:37:\
    \ error: template argument 2 is invalid\n"
  stdout: ''
  timestamp: 1660116069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  // write your code here\n  for(int i =\
    \ 0; i < strings.size(); i++){\n    if(strings[i].find(substring) != std::string::npos)\n\
    \      strings.erase(strings.begin() + i);\n  }\n  return strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpp1prazly: /tmp/tmpp1prazly.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (auto& s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos) {\n            strings.erase(std::remove(strings.begin(),\
    \ strings.end(), s), strings.end());\n        }\n    }\n    return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpxz8w6a2d: /tmp/tmpxz8w6a2d.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::for_each(strings.begin(), strings.end(), [&result, &substring] (std::string\
    \ &s) {\n        if (s.find(substring) != std::string::npos)\n            result.push_back(s);\n\
    \    });\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  // Create a vector of bools that will hold\
    \ which strings are in our list.\n  std::vector<bool> in_string(strings.size(),\
    \ false);\n  // Go through each string and if it is in the substring vector then\
    \ set the bool in that index to true.\n  for (int i = 0; i < strings.size(); i++)\
    \ {\n    if (strings[i].find(substring) != std::string::npos) {\n      in_string[i]\
    \ = true;\n    }\n  }\n  // Return the list of strings only with the strings that\
    \ match the substring.\n  return std::vector<string>(in_string.begin(), in_string.end());\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp62_btkb4.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp62_btkb4.cpp:18:22: error: \u2018string\u2019 was not declared in this\
    \ scope\n   18 |   return std::vector<string>(in_string.begin(), in_string.end());\n\
    \      |                      ^~~~~~\n/tmp/tmp62_btkb4.cpp:18:22: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp62_btkb4.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp62_btkb4.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp62_btkb4.cpp:18:28: error: template argument 1 is invalid\n   18 |   return\
    \ std::vector<string>(in_string.begin(), in_string.end());\n      |          \
    \                  ^\n/tmp/tmp62_btkb4.cpp:18:28: error: template argument 2 is\
    \ invalid\n"
  stdout: ''
  timestamp: 1660116069
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string string : strings) {\n        if (string.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(string);\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  std::for_each(strings.begin(),\
    \ strings.end(), [&](std::string s) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  });\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    assert(strings.size() > 0);\n    assert(substring.size()\
    \ > 0);\n    std::vector<std::string> filtered_strings;\n    for (std::string\
    \ str : strings) {\n        if (str.find(substring) == 0) {\n            filtered_strings.push_back(str);\n\
    \        }\n    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp8enkwd5m: /tmp/tmp8enkwd5m.cpp:9: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (const auto &string : strings) {\n        if (substring.find(string) !=\
    \ std::string::npos)\n            result.push_back(string);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmppsqrfs42: /tmp/tmppsqrfs42.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered;\n  for\
    \ (auto it = strings.begin(); it != strings.end(); ++it)\n    if (it->find(substring)\
    \ != std::string::npos) {\n      filtered.push_back(*it);\n    }\n  return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(s);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &el : strings) {\n        if (el == substring)\n            result.push_back(el);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpsnsft8cr: /tmp/tmpsnsft8cr.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    assert(strings.size() > 0);\n    assert(substring);\n\
    \    std::vector<std::string> results;\n    for (auto &str : strings) {\n    \
    \    if (str.find(substring) != std::string::npos) {\n            results.emplace_back(str);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmp5c8nng2h.cpp:2:\n/tmp/tmp5c8nng2h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp5c8nng2h.cpp:10:5: error: invalid static_cast from type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} to type \u2018bool\u2019\n\
    \   10 |     assert(substring);\n      |     ^~~~~~\n"
  stdout: ''
  timestamp: 1660116069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  \n  // Your code here\n  \n  return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmppn82umrb: /tmp/tmppn82umrb.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  bool flag = false;\n    for (auto &s : strings)\n    {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n            flag\
    \ = true;\n        }\n    }\n    if (flag) {\n        return result;\n    } else\
    \ {\n        return strings;\n    }\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::set<std::string> s1;\n    for (std::string s : strings) {\n        s1.insert(s);\n\
    \    }\n    for (std::string s : strings) {\n        if (s1.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(s);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8czs1ce9.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp8czs1ce9.cpp:15:32: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018std::set<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >\u2019\
    } and \u2018const size_type\u2019 {aka \u2018const long unsigned int\u2019})\n\
    \   15 |         if (s1.find(substring) != std::string::npos) {\n      |     \
    \        ~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~~~~~\n      |                    |\
    \                           |\n      |                    |                  \
    \         const size_type {aka const long unsigned int}\n      |             \
    \       std::set<std::__cxx11::basic_string<char> >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >}\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n                 from\
    \ /tmp/tmp8czs1ce9.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5: note: candidate:\
    \ \u2018template<class _BiIter> bool std::__cxx11::operator!=(const std::__cxx11::sub_match<_BiIter>&,\
    \ const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1037 |     operator!=(const\
    \ sub_match<_BiIter>& __lhs, const sub_match<_BiIter>& __rhs)\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1037:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp8czs1ce9.cpp:15:48: note:   \u2018std::set<std::__cxx11::basic_string<char>\
    \ >::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >\u2019} is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   15 |         if (s1.find(substring) != std::string::npos) {\n      |    \
    \                                            ^~~~\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp8czs1ce9.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5:\
    \ note: cand"
  stdout: ''
  timestamp: 1660116069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::sort(strings.begin(), strings.end());\n\
    \  std::vector<std::string> ans;\n  for (auto &it : strings)\n    if (it.find(substring)\
    \ != std::string::npos)\n      ans.push_back(it);\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmppzksfp0y: /tmp/tmppzksfp0y.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::size_t size = strings.size();\n    std::size_t index = 0;\n    while (index\
    \ < size) {\n        if (strings[index].find(substring) != std::string::npos)\
    \ {\n            result.push_back(strings[index]);\n        }\n        index++;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  // TODO: Your code here\n  for(auto itr\
    \ = strings.begin(); itr != strings.end(); itr++) {\n    if(itr->find(substring)\
    \ != std::string::npos) {\n      strings.erase(itr);\n    }\n  }\n  return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp3r5lto0o: /tmp/tmp3r5lto0o.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_list;\n\
    \    std::string prefix = substring + \"|\";\n    // Iterate over all strings\
    \ in the input\n    for (std::string str : strings) {\n        // Skip the string\
    \ if it doesn't match our search\n        if (!str.find(substring) != std::string::npos)\
    \ {\n            continue;\n        }\n        // Get the original prefix\n  \
    \      std::string prefix = str.substr(0, str.find(substring));\n        // Add\
    \ the string to our output list\n        filtered_list.push_back(str);\n    }\n\
    \    // Remove the prefix\n    for (std::string str : filtered_list) {\n     \
    \   std::string new_prefix = str.substr(str.find(substring) + substring.length());\n\
    \        str.erase(0, new_prefix.length());\n    }\n    return filtered_list;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp_xel1vvg: /tmp/tmp_xel1vvg.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // your implementation here\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpwjf7koc0: /tmp/tmpwjf7koc0.cpp:13: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::cout << \"strings: \" << strings.size()\
    \ << \", substring: \" << substring.size() << std::endl;\n  assert(strings.size()\
    \ >= substring.size());\n  std::vector<std::string> results;\n  std::string s\
    \ = strings[0];\n  for (int i = 0; i < strings.size(); i++) {\n    if (s.find(substring)\
    \ != std::string::npos) {\n      results.push_back(s);\n    }\n    s = strings[i];\n\
    \  }\n  std::cout << \"results: \" << results.size() << std::endl;\n  return results;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmphx3d67qk: /tmp/tmphx3d67qk.cpp:10: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() >= substring.size()'' failed.

    '
  stdout: 'strings: 0, substring: 4

    '
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> new_strings;\n\
    \  // Iterate over the input list of strings\n  for (auto it = strings.begin();\
    \ it != strings.end(); it++) {\n    // If the input string contains the substring\n\
    \    if (contains(*it, substring)) {\n      // Add the input string to the list\
    \ of filtered strings\n      new_strings.push_back(*it);\n    }\n  }\n  return\
    \ new_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n \
    \   assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3c4hejm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpb3c4hejm.cpp:13:9: error: \u2018contains\u2019 was not declared in\
    \ this scope\n   13 |     if (contains(*it, substring)) {\n      |         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660116069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\t\n\tstd::vector<std::string> filtered_strings;\n\
    \t\n\tstd::sort(strings.begin(), strings.end());\n\tstd::set<std::string>::iterator\
    \ itr = std::search(\n\t\tstrings.begin(), strings.end(),\n\t\tsubstring.begin(),\
    \ substring.end()\n\t);\n\t\n\tif (itr != strings.end()) {\n\t\tfiltered_strings.push_back(std::string(*itr,\
    \ substring.size()));\n\t}\n\treturn filtered_strings;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpftlhkluo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpftlhkluo.cpp:13:51: error: conversion from \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 to non-scalar type \u2018\
    std::set<std::__cxx11::basic_string<char> >::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >\u2019} requested\n   13 |  std::set<std::string>::iterator itr = std::search(\n\
    \      |                                        ~~~~~~~~~~~^\n   14 |   strings.begin(),\
    \ strings.end(),\n      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                  \n\
    \   15 |   substring.begin(), substring.end()\n      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \               \n   16 |  );\n      |  ~                                    \
    \             \n/tmp/tmpftlhkluo.cpp:18:10: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::set<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >\u2019\
    } and \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019})\n   18 |  if (itr != strings.end()) {\n      |      ~~~ ^~ ~~~~~~~~~~~~~\n\
    \      |      |                 |\n      |      |                 std::vector<std::__cxx11::basic_string<char>\
    \ >::iterator {aka __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >}\n      |      std::set<std::__cxx11::basic_string<char>\
    \ >::iterator {aka std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n     \
    \            from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp"
  stdout: ''
  timestamp: 1660116069
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    auto filter_substring = [&substring]\
    \ (std::string s) {\n        return s.find(substring) != std::string::npos;\n\
    \    };\n    std::vector<std::string> filtered_strings;\n    std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(filtered_strings), filter_substring);\n  \
    \  return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  // Create a set of strings that contain\
    \ the substring\n  std::unordered_set<std::string> subset(substring);\n  // Scan\
    \ over all the strings and keep those that do not contain substring\n  std::vector<std::string>\
    \ result;\n  for (std::string& s : strings) {\n    if (subset.find(s) != std::string::npos)\
    \ {\n      result.push_back(s);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7ahd3qxd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp7ahd3qxd.cpp:10:51: error: no matching function for call to \u2018\
    std::unordered_set<std::__cxx11::basic_string<char> >::unordered_set(std::string&)\u2019\
    \n   10 |   std::unordered_set<std::string> subset(substring);\n      |      \
    \                                             ^\nIn file included from /usr/include/c++/9/unordered_set:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:118,\n\
    \                 from /tmp/tmp7ahd3qxd.cpp:2:\n/usr/include/c++/9/bits/unordered_set.h:258:7:\
    \ note: candidate: \u2018std::unordered_set<_Value, _Hash, _Pred, _Alloc>::unordered_set(std::initializer_list<typename\
    \ std::_Hashtable<_Value, _Value, _Alloc, std::__detail::_Identity, _Pred, _Hash,\
    \ std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy,\
    \ std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>,\
    \ std::__is_nothrow_invocable<const _Hash&, const _Tp&> > >::value, true, true>\
    \ >::value_type>, std::unordered_set<_Value, _Hash, _Pred, _Alloc>::size_type,\
    \ const hasher&, const allocator_type&) [with _Value = std::__cxx11::basic_string<char>;\
    \ _Hash = std::hash<std::__cxx11::basic_string<char> >; _Pred = std::equal_to<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; typename std::_Hashtable<_Value,\
    \ _Value, _Alloc, std::__detail::_Identity, _Pred, _Hash, std::__detail::_Mod_range_hashing,\
    \ std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<std::__not_<std::__and_<std::__is_fast_hash<_Hash>,\
    \ std::__is_nothrow_invocable<const _Hash&, const _Tp&> > >::value, true, true>\
    \ >::value_type = std::__cxx11::basic_string<char>; std::unordered_set<_Value,\
    \ _Hash, _Pred, _Alloc>::size_type = long unsigned int; std::unordered_set<_Value,\
    \ _Hash, _Pred, _Alloc>::hasher = std::hash<std::__c"
  stdout: ''
  timestamp: 1660116069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    std::string filtered_substring;\n    for (size_t i = 0; i < strings.size();\
    \ ++i) {\n        if (strings[i].find(substring) != string::npos) {\n        \
    \    filtered.push_back(strings[i]);\n        } else {\n            filtered_substring\
    \ += strings[i] + \" \";\n        }\n    }\n    return filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpso6wgmdm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpso6wgmdm.cpp:12:43: error: \u2018string\u2019 has not been declared\n\
    \   12 |         if (strings[i].find(substring) != string::npos) {\n      |  \
    \                                         ^~~~~~\n"
  stdout: ''
  timestamp: 1660116069
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::ostringstream oss;\n  oss << substring;\n\
    \  std::string delimiter = oss.str();\n  // Get only those strings that match\
    \ the delimiter\n  std::vector<std::string> filtered_strings;\n  for (std::string\
    \ str : strings) {\n    if (str.find(delimiter) != std::string::npos) {\n    \
    \  filtered_strings.push_back(str);\n    }\n  }\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::sort(strings.begin(), strings.end());\n\
    \    std::vector<std::string> retval;\n    std::string temp;\n    bool match =\
    \ false;\n    for (size_t i = 0; i < strings.size(); ++i) {\n        temp = strings[i];\n\
    \        if (temp.size() >= substring.size() && substring == temp.substr(0, substring.size()))\
    \ {\n            match = true;\n        }\n        if (!match) {\n           \
    \ retval.push_back(strings[i]);\n        }\n    }\n    return retval;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpwuhcuk4s: /tmp/tmpwuhcuk4s.cpp:27: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for(const\
    \ auto &s : strings)\n        if (s.find(substring) != std::string::npos)\n  \
    \          out.push_back(s);\n    return out;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  vector<string> filtered_strings;\n  for\
    \ (auto& string : strings) {\n    if (substring == string) {\n      filtered_strings.push_back(string);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiw3y0h9h.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpiw3y0h9h.cpp:9:3: error: \u2018vector\u2019 was not declared in this\
    \ scope\n    9 |   vector<string> filtered_strings;\n      |   ^~~~~~\n/tmp/tmpiw3y0h9h.cpp:9:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiw3y0h9h.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiw3y0h9h.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpiw3y0h9h.cpp:9:10:\
    \ error: \u2018string\u2019 was not declared in this scope\n    9 |   vector<string>\
    \ filtered_strings;\n      |          ^~~~~~\n/tmp/tmpiw3y0h9h.cpp:9:10: note:\
    \ suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpiw3y0h9h.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::st"
  stdout: ''
  timestamp: 1660116069
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::vector<std::string>::iterator it = strings.begin(); it != strings.end();\
    \ ++it) {\n        std::size_t found = std::find(*it, substring.c_str(), substring.c_str()\
    \ + substring.length());\n        if (found != std::string::npos) {\n        \
    \    result.push_back(*it);\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5b3dpxqp.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp5b3dpxqp.cpp:11:101: error: no matching function for call to \u2018\
    find(std::__cxx11::basic_string<char>&, const char*, const char*)\u2019\n   11\
    \ |         std::size_t found = std::find(*it, substring.c_str(), substring.c_str()\
    \ + substring.length());\n      |                                            \
    \                                                         ^\nIn file included\
    \ from /usr/include/c++/9/bits/locale_facets.h:48,\n                 from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp5b3dpxqp.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:373:5:\
    \ note: candidate: \u2018template<class _CharT2> typename __gnu_cxx::__enable_if<std::__is_char<_CharT2>::__value,\
    \ std::istreambuf_iterator<_CharT> >::__type std::find(std::istreambuf_iterator<_CharT>,\
    \ std::istreambuf_iterator<_CharT>, const _CharT2&)\u2019\n  373 |     find(istreambuf_iterator<_CharT>\
    \ __first,\n      |     ^~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:373:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp5b3dpxqp.cpp:11:101:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    std::istreambuf_iterator<_CharT>\u2019\n   11 |         std::size_t found = std::find(*it,\
    \ substring.c_str(), substring.c_str() + substring.length());\n      |       \
    \                                                                            \
    \                  ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5b3dpx"
  stdout: ''
  timestamp: 1660116069
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (const auto& string : strings) {\n        if (string.find(substring) !=\
    \ std::string::npos) {\n            result.emplace_back(string);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) == 0) {\n       \
    \     filtered.push_back(s);\n        }\n    }\n    return filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpighg84xz: /tmp/tmpighg84xz.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"})), ("xx")) == (std::vector<std::string>({"xxx",
    "aaaxxy", "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (auto& elem : strings) {\n        if (elem.find(substring) != std::string::npos)\n\
    \            filtered_strings.push_back(elem);\n    }\n    return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116070
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (const auto& str : strings) {\n        if (str.find(substring) != std::string::npos)\
    \ {\n            result.push_back(str);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115962
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    int start_index = std::find(strings.begin(),\
    \ strings.end(), substring).first;\n    int end_index = std::find(strings.begin(),\
    \ strings.end(), substring).second;\n    std::string substring_without_start =\
    \ strings.substr(start_index, end_index - start_index);\n    return std::vector<std::string>{substring_without_start};\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6jbotv3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpc6jbotv3.cpp:9:76: error: \u2018class __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 has no member named \u2018\
    first\u2019\n    9 |     int start_index = std::find(strings.begin(), strings.end(),\
    \ substring).first;\n      |                                                 \
    \                           ^~~~~\n/tmp/tmpc6jbotv3.cpp:10:74: error: \u2018class\
    \ __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019 has no member named \u2018second\u2019\n   10 |     int end_index\
    \ = std::find(strings.begin(), strings.end(), substring).second;\n      |    \
    \                                                                      ^~~~~~\n\
    /tmp/tmpc6jbotv3.cpp:11:51: error: \u2018class std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018substr\u2019\n   11 |     std::string substring_without_start\
    \ = strings.substr(start_index, end_index - start_index);\n      |           \
    \                                        ^~~~~~\n"
  stdout: ''
  timestamp: 1660116069
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::set<std::string> unique_strings;\n\
    \    for (auto s : strings) {\n        if (unique_strings.count(s) == 0) {\n \
    \           unique_strings.insert(s);\n        }\n    }\n    std::vector<std::string>\
    \ result;\n    for (auto s : unique_strings) {\n        if (s.find(substring)\
    \ != std::string::npos) {\n            result.push_back(s);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpc8h02asq: /tmp/tmpc8h02asq.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116070
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (size_t i = 0; i < strings.size(); i++) {\n        if (strings.at(i).find(substring)\
    \ != string::npos) {\n            out.push_back(strings.at(i));\n        }\n \
    \   }\n    return out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyo8v3aii.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpyo8v3aii.cpp:11:46: error: \u2018string\u2019 has not been declared\n\
    \   11 |         if (strings.at(i).find(substring) != string::npos) {\n      |\
    \                                              ^~~~~~\n"
  stdout: ''
  timestamp: 1660116071
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<string> result;\n    for\
    \ (string & s : strings)\n    {\n        if (s.find(substring) != std::string::npos)\n\
    \            result.push_back(s);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmgf48s4z.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpmgf48s4z.cpp:9:17: error: \u2018string\u2019 was not declared in this\
    \ scope\n    9 |     std::vector<string> result;\n      |                 ^~~~~~\n\
    /tmp/tmpmgf48s4z.cpp:9:17: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmgf48s4z.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmgf48s4z.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpmgf48s4z.cpp:9:23: error: template argument 1 is invalid\n    9 |    \
    \ std::vector<string> result;\n      |                       ^\n/tmp/tmpmgf48s4z.cpp:9:23:\
    \ error: template argument 2 is invalid\n/tmp/tmpmgf48s4z.cpp:10:21: error: found\
    \ \u2018:\u2019 in nested-name-specifier, expected \u2018::\u2019\n   10 |   \
    \  for (string & s : strings)\n      |                     ^\n      |        \
    \             ::\n/tmp/tmpmgf48s4z.cpp:10:19:"
  stdout: ''
  timestamp: 1660116071
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    assert(substring != \"\");\n    std::vector<std::string>\
    \ result;\n    bool found = false;\n    for (auto &x : strings) {\n        if\
    \ (find(x, substring.begin(), substring.end()) != std::string::npos) {\n     \
    \       found = true;\n            result.push_back(x);\n        }\n    }\n  \
    \  if (!found) {\n        result.push_back(substring);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5ykm1gk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpe5ykm1gk.cpp:13:55: error: no matching function for call to \u2018\
    find(std::__cxx11::basic_string<char>&, std::__cxx11::basic_string<char>::iterator,\
    \ std::__cxx11::basic_string<char>::iterator)\u2019\n   13 |         if (find(x,\
    \ substring.begin(), substring.end()) != std::string::npos) {\n      |       \
    \                                                ^\nIn file included from /usr/include/c++/9/bits/locale_facets.h:48,\n\
    \                 from /usr/include/c++/9/bits/basic_ios.h:37,\n             \
    \    from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpe5ykm1gk.cpp:2:\n/usr/include/c++/9/bits/streambuf_iterator.h:373:5:\
    \ note: candidate: \u2018template<class _CharT2> typename __gnu_cxx::__enable_if<std::__is_char<_CharT2>::__value,\
    \ std::istreambuf_iterator<_CharT> >::__type std::find(std::istreambuf_iterator<_CharT>,\
    \ std::istreambuf_iterator<_CharT>, const _CharT2&)\u2019\n  373 |     find(istreambuf_iterator<_CharT>\
    \ __first,\n      |     ^~~~\n/usr/include/c++/9/bits/streambuf_iterator.h:373:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpe5ykm1gk.cpp:13:55:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    std::istreambuf_iterator<_CharT>\u2019\n   13 |         if (find(x, substring.begin(),\
    \ substring.end()) != std::string::npos) {\n      |                          \
    \                             ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpe5ykm1gk.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3936:5:\
    \ note: candidate: \u2018templ"
  stdout: ''
  timestamp: 1660116072
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (auto s : strings) {\n        if (s.find(substring) != std::string::npos)\n\
    \            filtered_strings.push_back(s);\n    }\n    return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116072
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (auto& s : strings) {\n        std::size_t found = s.find(substring);\n\
    \        if (found != std::string::npos) {\n            filtered.push_back(s);\n\
    \        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    \n    // Copy input list first\n    std::vector<std::string>\
    \ result;\n    result.reserve(strings.size());\n    std::copy(strings.begin(),\
    \ strings.end(), std::back_inserter(result));\n    \n    // Filter\n    auto it\
    \ = std::find_if(\n            result.begin(),\n            result.end(),\n  \
    \          [&substring](const std::string& str){return std::find(str.begin(),\
    \ str.end(), substring) != str.end();}\n        );\n    result.erase(it, result.end());\n\
    \    \n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp91sxqnzz.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Tp = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp91sxqnzz.cpp:19:100:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018const char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-l"
  stdout: ''
  timestamp: 1660116071
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  \n  std::cout << \"strings: \" << std::endl;\
    \ for (auto s : strings) { std::cout << s << std::endl; };\n  std::cout << \"\
    substring: \" << std::endl; for (auto s : substring) { std::cout << s << std::endl;\
    \ };\n  std::cout << \"====== filter_by_substring(): \" << std::endl;\n  \n  //\
    \ Step 1. Count how many strings contain substring\n  int count = 0;\n  \n  for\
    \ (auto s : strings) {\n    if (s.find(substring) != std::string::npos) count++;\n\
    \  }\n  \n  // Step 2. Filter strings that contains substring\n  std::vector<std::string>\
    \ filtered_strings;\n  \n  for (auto s : strings) {\n    if (s.find(substring)\
    \ != std::string::npos) filtered_strings.push_back(s);\n  }\n  \n  // Step 3.\
    \ Output result\n  std::cout << \"count: \" << count << std::endl;\n  std::cout\
    \ << \"filtered strings: \" << std::endl;\n  for (auto s : filtered_strings) {\n\
    \    std::cout << s << std::endl;\n  }\n  \n  return filtered_strings;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: "strings: \nsubstring: \nj\no\nh\nn\n====== filter_by_substring(): \ncount:\
    \ 0\nfiltered strings: \nstrings: \nxxx\nasd\nxxy\njohn doe\nxxxAAA\nxxx\nsubstring:\
    \ \nx\nx\nx\n====== filter_by_substring(): \ncount: 3\nfiltered strings: \nxxx\n\
    xxxAAA\nxxx\nstrings: \nxxx\nasd\naaaxxy\njohn doe\nxxxAAA\nxxx\nsubstring: \n\
    x\nx\n====== filter_by_substring(): \ncount: 4\nfiltered strings: \nxxx\naaaxxy\n\
    xxxAAA\nxxx\nstrings: \ngrunt\ntrumpet\nprune\ngruesome\nsubstring: \nr\nu\nn\n\
    ====== filter_by_substring(): \ncount: 2\nfiltered strings: \ngrunt\nprune\n"
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    //\
    \ Create a map with the index of every occurence of the substring\n    std::unordered_map<std::string::size_type,\
    \ int> substring_index;\n    std::string prev_substring = substring;\n    for(size_t\
    \ i = 0; i < strings.size(); i++) {\n        if(prev_substring == substring) {\n\
    \            substring_index[prev_substring.size()] += 1;\n        }\n       \
    \ if(substring_index.find(prev_substring.size()) != substring_index.end()) {\n\
    \            substring_index[prev_substring.size()]--;\n        }\n    }\n   \
    \ // Iterate over the map to remove the empty substrings\n    for(auto& i : substring_index)\
    \ {\n        if(substring_index[i] == 0) {\n            res.push_back(strings[i]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptar2zkpu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmptar2zkpu.cpp:23:27: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::unordered_map<long unsigned int, int>\u2019 and \u2018\
    std::pair<const long unsigned int, int>\u2019)\n   23 |         if(substring_index[i]\
    \ == 0) {\n      |                           ^\nIn file included from /usr/include/c++/9/unordered_map:47,\n\
    \                 from /usr/include/c++/9/functional:61,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptar2zkpu.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:985:7:\
    \ note: candidate: \u2018std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type&\
    \ std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::operator[](const key_type&)\
    \ [with _Key = long unsigned int; _Tp = int; _Hash = std::hash<long unsigned int>;\
    \ _Pred = std::equal_to<long unsigned int>; _Alloc = std::allocator<std::pair<const\
    \ long unsigned int, int> >; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::mapped_type\
    \ = int; std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type = long\
    \ unsigned int]\u2019\n  985 |       operator[](const key_type& __k)\n      |\
    \       ^~~~~~~~\n/usr/include/c++/9/bits/unordered_map.h:985:34: note:   no known\
    \ conversion for argument 1 from \u2018std::pair<const long unsigned int, int>\u2019\
    \ to \u2018const key_type&\u2019 {aka \u2018const long unsigned int&\u2019}\n\
    \  985 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/unordered_map.h:989:7: note: candidate: \u2018std::unordered_map<_Key,\
    \ _Tp, _Hash, _Pred, _Alloc>::mapped_type& std::unordered_map<_Key, _Tp, _Hash,\
    \ _Pred, _Alloc>::operator[](std::unordered_map<_Key, _Tp, _Hash, _Pred, _Alloc>::key_type&&)\
    \ [with _Key = long unsigned int; _Tp = int; _Hash = std::hash<"
  stdout: ''
  timestamp: 1660116072
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    for\
    \ (std::string s : strings)\n        if (s.find(substring) != std::string::npos)\n\
    \            ret.push_back(s);\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    auto it = std::find_if(strings.begin(),\
    \ strings.end(),\n            [](const std::string &s) {\n                return\
    \ s.find(substring) != std::string::npos;\n            });\n    strings.erase(it);\n\
    \    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxlwag3a.cpp: In lambda function:\n/tmp/tmpjxlwag3a.cpp:11:31:\
    \ error: \u2018substring\u2019 is not captured\n   11 |                 return\
    \ s.find(substring) != std::string::npos;\n      |                           \
    \    ^~~~~~~~~\n/tmp/tmpjxlwag3a.cpp:10:14: note: the lambda has no capture-default\n\
    \   10 |             [](const std::string &s) {\n      |              ^\n/tmp/tmpjxlwag3a.cpp:8:92:\
    \ note: \u2018std::string substring\u2019 declared here\n    8 | std::vector<std::string>\
    \ filter_by_substring(std::vector<std::string> strings, std::string substring)\
    \ {\n      |                                                                 \
    \               ~~~~~~~~~~~~^~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpjxlwag3a.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Predicate = filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Predicate = __gnu_cxx::__ops::_Iter_pred<filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:\
    \   required from \u2018_Iterator std::__find_if(_Iterator, _Iterator, _Predicate)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::"
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (const auto& str : strings)\n        if (std::find(str.cbegin(), str.cend(),\
    \ substring) != str.cend())\n            result.push_back(str);\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp15xc2w71.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Tp = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp15xc2w71.cpp:11:58:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018const char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-li"
  stdout: ''
  timestamp: 1660116072
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> new_strings;\n\
    \    for (std::size_t i = 0; i < strings.size(); ++i) {\n        if (strings[i].find(substring)\
    \ != std::string::npos)\n            new_strings.push_back(strings[i]);\n    }\n\
    \    return new_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116072
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for(auto str : strings) {\n        if (str.find(substring) != std::string::npos)\n\
    \            result.push_back(str);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::sort(strings.begin(), strings.end());\n\
    \  std::vector<std::string> new_strings;\n  for (std::string string : strings)\
    \ {\n    if (string.find(substring) != std::string::npos)\n      new_strings.push_back(string);\n\
    \  }\n  return new_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp832o6bv4: /tmp/tmp832o6bv4.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tfor (const auto &s : strings)\n\t\tif (s.find(substring)\
    \ != std::string::npos)\n\t\t\tstrings.erase(std::remove(strings.begin(), strings.end(),\
    \ s));\n\treturn strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpecl4y9nf: /tmp/tmpecl4y9nf.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // The function should return a list\
    \ of strings that contain substring\n    // Use a vector to store the result\n\
    \    std::vector<std::string> result;\n    \n    // Initialize a map of substrings\
    \ to their counts\n    std::map<std::string, int> substrings_to_counts;\n\n  \
    \  // Iterate over all the strings in the list\n    for (std::string string :\
    \ strings) {\n        // Iterate over all the substrings in the string\n     \
    \   // Count the occurrences of each substring\n        // Store the substring\
    \ in result if count > 1\n        for (auto &character : string) {\n         \
    \   // Check if substring is in the map of substrings to their counts\n      \
    \      if (substrings_to_counts.find(character) != substrings_to_counts.end())\
    \ {\n                // If so, increase the count by 1\n                substrings_to_counts[character]++;\n\
    \            } else {\n                // If not, set the count as 1 and add the\
    \ substring to the map\n                substrings_to_counts[character] = 1;\n\
    \            }\n        }\n    }\n    // Iterate over the map of substrings to\
    \ their counts\n    // If count is greater than 1, add that substring to the result\n\
    \    for (auto &character : substrings_to_counts) {\n        if (character.second\
    \ > 1) {\n            result.push_back(character.first);\n        }\n    }\n \
    \   \n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1s_zu4hz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp1s_zu4hz.cpp:23:52: error: no matching function for call to \u2018\
    std::map<std::__cxx11::basic_string<char>, int>::find(char&)\u2019\n   23 |  \
    \           if (substrings_to_counts.find(character) != substrings_to_counts.end())\
    \ {\n      |                                                    ^\nIn file included\
    \ from /usr/include/c++/9/map:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp1s_zu4hz.cpp:2:\n/usr/include/c++/9/bits/stl_map.h:1168:7:\
    \ note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >; std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>,\
    \ int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_map.h:1168:28:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n\
    \ 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_map.h:1174:2: note: candidate: \u2018template<class\
    \ _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key,\
    \ _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare,\
    \ _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>;\
    \ _Tp = int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc =\
    \ std::allocator<std::pair<const std::__cxx11::basic_string<char>, int> >]\u2019\
    \n 1174 |  find(const _Kt& __x) -> decltype(_M_t."
  stdout: ''
  timestamp: 1660116072
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (size_t i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (const auto &s : strings) {\n        if (substring.find(s) != std::string::npos)\
    \ {\n            out.push_back(s);\n        }\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpf49a8_vg: /tmp/tmpf49a8_vg.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> res;\n\tfor (auto\
    \ s : strings) {\n\t\tif (substring.find(s) != std::string::npos)\n\t\t\tres.push_back(s);\n\
    \t}\n\treturn res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpzhnjhgel: /tmp/tmpzhnjhgel.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            filtered_strings.push_back(string);\n        }\n    }\n    return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  // Your code here\n  std::set_intersection(strings.begin(),\
    \ strings.end(), substring.begin(), substring.end(), std::back_inserter(strings));\n\
    \  return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpv3jfvhln.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_less_iter::operator()(_Iterator1,\
    \ _Iterator2) const [with _Iterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Iterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5258:12:\
    \   required from \u2018_OutputIterator std::__set_intersection(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _InputIterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OutputIterator = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\n/usr/include/c++/9/bits/stl_algo.h:5313:48:\
    \   required from \u2018_OIter std::set_intersection(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _IIter2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OIter = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/tmp/tmpv3jfvhln.cpp:10:120:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:43:23:\
    \ error: no match for \u2018operator<\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   43 |       { return *__it1 < *__it2; }\n      |  \
    \              ~~~~~~~^~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \           "
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (auto &s : strings) {\n        if\
    \ (s.find(substring) != std::string::npos)\n            strings.erase(std::remove(strings.begin(),\
    \ strings.end(), s), strings.end());\n    }\n    return strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp5qxxqom2: /tmp/tmp5qxxqom2.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::sort(strings.begin(), strings.end());\n\
    \    std::vector<std::string> result;\n    // Find the first position of substring\n\
    \    auto pos = std::find(strings.begin(), strings.end(), substring);\n    //\
    \ If no such substring found, return empty list\n    if (pos == strings.end())\
    \ {\n        return result;\n    }\n    result.push_back(strings.front());\n \
    \   // Go to the last position and check each string to see if it contains the\
    \ substring\n    for (auto i = pos + 1; i < strings.size(); i++) {\n        auto\
    \ s = strings[i];\n        // If the substring is found, add the string to result\
    \ vector\n        if (s.find(substring) != std::string::npos) {\n            result.push_back(strings.at(i));\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_0ubj_3.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp1_0ubj_3.cpp:19:30: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019 and \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::size_type\u2019 {aka \u2018long unsigned int\u2019})\n   19 |     for (auto\
    \ i = pos + 1; i < strings.size(); i++) {\n      |                           \
    \ ~ ^ ~~~~~~~~~~~~~~\n      |                            |               |\n \
    \     |                            |               std::vector<std::__cxx11::basic_string<char>\
    \ >::size_type {aka long unsigned int}\n      |                            __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp1_0ubj_3.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:912:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator<(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  912 |\
    \     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp1_0ubj_3.cpp:19:45: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorR, _Container>\u2019\
    \ and \u2018std::vector<std::__cxx11::basic_string<char> >::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n   19 |     for (auto i = pos + 1; i < strings.size();\
    \ i++) {\n      |                                             ^\nIn file includ"
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Your code goes here\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpt8hkrgxx: /tmp/tmpt8hkrgxx.cpp:13: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::sort(strings.begin(), strings.end());\n\
    \  std::cout << \"Filtering input strings for: \" << substring << std::endl;\n\
    \  std::vector<std::string> result;\n  for(auto s : strings) {\n    if(s.find(substring)\
    \ != std::string::npos)\n      result.push_back(s);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpteiexbnn: /tmp/tmpteiexbnn.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: 'Filtering input strings for: john

    Filtering input strings for: xxx

    '
  timestamp: 1660116073
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (const auto & element : strings) {\n        if (element.find(substring) != std::string::npos)\n\
    \            res.push_back(element);\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (auto& string : strings) {\n    \
    \    if (string.find(substring) != std::string::npos)\n            strings.erase(strings.begin(),\
    \ strings.begin() + strings.end());\n    }\n    return strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphe4eteui.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmphe4eteui.cpp:11:60: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019} and \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019})\n   11 |             strings.erase(strings.begin(), strings.begin()\
    \ + strings.end());\n      |                                            ~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~~~~~\n      |                                                   \
    \      |               |\n      |                                            \
    \             |               __normal_iterator<[...],[...]>\n      |        \
    \                                                 __normal_iterator<[...],[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmphe4eteui.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = std::__cxx11::basic_string<char>*; _Container = std::vector<std::__cxx11::basic_string<char>\
    \ >; __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type = long\
    \ int]\u2019\n  856 |       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33: note:\
    \   no known conversion for argument 1 from \u2018std::vector<st"
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (auto &it: strings) {\n        if (substring in it) {\n            out.push_back(it);\n\
    \        }\n    }\n    return out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm07nftfa.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpm07nftfa.cpp:11:22: error: expected \u2018)\u2019 before \u2018in\u2019\
    \n   11 |         if (substring in it) {\n      |            ~         ^~~\n \
    \     |                      )\n/tmp/tmpm07nftfa.cpp:11:13: error: could not convert\
    \ \u2018substring\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n   11 |         if (substring in it) {\n      |       \
    \      ^~~~~~~~~\n      |             |\n      |             std::string {aka\
    \ std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // We will use std::set to find all unique\
    \ elements before returning\n    std::set<std::string> unique_words;\n    for\
    \ (auto i : strings) {\n        unique_words.insert(i);\n    }\n    std::vector<std::string>\
    \ filtered_words;\n    for (auto i : unique_words) {\n        if (i.find(substring)\
    \ != string::npos) {\n            filtered_words.push_back(i);\n        }\n  \
    \  }\n    return filtered_words;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppsaibrmc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmppsaibrmc.cpp:16:34: error: \u2018string\u2019 has not been declared\n\
    \   16 |         if (i.find(substring) != string::npos) {\n      |           \
    \                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::sort(strings.begin(), strings.end());\n\
    \  \n  auto startIt = std::find(strings.begin(), strings.end(), substring);\n\
    \  if (startIt != strings.end()) {\n    strings.erase(startIt);\n  }\n  \n  return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpq3n29n7v: /tmp/tmpq3n29n7v.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::set<std::string> string_set;\n  for\
    \ (const auto &it : strings) {\n    if (string_set.find(it) != string_.end())\
    \ {\n      continue;\n    }\n    string_set.insert(it);\n  }\n\n  strings.clear();\n\
    \  for (const auto &it : string_set) {\n    strings.push_back(it);\n  }\n  return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7m3f5xky.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp7m3f5xky.cpp:11:32: error: \u2018string_\u2019 was not declared in\
    \ this scope; did you mean \u2018strings\u2019?\n   11 |     if (string_set.find(it)\
    \ != string_.end()) {\n      |                                ^~~~~~~\n      |\
    \                                strings\n"
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    std::set<std::string>\
    \ tmp;\n    for(auto it=strings.begin(); it!=strings.end(); ++it){\n        tmp.insert((*it).find(substring));\n\
    \    }\n    for(auto it=tmp.begin(); it!=tmp.end(); ++it){\n        res.push_back(*it);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyy5bavm8.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpyy5bavm8.cpp:12:41: error: no matching function for call to \u2018\
    std::set<std::__cxx11::basic_string<char> >::insert(std::__cxx11::basic_string<char>::size_type)\u2019\
    \n   12 |         tmp.insert((*it).find(substring));\n      |                \
    \                         ^\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpyy5bavm8.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:509:7:\
    \ note: candidate: \u2018std::pair<typename std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>,\
    \ _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator,\
    \ bool> std::set<_Key, _Compare, _Alloc>::insert(const value_type&) [with _Key\
    \ = std::__cxx11::basic_string<char>; _Compare = std::less<std::__cxx11::basic_string<char>\
    \ >; _Alloc = std::allocator<std::__cxx11::basic_string<char> >; typename std::_Rb_tree<_Key,\
    \ _Key, std::_Identity<_Tp>, _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator\
    \ = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char> >; std::set<_Key,\
    \ _Compare, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\n  509\
    \ |       insert(const value_type& __x)\n      |       ^~~~~~\n/usr/include/c++/9/bits/stl_set.h:509:32:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} to \u2018const value_type&\u2019 {aka \u2018\
    const std::__cxx11::basic_string<char>&\u2019}\n  509 |       insert(const value_type&\
    \ __x)\n      |              ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_set.h:518:7:\
    \ note: candidate: \u2018std::pair<typename std::_Rb_tree<_Key, _Key, std::_Identity<_Tp>,\
    \ _Compare, typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_Key>::other>::const_iterator,\
    \ bool> std::set<_Key, _Compare, _Alloc>::insert(std::set<_Key, _Compar"
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    \n    // Create a set that contains the\
    \ substrings\n    std::unordered_set<std::string> subs;\n    for(auto s: strings)\
    \ {\n        subs.insert(s);\n    }\n\n    // Filter the strings \n    std::vector<std::string>\
    \ filtered;\n    for(const auto& s: strings) {\n        if(subs.find(s) != subs.end())\
    \ filtered.push_back(s);\n    }\n\n    // Return the filtered list\n    return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmps6fiqg3g: /tmp/tmps6fiqg3g.cpp:28: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (size_t i = 0; i < strings.size(); i++) {\n        std::string this_substring\
    \ = strings[i];\n        if (this_substring.find(substring) == std::string::npos)\
    \ {\n            out.push_back(strings[i]);\n        }\n    }\n    return out;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp8c0xsld2: /tmp/tmp8c0xsld2.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Create a vector of all substrings\n\
    \    std::vector<std::string> substrings;\n    // Iterate through each string\
    \ and add all substrings\n    for(int i = 0; i < strings.size(); i++)\n    {\n\
    \        auto it = std::find_if(strings.begin(), strings.end(), [&](const string&\
    \ str) { return str.find(substring) != std::string::npos; });\n        if(it !=\
    \ strings.end())\n        {\n            substrings.push_back(it->c_str());\n\
    \        }\n    }\n    // Return all strings that contain the substring\n    return\
    \ substrings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n  \
    \  assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt2bmd0h0.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpt2bmd0h0.cpp:14:74: error: \u2018string\u2019 does not name a type;\
    \ did you mean \u2018strings\u2019?\n   14 |         auto it = std::find_if(strings.begin(),\
    \ strings.end(), [&](const string& str) { return str.find(substring) != std::string::npos;\
    \ });\n      |                                                               \
    \           ^~~~~~\n      |                                                  \
    \                        strings\n/tmp/tmpt2bmd0h0.cpp: In lambda function:\n\
    /tmp/tmpt2bmd0h0.cpp:14:140: error: expected \u2018{\u2019 before \u2018;\u2019\
    \ token\n   14 |         auto it = std::find_if(strings.begin(), strings.end(),\
    \ [&](const string& str) { return str.find(substring) != std::string::npos; });\n\
    \      |                                                                     \
    \                                                                       ^\n/tmp/tmpt2bmd0h0.cpp:\
    \ In function \u2018std::vector<std::__cxx11::basic_string<char> > filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)\u2019:\n/tmp/tmpt2bmd0h0.cpp:14:140: error: expected \u2018\
    )\u2019 before \u2018;\u2019 token\n   14 |         auto it = std::find_if(strings.begin(),\
    \ strings.end(), [&](const string& str) { return str.find(substring) != std::string::npos;\
    \ });\n      |                               ~                               \
    \                                                                            \
    \ ^\n      |                                                                 \
    \                                                                           )\n"
  stdout: ''
  timestamp: 1660116072
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Your code here\n    std::vector<std::string>\
    \ new_strings;\n    std::set_intersection(strings.begin(), strings.end(), substring.begin(),\
    \ substring.end(), std::back_inserter(new_strings));\n    return new_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6_x6q__b.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_less_iter::operator()(_Iterator1,\
    \ _Iterator2) const [with _Iterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Iterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5258:12:\
    \   required from \u2018_OutputIterator std::__set_intersection(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _InputIterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OutputIterator = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\n/usr/include/c++/9/bits/stl_algo.h:5313:48:\
    \   required from \u2018_OIter std::set_intersection(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _IIter2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OIter = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/tmp/tmp6_x6q__b.cpp:11:126:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:43:23:\
    \ error: no match for \u2018operator<\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   43 |       { return *__it1 < *__it2; }\n      |  \
    \              ~~~~~~~^~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \           "
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::remove_if(strings.begin(), strings.end(),\
    \ [&](std::string s) { return s.find(substring) != std::string::npos; });\n  \
    \  return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp4cxfv5da: /tmp/tmp4cxfv5da.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: Complete this function\n   \
    \ return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp1k9b1ark: /tmp/tmp1k9b1ark.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  result.reserve(strings.size());\n\
    \  for (std::string &str : strings) {\n    if (str.find(substring) != std::string::npos)\n\
    \      result.push_back(str);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116073
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Write your code here\n    std::set<std::string>\
    \ sub;\n    for (auto i : strings) {\n        if (sub.find(i) == sub.end()) {\n\
    \            sub.insert(i);\n        }\n    }\n    std::vector<std::string> outputs;\n\
    \    for (auto i : sub) {\n        std::string s;\n        if (strings[i].find(substring)\
    \ != strings[i].npos) {\n            s = strings[i];\n        }\n        \n  \
    \      outputs.push_back(s);\n    }\n    return outputs;\n}\nint main() {\n  \
    \  auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmply9dmzfs.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmply9dmzfs.cpp:19:20: error: no match for \u2018operator[]\u2019 (operand\
    \ types are \u2018std::vector<std::__cxx11::basic_string<char> >\u2019 and \u2018\
    std::__cxx11::basic_string<char>\u2019)\n   19 |         if (strings[i].find(substring)\
    \ != strings[i].npos) {\n      |                    ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmply9dmzfs.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::reference = std::__cxx11::basic_string<char>&; std::vector<_Tp, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1040:28: note: \
    \  no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018std::vector<std::__cxx11::basic_string<char> >::size_type\u2019 {aka\
    \ \u2018long unsigned int\u2019}\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = std::__cxx11::basic_string<char>;\
    \ _Alloc = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp,\
    \ _Alloc>::const_reference = const std::__cxx11::basic_string<char>&; std::vector<_Tp,\
    \ _Alloc>::size_type = long "
  stdout: ''
  timestamp: 1660116073
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for(auto\
    \ & s : strings) {\n        if(s.find(substring) != std::string::npos)\n     \
    \       out.push_back(s);\n    }\n    return out;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116073
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  auto filtered_it = std::find_if(strings.begin(),\
    \ strings.end(), [&](const std::string &s) {\n    return s.find(substring) !=\
    \ std::string::npos;\n  });\n  return std::vector<std::string>{filtered_it};\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmbjazw9a.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpmbjazw9a.cpp:12:46: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)\u2019\n   12 |   return std::vector<std::string>{filtered_it};\n    \
    \  |                                              ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmbjazw9a.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpmbjazw9a.cpp:12:46: note:   candidate expects 3 arguments,\
    \ 1 provided\n   12 |   return std::vector<std::string>{filtered_it};\n      |\
    \                                              ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmbjazw9a.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::allocator_type\
    \ = std::allocator<std::__cxx11::ba"
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  for (auto& it : strings)\n    if (it.find(substring)\
    \ != std::string::npos)\n      strings.erase(std::remove(strings.begin(), strings.end(),\
    \ it), strings.end());\n  return strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpz1m6fx7d: /tmp/tmpz1m6fx7d.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  auto found = std::find(std::begin(strings),\
    \ std::end(strings), substring);\n  return found != std::end(strings) ? std::remove(strings.begin(),\
    \ found, end(), substring) : strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyuxxq2dk.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpyuxxq2dk.cpp:10:75: error: \u2018end\u2019 was not declared in this\
    \ scope\n   10 |   return found != std::end(strings) ? std::remove(strings.begin(),\
    \ found, end(), substring) : strings;\n      |                               \
    \                                            ^~~\n/tmp/tmpyuxxq2dk.cpp:10:75:\
    \ note: suggested alternatives:\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpyuxxq2dk.cpp:2:\n/usr/include/c++/9/valarray:1244:5:\
    \ note:   \u2018std::end\u2019\n 1244 |     end(const valarray<_Tp>& __va)\n \
    \     |     ^~~\nIn file included from /usr/include/c++/9/filesystem:38,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n \
    \                from /tmp/tmpyuxxq2dk.cpp:2:\n/usr/include/c++/9/bits/fs_dir.h:520:3:\
    \ note:   \u2018std::filesystem::__cxx11::end\u2019\n  520 |   end(recursive_directory_iterator)\
    \ noexcept\n      |   ^~~\n"
  stdout: ''
  timestamp: 1660116072
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  auto it = std::remove_if(strings.begin(),\
    \ strings.end(), [&substring](const std::string& str) {\n    return str.find(substring)\
    \ != std::string::npos;\n  });\n  strings.erase(it, strings.end());\n  return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp3io7w8bv: /tmp/tmp3io7w8bv.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    assert(substring.size() > 0);\n    std::vector<int>\
    \ offsets(strings.size(), 0);\n    for (size_t i = 0; i < strings.size(); ++i)\
    \ {\n        int pos = strings[i].find(substring);\n        if (pos == std::string::npos)\
    \ {\n            continue;\n        }\n        offsets[i] = pos;\n    }\n    std::vector<std::string>\
    \ result;\n    result.reserve(strings.size());\n    for (size_t i = 0; i < strings.size();\
    \ ++i) {\n        if (offsets[i] == strings[i].size()) {\n            result.push_back(strings[i]);\n\
    \        } else {\n            result.push_back(std::string());\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpq2ujjxi2: /tmp/tmpq2ujjxi2.cpp:32: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116073
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> new_strings;\n\
    \  for (std::string s : strings) {\n    if (s.find(substring) != std::string::npos)\
    \ {\n      new_strings.push_back(s);\n    }\n  }\n  return new_strings;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116074
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (auto& elem : strings) {\n    if (elem.find(substring) == string::npos) \n \
    \     result.push_back(elem);\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxxvg0j5y.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpxxvg0j5y.cpp:11:33: error: \u2018string\u2019 has not been declared\n\
    \   11 |     if (elem.find(substring) == string::npos)\n      |              \
    \                   ^~~~~~\n"
  stdout: ''
  timestamp: 1660116073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered;\n  for\
    \ (std::string const &elem : strings) {\n    if (elem.find(substring) == 0)\n\
    \      filtered.push_back(elem);\n  }\n  return filtered;\n}\nint main() {\n \
    \   auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpss1vtrrv: /tmp/tmpss1vtrrv.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"})), ("xx")) == (std::vector<std::string>({"xxx",
    "aaaxxy", "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::set<std::string> string_set;\n    for(auto & str : strings)\n        string_set.insert(str);\n\
    \n    for(auto & str : string_set)\n        if(str.find(substring) != std::string::npos)\n\
    \            result.push_back(str);\n\n    return result;\n}\nint main() {\n \
    \   auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpqvuss4et: /tmp/tmpqvuss4et.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (unsigned int i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) == 0) {\n            strings.erase(std::remove_if(strings.begin(),\
    \ strings.end(), [&](std::string& s) {\n                return s.find(substring)\
    \ != std::string::npos;\n            }), strings.end());\n        }\n    }\n \
    \   return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpjktsth1j: /tmp/tmpjktsth1j.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  // Your code here\n}\nint main() {\n  \
    \  auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpaailtvk6: /tmp/tmpaailtvk6.cpp:13: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::string temp;\n    for (auto &i : strings) {\n        temp = i;\n     \
    \   temp = temp.substr(0, temp.find(substring));\n        if (temp.find(substring)\
    \ != std::string::npos) {\n            result.push_back(i);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp4sev0sh8: /tmp/tmp4sev0sh8.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (std::string const &s : strings) {\n\t\tif (s.find(substring) != std::string::npos)\
    \ {\n\t\t\tresult.push_back(s);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116074
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    for (auto &string : strings) {\n    \
    \    if (substring.find(string) != std::string::npos)\n            strings.erase(string);\n\
    \    }\n    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdr12d38b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpdr12d38b.cpp:11:33: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::erase(std::__cxx11::basic_string<char>&)\u2019\
    \n   11 |             strings.erase(string);\n      |                        \
    \         ^\nIn file included from /usr/include/c++/9/vector:67,\n           \
    \      from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpdr12d38b.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7: note:\
    \ candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::__cxx11::basic_string<char>*;\
    \ std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const std::__cxx11::basic_string<char>*]\u2019\n 1427 |       erase(const_iterator\
    \ __position)\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_vector.h:1427:28:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018std::vector<std::__cxx11::basic_string<char> >::const_iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<const std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019}\n 1427 |       erase(const_iterator\
    \ __p"
  stdout: ''
  timestamp: 1660116074
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (auto &string : strings) {\n        if (substring in string) {\n           \
    \ out.push_back(string);\n        }\n    }\n    return out;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvu7ialol.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpvu7ialol.cpp:11:22: error: expected \u2018)\u2019 before \u2018in\u2019\
    \n   11 |         if (substring in string) {\n      |            ~         ^~~\n\
    \      |                      )\n/tmp/tmpvu7ialol.cpp:11:13: error: could not\
    \ convert \u2018substring\u2019 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018bool\u2019\n   11 |         if (substring in string) {\n      |   \
    \          ^~~~~~~~~\n      |             |\n      |             std::string {aka\
    \ std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660116074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  for (size_t i = 0; i < strings.size();\
    \ i++) {\n    if (strings[i].find(substring) != strings[i].npos)\n      strings.erase(strings.begin()\
    \ + i);\n  }\n  return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp0oo7qcx1: /tmp/tmp0oo7qcx1.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Your code goes here\n    std::vector<std::string>\
    \ result;\n    for (const auto &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            result.push_back(string);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116074
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> new_strings;\n\
    \    for (auto it = strings.begin(); it != strings.end(); it++) {\n        if\
    \ (it->find(substring) != std::string::npos) {\n            new_strings.push_back(*it);\n\
    \        }\n    }\n    return new_strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116075
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string>::iterator it;\n\
    \  for (it = strings.begin(); it != strings.end(); ++it) {\n    if (!std::strstr(*it,\
    \ substring)) {\n      it = strings.erase(it);\n    }\n  }\n  return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55sofkvf.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp55sofkvf.cpp:11:36: error: no matching function for call to \u2018\
    strstr(std::__cxx11::basic_string<char>&, std::string&)\u2019\n   11 |     if\
    \ (!std::strstr(*it, substring)) {\n      |                                  \
    \  ^\nIn file included from /usr/include/c++/9/cstring:42,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n                 from\
    \ /tmp/tmp55sofkvf.cpp:2:\n/usr/include/string.h:312:20: note: candidate: \u2018\
    const char* strstr(const char*, const char*)\u2019\n  312 | extern const char\
    \ *strstr (const char *__haystack, const char *__needle)\n      |            \
    \        ^~~~~~\n/usr/include/string.h:312:40: note:   no known conversion for\
    \ argument 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018const\
    \ char*\u2019\n  312 | extern const char *strstr (const char *__haystack, const\
    \ char *__needle)\n      |                            ~~~~~~~~~~~~^~~~~~~~~~\n\
    /usr/include/string.h:310:14: note: candidate: \u2018char* strstr(char*, const\
    \ char*)\u2019\n  310 | extern char *strstr (char *__haystack, const char *__needle)\n\
    \      |              ^~~~~~\n/usr/include/string.h:310:28: note:   no known conversion\
    \ for argument 1 from \u2018std::__cxx11::basic_string<char>\u2019 to \u2018char*\u2019\
    \n  310 | extern char *strstr (char *__haystack, const char *__needle)\n     \
    \ |                      ~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660116074
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::sort(strings.begin(), strings.end());\n\
    \  std::string::size_type pos = 0;\n  while ((pos = strings.find(substring, pos))\
    \ != std::string::npos) {\n    strings.erase(pos, substring.length());\n  }\n\
    \  return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ash7120.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp0ash7120.cpp:11:25: error: \u2018class std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018find\u2019\n   11 |   while ((pos = strings.find(substring,\
    \ pos)) != std::string::npos) {\n      |                         ^~~~\n/tmp/tmp0ash7120.cpp:12:42:\
    \ error: no matching function for call to \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::erase(std::__cxx11::basic_string<char>::size_type&, std::__cxx11::basic_string<char>::size_type)\u2019\
    \n   12 |     strings.erase(pos, substring.length());\n      |               \
    \                           ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0ash7120.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename std::_Vector_base<_Tp, _Alloc>::pointer = std::__cxx11::basic_string<char>*;\
    \ std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >; typename __gnu_cxx::__alloc_traits<typename std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer\
    \ = const std::__cxx11::basic_string<char>*]\u2019\n 1427 |       erase(const_iterator\
    \ __position)\n      |       ^~~~~\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note:   candida"
  stdout: ''
  timestamp: 1660116074
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::string::size_type n = substring.length();\n\
    \  std::set<std::string> s;\n  s.insert(substring);\n  s.insert(strings.begin(),\
    \ strings.end());\n  \n  std::string::size_type start = 0;\n  std::string::size_type\
    \ end = -1;\n  \n  std::vector<std::string> output;\n  \n  while ((end = s.find(substring,\
    \ end)) != std::string::npos) {\n    output.push_back(strings.substr(start, end\
    \ - start));\n    start = end + n;\n  }\n  \n  output.push_back(strings.substr(start));\n\
    \  \n  return output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl940xd1r.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpl940xd1r.cpp:19:38: error: no matching function for call to \u2018\
    std::set<std::__cxx11::basic_string<char> >::find(std::string&, std::__cxx11::basic_string<char>::size_type&)\u2019\
    \n   19 |   while ((end = s.find(substring, end)) != std::string::npos) {\n  \
    \    |                                      ^\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmpl940xd1r.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:794:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::iterator std::set<_Key,\
    \ _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::iterator = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n  794 |       find(const key_type& __x)\n      |       ^~~~\n/usr/include/c++/9/bits/stl_set.h:794:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/stl_set.h:798:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::const_iterator std::set<_Key,\
    \ _Compare, _Alloc>::find(const key_type&) const [with _Key = std::__cxx11::basic_string<char>;\
    \ _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::const_iterator = std::_Rb_tree_const_iterator<std::__cxx11::basic_string<char>\
    \ >; std::set<_Key, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\
    \n  798 |       find(const key_type& __x) const\n      |       ^~~~\n/usr/include/c++/9/bits/stl_set.h:798:7:\
    \ note:   candidate expects 1 argument, 2 provided\n/usr/include/c++/9/bits/stl_set.h:804:2:\
    \ note: cand"
  stdout: ''
  timestamp: 1660116074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  assert(strings.size() != 0);\n  assert(strings.size()\
    \ != 0);\n  assert(substring.size() != 0);\n  std::vector<std::string> result;\n\
    \  for(auto &string : strings) {\n    if(substring.find(string) != std::string::npos)\n\
    \      result.push_back(string);\n  }\n  return result;\n}\nint main() {\n   \
    \ auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpbfpohmr0: /tmp/tmpbfpohmr0.cpp:9: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() != 0'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> output;\n  std::copy_if(strings.begin(),\
    \ strings.end(), std::back_inserter(output),\n    [&](const std::string& str)\
    \ {\n      return str.find(substring) != std::string::npos;\n    });\n  return\
    \ output;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> ret;\n    for\
    \ (auto&& s : strings)\n    {\n        if (s.find(substring) == 0)\n        {\n\
    \            ret.push_back(s);\n        }\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpz4h7rnkc: /tmp/tmpz4h7rnkc.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"})), ("xx")) == (std::vector<std::string>({"xxx",
    "aaaxxy", "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (std::size_t i = 0; i < strings.size(); ++i) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            out.push_back(strings[i]);\n        }\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::string temp_str;\n  std::vector<std::string>\
    \ new_strings;\n  for (auto i : strings) {\n    temp_str = i;\n    if (!(temp_str.find(substring)\
    \ != std::string::npos)) new_strings.push_back(i);\n  }\n  return new_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmprvw3urcl: /tmp/tmprvw3urcl.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Your code here\n    std::vector<std::string>\
    \ res;\n    for (auto& word : strings) {\n        if (word.find(substring) !=\
    \ string::npos)\n            res.push_back(word);\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptz3464wy.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmptz3464wy.cpp:12:37: error: \u2018string\u2019 has not been declared\n\
    \   12 |         if (word.find(substring) != string::npos)\n      |          \
    \                           ^~~~~~\n"
  stdout: ''
  timestamp: 1660116074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  auto start = strings.begin(), end = strings.end();\n    while (start != end\
    \ && start->find(substring) != std::string::npos)\n    {\n        result.push_back(*start);\n\
    \        ++start;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmptld1xa31: /tmp/tmptld1xa31.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Use a stack to hold strings with given\
    \ substring\n    std::vector<std::vector<std::string>> matches;\n    std::vector<std::string>\
    \ current_matches;\n    std::string word;\n    // Process strings one by one until\
    \ all are processed\n    for (auto& str : strings) {\n        // Add current string\
    \ to current matches stack\n        current_matches.push_back(str);\n        //\
    \ For each string in current matches stack, check if it is substring of the stack\n\
    \        while (current_matches.size() > 0) {\n            // Pop a string from\
    \ the stack\n            word = current_matches.back();\n            current_matches.pop_back();\n\
    \            // If word is a substring, add it to matches stack\n            //\
    \ otherwise push it back to the stack\n            if (word.find(substring) !=\
    \ std::string::npos) {\n                matches.push_back(current_matches);\n\
    \                // Remove the current matches from the stack\n              \
    \  current_matches.clear();\n            }\n        }\n    }\n    // Return matches\
    \ stack\n    return matches;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg9xn3qdm.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpg9xn3qdm.cpp:32:12: error: could not convert \u2018matches\u2019 from\
    \ \u2018vector<std::vector<std::__cxx11::basic_string<char> >>\u2019 to \u2018\
    vector<std::__cxx11::basic_string<char>>\u2019\n   32 |     return matches;\n\
    \      |            ^~~~~~~\n      |            |\n      |            vector<std::vector<std::__cxx11::basic_string<char>\
    \ >>\n"
  stdout: ''
  timestamp: 1660116075
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto& s : strings) {\n        if (s.find(substring) != std::string::npos) {\n\
    \            res.push_back(s);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116075
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    auto it = std::find_if(strings.begin(),\
    \ strings.end(), [&](std::string s) {\n        return s.find(substring) != std::string::npos;\n\
    \    });\n    return std::vector<std::string>(it - strings.begin(), strings);\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgko4tx6b.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpgko4tx6b.cpp:12:66: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::vector(__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >::difference_type, std::vector<std::__cxx11::basic_string<char>\
    \ >&)\u2019\n   12 |     return std::vector<std::string>(it - strings.begin(),\
    \ strings);\n      |                                                         \
    \         ^\nIn file included from /usr/include/c++/9/vector:67,\n           \
    \      from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpgko4tx6b.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2: note: candidate:\
    \ \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\u2019\n  650 |  vector(_InputIterator\
    \ __first, _InputIterator __last,\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpgko4tx6b.cpp:12:66:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\
    )\n   12 |     return std::vector<std::string>(it - strings.begin(), strings);\n\
    \      |                                                                  ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgko4tx6b.cpp:2:\n/usr/inclu"
  stdout: ''
  timestamp: 1660116074
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    for (std::string &string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos)\n            filtered_strings.push_back(string);\n   \
    \ }\n    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  assert(strings.size()>0);\n  assert(substring.size()>0);\n\
    \  \n  // Create a copy of the original input strings\n  std::vector<std::string>\
    \ filtered_strings(strings);\n  \n  \n  // Filter each string in filtered_strings\n\
    \  for (std::string &str : strings) {\n    // Remove substring from the original\
    \ string\n    std::string sub = str.substr(0, str.find(substring));\n    \n  \
    \  // Remove substring from the original string\n    std::string prefix = str.substr(str.find(substring));\n\
    \    \n    // Replace the original string with an empty string\n    str.erase(str.find(substring),\
    \ str.find(substring)+substring.length());\n    \n    // Add new string to the\
    \ filtered strings\n    filtered_strings.push_back(prefix);\n  }\n  \n  return\
    \ filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpudbolssd: /tmp/tmpudbolssd.cpp:9: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (const auto &str : strings) {\n        if (substring.find(str) != std::string::npos)\n\
    \            filtered.push_back(str);\n    }\n    return filtered;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpsrfdkorx: /tmp/tmpsrfdkorx.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    for\
    \ (auto& s: strings)\n        if (s.find(substring) != std::string::npos)\n  \
    \          res.push_back(s);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    std::string str = substring;\n    for(auto& string: strings) {\n        std::size_t\
    \ found = str.find(string);\n        if(found != std::string::npos) {\n      \
    \      filtered.push_back(string);\n            str = str.substr(found + string.length());\n\
    \        }\n    }\n    return filtered;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp9qx_ascn: /tmp/tmp9qx_ascn.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116076
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  // Check every element in the list, if it contains substring then add it to\
    \ the result list\n    for(auto elem : strings) {\n        if(std::find(elem.begin(),\
    \ elem.end(), substring) != elem.end()) {\n            result.push_back(elem);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp4lim768s.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp4lim768s.cpp:12:57:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018const\
    \ std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it == _M_value;\
    \ }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41"
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto& s : strings) {\n        if (substring.find(s) != std::string::npos)\
    \ result.push_back(s);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpkfmdiz9q: /tmp/tmpkfmdiz9q.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116076
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::set_intersection(strings.begin(), strings.end(),\n                   \
    \      substring.begin(), substring.end(),\n                         std::back_inserter(result));\n\
    \    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpv9li6d8b.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_less_iter::operator()(_Iterator1,\
    \ _Iterator2) const [with _Iterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Iterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5258:12:\
    \   required from \u2018_OutputIterator std::__set_intersection(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _InputIterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OutputIterator = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\n/usr/include/c++/9/bits/stl_algo.h:5313:48:\
    \   required from \u2018_OIter std::set_intersection(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _IIter2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OIter = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/tmp/tmpv9li6d8b.cpp:12:52:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:43:23:\
    \ error: no match for \u2018operator<\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   43 |       { return *__it1 < *__it2; }\n      |  \
    \              ~~~~~~~^~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \            "
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string cur : strings) {\n        if (substring.find(cur) != std::string::npos)\
    \ {\n            result.push_back(cur);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpq7ib1riw: /tmp/tmpq7ib1riw.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    std::set<std::string>\
    \ in_substring;\n    for (std::string string : strings) {\n        if (string.find(substring)\
    \ != std::string::npos) {\n            in_substring.insert(string);\n        }\n\
    \    }\n    for (std::string string : strings) {\n        if (!in_substring.count(string))\
    \ {\n            out.push_back(string);\n        }\n    }\n    return out;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp0oi78xeg: /tmp/tmp0oi78xeg.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116076
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n\tstd::vector<std::string> result;\n\tfor\
    \ (auto &str : strings) {\n\t\tif (str.find(substring) != std::string::npos)\n\
    \t\t\tresult.push_back(str);\n\t}\n\treturn result;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116075
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string>::iterator it =\
    \ std::find(strings.begin(), strings.end(), substring);\n  return std::find_if(strings.begin(),\
    \ strings.end(), [&substring](std::string str){ return std::find(str.begin(),\
    \ str.end(), substring) != str.end(); }).base();\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8674v58n.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp8674v58n.cpp:10:159: error: could not convert \u2018std::find_if<__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >, filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(std::string)> >(strings.std::vector<std::__cxx11::basic_string<char>\
    \ >::begin(), strings.std::vector<std::__cxx11::basic_string<char> >::end(), <lambda\
    \ closure object>filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(std::string)>{substring}).__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >::base()\u2019 from \u2018std::__cxx11::basic_string<char>*\
    \ const\u2019 to \u2018std::vector<std::__cxx11::basic_string<char> >\u2019\n\
    \   10 |   return std::find_if(strings.begin(), strings.end(), [&substring](std::string\
    \ str){ return std::find(str.begin(), str.end(), substring) != str.end(); }).base();\n\
    \      |          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n\
    \      |                                                                     \
    \                                                                            \
    \              |\n      |                                                    \
    \                                                                            \
    \                               std::__cxx11::basic_string<char>* const\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:71,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8674v58n.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cx"
  stdout: ''
  timestamp: 1660116075
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  auto it = std::find_if(strings.begin(), strings.end(), [substring] (std::string\
    \ s) {\n        if (s.find(substring) == std::string::npos) return true;\n   \
    \     return false;\n    });\n    while (it != strings.end()) {\n        result.push_back(*it);\n\
    \        it++;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpbpgk2xbw: /tmp/tmpbpgk2xbw.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116076
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    assert(substring.size() > 0);\n    std::vector<std::string>\
    \ result;\n    // O(n) time complexity\n    for (auto& string : strings) {\n \
    \       size_t pos = string.find(substring);\n        if (pos == string::npos)\
    \ continue;\n        result.push_back(string);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgewb5ocd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpgewb5ocd.cpp:14:20: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   14 |         if (pos == string::npos) continue;\n      |\
    \                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660116075
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  if(strings.length == 0) {\n    return strings;\n\
    \  }\n  std::vector<std::string> filtered_strings;\n  for (std::string& str :\
    \ strings) {\n    if(substring.find(str) != std::string::npos) {\n      filtered_strings.push_back(str);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ymdgdlu.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp3ymdgdlu.cpp:9:14: error: \u2018class std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018length\u2019\n    9 |   if(strings.length\
    \ == 0) {\n      |              ^~~~~~\n"
  stdout: ''
  timestamp: 1660116075
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::unordered_set<std::string> substrings;\n\
    \    std::transform(std::begin(strings), std::end(strings), std::back_inserter(substrings),\
    \ [](std::string const &s) { return std::string(s); });\n    for(auto const &i\
    \ : strings) {\n        if(substrings.count(i) == 0) {\n            std::cout\
    \ << i << std::endl;\n        }\n    }\n    return substrings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeqi8acxd.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpeqi8acxd.cpp:16:12: error: could not convert \u2018substrings\u2019\
    \ from \u2018std::unordered_set<std::__cxx11::basic_string<char> >\u2019 to \u2018\
    std::vector<std::__cxx11::basic_string<char> >\u2019\n   16 |     return substrings;\n\
    \      |            ^~~~~~~~~~\n      |            |\n      |            std::unordered_set<std::__cxx11::basic_string<char>\
    \ >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n      \
    \           from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpeqi8acxd.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:\
    \ In instantiation of \u2018std::back_insert_iterator<_Container>& std::back_insert_iterator<_Container>::operator=(typename\
    \ _Container::value_type&&) [with _Container = std::unordered_set<std::__cxx11::basic_string<char>\
    \ >; typename _Container::value_type = std::__cxx11::basic_string<char>]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:4343:12:   required from \u2018_OIter std::transform(_IIter,\
    \ _IIter, _OIter, _UnaryOperation) [with _IIter = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _OIter = std::back_insert_iterator<std::unordered_set<std::__cxx11::basic_string<char>\
    \ > >; _UnaryOperation = filter_by_substring(std::vector<std::__cxx11::basic_string<char>\
    \ >, std::string)::<lambda(const string&)>]\u2019\n/tmp/tmpeqi8acxd.cpp:10:143:\
    \   required from here\n/usr/include/c++/9/bits/stl_iterator.h:522:13: error:\
    \ \u2018class std::unordered_set<std::__cxx11::basic_string<char> >\u2019 has\
    \ no member named \u2018push_back\u2019\n  522 |  container->push_back(std::move(__value));\n\
    \      |  ~~~~~~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660116075
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::set<std::string> unique_substrings;\n\
    \    std::vector<std::string> res;\n    // add every substring only once\n   \
    \ for (auto &str : strings) {\n        unique_substrings.insert(str);\n    }\n\
    \    // remove substrings that only appear once\n    for (auto &str : unique_substrings)\
    \ {\n        if (strings.find(str) == strings.end()) {\n            res.push_back(str);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdweao8rh.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpdweao8rh.cpp:17:21: error: \u2018class std::vector<std::__cxx11::basic_string<char>\
    \ >\u2019 has no member named \u2018find\u2019\n   17 |         if (strings.find(str)\
    \ == strings.end()) {\n      |                     ^~~~\n"
  stdout: ''
  timestamp: 1660116076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> out;\n  std::string\
    \ current;\n  for (auto& s : strings) {\n    if (!s.empty() && s[0] == substring[0])\
    \ {\n      current = s.substr(1);\n    }\n    if (current == substring)\n    \
    \  out.push_back(s);\n  }\n  return out;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpah8xyffc: /tmp/tmpah8xyffc.cpp:23: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116076
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (auto &str : strings) {\n    if (str.find(substring) != std::string::npos) {\n\
    \      result.push_back(str);\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (std::size_t i = 0; i < strings.size(); i++) {\n        if (strings[i].find(substring)\
    \ == 0) {\n            out.push_back(strings[i]);\n        }\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpw41hxb81: /tmp/tmpw41hxb81.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"})), ("xx")) == (std::vector<std::string>({"xxx",
    "aaaxxy", "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116077
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> new_strings;\n\
    \  std::for_each(strings.begin(), strings.end(), [&](std::string str) {\n    if\
    \ (str.find(substring) != std::string::npos) {\n      new_strings.push_back(str);\n\
    \    }\n  });\n  return new_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: Complete this function\n   \
    \ \n    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpztuuuul5: /tmp/tmpztuuuul5.cpp:16: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116077
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for(std::string s : strs) {\n        if(s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpamjf1y48.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpamjf1y48.cpp:10:25: error: \u2018strs\u2019 was not declared in this\
    \ scope\n   10 |     for(std::string s : strs) {\n      |                    \
    \     ^~~~\n"
  stdout: ''
  timestamp: 1660116076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: Write your code\n    return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpkpnw6z4o: /tmp/tmpkpnw6z4o.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    std::string substr;\n    for(auto &elem : strings)\n    {\n        if(elem.find(substring)\
    \ == std::string::npos)\n            continue;\n        substr = elem.substr(0,\
    \ elem.find(substring));\n        if(substr.size() > 0)\n            filtered_strings.push_back(elem);\n\
    \    }\n    return filtered_strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp5rmygfwa: /tmp/tmp5rmygfwa.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116077
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered_strings;\n\
    \  std::string filtered_substring = \"\";\n  for (unsigned int i = 0; i < strings.size();\
    \ i++) {\n    if (strings[i].find(substring) != std::string::npos) {\n      filtered_strings.push_back(strings[i]);\n\
    \    }\n  }\n  return filtered_strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    int n = strings.size();\n    std::vector<std::string>\
    \ result(n);\n    for (int i = 0; i < n; ++i) {\n        if (strings[i].find(substring)\
    \ != std::string::npos) {\n            result[i] = strings[i];\n        }\n  \
    \  }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpw2h0m2en: /tmp/tmpw2h0m2en.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116077
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for(size_t i=0; i < strings.size(); i++) {\n        if(strings[i].find(substring)\
    \ != std::string::npos) {\n            result.push_back(strings[i]);\n       \
    \ }\n    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string>::iterator it =\
    \ std::find(strings.begin(), strings.end(), substring);\n  if(it != strings.end())\n\
    \    strings.erase(it);\n  return strings;\n}\nint main() {\n    auto candidate\
    \ = filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpt5suswbx: /tmp/tmpt5suswbx.cpp:17: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::sort(strings.begin(), strings.end());\n\
    \    for (size_t i = 0; i + 1 < strings.size(); i++) {\n        if (strings[i\
    \ + 1].find(substring) == 0) {\n            strings.erase(std::remove(strings.begin(),\
    \ strings.begin() + i + 1, \"\"), strings.end());\n        }\n    }\n    return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmptn_x7nr4: /tmp/tmptn_x7nr4.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string str : strings) {\n        if (str.find(substring) != std::string::npos)\n\
    \            result.push_back(str);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116077
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    std::string current_substring = \"\";\n\n    for (size_t i = 0; i < strings.size();\
    \ i++) {\n        if (strings[i].find(substring) != std::string::npos) {\n   \
    \         if (current_substring.empty()) {\n                current_substring\
    \ = strings[i];\n            } else {\n                filtered.push_back(current_substring);\n\
    \                current_substring = strings[i];\n            }\n        }\n \
    \   }\n    if (current_substring.empty())\n        filtered.push_back(strings.back());\n\
    \    return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660116077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> filtered_strings;\n\
    \  for (auto &string : strings) {\n    if (substring.find(string) != std::string::npos)\
    \ {\n      filtered_strings.push_back(string);\n    }\n  }\n  return filtered_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpho1_785d: /tmp/tmpho1_785d.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> new_strings;\n\
    \    std::set_intersection(strings.begin(), strings.end(), substring.begin(),\
    \ substring.end(), std::back_inserter(new_strings));\n    return new_strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpn524a4td.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_less_iter::operator()(_Iterator1,\
    \ _Iterator2) const [with _Iterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _Iterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5258:12:\
    \   required from \u2018_OutputIterator std::__set_intersection(_InputIterator1,\
    \ _InputIterator1, _InputIterator2, _InputIterator2, _OutputIterator, _Compare)\
    \ [with _InputIterator1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _InputIterator2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OutputIterator = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\n/usr/include/c++/9/bits/stl_algo.h:5313:48:\
    \   required from \u2018_OIter std::set_intersection(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >; _IIter2 = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _OIter = std::back_insert_iterator<std::vector<std::__cxx11::basic_string<char>\
    \ > >]\u2019\n/tmp/tmpn524a4td.cpp:10:126:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:43:23:\
    \ error: no match for \u2018operator<\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   43 |       { return *__it1 < *__it2; }\n      |  \
    \              ~~~~~~~^~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \           "
  stdout: ''
  timestamp: 1660116077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  auto result = std::set<std::string>();\n\
    \  for (const auto &str : strings) {\n    if (str.find(substring) != std::string::npos)\n\
    \      result.insert(str);\n  }\n  return std::vector<std::string>{ result.begin(),\
    \ result.end() };\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp7vxl4me9: /tmp/tmp7vxl4me9.cpp:19: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> results;\n \
    \   for (auto i : strings) {\n        if (substring.find(i) != std::string::npos)\
    \ {\n            results.push_back(i);\n        }\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp91p93rw2: /tmp/tmp91p93rw2.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  // your code goes here\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpu1loxrou: /tmp/tmpu1loxrou.cpp:13: int main(): Assertion `candidate((std::vector<std::string>()),
    ("john")) == (std::vector<std::string>())'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::set<std::string> st;\n    for (std::string\
    \ &str : strings) {\n        st.insert(str);\n    }\n    std::vector<std::string>\
    \ result;\n    for (std::string &str : strings) {\n        if (st.find(str) !=\
    \ st.end()) {\n            result.push_back(str);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpnjn22c5w: /tmp/tmpnjn22c5w.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::sort(strings.begin(), strings.end());\n\
    \    std::string pattern_with_substring = \".*\" + substring;\n    std::regex\
    \ pattern(pattern, std::regex_constants::icase);\n    std::smatch matches;\n \
    \   for (auto it = std::sregex_iterator(strings.begin(), strings.end(), pattern);\n\
    \         it != std::sregex_iterator();\n         ++it) {\n        std::string\
    \ substring_without_delimiter = it->str();\n        // std::cout << \"found match\
    \ \" << substring_without_delimiter << std::endl;\n        // std::cout << \"\
    pattern match \" << pattern_with_substring << std::endl;\n        // std::cout\
    \ << \"pattern match \" << pattern.str() << std::endl;\n        // std::cout <<\
    \ \"pattern match \" << matches[0] << std::endl;\n        // std::cout << \"pattern\
    \ match \" << matches[1] << std::endl;\n        if (matches[0].length() <= substring_without_delimiter.length()\
    \ && matches(0).str() == substring_without_delimiter) {\n            // std::cout\
    \ << \"filtered match \" << it->str() << std::endl;\n            strings.erase(it);\n\
    \        }\n    }\n    return strings;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf1zh0f8u.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpf1zh0f8u.cpp:11:60: error: no matching function for call to \u2018\
    std::__cxx11::basic_regex<char>::basic_regex(std::__cxx11::regex&, const std::regex_constants::syntax_option_type&)\u2019\
    \n   11 |     std::regex pattern(pattern, std::regex_constants::icase);\n    \
    \  |                                                            ^\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpf1zh0f8u.cpp:2:\n/usr/include/c++/9/bits/regex.h:756:2:\
    \ note: candidate: \u2018template<class _FwdIter> std::__cxx11::basic_regex< <template-parameter-1-1>,\
    \ <template-parameter-1-2> >::basic_regex(_FwdIter, _FwdIter, std::__cxx11::basic_regex<\
    \ <template-parameter-1-1>, <template-parameter-1-2> >::locale_type, std::__cxx11::basic_regex<\
    \ <template-parameter-1-1>, <template-parameter-1-2> >::flag_type)\u2019\n  756\
    \ |  basic_regex(_FwdIter __first, _FwdIter __last, locale_type __loc,\n     \
    \ |  ^~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:756:2: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpf1zh0f8u.cpp:11:60: note:   deduced\
    \ conflicting types for parameter \u2018_FwdIter\u2019 (\u2018std::__cxx11::basic_regex<char>\u2019\
    \ and \u2018std::regex_constants::syntax_option_type\u2019)\n   11 |     std::regex\
    \ pattern(pattern, std::regex_constants::icase);\n      |                    \
    \                                        ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpf1zh0f8u.cpp:2:\n/usr/include/c++/9/bits/regex.h:516:7:\
    \ note: candidate: \u2018std::__cxx11::basic_regex< <template-parameter-1-1>,\
    \ <template-parameter-1-2> >::basic_regex(std::initializer_list<_Tp>, std::__cxx11::basic_regex<\
    \ <template-parameter-1-1>, <template-parameter-1-2> >::flag_type) [with _Ch_type\
    \ = char; _Rx_trai"
  stdout: ''
  timestamp: 1660116077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::sort(strings.begin(), strings.end());\n\
    \  // Sort by length, longest strings first\n  std::vector<std::string>::iterator\
    \ it = std::adjacent_find(strings.begin(), strings.end(),\n      [](std::string\
    \ a, std::string b) { return b.length() >= a.length(); });\n  if (it != strings.end())\
    \ {\n    strings.erase(it, strings.end());\n  }\n  strings.erase(std::remove_if(strings.begin(),\
    \ strings.end(), [&substring](std::string s) {\n    return s.find(substring) ==\
    \ std::string::npos;\n  }), strings.end());\n  return strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpzudk6qhc: /tmp/tmpzudk6qhc.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (std::string s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            out.push_back(s);\n        }\n    }\n    return out;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115970
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (std::string item : strings) {\n    if (item.find(substring) != std::string::npos)\
    \ {\n      result.push_back(item);\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::vector<std::string>::iterator it = strings.begin(); it != strings.end();\
    \ ++it)\n    {\n        if (substring.find(*it) != std::string::npos)\n      \
    \      result.push_back(*it);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpk8_nkc57: /tmp/tmpk8_nkc57.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    std::set<std::string>\
    \ filtered;\n    for(auto& s : strings) {\n        if(filtered.find(s) == filtered.end())\
    \ {\n            filtered.insert(s);\n            if(s.find(substring) != std::string::npos)\
    \ {\n                res.push_back(s);\n            }\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmph_zul0e2: /tmp/tmph_zul0e2.cpp:24: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (auto& s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            filtered.push_back(s);\n        }\n    }\n    return filtered;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Complete the function\n    std::vector<std::string>\
    \ results;\n\n    for(auto& s : strings)\n        if(s.find(substring) == std::string::npos)\n\
    \            results.push_back(s);\n\n    return results;\n}\nint main() {\n \
    \   auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpxyv53v7h: /tmp/tmpxyv53v7h.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    res.reserve(strings.size());\n\
    \    for (auto & s: strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            res.push_back(s);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  for (size_t i = 0; i < strings.size();\
    \ ++i) {\n    if (strings[i].find(substring) != std::string::npos)\n      strings.erase(strings.begin()\
    \ + i);\n  }\n  return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpe17a6y_e: /tmp/tmpe17a6y_e.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> res;\n    std::for_each(strings.begin(),\
    \ strings.end(), [&](std::string &str) {\n        if (str.find(substring) == 0)\n\
    \            res.push_back(str);\n    });\n    return res;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpgsvr_lzl: /tmp/tmpgsvr_lzl.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"})), ("xx")) == (std::vector<std::string>({"xxx",
    "aaaxxy", "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for(const auto &elem : strings)\n    {\n        if (substring.find(elem) !=\
    \ std::string::npos)\n            result.push_back(elem);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp8_d3ie_9: /tmp/tmp8_d3ie_9.cpp:20: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::remove_if(strings.begin(), strings.end(),\n\
    \                  [&substring](const std::string & word) {\n                \
    \      return (substring.find(word) != std::string::npos);\n                 \
    \ });\n    return strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpbs93uyag: /tmp/tmpbs93uyag.cpp:18: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Write your code here\n    return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmppvn8icku: /tmp/tmppvn8icku.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    assert(!strings.empty());\n    std::vector<std::string>\
    \ result;\n    result.push_back(strings[0]);\n    for(size_t i = 1; i < strings.size();\
    \ ++i) {\n        if(strings[i].find(substring) != strings[i].npos)\n        \
    \    result.push_back(strings[i]);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpw120hf37: /tmp/tmpw120hf37.cpp:9: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `!strings.empty()'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::cout << \"Filtering strings containing\
    \ \\\"\" << substring << \"\\\" with size = \";\n    size_t size = strings.size();\n\
    \    size_t count = 0;\n    for (std::vector<std::string>::iterator it = strings.begin();\
    \ it != strings.end(); ++it) {\n        if (it->find(substring) != std::string::npos)\
    \ {\n            count++;\n        }\n    }\n    std::cout << size << \", count\
    \ = \" << count << std::endl;\n    std::vector<std::string> filteredStrings;\n\
    \    for (std::vector<std::string>::iterator it = strings.begin(); it != strings.end();\
    \ ++it) {\n        if (it->find(substring) != std::string::npos) {\n         \
    \   filteredStrings.push_back(it);\n        }\n    }\n    return filteredStrings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp16dtrnfn.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp16dtrnfn.cpp:21:41: error: no matching function for call to \u2018\
    std::vector<std::__cxx11::basic_string<char> >::push_back(std::vector<std::__cxx11::basic_string<char>\
    \ >::iterator&)\u2019\n   21 |             filteredStrings.push_back(it);\n  \
    \    |                                         ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp16dtrnfn.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::__cxx11::basic_string<char>; _Alloc = std::allocator<std::__cxx11::basic_string<char>\
    \ >; std::vector<_Tp, _Alloc>::value_type = std::__cxx11::basic_string<char>]\u2019\
    \n 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<std::__cxx11::basic_string<char>\
    \ >::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1184 |       push_back(const\
    \ value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::__cxx11::basic_string<char>; _Alloc\
    \ = std::allocator<std::__cxx11::basic_string<char> >; std::vector<_Tp, _Alloc>::value_type\
    \ = std::__cxx11::basic_string<char>]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr"
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::vector<std::string> result;\n  for\
    \ (int i = 0; i < strings.size(); i++) {\n    if (strings[i].find(substring) !=\
    \ std::string::npos) {\n      result.push_back(strings[i]);\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  assert(strings.size() > 0);\n  auto it\
    \ = std::find_if(strings.begin(), strings.end(),\n                         [&](std::string\
    \ string) { return (substring.find(string) != std::string::npos); });\n  return\
    \ strings;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp8fd2iu5w: /tmp/tmp8fd2iu5w.cpp:9: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (const auto &str : strings)\n        if (str.find(substring) != std::string::npos)\n\
    \            result.push_back(str);\n    return result;\n}\nint main() {\n   \
    \ auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<string> res;\n    for(auto\
    \ &str : strings) {\n        if(substring.find(str) != std::string::npos) {\n\
    \            res.push_back(str);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptinj4bgj.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmptinj4bgj.cpp:9:17: error: \u2018string\u2019 was not declared in this\
    \ scope\n    9 |     std::vector<string> res;\n      |                 ^~~~~~\n\
    /tmp/tmptinj4bgj.cpp:9:17: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptinj4bgj.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptinj4bgj.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmptinj4bgj.cpp:9:23: error: template argument 1 is invalid\n    9 |    \
    \ std::vector<string> res;\n      |                       ^\n/tmp/tmptinj4bgj.cpp:9:23:\
    \ error: template argument 2 is invalid\n/tmp/tmptinj4bgj.cpp:12:17: error: request\
    \ for member \u2018push_back\u2019 in \u2018res\u2019, which is of non-class type\
    \ \u2018int\u2019\n   12 |             res.push_back(str);\n      |          \
    \       ^~~~~~~~~\n/tmp/tmptinj4bgj.cpp:15:12: err"
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::for_each(strings.begin(), strings.end(), [&](const std::string& s) {\n\
    \        if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \        }\n    });\n    return result;\n}\nint main() {\n    auto candidate =\
    \ filter_by_substring;\n    assert(candidate((std::vector<std::string>()), (\"\
    john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  std::string s = \"\";\n    for (auto i : strings) {\n        s += i;\n    \
    \    if (s.find(substring) != std::string::npos) {\n            result.push_back(s);\n\
    \            s.clear();\n        }\n    }\n    if (s.size() > 0) {\n        result.push_back(s);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpursr3dub: /tmp/tmpursr3dub.cpp:26: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    \n    std::vector<std::string> result;\n\
    \    for (auto s : strings) {\n        if (std::find(s.begin(), s.end(), substring)\
    \ != s.end()) {\n            result.push_back(s);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpmtpxx5be.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Predicate\
    \ = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; _Tp\
    \ = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmpmtpxx5be.cpp:12:52:   required\
    \ from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error: no match\
    \ for \u2018operator==\u2019 (operand types are \u2018char\u2019 and \u2018const\
    \ std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it == _M_value;\
    \ }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41"
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::sort(strings.begin(), strings.end());\n\
    \    std::string::size_type start = 0;\n    std::string::size_type end = 0;\n\
    \    std::string::size_type cur = 0;\n    for (cur = 0; cur < strings.size();\
    \ cur++) {\n        if (strings[cur] == substring) {\n            start = cur;\n\
    \        } else {\n            if (start != std::string::npos)\n             \
    \   strings.erase(std::remove(strings.begin(), strings.begin() + cur, strings[cur]),\
    \ strings.end());\n            if (end != std::string::npos)\n               \
    \ strings.erase(std::remove(strings.begin() + cur, strings.end(), strings[cur]),\
    \ strings.end());\n            end = cur;\n        }\n    }\n    return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp6dlv_aid: /tmp/tmp6dlv_aid.cpp:29: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::ostringstream oss;\n  for (size_t\
    \ i = 0; i < strings.size(); i++) {\n    if (!strings[i].find(substring) != std::string::npos)\
    \ {\n      oss << strings[i];\n    }\n  }\n  std::vector<std::string> v;\n  oss\
    \ >> v;\n  return v;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpman_42dz.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpman_42dz.cpp:16:7: error: no match for \u2018operator>>\u2019 (operand\
    \ types are \u2018std::ostringstream\u2019 {aka \u2018std::__cxx11::basic_ostringstream<char>\u2019\
    } and \u2018std::vector<std::__cxx11::basic_string<char> >\u2019)\n   16 |   oss\
    \ >> v;\n      |   ~~~ ^~ ~\n      |   |      |\n      |   |      std::vector<std::__cxx11::basic_string<char>\
    \ >\n      |   std::ostringstream {aka std::__cxx11::basic_ostringstream<char>}\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:45,\n\
    \                 from /tmp/tmpman_42dz.cpp:2:\n/usr/include/c++/9/cstddef:140:5:\
    \ note: candidate: \u2018template<class _IntegerType> constexpr std::__byte_op_t<_IntegerType>\
    \ std::operator>>(std::byte, _IntegerType)\u2019\n  140 |     operator>>(byte\
    \ __b, _IntegerType __shift) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/cstddef:140:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpman_42dz.cpp:16:3:\
    \ note:   cannot convert \u2018oss\u2019 (type \u2018std::ostringstream\u2019\
    \ {aka \u2018std::__cxx11::basic_ostringstream<char>\u2019}) to type \u2018std::byte\u2019\
    \n   16 |   oss >> v;\n      |   ^~~\nIn file included from /usr/include/c++/9/string:56,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpman_42dz.cpp:2:\n/usr/include/c++/9/bits/basic_string.tcc:1466:5:\
    \ note: candidate: \u2018template<class _CharT, class _Traits, class _Alloc> std::basic_istream<_CharT,\
    \ _Traits>& std::operator>>(std::basic_istream<_CharT, _Traits>&, std::__cxx11::basic_"
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgivveora.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpgivveora.cpp:11:39: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         if (string.find(substring) != string::npos)\
    \ {\n      |                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered;\n\
    \    for (auto& s : strings) {\n        if (std::find(s.cbegin(), s.cend(), substring)\
    \ != s.cend()) {\n            filtered.push_back(s);\n        }\n    }\n    return\
    \ filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3r4itm9n.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_equals_val<_Value>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Value = const std::__cxx11::basic_string<char>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:120:14:\
    \   required from \u2018_RandomAccessIterator std::__find_if(_RandomAccessIterator,\
    \ _RandomAccessIterator, _Predicate, std::random_access_iterator_tag) [with _RandomAccessIterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const std::__cxx11::basic_string<char>\
    \ >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:   required from \u2018\
    _Iterator std::__find_if(_Iterator, _Iterator, _Predicate) [with _Iterator = __gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> >; _Predicate = __gnu_cxx::__ops::_Iter_equals_val<const\
    \ std::__cxx11::basic_string<char> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3944:28:\
    \   required from \u2018_IIter std::find(_IIter, _IIter, const _Tp&) [with _IIter\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; _Tp = std::__cxx11::basic_string<char>]\u2019\n/tmp/tmp3r4itm9n.cpp:11:54:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:241:17: error:\
    \ no match for \u2018operator==\u2019 (operand types are \u2018const char\u2019\
    \ and \u2018const std::__cxx11::basic_string<char>\u2019)\n  241 |  { return *__it\
    \ == _M_value; }\n      |           ~~~~~~^~~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-li"
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Write your code here\n    return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmppvn8icku: /tmp/tmppvn8icku.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // TODO: add case insensitivity here\n\
    \    std::vector<std::string> result;\n    std::regex pattern(substring);\n  \
    \  for(auto &str : strings) {\n        std::smatch match;\n        if(std::regex_search(str.c_str(),\
    \ match, pattern)) {\n            result.push_back(str);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpciqc3540.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpciqc3540.cpp:14:57: error: no matching function for call to \u2018\
    regex_search(const char*, std::__cxx11::smatch&, std::__cxx11::regex&)\u2019\n\
    \   14 |         if(std::regex_search(str.c_str(), match, pattern)) {\n      |\
    \                                                         ^\nIn file included\
    \ from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpciqc3540.cpp:2:\n/usr/include/c++/9/bits/regex.h:2217:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc, class _Ch_type,\
    \ class _Rx_traits> bool std::regex_search(_Bi_iter, _Bi_iter, std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&, const std::__cxx11::basic_regex<_CharT, _TraitsT>&, std::regex_constants::match_flag_type)\u2019\
    \n 2217 |     regex_search(_Bi_iter __s, _Bi_iter __e,\n      |     ^~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:2217:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpciqc3540.cpp:14:57: note:   deduced conflicting types for parameter\
    \ \u2018_Bi_iter\u2019 (\u2018const char*\u2019 and \u2018std::__cxx11::match_results<__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> > >\u2019)\n   14 |         if(std::regex_search(str.c_str(),\
    \ match, pattern)) {\n      |                                                \
    \         ^\nIn file included from /usr/include/c++/9/regex:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n          \
    \       from /tmp/tmpciqc3540.cpp:2:\n/usr/include/c++/9/bits/regex.h:2241:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_type, class _Rx_traits>\
    \ bool std::regex_search(_Bi_iter, _Bi_iter, const std::__cxx11::basic_regex<_Ch_type,\
    \ _Rx_traits>&, std::regex_constants::match_flag_type)\u2019\n 2241 |     regex_search(_Bi_iter\
    \ __first, _Bi_iter __last,\n      |     ^~~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2241:5:\
    \ note:   tem"
  stdout: ''
  timestamp: 1660116079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::pair<std::string, int>\
    \ > res;\n    for (std::string &s: strings) {\n        int pos = s.find(substring);\n\
    \        if (pos != std::string::npos) {\n            std::pair<std::string, int>\
    \ item = std::make_pair(s, pos);\n            res.push_back(item);\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnc5w7n7o.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpnc5w7n7o.cpp:17:12: error: could not convert \u2018res\u2019 from \u2018\
    vector<std::pair<std::__cxx11::basic_string<char>, int>>\u2019 to \u2018vector<std::__cxx11::basic_string<char>>\u2019\
    \n   17 |     return res;\n      |            ^~~\n      |            |\n    \
    \  |            vector<std::pair<std::__cxx11::basic_string<char>, int>>\n"
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Complete the implementation\n    std::vector<std::string>\
    \ res;\n    size_t pos;\n    for (pos = 0; pos < strings.size(); pos++) {\n  \
    \      if (strings[pos].find(substring) != std::string::npos) {\n            res.push_back(strings[pos]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> out;\n    for\
    \ (std::string string : strings) {\n        if (string.find(substring) != string::npos)\
    \ {\n            out.push_back(string);\n        }\n    }\n    return out;\n}\n\
    int main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfef100bo.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpfef100bo.cpp:11:39: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         if (string.find(substring) != string::npos)\
    \ {\n      |                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660116078
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string string : strings) {\n        if (string.find(substring) !=\
    \ std::string::npos) {\n            result.push_back(string);\n        }\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660115965
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for(size_t i=0; i<strings.size(); i++) {\n        if(strings[i].find(substring)\
    \ != strings[i].npos) {\n            result.push_back(strings[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> filtered_strings;\n\
    \    std::copy(strings.begin(), strings.end(), std::back_inserter(filtered_strings));\n\
    \    for(auto &string : filtered_strings)\n    {\n        if(string.find(substring)\
    \ != std::string::npos)\n            strings.erase(strings.begin() + std::find(strings.begin(),\
    \ strings.end(), substring));\n    }\n    return filtered_strings;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln3isahc.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpln3isahc.cpp:14:43: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::vector<std::__cxx11::basic_string<char> >::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*, std::vector<std::__cxx11::basic_string<char>\
    \ > >\u2019} and \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basic_string<char> > >\u2019)\n   14 |           \
    \  strings.erase(strings.begin() + std::find(strings.begin(), strings.end(), substring));\n\
    \      |                           ~~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                        |             |\n      |     \
    \                                   |             __normal_iterator<[...],[...]>\n\
    \      |                                        __normal_iterator<[...],[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpln3isahc.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = std::__cxx11::basic_string<char>*; _Container = std::vector<std::__cxx11::basic_string<char>\
    \ >; __gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type = long\
    \ int]\u2019\n  856 |       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33: note:\
    \   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<std::__cxx11::basic_string<char>*,\
    \ std::vector<std::__cxx11::basi"
  stdout: ''
  timestamp: 1660116079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  assert(strings.size()>0 && substring.size()>0);\n\
    \  std::vector<std::string> filtered;\n  for (size_t i=0; i<strings.size(); i++)\
    \ {\n    if (strings[i].find(substring) == 0) {\n      filtered.push_back(strings[i]);\n\
    \    }\n  }\n  return filtered;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmpukcgoeom: /tmp/tmpukcgoeom.cpp:9: std::vector<std::__cxx11::basic_string<char>
    > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string):
    Assertion `strings.size()>0 && substring.size()>0'' failed.

    '
  stdout: ''
  timestamp: 1660116079
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  for (std::string &s: strings)\n        if (s.find(substring) != std::string::npos)\n\
    \            output.push_back(s);\n    return output;\n}\nint main() {\n    auto\
    \ candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660116079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n  std::unordered_set<std::string> strings_set;\n\
    \  for (const auto &string : strings) {\n    strings_set.insert(string);\n  }\n\
    \  return strings_set.find(substring) == strings_set.end() ? std::vector{} : strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zkobk00.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmp9zkobk00.cpp:13:73: error: class template argument deduction failed:\n\
    \   13 |   return strings_set.find(substring) == strings_set.end() ? std::vector{}\
    \ : strings;\n      |                                                        \
    \                 ^\n/tmp/tmp9zkobk00.cpp:13:73: error: no matching function for\
    \ call to \u2018vector()\u2019\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9zkobk00.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1872:5:\
    \ note: candidate: \u2018template<class _InputIterator, class _ValT, class _Allocator,\
    \ class, class> std::vector(_InputIterator, _InputIterator, _Allocator)-> std::vector<_ValT,\
    \ _Allocator>\u2019\n 1872 |     vector(_InputIterator, _InputIterator, _Allocator\
    \ = _Allocator())\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1872:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp9zkobk00.cpp:13:73:\
    \ note:   candidate expects 3 arguments, 0 provided\n   13 |   return strings_set.find(substring)\
    \ == strings_set.end() ? std::vector{} : strings;\n      |                   \
    \                                                      ^\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9zkobk00.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc, class _InputIterator,\
    \ class> vector(_InputItera"
  stdout: ''
  timestamp: 1660116079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    // Write your code here\n    return strings;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmppvn8icku: /tmp/tmppvn8icku.cpp:15: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"})), ("xxx")) == (std::vector<std::string>({"xxx",
    "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> output;\n  \
    \  for(auto& str : strings) {\n        if(str.find(substring) == 0) {\n      \
    \      output.push_back(str);\n        }\n    }\n    return output;\n}\nint main()\
    \ {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: Exception
  stderr: 'tmp0wjgpicg: /tmp/tmp0wjgpicg.cpp:21: int main(): Assertion `candidate((std::vector<std::string>({"xxx",
    "asd", "aaaxxy", "john doe", "xxxAAA", "xxx"})), ("xx")) == (std::vector<std::string>({"xxx",
    "aaaxxy", "xxxAAA", "xxx"}))'' failed.

    '
  stdout: ''
  timestamp: 1660116079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring([],\
    \ 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    // ['abc', 'bacd', 'array']\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (std::string &string : strings) {\n        if (string.find(substring) !=\
    \ string::npos) {\n            result.push_back(string);\n        }\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = filter_by_substring;\n\
    \    assert(candidate((std::vector<std::string>()), (\"john\")) == (std::vector<std::string>()));\n\
    \    assert(candidate((std::vector<std::string>({\"xxx\", \"asd\", \"xxy\", \"\
    john doe\", \"xxxAAA\", \"xxx\"})), (\"xxx\")) == (std::vector<std::string>({\"\
    xxx\", \"xxxAAA\", \"xxx\"})));\n    assert(candidate((std::vector<std::string>({\"\
    xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"})), (\"xx\")) ==\
    \ (std::vector<std::string>({\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"})));\n \
    \   assert(candidate((std::vector<std::string>({\"grunt\", \"trumpet\", \"prune\"\
    , \"gruesome\"})), (\"run\")) == (std::vector<std::string>({\"grunt\", \"prune\"\
    })));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2_tabfi.cpp: In function \u2018std::vector<std::__cxx11::basic_string<char>\
    \ > filter_by_substring(std::vector<std::__cxx11::basic_string<char> >, std::string)\u2019\
    :\n/tmp/tmpz2_tabfi.cpp:11:39: error: \u2018string\u2019 is not a class, namespace,\
    \ or enumeration\n   11 |         if (string.find(substring) != string::npos)\
    \ {\n      |                                       ^~~~~~\n"
  stdout: ''
  timestamp: 1660116079
