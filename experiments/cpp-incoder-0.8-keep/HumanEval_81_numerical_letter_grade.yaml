name: HumanEval_81_numerical_letter_grade
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// It is the last week of the\
  \ semester and the teacher has to give the grades\n// to students. The teacher has\
  \ been making her own algorithm for grading.\n// The only problem is, she has lost\
  \ the code she used for grading.\n// She has given you a list of GPAs for some students\
  \ and you have to write \n// a function that can output a list of letter grades\
  \ using the following table:\n// GPA       |    Letter grade\n// 4.0           \
  \     A+\n// > 3.7                A \n// > 3.3                A- \n// > 3.0    \
  \            B+\n// > 2.7                B \n// > 2.3                B-\n// > 2.0\
  \                C+\n// > 1.7                C\n// > 1.3                C-\n// >\
  \ 1.0                D+ \n// > 0.7                D \n// > 0.0                D-\n\
  // 0.0                E\n// Example:\n// grade_equation([4.0, 3, 1.7, 2, 3.5]) ==>\
  \ ['A+', 'B', 'C-', 'C', 'A-']\nstd::vector<std::string> numerical_letter_grade(std::vector<float>\
  \ grades) {\n"
tests: "}\nint main() {\n    auto candidate = numerical_letter_grade;\n    assert(candidate((std::vector<float>({4.0,\
  \ 3, 1.7, 2, 3.5}))) == (std::vector<std::string>({\"A+\", \"B\", \"C-\", \"C\"\
  , \"A-\"})));\n    assert(candidate((std::vector<float>({1.2}))) == (std::vector<std::string>({\"\
  D+\"})));\n    assert(candidate((std::vector<float>({0.5}))) == (std::vector<std::string>({\"\
  D-\"})));\n    assert(candidate((std::vector<float>({0.0}))) == (std::vector<std::string>({\"\
  E\"})));\n    assert(candidate((std::vector<float>({1.0, 0.3, 1.5, 2.8, 3.3})))\
  \ == (std::vector<std::string>({\"D\", \"D-\", \"C-\", \"B\", \"B+\"})));\n    assert(candidate((std::vector<float>({0.0,\
  \ 0.7}))) == (std::vector<std::string>({\"E\", \"D-\"})));\n}\n"
completions: ["    std::vector<std::string> result;\n    result.push_back(\"F\");\n\
    \    result.push_back(\"D\");\n    result.push_back(\"C\");\n    result.push_back(\"\
    B-\");\n    result.push_back(\"B-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"\
    A-\");\n    result.push_back(\"A-\");\n    result.push_back(\"A-\");\n    result.push_back",
  "    std::vector<std::string> grade_list;\n    int grade_size = grades.size();\n\
    \    int index = 0;\n    for (float i : grades) {\n        if ((i > 3.0) || (i\
    \ < 3.0)) {\n            grade_list.push_back(std::string(\"A- \"));\n       \
    \ }\n        else if (i > 2.7) {\n            grade_list.push_back(std::string(\"\
    B+ \"));\n        }\n        else if (i > 2.3) {\n            grade_list.push_back(std::string(\"\
    B- \"));\n        }\n        else if (i > 2.0) {\n            grade_list.push_back(std::string(\"\
    C+ \"));\n        }\n        else if (i > 1.7) {\n            grade_list.push_back(std::string(\"\
    C- \"));\n        }\n        else if (i > 1.0) {\n            grade_list.push_back(std::string(\"\
    D+ \"));\n        }\n        else if (i > 0.7) {\n            grade_list.push_back(std::string(\"\
    D \"));\n        }\n        else if (i > 0.0) {\n            grade_list.push_back(std::string(\"\
    D- \"));\n        }\n        else {\n            grade_list.push_back(std::string(\"\
    E \"));\n        }\n    }\n    return grade_list;", "    std::vector<std::string>\
    \ ret;\n    for (float g : grades) {\n        std::string gr = \"\";\n       \
    \ if (g > 3.0) gr = g + \"\";\n        else if (g > 2.7) {\n            g = g\
    \ - 2.0;\n            int i = g / 1.7;\n            int j = (g - 1.7 * i) / 1.7;\n\
    \            if (j != i) j--;\n            if (j != i) j++;\n            gr +=\
    \ (i + 1);\n        } else if (g > 1.7) {\n            int i = g / 1.3;\n    \
    \        int j = (g - 1.3 * i) / 1.3;\n            if (j != i) j--;\n        \
    \    if (j != i) j++;\n            gr += (i + 1);\n        } else if (g > 1.0)\
    \ {\n            int i = g / 0.7;\n            int j = (g - 0.7 * i) / 0.7;\n\
    \            if (j != i) j--;\n            if (j != i) j++;\n            gr +=\
    \ (i + 1);\n        } else if (g > 0.0) {\n            gr = \"D+\";\n        }\
    \ else {\n            gr = \"E\";\n        }\n        ret.push_back(gr);\n   \
    \ }\n    return ret;", '    // Write your code here', "    std::vector<std::string>\
    \ letter_grades;\n    // Sort the vector\n    std::sort(grades.begin(), grades.end());\n\
    \    \n    // Calculate the differences from one element to the next\n    float\
    \ difference = grades.front();\n    for(float x: grades) {\n        float difference\
    \ = x - difference;\n        if(difference > 0) // if the difference is positive\n\
    \            letter_grades.push_back(std::to_string(x));\n    }\n\n    // Add\
    \ the letter grades that come after a positive difference\n    for(auto &grade:\
    \ letter_grades) {\n        if(grade.find(\"+\") == std::string::npos) // if there\
    \ is no positive difference\n            letter_grades.insert(letter_grades.end(),\
    \ grade);\n        else // otherwise\n            break;\n    }\n\n    return\
    \ letter_grades;", "    assert(grades.size() <= 42);\n    std::vector<std::string>\
    \ letter_grade;\n    for(float grade: grades) {\n        auto gpas_sorted_by_gpa\
    \ = std::sort(grades.begin(), grades.end());\n        auto i = gpas_sorted_by_gpa\
    \ - 1;\n        auto j = gpas_sorted_by_gpa + 1;\n        while(j > gpas_sorted_by_gpa\
    \ && j[-1] < grade) {\n            j--;\n        }\n        auto grade_index =\
    \ (j - gpas_sorted_by_gpa) / 3;\n        letter_grade.push_back(numerical_letter_grades[grade_index]);\n\
    \    }\n    return letter_grade;", "    int size = grades.size();\n    std::vector<std::string>\
    \ letter_grade(size, \"A\");\n    // If there is a grade\n    if (size > 0) {\n\
    \        // Get the largest grade\n        float max_grade =  std::max_element(grades.begin(),\
    \ grades.end()) - grades.begin();\n        // Get number of decimal places\n \
    \       int decimal_places = std::round(std::log10(max_grade));\n        // Convert\
    \ all the grades to character\n        for (int i = 0; i < size; ++i) {\n    \
    \        float grade = grades[i];\n            int decimal_places_temp = std::round(std::log10(grade));\n\
    \            if (decimal_places_temp > decimal_places) {\n                decimal_places\
    \ = decimal_places_temp;\n            }\n            // Calculate grade\n    \
    \        float new_grade = (grade / max_grade) * 100;\n            letter_grade[i]\
    \ = numerical_letter_grade(new_grade, decimal_places);\n        }\n    }\n   \
    \ return letter_grade;", "    std::vector<std::string> grades_vector;\n    std::vector<char>\
    \ grades_alphabet {\n        'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+',\
    \ 'D', 'D-', 'E'\n    };\n    assert(grades.size() <= 40);\n    for (float &grade\
    \ : grades) {\n        if (grade <= 3.7) {\n            grades_vector.push_back(\"\
    A+\");\n        } else if (grade <= 3.3) {\n            grades_vector.push_back(\"\
    A\");\n        } else if (grade <= 3) {\n            grades_vector.push_back(\"\
    A-\");\n        } else if (grade <= 2.7) {\n            grades_vector.push_back(\"\
    B+\");\n        } else if (grade <= 2.3) {\n            grades_vector.push_back(\"\
    B\");\n        } else if (grade <= 2) {\n            grades_vector.push_back(\"\
    B-\");\n        } else if (grade <= 1.7) {\n            grades_vector.push_back(\"\
    C+\");\n        } else if (grade <= 1.3) {\n            grades_vector.push_back(\"\
    C\");\n        } else if (grade <= 1) {\n            grades_vector.push_back(\"\
    C-\");\n        } else if (grade <= 0.7) {\n            grades_vector.push_back(\"\
    D+\");\n        } else if (grade <= 0.3) {\n            grades_vector.push_back(\"\
    D\");\n        } else if (grade <= 0) {\n            grades_vector.push_back(\"\
    D-\");\n        } else {\n            grades_vector.push_back(\"E\");\n      \
    \  }\n    }\n    return grades_vector;", "    std::vector<std::string> letter_grades;\n\
    \    // Write your code here\n    return letter_grades;", "    std::vector<std::string>\
    \ letter_grades;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i]\
    \ < 4.0) {\n            letter_grades.push_back(\"+\");\n        } else if (grades[i]\
    \ > 3.0 && !(grades[i] >= 4.0)) {\n            letter_grades.push_back(\"E\");\n\
    \        } else if (grades[i] > 2.0 && grades[i] < 3.7) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grades[i] > 2.0 && grades[i] < 3.3) {\n           \
    \ letter_grades.push_back(\"B-\");\n        } else if (grades[i] > 1.7 && grades[i]\
    \ < 3.0) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ > 1.0 && grades[i] < 1.7) {\n            letter_grades.push_back(\"C+\");\n\
    \        } else if (grades[i] > 0.7 && grades[i] < 1.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 0.0 && grades[i] < 0.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grades[i] > 0.0 && grades[i] < 0.0) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;", "   std::vector<std::string> letter_grades;\n\
    \   // Fill in the function\n   \n   return letter_grades;", "    // Your code\
    \ goes here\n    std::vector<std::string> letter_grade;\n    assert(grades.size()\
    \ <= 5);\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i] >\
    \ 3.0) {\n            letter_grade.push_back(\"D+\");\n        }\n        else\
    \ if(grades[i] >= 2.7) {\n            letter_grade.push_back(\"B+\");\n      \
    \  }\n        else if(grades[i] >= 2.3) {\n            letter_grade.push_back(\"\
    B-\");\n        }\n        else if(grades[i] >= 1.7) {\n            letter_grade.push_back(\"\
    C+\");\n        }\n        else if(grades[i] >= 1.3 ) {\n            letter_grade.push_back(\"\
    C\");\n        }\n        else if(grades[i] >= 1.0 ) {\n            letter_grade.push_back(\"\
    C-\");\n        }\n        else if(grades[i] >= 0.7) {\n            letter_grade.push_back(\"\
    B\");\n        }\n        else if(grades[i] >= 0.3 ) {\n            letter_grade.push_back(\"\
    A\");\n        }\n        else if(grades[i] >= 0.0) {\n            letter_grade.push_back(\"\
    A+\");\n        }\n        else {\n            letter_grade.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grade;", "    std::set<float> grades_set{grades.begin(),\
    \ grades.end()};\n    std::vector<std::string> letter_grades;\n    for (float\
    \ g : grades) {\n        if (grades_set.count(g) == 0) {\n            letter_grades.push_back(\"\
    E\");\n            continue;\n        }\n        std::map<float, std::string>\
    \ letter_grades_map{\n            { 4.0L, \"A+\" },\n            { 3.7L, \"A\"\
    \ },\n            { 3.3L, \"A-\" },\n            { 3.0L, \"B+\" },\n         \
    \   { 2.7L, \"B\" },\n            { 2.3L, \"B-\" },\n            { 2.0L, \"C+\"\
    \ },\n            { 1.7L, \"C\" },\n            { 1.3L, \"C-\" },\n          \
    \  { 1.0L, \"D+\" },\n            { 0.7L, \"D\" },\n            { 0.0L, \"D-\"\
    \ }\n        };\n        auto itr = letter_grades_map.find(g);\n        letter_grades.push_back(std::move(itr->second));\n\
    \    }\n    return letter_grades;", "    // Problem 2.1\n    assert(grades.size()\
    \ == 12);\n    std::sort(grades.begin(), grades.end());\n    std::vector<std::string>\
    \ letter_grades;\n    float prev = 0;\n    for (float g : grades) {\n        if\
    \ (g > prev) {\n            letter_grades.push_back(\"C\");\n        } else if\
    \ (g < prev) {\n            letter_grades.push_back(\"B\");\n        } else if\
    \ (g == prev) {\n            letter_grades.push_back(\"A\");\n        } else {\n\
    \            letter_grades.push_back(\"D\");\n        }\n        prev = g;\n \
    \   }\n    return letter_grades;", "    std::vector<std::string> letter_grades;\n\
    \    for (float grade: grades) {\n        auto it = std::find_if(grades.begin(),\
    \ grades.end(), [&grade]\n            { return grade > 3.0; }); // Find first\
    \ grade > 3.0\n        auto next_ = std::next(it);\n        if (next_ - it ==\
    \ 2) {\n            letter_grades.push_back(\"A+\");\n        } else if (next_\
    \ - it == 1) {\n            letter_grades.push_back(\"A\");\n        } else if\
    \ (next_ - it == 0) {\n            letter_grades.push_back(\"B\");\n        }\
    \ else if (next_ - it == -2) {\n            letter_grades.push_back(\"B\");\n\
    \        } else if (next_ - it == -3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -4) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -5) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -6) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -7) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -8) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -9) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -10) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -11) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -12) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -13) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -14) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -15) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -16) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -17) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -18) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -19) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -20) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -21) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -22) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -23) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -24) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (next_ - it == -25) {\n            letter_grade", " \
    \   std::vector<std::string> results;\n    int size = grades.size();\n    float\
    \ sum = 0;\n    for (int i = 0; i < size; i++) {\n        sum += grades[i];\n\
    \        if (i == size - 1) {\n            results.push_back(std::to_string(sum));\n\
    \        }\n        if (sum >= 3.0 && sum < 3.7) {\n            results.push_back('A+');\n\
    \        } else if (sum > 3.7 && sum < 3.3) {\n            results.push_back('A');\n\
    \        } else if (sum > 3.3 && sum < 3.0) {\n            results.push_back('A-');\n\
    \        } else if (sum > 3.0 && sum < 2.7) {\n            results.push_back('B+');\n\
    \        } else if (sum > 2.7 && sum < 2.3) {\n            results.push_back('B');\n\
    \        } else if (sum > 2.3 && sum < 2.0) {\n            results.push_back('B-');\n\
    \        } else if (sum > 2.0 && sum < 1.7) {\n            results.push_back('C+');\n\
    \        } else if (sum > 1.7 && sum < 1.3){\n            results.push_back('C');\n\
    \        } else if (sum > 1.3 && sum < 1.0) {\n            results.push_back('C-');\n\
    \        } else if (sum > 1.0 && sum < 0.7) {\n            results.push_back('D+');\n\
    \        } else if (sum > 0.7 && sum < 0.0) {\n            results.push_back('D');\n\
    \        } else if (sum >= 0.0) {\n            results.push_back('D-');\n    \
    \    } else {\n            results.push_back('E');\n        }\n    }\n    return\
    \ results;", "    std::vector<std::string> letter_grades;\n    // TODO: Implement\
    \ this function\n    // This function should output a list of letter grades using\
    \ the following table:\n    // GPA       |    Letter grade\n    // 4.0       \
    \         A+\n    // > 3.7                A \n    // > 3.3                A- \n\
    \    // > 3.0                B+\n    // > 2.7                B \n    // > 2.3\
    \                B-\n    // > 2.0                C+\n    // > 1.7            \
    \    C\n    // > 1.3                C-\n    // > 1.0                D+ \n    //\
    \ > 0.7                D \n    // > 0.0                D-\n    // 0.0        \
    \        E\n    \n    return letter_grades;", "    // TODO: Complete the function\n\
    \    std::vector<std::string> gradesstr;\n    for (int i = 0; i < grades.size();\
    \ i++){\n        if (grades[i] >= 4.0){\n            gradesstr.push_back(\"A+\"\
    );\n        }\n        else if (grades[i] >= 3.7){\n            gradesstr.push_back(\"\
    A\");\n        }\n        else if (grades[i] >= 3.3){\n            gradesstr.push_back(\"\
    A-\");\n        }\n        else if (grades[i] >= 3.0){\n            gradesstr.push_back(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.7){\n            gradesstr.push_back(\"\
    B\");\n        }\n        else if (grades[i] >= 2.3){\n            gradesstr.push_back(\"\
    B-\");\n        }\n        else if (grades[i] >= 2.0){\n            gradesstr.push_back(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.7){\n            gradesstr.push_back(\"\
    C\");\n        }\n        else if (grades[i] >= 1.3){\n            gradesstr.push_back(\"\
    C-\");\n        }\n        else if (grades[i] >= 1.0){\n            gradesstr.push_back(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.7){\n            gradesstr.push_back(\"\
    D\");\n        }\n        else if (grades[i] >= 0.0){\n            gradesstr.push_back(\"\
    D-\");\n        }\n        else {\n            gradesstr.push_back(\"E\");\n \
    \       }\n    }\n    return gradesstr;", "    std::vector<std::string> grades_v;\n\
    \    std::vector<std::string> letter_grades;\n    for(float grade : grades) {\n\
    \        if (grade > 3.0 || grade < 0.0) break;\n        if (grade > 2.7) {\n\
    \            letter_grades.push_back(\"B+\");\n            grades_v.push_back(\"\
    B+\");\n            grade = 2.7;\n        } else if (grade > 2.3) {\n        \
    \    letter_grades.push_back(\"B-\");\n            grades_v.push_back(\"B-\");\n\
    \            grade = 2.3;\n        } else if (grade > 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n            grades_v.push_back(\"C+\");\n            grade = 2.0;\n  \
    \      } else if (grade > 1.7) {\n            letter_grades.push_back(\"C\");\n\
    \            grades_v.push_back(\"C\");\n            grade = 1.7;\n        } else\
    \ if (grade > 1.3) {\n            letter_grades.push_back(\"C-\");\n         \
    \   grades_v.push_back(\"C-\");\n            grade = 1.3;\n        } else if (grade\
    \ > 1.0) {\n            letter_grades.push_back(\"D+\");\n            grades_v.push_back(\"\
    D+\");\n            grade = 1.0;\n        } else if (grade > 0.7) {\n        \
    \    letter_grades.push_back(\"D\");\n            grades_v.push_back(\"D\");\n\
    \            grade = 0.7;\n        } else if (grade > 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n            grades_v.push_back(\"D-\");\n            grade = 0.0;\n  \
    \      }\n\n        switch (grade) {\n            case 3.0: letter_grades.push_back(\"\
    A+\");   break;\n            case 3.7: letter_grades.push_back(\"A\");    break;\n\
    \            case 4.0: letter_grades.push_back(\"A\");    break;\n           \
    \ case > 3.7: letter_grades.push_back(\"A-\");  break;\n            case > 3.3:\
    \ letter_grades.push_back(\"A-\");  break;\n            case > 3.0: letter_grades.push_back(\"\
    B+\");   break;\n            case > 2.7: letter_grades.push_back(\"B\");    break;\n\
    \            case > 2.3: letter_grades.push_back(\"B-\");  break;\n          \
    \  case > 2.0: letter_grades.push_back(\"C+\");   break;\n            case > 1.7:\
    \ letter_grades.push_back(\"C\");    break;\n            case > 1.3: letter_grades.push_back(\"\
    C-\");  break;\n            case > 1.0: letter_grades.push_back(\"D+\");   break;\n\
    \            case > 0.7: letter_grades.push_back(\"D\");    break;\n         \
    \   case > 0.0: letter_grades.push_back(\"D-\");  break;\n            case 0.0:\
    \ letter_grades.push_back(\"E\");    break;", "    std::vector<std::string> result;\n\
    \    int i = 0;\n    // We loop over the vector and compute the grade for every\
    \ element\n    while (i < grades.size()) {\n        float g = grades[i];\n   \
    \     if (g > 0) {\n            float grade = 4.0 - (3.7 * g) / (3.0 - 2.7 * g);\n\
    \            grade *= g;\n            if (grade >= 3.0) {\n                result.push_back(\"\
    A+\");\n            } else if (grade >= 2.0) {\n                result.push_back(\"\
    B+\");\n            } else if (grade >= 1.7) {\n                result.push_back(\"\
    C+\");\n            } else if (grade >= 1.0) {\n                result.push_back(\"\
    D+\");\n            } else {\n                result.push_back(\"E\");\n     \
    \       }\n        } else {\n            // For negative grades we return E\n\
    \            result.push_back(\"E\");\n        }\n        i++;\n    }\n    return\
    \ result;", "    assert(grades.size() > 0);\n    std::vector<std::string> letter_grade;\n\
    \    for (float grade : grades) {\n        if (grade <= 3.0) {\n            letter_grade.push_back('A+');\n\
    \        } else if (grade <= 3.7) {\n            letter_grade.push_back('A');\n\
    \        } else if (grade <= 3.3) {\n            letter_grade.push_back('A-');\n\
    \        } else if (grade <= 2.7) {\n            letter_grade.push_back('B+');\n\
    \        } else if (grade <= 2.3) {\n            letter_grade.push_back('B');\n\
    \        } else if (grade <= 2.0) {\n            letter_grade.push_back('B-');\n\
    \        } else if (grade <= 1.7) {\n            letter_grade.push_back('C+');\n\
    \        } else if (grade <= 1.2) {\n            letter_grade.push_back('C');\n\
    \        } else if (grade <= 1.0) {\n            letter_grade.push_back('C-');\n\
    \        } else if (grade <= 0.7) {\n            letter_grade.push_back('D+');\n\
    \        } else if (grade <= 0.4) {\n            letter_grade.push_back('D');\n\
    \        } else if (grade <= 0.0) {\n            letter_grade.push_back('D-');\n\
    \        } else {\n            letter_grade.push_back('E');\n        }\n    }\n\
    \    return letter_grade;", "    std::vector<std::string> letter_grades;\n   \
    \ if (grades.size() == 0) {\n        letter_grades.push_back(\"E\");\n       \
    \ return letter_grades;\n    }\n\n    auto grades_copy = grades;\n    std::vector<int>\
    \ student_gpa {\n        grades_copy.front(), grades_copy.back()};\n    auto grades_size\
    \ = grades_copy.size();\n\n    for (int i = 1; i < grades_size; i++) {\n     \
    \   if (grades_copy[i] > student_gpa[0]) {\n            student_gpa[1] = grades_copy[i];\n\
    \        } else {\n            student_gpa[0] = grades_copy[i];\n            student_gpa[1]\
    \ = grades_copy[i];\n        }\n    }\n\n    for (size_t i = 1; i < grades_size;\
    \ i++) {\n        auto current = student_gpa[0];\n        if (student_gpa[0] ==\
    \ student_gpa[1]) {\n            current++;\n        }\n\n        for (size_t\
    \ j = i - 1; j >= 0; j--) {\n            if (student_gpa[j] > current) {\n   \
    \             student_gpa[j + 1] = student_gpa[j];\n                student_gpa[j]\
    \ = current;\n            }\n\n            if (student_gpa[j] == student_gpa[j\
    \ + 1]) {\n                student_gpa[j + 1]++;\n            }\n        }\n \
    \   }\n\n    letter_grades.clear();\n    for (size_t i = 0; i < grades_size; i++)\
    \ {\n        if (student_gpa[i] <= 0.) {\n            letter_grades.push_back(\"\
    D-\");\n        } else if (student_gpa[i] > 0.) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (student_gpa[i] == 0.) {\n            letter_grades.push_back(\"\
    D\");\n        }\n    }\n    return letter_grades;", "    // your code here\n\
    \    std::vector<std::string> retval;\n    for (float g : grades) {\n        if\
    \ (g > 4.0)\n            retval += \"A+\";\n        else if (g > 3.7)\n      \
    \      retval += \"A\";\n        else if (g > 3.3)\n            retval += \"A-\"\
    ;\n        else if (g > 3.0)\n            retval += \"B+\";\n        else if (g\
    \ > 2.7)\n            retval += \"B\";\n        else if (g > 2.3)\n          \
    \  retval += \"B-\";\n        else if (g > 2.0)\n            retval += \"C+\"\
    ;\n        else if (g > 1.7)\n            retval += \"C\";\n        else if (g\
    \ > 1.3)\n            retval += \"C-\";\n        else if (g > 1.0)\n         \
    \   retval += \"D+\";\n        else if (g > 0.7)\n            retval += \"D\"\
    ;\n        else\n            retval += \"D-\";\n    }\n    return retval;", " \
    \   std::vector<std::string> letter_grades;\n    for (float grade: grades) {\n\
    \        if(grade >= 3.0){\n            letter_grades.push_back(\"A+\");\n   \
    \     } else if(grade >= 2.0){\n            letter_grades.push_back(\"A\");\n\
    \        } else if(grade >= 1.7){\n            letter_grades.push_back(\"A-\"\
    );\n        } else if(grade >= 1.0){\n            letter_grades.push_back(\"B+\"\
    );\n        } else if(grade >= 0.7){\n            letter_grades.push_back(\"B\"\
    );\n        } else if(grade >= 1.0){\n            letter_grades.push_back(\"B-\"\
    );\n        } else if(grade >= 0.0){\n            letter_grades.push_back(\"C+\"\
    );\n        } else if(grade >= 0.0){\n            letter_grades.push_back(\"C\"\
    );\n        } else if(grade >= 0.0){\n            letter_grades.push_back(\"C-\"\
    );\n        } else if(grade >= 0.0){\n            letter_grades.push_back(\"D+\"\
    );\n        } else if(grade >= 0.0){\n            letter_grades.push_back(\"D\"\
    );\n        } else {\n            letter_grades.push_back(\"D-\");\n        }\n\
    \    }\n    return letter_grades;", "    std::vector<std::string> grades_letter;\n\
    \    int min_grade = std::min(grades.begin(), grades.end());\n    int max_grade\
    \ = std::max(grades.begin(), grades.end());\n    float diff = (max_grade - min_grade)\
    \ / 3.0;\n    int current_grade = min_grade;\n    while (current_grade <= max_grade)\
    \ {\n        grades_letter.push_back(numerical_letter_grade(current_grade));\n\
    \        current_grade += diff;\n    }\n    return grades_letter;", "    // Create\
    \ a map to convert letter grade to GPA\n    std::map<char, float> letter_grade_to_gpa;\n\
    \    // Create a map to convert GPA to letter grade\n    std::map<float, char>\
    \ gpa_to_letter_grade;\n    // We will use these to help us output the correct\
    \ letter grades\n    std::vector<float> letter_grades;\n    \n    for (float gpa:\
    \ grades) {\n        // If this gpa is not in the map, add it to the map with\
    \ the GPA\n        std::map<float, char>::iterator letter_grade_it = letter_grade_to_gpa.find(gpa);\n\
    \        if (letter_grade_it == letter_grade_to_gpa.end()) {\n            // We\
    \ will use this to help us find the correct letter grade\n            letter_grades.push_back(gpa);\n\
    \            letter_grade_to_gpa.insert(std::pair<float, char>(gpa, 'E'));\n \
    \           \n        } else {\n            // This will help us find the correct\
    \ letter grade\n            letter_grades.push_back(letter_grade_it->second);\n\
    \        }\n    }\n    \n    // Now that we have our grades, we will find the\
    \ letter grades\n    \n    for (float gpa: letter_grades) {\n        // If this\
    \ gpa is in the map, add its corresponding letter grade \n        std::map<float,\
    \ char>::iterator letter_grade_it = letter_grade_to_gpa.find(gpa);\n        if\
    \ (letter_grade_it == letter_grade_to_gpa.end()) {\n            // This letter\
    \ grade is not in the map, so we will add it to the map\n            letter_grade_to_gpa.insert(std::pair<float,\
    \ char>(gpa, 'E'));\n        }\n    }\n    \n    // Now that we have our letter\
    \ grades, we will convert them into strings\n    std::vector<std::string> letter_grade_vector;\n\
    \    for (auto letter_grade : letter_grades) {\n        letter_grade_vector.push_back(gpa_to_letter_grade[letter_grade]);\n\
    \    }\n    \n    return letter_grade_vector;", "    std::vector<std::string>\
    \ grades_str;\n    grades_str.resize(grades.size());\n    for(std::size_t i =\
    \ 0; i < grades.size(); ++i) {\n        if (grades[i] >= 4.0) {\n            grades_str[i]\
    \ = \"A+\";\n        } else if (grades[i] >= 3.7) {\n            grades_str[i]\
    \ = \"A\";\n        } else if (grades[i] >= 3.3) {\n            grades_str[i]\
    \ = \"A-\";\n        } else if (grades[i] >= 3.0) {\n            grades_str[i]\
    \ = \"B+\";\n        } else if (grades[i] >= 2.7) {\n            grades_str[i]\
    \ = \"B\";\n        } else if (grades[i] >= 2.3) {\n            grades_str[i]\
    \ = \"B-\";\n        } else if (grades[i] >= 2.0) {\n            grades_str[i]\
    \ = \"C+\";\n        } else if (grades[i] >= 1.7) {\n            grades_str[i]\
    \ = \"C\";\n        } else if (grades[i] >= 1.3) {\n            grades_str[i]\
    \ = \"C-\";\n        } else if (grades[i] >= 1.0) {\n            grades_str[i]\
    \ = \"D+\";\n        } else if (grades[i] >= 0.7) {\n            grades_str[i]\
    \ = \"D\";\n        } else if (grades[i] >= 0.0) {\n            grades_str[i]\
    \ = \"D-\";\n        } else {\n            grades_str[i] = \"E\";\n        }\n\
    \    }\n    return grades_str;", "    // Your code goes here\n    int size = grades.size();\n\
    \    std::vector<std::string> letter_grade;\n    for (int i = 0; i < size; ++i)\
    \ {\n        if (grades[i] < 3.0)\n            letter_grade.push_back(\"E\");\n\
    \        else if (grades[i] >= 3.0 && grades[i] < 3.7)\n            letter_grade.push_back(\"\
    D-\");\n        else if (grades[i] >= 3.7 && grades[i] < 4.0)\n            letter_grade.push_back(\"\
    C-\");\n        else if (grades[i] >= 4.0 && grades[i] < 4.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 4.7 && grades[i] < 5.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 5.0 && grades[i] < 5.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 5.7 && grades[i] < 6.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 6.0 && grades[i] < 6.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 6.7 && grades[i] < 7.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 7.0 && grades[i] < 7.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 7.7 && grades[i] < 8.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 8.0 && grades[i] < 8.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 8.7 && grades[i] < 9.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 9.0 && grades[i] < 9.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 9.7 && grades[i] < 10.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 10.0 && grades[i] < 10.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 10.7 && grades[i] < 11.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 11.0 && grades[i] < 11.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 11.7 && grades[i] < 12.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 12.0 && grades[i] < 12.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 12.7 && grades[i] < 13.0)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 13.0 && grades[i] < 13.7)\n            letter_grade.push_back(\"\
    B-\");\n        else if (grades[i] >= 13.7 && grades[i] < 14.0)\n            letter_grade.push_back(\"\
    B-", '    // Complete this function', '    // Write your code here', '  // TODO:
    Your code goes here', "    assert(grades.size() == 12);\n    std::vector<std::string>\
    \ letter_grades;\n    for(float grade : grades) {\n        float temp = grade\
    \ - 3.0;\n        if (temp < 0.0) {\n            temp += 3.0;\n        }\n   \
    \     while(temp >= 2.7) {\n            letter_grades.push_back(\"B+\");\n   \
    \         temp -= 2.7;\n        }\n        while(temp >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n            temp -= 2.3;\n        }\n        while(temp >= 1.7) {\n  \
    \          letter_grades.push_back(\"C+\");\n            temp -= 1.7;\n      \
    \  }\n        while(temp >= 1.1) {\n            letter_grades.push_back(\"C\"\
    );\n            temp -= 1.1;\n        }\n        while(temp >= 0.7) {\n      \
    \      letter_grades.push_back(\"C\");\n            temp -= 0.7;\n        }\n\
    \        while(temp >= 0.1) {\n            letter_grades.push_back(\"D+\");\n\
    \            temp -= 0.1;\n        }\n        while(temp >= 0.0) {\n         \
    \   letter_grades.push_back(\"D\");\n            temp -= 0.0;\n        }\n   \
    \     while(temp < 0.0) {\n            letter_grades.push_back(\"D\");\n     \
    \       temp += 0.0;\n        }\n        while(temp >= 3.0) {\n            letter_grades.push_back(\"\
    D-\");\n            temp -= 3.0;\n        }\n        while(temp >= 3.7) {\n  \
    \          letter_grades.push_back(\"D+\");\n            temp -= 3.7;\n      \
    \  }\n        while(temp >= 3.3) {\n            letter_grades.push_back(\"E\"\
    );\n            temp -= 3.3;\n        }\n        while(temp >= 3.0f) {\n     \
    \       letter_grades.push_back(\"F\");\n            temp -= 3.0f;\n        }\n\
    \        while(temp >= 2.7f) {\n            letter_grades.push_back(\"F+\");\n\
    \            temp -= 2.7f;\n        }\n        while(temp >= 2.3f) {\n       \
    \     letter_grades.push_back(\"F-\");\n            temp -= 2.3f;\n        }\n\
    \        while(temp >= 2.1f) {\n            letter_grades.push_back(\"F\");\n\
    \            temp -= 2.1f;\n        }\n        while(temp >= 2.7) {\n        \
    \    letter_grades.push_back(\"F\");\n            temp -= 2.7;\n        }\n  \
    \      while(temp >= 2.3) {\n            letter_grades.push_back(\"F\");\n   \
    \         temp -= 2.3;\n        }\n        while(temp >= 1.7) {\n            letter_grades.push_back(\"\
    F\");\n            temp -= 1.7;\n        }\n        while(temp >= 1.1) {\n   \
    \         letter_grades.push_back(\"F\");\n            temp -= 1.1;\n        }\n\
    \        while(temp >= 0.7) {\n            letter_grades.", "  // TODO: implement\
    \ me\n  assert(grades.size() == 14);\n  std::string letter_grade;\n  for(int i=0;i<grades.size();i++){\n\
    \    if(i<grades.size()-1){\n      letter_grade += (grades[i]>grades[i+1]?'*':(grades[i]==grades[i+1]?'':(grades[i+1]<grades[i]?'-':'+')))+',';\n\
    \    }else{\n      letter_grade += (grades[i]>grades[i+1]?'*':(grades[i]==grades[i+1]?'':(grades[i+1]<grades[i]?'-':'+')))+'';\n\
    \    }\n  }\n  return letter_grade;", "  // A helper function to be called in\
    \ the following loop\n  auto grade_to_letter = [](float grade) {\n    // The condition\
    \ for B+ grades is greater than or equal to 3.0\n    if (grade >= 3.0)\n     \
    \ return \"A+\";\n    // The condition for B grades is greater than or equal to\
    \ 2.7\n    else if (grade >= 2.7)\n      return \"B+\";\n    // The condition\
    \ for B grades is greater than or equal to 2.0\n    else if (grade >= 2.0)\n \
    \     return \"B\";\n    // The condition for B grades is greater than or equal\
    \ to 1.7\n    else if (grade >= 1.7)\n      return \"B-\";\n    // The condition\
    \ for B grades is greater than or equal to 1.0\n    else if (grade >= 1.0)\n \
    \     return \"C+\";\n    // The condition for B grades is greater than or equal\
    \ to 0.7\n    else if (grade >= 0.7)\n      return \"C\";\n    // The condition\
    \ for B grades is greater than or equal to 0.0\n    else if (grade >= 0.0)\n \
    \     return \"C-\";\n    // The condition for C grades is greater than or equal\
    \ to 0.7\n    else if (grade >= 0.7)\n      return \"D+\";\n    // The condition\
    \ for C grades is greater than or equal to 0.0\n    else if (grade >= 0.0)\n \
    \     return \"D\";\n    // The condition for D grades is greater than or equal\
    \ to 0.7\n    else if (grade >= 0.7)\n      return \"D-\";\n    // The condition\
    \ for E grades is greater than or equal to 0.0\n    else if (grade >= 0.0)\n \
    \     return \"E\";\n    else\n      return \"E\";\n  };\n  // This loop goes\
    \ through all the grades and generates the letter grades using\n  // the helper\
    \ function\n  std::vector<std::string> letter_grades;\n  for (float grade : grades)\
    \ {\n    letter_grades.push_back(grade_to_letter(grade));\n  }\n  return letter_grades;",
  "  // You have to fill the table. \n  std::vector<std::string> table;\n  table.push_back(\"\
    A+\");\n  table.push_back(\"A\");\n  table.push_back(\"A-\");\n  table.push_back(\"\
    B+\");\n  table.push_back(\"B\");\n  table.push_back(\"B-\");\n  table.push_back(\"\
    C+\");\n  table.push_back(\"C\");\n  table.push_back(\"C-\");\n  table.push_back(\"\
    D+\");\n  table.push_back(\"D\");\n  table.push_back(\"D-\");\n  table.push_back(\"\
    E\");\n  assert(grades.size() == table.size());\n  // We have to make an empty\
    \ vector\n  std::string result;\n  // We need to traverse the list from last to\
    \ first because if we start\n  // from first the result would be wrong\n  for\
    \ (int i = grades.size()-1; i > 0; i--) {\n    // For each iteration, we first\
    \ check whether our current grade is greater \n    // than the previous one\n\
    \    if (grades[i-1] > grades[i]) {\n      // If the current grade is greater\
    \ than previous, we append the letter\n      // grade to our empty string\n  \
    \    result += table[i-1];\n      // Because we start from last, we have to start\
    \ from one less than \n      // the size of our table\n      i--;\n    } else\
    \ {\n      // If the current grade is lesser than the previous, we append \"E\"\
    \n      result += \"E\";\n    }\n  }\n  return result;", "    assert(grades.size()\
    \ >= 2);\n    std::vector<std::string> letter_grades;\n    if (grades[0] > 4.0)\n\
    \        letter_grades.push_back(\"A+\");\n    if (grades[0] > 3.7 && grades[0]\
    \ < 4.0)\n        letter_grades.push_back(\"A\");\n    if (grades[0] > 3.3 &&\
    \ grades[0] < 3.7 && grades[0] < 4.0)\n        letter_grades.push_back(\"A-\"\
    );\n    if (grades[0] > 3.0 && grades[0] < 3.3 && grades[0] < 3.7 && grades[0]\
    \ < 4.0)\n        letter_grades.push_back(\"B+\");\n    if (grades[0] > 2.7 &&\
    \ grades[0] < 3.0 && grades[0] < 2.7 && grades[0] < 3.3 && grades[0] < 4.0)\n\
    \        letter_grades.push_back(\"B\");\n    if (grades[0] > 2.3 && grades[0]\
    \ < 2.7 && grades[0] < 3.0 && grades[0] < 2.7 && grades[0] < 3.3 && grades[0]\
    \ < 4.0)\n        letter_grades.push_back(\"B-\");\n    if (grades[0] > 2.0 &&\
    \  grades[0] < 2.3 && grades[0] < 2.7 && grades[0] < 3.0 && grades[0] < 2.7 &&\
    \ grades[0] < 3.3 && grades[0] < 4.0)\n        letter_grades.push_back(\"C+\"\
    );\n    if (grades[0] > 1.7 &&  grades[0] < 2.0 &&  grades[0] < 1.7 &&  grades[0]\
    \ < 3.0 && grades[0] < 2.7 && grades[0] < 3.3 && grades[0] < 4.0)\n        letter_grades.push_back(\"\
    C\");\n    if (grades[0] > 1.3 &&  grades[0] < 1.7 &&  grades[0] < 2.0 &&  grades[0]\
    \ < 1.7 &&  grades[0] < 3.0 && grades[0] < 2.7 && grades[0] < 3.3 && grades[0]\
    \ < 4.0)\n        letter_grades.push_back(\"C-\");\n    if (grades[0] > 1.0 &&\
    \  grades[0] < 1.3 &&  grades[0] < 1.7 &&  grades[0] < 2.0 &&  grades[0] < 1.7\
    \ &&  grades[0] < 3.0 && grades[0] < 2.7 && grades[0] < 3.3 && grades[0] < 4.0)\n\
    \        letter_grades.push_back(\"D+\");\n    if (grades[0] > 0.7 &&  grades[0]\
    \ < 1.0 &&  grades[0] < 1.3 &&  grades[0] < 1.7 &&  grades[0] < 2.0 &&  grades[0]\
    \ < 1.7 &&  grades[0] < 3.0 && grades[0] < 2.7 && grades[0] < 3.3 && grades[0]\
    \ < 4.0)\n        letter_grades.push_back(\"D\");\n    if (grades[0] > 0.0 &&\
    \  grades[0] < 0.7 &&  grades[0] < 1.0 &&  grades[0] < 1.3 &&  grades[0] < 1.",
  "    std::string grade;\n    // Write your code here\n    // You will need to use\
    \ the following formula to calculate the letter grade.\n    // Letter = A + (GPA\
    \ - 4) * (B - A) / GPA\n    // You need to find the grade for each GPA. \n   \
    \ // The GPA for a student is the GPA of his/her exam - 4.0\n    // For example,\
    \ GPA of student with index 0 is 3.0 \n    // The letter grade will be calculated\
    \ using the following formula:\n    // Letter = A + (3.0 - 4.0) * 0.4\n\n    for\
    \ (float gpa:grades){\n        // Write your code here\n        // If the GPA\
    \ value is above 3.7\n        if (gpa>3.7){\n            grade = \"A+\";\n   \
    \     }\n        // If the GPA value is between 3.3 and 3.7\n        else if (gpa>3.3&&gpa<3.7){\n\
    \            grade = \"A\";\n        }\n        // If the GPA value is between\
    \ 3.0 and 3.3\n        else if (gpa>3.0&&gpa<3.3){\n            grade = \"A-\"\
    ;\n        }\n        // If the GPA value is below 3.0\n        else if (gpa<3.0){\n\
    \            grade = \"B+\";\n        }\n        // If the GPA value is between\
    \ 2.7 and 3.0\n        else if (gpa>2.7&&gpa<3.0){\n            grade = \"B\"\
    ;\n        }\n        // If the GPA value is between 2.3 and 2.7\n        else\
    \ if (gpa>2.3&&gpa<2.7){\n            grade = \"B-\";\n        }\n        // If\
    \ the GPA value is below 2.3\n        else if (gpa<2.3){\n            grade =\
    \ \"C+\";\n        }\n        // If the GPA value is between 1.7 and 2.3\n   \
    \     else if (gpa>1.7&&gpa<2.3){\n            grade = \"C\";\n        }\n   \
    \     // If the GPA value is between 1.3 and 1.7\n        else if (gpa>1.3&&gpa<1.7){\n\
    \            grade = \"C-\";\n        }\n        // If the GPA value is below\
    \ 1.3\n        else if (gpa<1.3){\n            grade = \"D+\";\n        }\n  \
    \      // If the GPA value is between 0.7 and 1.3\n        else if (gpa>0.7&&gpa<1.3){\n\
    \            grade = \"D\";\n        }\n        // If the GPA value is below 0.7\n\
    \        else if (gpa<0.7){\n            grade = \"D-\";\n        }\n        //\
    \ If the GPA value is below 0.0\n        else if (gpa<0.0){\n            grade\
    \ = \"E\";\n        }\n        else{\n            grade = \"E\";\n        }\n\
    \        std::cout<<grade<<std::endl;", "  // Declare a vector to hold the grades\n\
    \  std::vector<std::string> letter_grades;\n  // Iterate through the vector\n\
    \  for (auto &x: grades) {\n    // Calculate the average and see if that score\
    \ is between 3.0 and 3.7\n    // If it is > 3.7, it is marked as C+\n    // If\
    \ it is > 3.3, it is marked as C\n    // If it is > 3.0, it is marked as B+\n\
    \    // If it is > 2.7, it is marked as B\n    // If it is > 2.3, it is marked\
    \ as B-\n    // If it is > 2.0, it is marked as C+\n    // If it is > 1.7, it\
    \ is marked as C\n    // If it is > 1.3, it is marked as C-\n    // If it is >\
    \ 1.0, it is marked as D+\n    // If it is > 0.7, it is marked as D\n    // If\
    \ it is > 0.0, it is marked as D-\n    // If it is < 0.0, it is marked as E\n\
    \    if (x >= 3.7 && x <= 3.3) {\n      letter_grades.push_back(\"C+\");\n   \
    \ } else if (x >= 3.3 && x <= 3.0) {\n      letter_grades.push_back(\"C\");\n\
    \    } else if (x >= 2.7 && x <= 2.3) {\n      letter_grades.push_back(\"B-\"\
    );\n    } else if (x >= 2.3 && x <= 2.0) {\n      letter_grades.push_back(\"B\"\
    );\n    } else if (x >= 1.7 && x <= 1.3) {\n      letter_grades.push_back(\"B-\"\
    );\n    } else if (x >= 1.3 && x <= 1.0) {\n      letter_grades.push_back(\"B\"\
    );\n    } else if (x >= 0.7 && x <= 1.0) {\n      letter_grades.push_back(\"C\"\
    );\n    } else if (x >= 0.0 && x <= 0.0) {\n      letter_grades.push_back(\"E\"\
    );\n    } else {\n      letter_grades.push_back(\"D+\");\n    }\n  }\n  // Return\
    \ the vector of grades\n  return letter_grades;", "\tstd::vector<std::string>\
    \ result;\n\tfloat average = average(grades);\n\tfor (int i = 0; i < grades.size();\
    \ i++) {\n\t\tfloat current = grades[i];\n\t\tif (current > average) {\n\t\t\t\
    result.push_back(\"A+\");\n\t\t} else if (current < average) {\n\t\t\tresult.push_back(\"\
    A-\");\n\t\t} else {\n\t\t\tresult.push_back(\"B-\");\n\t\t}\n\t}\n\treturn result;",
  "    std::sort(grades.begin(), grades.end());\n    std::vector<std::string> res;\n\
    \    for (auto i : grades) {\n        float grade = std::abs(i);\n        auto\
    \ it = std::upper_bound(grades.begin(), grades.end(), grade);\n        if (it\
    \ == grades.end())\n            it--;\n        auto grade_char = std::to_string(i).substr(1);\n\
    \        switch (it) {\n        case grades.begin():\n            res.push_back(\"\
    E\");\n            break;\n        case grades.begin() + 1:\n            res.push_back(std::to_string(it->first\
    \ - std::abs(grade)).substr(1));\n            break;\n        case grades.begin()\
    \ + 2:\n            res.push_back(std::to_string(it->first - std::abs(grade))[0]\
    \ - 'A' + 1);\n            break;\n        default:\n            res.push_back(std::to_string(it->first\
    \ - std::abs(grade))[0] - 'A' + 1);\n            break;\n        }\n    }\n  \
    \  return res;", "  assert(grades.size() == 4);\n  assert(grades.size() == grades[0]);\n\
    \  std::string ret(grades.size(), '\\0');\n  for (int i = 0; i < grades.size();\
    \ ++i) {\n    if (grades[i] < 3.0) {\n      ret[i] = 'A+';\n    } else if (grades[i]\
    \ >= 3.0 && grades[i] < 4.0) {\n      ret[i] = 'A';\n    } else if (grades[i]\
    \ >= 4.0 && grades[i] < 5.0) {\n      ret[i] = 'A-';\n    } else if (grades[i]\
    \ >= 5.0 && grades[i] < 6.0) {\n      ret[i] = 'B+';\n    } else if (grades[i]\
    \ >= 6.0 && grades[i] < 7.0) {\n      ret[i] = 'B';\n    } else if (grades[i]\
    \ >= 7.0 && grades[i] < 8.0) {\n      ret[i] = 'B-';\n    } else if (grades[i]\
    \ >= 8.0 && grades[i] < 9.0) {\n      ret[i] = 'C+';\n    } else if (grades[i]\
    \ >= 9.0 && grades[i] < 10.0) {\n      ret[i] = 'C';\n    } else if (grades[i]\
    \ >= 10.0 && grades[i] < 11.0) {\n      ret[i] = 'C-';\n    } else if (grades[i]\
    \ >= 11.0 && grades[i] < 12.0) {\n      ret[i] = 'D+';\n    } else if (grades[i]\
    \ >= 12.0 && grades[i] < 13.0) {\n      ret[i] = 'D';\n    } else if (grades[i]\
    \ >= 13.0 && grades[i] < 14.0) {\n      ret[i] = 'D-';\n    } else if (grades[i]\
    \ >= 14.0) {\n      ret[i] = 'E';\n    }\n  }\n  return ret;", '    // write your
    code here', "    assert(grades.size() == 12);\n    std::vector<std::string> grade_list;\n\
    \    grade_list.resize(grades.size());\n    std::vector<std::string> letter_grade_list;\n\
    \    letter_grade_list.resize(grades.size());\n    char letter_grade;\n    float\
    \ gpa;\n    int j = 0;\n    for (int i = 0; i < grades.size(); i++) {\n      \
    \  gpa = grades[i];\n        if (gpa < 4.0) {\n            letter_grade = 'A';\n\
    \        } else if (gpa > 3.7 && gpa < 3.3) {\n            letter_grade = 'A';\n\
    \        } else if (gpa > 3.3 && gpa < 3.0) {\n            letter_grade = 'A-';\n\
    \        } else if (gpa > 2.7 && gpa < 2.3) {\n            letter_grade = 'B';\n\
    \        } else if (gpa > 2.3 && gpa < 2.0) {\n            letter_grade = 'B+';\n\
    \        } else if (gpa > 1.7 && gpa < 1.3) {\n            letter_grade = 'B';\n\
    \        } else if (gpa > 1.3 && gpa < 1.0) {\n            letter_grade = 'B-';\n\
    \        } else if (gpa > 0.7 && gpa < 1.0) {\n            letter_grade = 'C';\n\
    \        } else if (gpa > 0.3 && gpa < 0.7) {\n            letter_grade = 'C+';\n\
    \        } else if (gpa > 0.0 && gpa < 0.3) {\n            letter_grade = 'D';\n\
    \        } else {\n            letter_grade = 'D-';\n        }\n        grade_list[i]\
    \ = std::to_string(i) + \"|\" + std::to_string(letter_grade);\n        letter_grade_list[i]\
    \ = std::to_string(i) + \"|\" + std::to_string(letter_grade);\n    }\n    return\
    \ grade_list;", "\t// Complete this function\n\treturn {}; // To be completed.",
  "    std::map<float, std::string> gpa_map{\n        {4.0, \"A+\"}, \n        {3.7,\
    \ \"A\"}, \n        {3.3, \"A-\"}, \n        {3.0, \"B+\"}, \n        {2.7, \"\
    B\"}, \n        {2.3, \"B-\"}, \n        {2.0, \"C+\"}, \n        {1.7, \"C\"\
    }, \n        {1.3, \"C-\"}, \n        {1.0, \"D+\"}, \n        {0.7, \"D\"}, \n\
    \        {0.0, \"D-\"}, \n        {0.0, \"E\"}\n    };\n    std::vector<std::string>\
    \ letter_grade;\n    for(auto& item : grades) {\n        auto it = gpa_map.find(item);\n\
    \        if(it != gpa_map.end()) {\n            letter_grade.push_back(it->second);\n\
    \        }\n    }\n    return letter_grade;", "    std::vector<std::string> letter_grade;\n\
    \    for (float g : grades) {\n        if (g == 4.0)\n            letter_grade.push_back(\"\
    A+\");\n        else if (g > 3.7)\n            letter_grade.push_back(\"A\");\n\
    \        else if (g > 3.3)\n            letter_grade.push_back(\"A-\");\n    \
    \    else if (g > 3)\n            letter_grade.push_back(\"B+\");\n        else\
    \ if (g > 2.7)\n            letter_grade.push_back(\"B\");\n        else if (g\
    \ > 2.3)\n            letter_grade.push_back(\"B-\");\n        else if (g > 2)\n\
    \            letter_grade.push_back(\"C+\");\n        else if (g > 1.7)\n    \
    \        letter_grade.push_back(\"C\");\n        else if (g > 1.3)\n         \
    \   letter_grade.push_back(\"C-\");\n        else if (g > 1)\n            letter_grade.push_back(\"\
    D+\");\n        else if (g > 0.7)\n            letter_grade.push_back(\"D\");\n\
    \        else if (g > 0)\n            letter_grade.push_back(\"D-\");\n      \
    \  else\n            letter_grade.push_back(\"E\");\n    }\n    return letter_grade;",
  "    std::vector<std::string> letter_grades;\n    for(float grade: grades)\n   \
    \     letter_grades.push_back(\"A\"+(grade>=3.7?\"-\":\"\")+\"B\"+(grade>=3.3?\"\
    -\":\"\")+\"C\"+(grade>=3.0?\"-\":\"\")+\"D\"+(grade>=2.7?\"-\":\"\")+\"E\");\n\
    \    return letter_grades;", "    assert(grades.size() == 4);\n    std::vector<std::string>\
    \ letter_grade;\n    if (grades[0] < 4.0) {\n        letter_grade.push_back(\"\
    A+\");\n    } else if (grades[0] < 3.7) {\n        letter_grade.push_back(\"A\"\
    );\n    } else if (grades[0] < 3.3) {\n        letter_grade.push_back(\"A-\");\n\
    \    } else if (grades[0] < 3.0) {\n        letter_grade.push_back(\"B+\");\n\
    \    } else if (grades[0] < 2.7) {\n        letter_grade.push_back(\"B\");\n \
    \   } else if (grades[0] < 2.3) {\n        letter_grade.push_back(\"B-\");\n \
    \   } else if (grades[0] < 2.0) {\n        letter_grade.push_back(\"C+\");\n \
    \   } else if (grades[0] < 1.7) {\n        letter_grade.push_back(\"C\");\n  \
    \  } else if (grades[0] < 1.3) {\n        letter_grade.push_back(\"C-\");\n  \
    \  } else if (grades[0] < 1.0) {\n        letter_grade.push_back(\"D+\");\n  \
    \  } else if (grades[0] < 0.7) {\n        letter_grade.push_back(\"D\");\n   \
    \ } else {\n        letter_grade.push_back(\"D-\");\n    }\n    if (grades[1]\
    \ < 4.0) {\n        letter_grade.push_back(\"A+\");\n    } else if (grades[1]\
    \ < 3.7) {\n        letter_grade.push_back(\"A\");\n    } else if (grades[1] <\
    \ 3.3) {\n        letter_grade.push_back(\"A-\");\n    } else if (grades[1] <\
    \ 3.0) {\n        letter_grade.push_back(\"B+\");\n    } else if (grades[1] <\
    \ 2.7) {\n        letter_grade.push_back(\"B\");\n    } else if (grades[1] < 2.3)\
    \ {\n        letter_grade.push_back(\"B-\");\n    } else if (grades[1] < 2.0)\
    \ {\n        letter_grade.push_back(\"C+\");\n    } else if (grades[1] < 1.7)\
    \ {\n        letter_grade.push_back(\"C\");\n    } else if (grades[1] < 1.3) {\n\
    \        letter_grade.push_back(\"C-\");\n    } else if (grades[1] < 1.0) {\n\
    \        letter_grade.push_back(\"D+\");\n    } else if (grades[1] < 0.7) {\n\
    \        letter_grade.push_back(\"D\");\n    } else {\n        letter_grade.push_back(\"\
    D-\");\n    }\n    if (grades[2] < 4.0) {\n        letter_grade.push_back(\"A+\"\
    );\n    } else if (grades[2] < 3.7) {\n        letter_grade.push_back(\"A\");\n\
    \    } else if (grades[2] < 3.3) {\n        letter_grade.push_back(\"A-\");\n\
    \    } else if (grades[2] < 3.0) {\n        letter_grade.push_back(\"B+\");\n\
    \    } else if (grades[2] < 2.7) {\n        letter_grade.push_back(\"B\");\n \
    \   } else if (grades[2] < 2.3) {\n        letter_grade.", "    // Write your\
    \ code here\n    int n = grades.size();\n    std::vector<std::string> letter;\n\
    \    float sum = 0;\n    for (int i = 0; i <= n; i++) {\n        sum += grades[i];\n\
    \    }\n    std::string result = \"D-\";\n    if (sum > 0.0) {\n        char letter\
    \ = std::toupper(grades[0] < 3 ? 'A' : 'B');\n        for (int i = 1; i <= n;\
    \ i++) {\n            letter += std::toupper(grades[i] < 3 ? 'A' : 'B');\n   \
    \     }\n        result = letter;\n    }\n    else if (sum < 0.0) {\n        char\
    \ letter = std::toupper(grades[0] < 3 ? 'A' : 'B');\n        for (int i = 1; i\
    \ <= n; i++) {\n            letter += std::toupper(grades[i] < 3 ? 'A' : 'B');\n\
    \        }\n        result = letter;\n    }\n    else if (sum == 0.0) {\n    \
    \    result = \"D+\";\n    }\n    return result;", "    assert(grades.size() ==\
    \ 12);\n    std::vector<std::string> letter_grade(grades.size());\n    for(int\
    \ i = 0; i < grades.size(); i++) {\n        if (grades[i] < 3.0) {\n         \
    \   letter_grade[i] = \"D-\"; // < 3.0\n        } else if (grades[i] >= 3.0  &&\
    \ grades[i] < 3.7) {\n            letter_grade[i] = \"C-\"; // 3.0 - 3.7 \n  \
    \      } else if (grades[i] >= 3.7 && grades[i] < 4.0) {\n            letter_grade[i]\
    \ = \"B-\"; // 3.7 - 4.0\n        } else if (grades[i] >= 4.0 && grades[i] < 4.7)\
    \ {\n            letter_grade[i] = \"B-\"; // 4.0 - 4.7\n        } else if (grades[i]\
    \ >= 4.7 && grades[i] < 5.0) {\n            letter_grade[i] = \"B-\"; // 4.7 -\
    \ 5.0\n        } else if (grades[i] >= 5.0 && grades[i] < 5.7) {\n           \
    \ letter_grade[i] = \"B-\"; // 5.0 - 5.7\n        } else if (grades[i] >= 5.7\
    \ && grades[i] < 6.0) {\n            letter_grade[i] = \"B-\"; // 5.7 - 6.0\n\
    \        } else if (grades[i] >= 6.0 && grades[i] < 6.7) {\n            letter_grade[i]\
    \ = \"B-\"; // 6.0 - 6.7\n        } else if (grades[i] >= 6.7 && grades[i] < 7.0)\
    \ {\n            letter_grade[i] = \"B-\"; // 6.7 - 7.0\n        } else if (grades[i]\
    \ >= 7.0 && grades[i] < 7.7) {\n            letter_grade[i] = \"B+\"; // 7.0 -\
    \ 7.7\n        } else if (grades[i] >= 7.7 && grades[i] < 8.0) {\n           \
    \ letter_grade[i] = \"B+\"; // 7.7 - 8.0\n        } else if (grades[i] >= 8.0\
    \ && grades[i] < 8.7) {\n            letter_grade[i] = \"B+\"; // 8.0 - 8.7\n\
    \        } else if (grades[i] >= 8.7 && grades[i] < 9.0) {\n            letter_grade[i]\
    \ = \"B+\"; // 8.7 - 9.0\n        } else if (grades[i] >= 9.0 && grades[i] < 9.7)\
    \ {\n            letter_grade[i] = \"B+\"; // 9.0 - 9.7\n        } else if (grades[i]\
    \ >= 9.7  && grades[i] < 10.0) {\n            letter_grade[i] = \"B+\"; // 9.7\
    \ - 10.0\n        } else if (grades[i] >= 10.0 && grades[i] < 10.7) {\n      \
    \      letter_grade[i] = \"C+\"; // 10.0 - 10.7\n        } else if (grades[i]\
    \ >= 10.7 && grades[i] < 11.0) {\n            letter_grade[i] = \"C+\"; // 10.7\
    \ - 11.0\n        } else if (grades[i] >= 11.0 && grades[i] < 11.7) {\n      \
    \      letter_grade[i] = \"C+\"; // 11.0 - 11.7\n        } else if (grades[i]\
    \ >= 11.7  && grades[i] < 12.0) {\n            letter_grade[i] = \"C+\"", "  \
    \  std::vector<std::string> ret;\n    for(int i = 0; i < grades.size(); ++i) {\n\
    \        if(grades[i] >= 3.0) {\n            ret.push_back(\"C+\");\n        }\
    \ else if(grades[i] >= 3.3) {\n            ret.push_back(\"C-\");\n        } else\
    \ if(grades[i] >= 3.7) {\n            ret.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 4.0) {\n            ret.push_back(\"A+\");\n        } else if(grades[i] >=\
    \ 4.7) {\n            ret.push_back(\"A\");\n        } else if(grades[i] >= 5.0)\
    \ {\n            ret.push_back(\"B+\");\n        } else if(grades[i] >= 5.7) {\n\
    \            ret.push_back(\"B\");\n        } else if(grades[i] >= 6.0) {\n  \
    \          ret.push_back(\"B-\");\n        } else if(grades[i] >= 6.7) {\n   \
    \         ret.push_back(\"B\");\n        } else if(grades[i] >= 7.0) {\n     \
    \       ret.push_back(\"C+\");\n        } else if(grades[i] >= 7.7) {\n      \
    \      ret.push_back(\"C\");\n        } else if(grades[i] >= 8.0) {\n        \
    \    ret.push_back(\"C\");\n        } else if(grades[i] >= 9.0) {\n          \
    \  ret.push_back(\"C\");\n        } else if(grades[i] >= 9.7) {\n            ret.push_back(\"\
    C\");\n        } else if(grades[i] >= 10.0) {\n            ret.push_back(\"C\"\
    );\n        } else if(grades[i] >= 10.7) {\n            ret.push_back(\"C\");\n\
    \        } else if(grades[i] >= 11.0) {\n            ret.push_back(\"C\");\n \
    \       } else if(grades[i] >= 11.7) {\n            ret.push_back(\"C\");\n  \
    \      } else if(grades[i] >= 12.0) {\n            ret.push_back(\"C\");\n   \
    \     } else if(grades[i] >= 13.7) {\n            ret.push_back(\"C\");\n    \
    \    } else if(grades[i] >= 14.0) {\n            ret.push_back(\"C\");\n     \
    \   } else if(grades[i] >= 15.7) {\n            ret.push_back(\"C\");\n      \
    \  } else if(grades[i] >= 16.0) {\n            ret.push_back(\"C\");\n       \
    \ } else if(grades[i] >= 16.7) {\n            ret.push_back(\"C\");\n        }\
    \ else if(grades[i] >= 17.0) {\n            ret.push_back(\"C\");\n        } else\
    \ if(grades[i] >= 17.7) {\n            ret.push_back(\"C\");\n        } else if(grades[i]\
    \ >= 18.0) {\n            ret.push_back(\"C\");\n        } else if(grades[i] >=\
    \ 19.7) {\n            ret.push_back(\"C\");\n        } else if(grades[i] >= 20.0)\
    \ {\n            ret.push_back(\"C\");\n        } else if(grades[i] >= 20.7) {\n\
    \            ret.push_back", "  assert(grades.size() == 5);\n  float min_gpa =grades[0];\n\
    \  float max_gpa = grades[4];\n  assert(min_gpa <= max_gpa);\n  std::vector<std::string>\
    \ letter_grade;\n  letter_grade.push_back(\"E\");\n  for(int i = 1; i <= max_gpa;\
    \ i++) {\n    float gpa = min_gpa + (max_gpa - min_gpa)*i/100.;\n    for(unsigned\
    \ int i = 0; i < grades.size(); i++) {\n      if(grades[i] == gpa) {\n       \
    \ letter_grade.push_back(i+'+'+'+'+'+');\n        break;\n      }\n    }\n   \
    \ for(unsigned int i = grades.size()-1; i >= 0; i--) {\n      if(grades[i] ==\
    \ gpa) {\n        letter_grade.push_back(i+'+'+'+'-'+'-');\n        break;\n \
    \     }\n    }\n  }\n  return letter_grade;", "    // Write your code here\n \
    \   std::vector<std::string> grades_grades;\n    for (float &grade : grades) {\n\
    \        if (grade >= 4.0f) {\n            grades_grades.push_back(\"A+\");\n\
    \        } else if (grade > 3.7f) {\n            grades_grades.push_back(\"A\"\
    );\n        } else if (grade > 3.3f) {\n            grades_grades.push_back(\"\
    A-\");\n        } else if (grade > 3.0f) {\n            grades_grades.push_back(\"\
    B+\");\n        } else if (grade > 2.7f) {\n            grades_grades.push_back(\"\
    B\");\n        } else if (grade > 2.3f) {\n            grades_grades.push_back(\"\
    B-\");\n        } else if (grade > 2.0f) {\n            grades_grades.push_back(\"\
    C+\");\n        } else if (grade > 1.7f) {\n            grades_grades.push_back(\"\
    C\");\n        } else if (grade > 1.3f) {\n            grades_grades.push_back(\"\
    C-\");\n        } else if (grade > 1.0f) {\n            grades_grades.push_back(\"\
    D+\");\n        } else if (grade > 0.7f) {\n            grades_grades.push_back(\"\
    D\");\n        } else if (grade > 0.0f) {\n            grades_grades.push_back(\"\
    D-\");\n        } else {\n            grades_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return grades_grades;", "    std::vector<std::string> letter_grade;\n\
    \    size_t size = grades.size();\n    assert(size % 2 == 0);\n    for(size_t\
    \ i = 0; i < size; i += 2) {\n        float gpa = grades[i];\n        std::string\
    \ grade;\n        if(gpa > 3.0) {\n            grade = \"B+\";\n        }\n  \
    \      else if(gpa > 2.7) {\n            grade = \"B\";\n        }\n        else\
    \ if(gpa > 1.7) {\n            grade = \"B-\";\n        }\n        else if(gpa\
    \ > 1.0) {\n            grade = \"C+\";\n        }\n        else if(gpa > 0.7)\
    \ {\n            grade = \"C\";\n        }\n        else if(gpa > 0.3) {\n   \
    \         grade = \"C-\";\n        }\n        else if(gpa > 0.0) {\n         \
    \   grade = \"D+\";\n        }\n        else {\n            grade = \"D\";\n \
    \       }\n        letter_grade.push_back(grade);\n    }\n    return letter_grade;",
  "    std::vector<std::string> letter_grades;\n    for (float grade : grades)\n \
    \   {\n        if (grade > 4.0)\n        {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grade > 3.0)\n        {\n            letter_grades.push_back(\"\
    A\");\n        } else if (grade > 2.7)\n        {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grade > 2.3)\n        {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grade > 2.0)\n        {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grade > 1.7)\n        {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grade > 1.3)\n        {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grade > 1.0)\n        {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grade > 0.7)\n        {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D-\");\n      \
    \  }\n    }\n    return letter_grades;", "  // Your code goes here\n  assert(grades.size()\
    \ > 0);\n  // If all the values are the same, return the letter grades.\n  if(grades.size()\
    \ == 1) {\n    std::vector<std::string> letter_grade;\n    letter_grade.push_back('A+');\n\
    \    letter_grade.push_back('A');\n    letter_grade.push_back('A-');\n    letter_grade.push_back('B+');\n\
    \    letter_grade.push_back('B');\n    letter_grade.push_back('B-');\n    letter_grade.push_back('C+');\n\
    \    letter_grade.push_back('C');\n    letter_grade.push_back('C-');\n    letter_grade.push_back('D+');\n\
    \    letter_grade.push_back('D');\n    letter_grade.push_back('D-');\n    letter_grade.push_back('E');\n\
    \    return letter_grade;\n  }\n  // All the grades are different, so return multiple\
    \ letter grades.\n  \n  std::vector<std::string> letter_grades;\n  float min_grade\
    \ = std::numeric_limits<float>::min();\n  float max_grade = std::numeric_limits<float>::max();\n\
    \  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] < min_grade) min_grade\
    \ = grades[i];\n    if (grades[i] > max_grade) max_grade = grades[i];\n  }\n \
    \ for (int i = 0; i < grades.size(); i++) {\n    if (grades[i] < min_grade) {\n\
    \      letter_grades.push_back('D-');\n    } else if (grades[i] > max_grade) {\n\
    \      letter_grades.push_back('D+');\n    } else if (grades[i] == min_grade)\
    \ {\n      letter_grades.push_back('D');\n    } else if (grades[i] < min_grade\
    \ && grades[i] > 0.0) {\n      letter_grades.push_back('A');\n    } else if (grades[i]\
    \ >= min_grade && grades[i] < max_grade) {\n      letter_grades.push_back('A+');\n\
    \    } else if (grades[i] < 0.0) {\n      letter_grades.push_back('E');\n    }\n\
    \  }\n  return letter_grades;", "    std::vector<std::string> letter_grades;\n\
    \    for (auto &grade : grades) {\n        double d = grade;\n        char letter\
    \ = 'E';\n        if (d > 4.0) {\n            d -= 4.0;\n            letter =\
    \ 'A+';\n        }\n        else if (d > 3.7) {\n            d -= 3.7;\n     \
    \       letter = 'A';\n        }\n        else if (d > 3.3) {\n            d -=\
    \ 3.3;\n            letter = 'A-';\n        }\n        else if (d > 3.0) {\n \
    \           d -= 3.0;\n            letter = 'B+';\n        }\n        else if\
    \ (d > 2.7) {\n            d -= 2.7;\n            letter = 'B';\n        }\n \
    \       else if (d > 2.3) {\n            d -= 2.3;\n            letter = 'B-';\n\
    \        }\n        else if (d > 2.0) {\n            d -= 2.0;\n            letter\
    \ = 'C+';\n        }\n        else if (d > 1.7) {\n            d -= 1.7;\n   \
    \         letter = 'C';\n        }\n        else if (d > 1.3) {\n            d\
    \ -= 1.3;\n            letter = 'C-';\n        }\n        else if (d > 1.0) {\n\
    \            d -= 1.0;\n            letter = 'D+';\n        }\n        else if\
    \ (d > 0.7) {\n            d -= 0.7;\n            letter = 'D';\n        }\n \
    \       else if (d > 0.0) {\n            d -= 0.0;\n            letter = 'D-';\n\
    \        }\n        letter_grades.push_back(letter);\n    }\n    return letter_grades;",
  "    assert(grades.size() > 0);\n\n    std::vector<std::string> letter_grades;\n\
    \    letter_grades.push_back(\"E\");\n    if (grades.size() == 1) {\n        letter_grades.push_back(\"\
    F\");\n    } else {\n        float mid = grades.at(grades.size() / 2);\n     \
    \   int index = 0;\n        if (mid > 3.0) {\n            index = 2;\n       \
    \ } else if (mid > 2.7) {\n            index = 1;\n        } else if (mid > 2.0)\
    \ {\n            index = 0;\n        } else if (mid > 1.7) {\n            index\
    \ = 3;\n        } else if (mid > 1.0) {\n            index = 4;\n        } else\
    \ {\n            index = 5;\n        }\n\n        if (grades.size() % 2 == 0)\
    \ {\n            letter_grades.push_back(\"A-\");\n        }\n\n        if (grades.size()\
    \ % 2 == 1) {\n            letter_grades.push_back(\"B-\");\n        }\n\n   \
    \     if (index == 2) {\n            letter_grades.push_back(\"C+\");\n      \
    \  } else if (index == 1) {\n            letter_grades.push_back(\"C\");\n   \
    \     } else if (index == 0) {\n            letter_grades.push_back(\"C- \");\n\
    \        } else if (index == 3) {\n            letter_grades.push_back(\"A+\"\
    );\n        } else if (index == 4) {\n            letter_grades.push_back(\"A\"\
    );\n        }\n    }\n\n    return letter_grades;", "    std::vector<std::string>\
    \ letter_grades;\n    for(float g : grades) {\n        if(g < 4.0)\n         \
    \   letter_grades.push_back(\"A+\");\n        else if(g > 3.7 && g < 3.3)\n  \
    \          letter_grades.push_back(\"A\");\n        else if(g > 3.3 && g < 3.0)\n\
    \            letter_grades.push_back(\"A-\");\n        else if(g > 2.7 && g <\
    \ 2.3)\n            letter_grades.push_back(\"B+\");\n        else if(g > 2.3\
    \ && g < 2.0)\n            letter_grades.push_back(\"B\");\n        else if(g\
    \ > 1.7 && g < 1.3)\n            letter_grades.push_back(\"B-\");\n        else\
    \ if(g > 1.3 && g < 1.0)\n            letter_grades.push_back(\"C+\");\n     \
    \   else if(g > 1.0 && g < 0.7)\n            letter_grades.push_back(\"C\");\n\
    \        else if(g > 0.7 && g < 0.0)\n            letter_grades.push_back(\"C-\"\
    );\n        else\n            letter_grades.push_back(\"D+\");\n    }\n    return\
    \ letter_grades;", "    assert(grades.size() > 0);\n\n    std::vector<std::string>\
    \ letter_grade;\n    for(size_t i = 0; i < grades.size(); ++i)\n    {\n      \
    \  if (grades[i] >= 4.0)\n        {\n            letter_grade.push_back(\"A+\"\
    );\n        } else if (grades[i] >= 3.7)\n        {\n            letter_grade.push_back(\"\
    A\");\n        } else if (grades[i] >= 3.3)\n        {\n            letter_grade.push_back(\"\
    A-\");\n        } else if (grades[i] >= 3.0)\n        {\n            letter_grade.push_back(\"\
    B+\");\n        } else if (grades[i] >= 2.7)\n        {\n            letter_grade.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3)\n        {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (grades[i] >= 2.0)\n        {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7)\n        {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.3)\n        {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.0)\n        {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (grades[i] >= 0.7)\n        {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.0)\n        {\n            letter_grade.push_back(\"\
    D-\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;", "    std::vector<std::string> letter_grades;\n\
    \    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 3.7)\
    \ {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.3) {\n            letter_grades.push_back(\"A\");\n        } else if (grades[i]\
    \ >= 2) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ >= 1.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 1.3) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ >= 1) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 0.7) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ >= 0) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ == 0) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ > 0.7) {\n            letter_grades.push_back(\"D+\");\n        } else {\n \
    \           letter_grades.push_back(\"E\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> grades_letter;\n    assert(grades.size() % 2 == 0);\n\
    \    int size = grades.size() / 2;\n    for (int i = 0; i < size; i++) {\n   \
    \     float gpa = grades[i * 2];\n        float letter_grade = 0;\n        if\
    \ (gpa > 3.0) {\n            letter_grade = 'A';\n        } else if (gpa > 2.7)\
    \ {\n            letter_grade = 'B';\n        } else if (gpa > 2.3) {\n      \
    \      letter_grade = 'B-';\n        } else if (gpa > 2.0) {\n            letter_grade\
    \ = 'C';\n        } else if (gpa > 1.7) {\n            letter_grade = 'C+';\n\
    \        } else if (gpa > 1.3 && gpa < 1.7) {\n            letter_grade = 'C';\n\
    \        } else if (gpa > 1.0) {\n            letter_grade = 'D';\n        } else\
    \ if (gpa > 0.7) {\n            letter_grade = 'D+';\n        } else if (gpa >\
    \ 0.0) {\n            letter_grade = 'D-';\n        } else {\n            letter_grade\
    \ = 'E';\n        }\n        grades_letter.push_back(letter_grade);\n    }\n \
    \   return grades_letter;", // your code goes here, "  std::vector<std::string>\
    \ letter_grade;\n  for (int i = 0; i < grades.size(); i++) {\n    if (grades[i]\
    \ <= 3.0) {\n      letter_grade.push_back(\"A+\");\n    } else if (grades[i] <=\
    \ 3.7) {\n      letter_grade.push_back(\"A\");\n    } else if (grades[i] <= 4.0)\
    \ {\n      letter_grade.push_back(\"A-\");\n    } else if (grades[i] <= 5.0) {\n\
    \      letter_grade.push_back(\"B+\");\n    } else if (grades[i] <= 5.7) {\n \
    \     letter_grade.push_back(\"B\");\n    } else if (grades[i] <= 6.0) {\n   \
    \   letter_grade.push_back(\"B-\");\n    } else if (grades[i] <= 6.7) {\n    \
    \  letter_grade.push_back(\"C+\");\n    } else if (grades[i] <= 7.0) {\n     \
    \ letter_grade.push_back(\"C\");\n    } else if (grades[i] <= 7.7) {\n      letter_grade.push_back(\"\
    C-\");\n    } else if (grades[i] <= 8.0) {\n      letter_grade.push_back(\"D+\"\
    );\n    } else if (grades[i] <= 8.7) {\n      letter_grade.push_back(\"D\");\n\
    \    } else if (grades[i] <= 9.0) {\n      letter_grade.push_back(\"D-\");\n \
    \   } else if (grades[i] <= 9.7) {\n      letter_grade.push_back(\"E\");\n   \
    \ } else {\n      letter_grade.push_back(\"D\");\n    }\n  }\n  return letter_grade;",
  "    std::vector<std::string> letter_grade;\n    for (float grade : grades) {\n\
    \        if (grade <= 3.0) {\n            letter_grade.push_back(\"A+\");\n  \
    \      } else if (grade > 3.0 && grade <= 3.7) {\n            letter_grade.push_back(\"\
    A\");\n        } else if (grade > 3.7 && grade <= 3.3) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if (grade > 3.3 && grade <= 3.0) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if (grade > 3.0 && grade <= 2.7) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (grade > 2.7 && grade <= 2.3) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (grade > 2.3 && grade <= 2.0) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (grade > 2.0 && grade <= 1.7) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grade > 1.7 && grade <= 1.3) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (grade > 1.3 && grade <= 1.0) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (grade > 1.0 && grade <= 0.7) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grade > 0.7 && grade <= 0.0) {\n            letter_grade.push_back(\"\
    D-\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;", "    // Write your code here\n    // If\
    \ the grades vector is empty, then the letter grade is simply a blank\n    if(grades.empty())\
    \ return std::vector<std::string>();\n    // If the grades vector is empty, then\
    \ the letter grade is simply a blank\n    if(grades.size() < 5) return std::vector<std::string>();\n\
    \    // Calculate the mean grade for the semester\n    // Your code here\n   \
    \ // If the mean grade is greater than 4.0\n    if(mean > 4.0) return std::vector<std::string>();\n\
    \    // If the mean grade is less than 4.0\n    else if(mean <= 4.0) return std::vector<std::string>();\n\
    \    // If the mean grade is 4.0 or greater and less than 3.7\n    else if(mean\
    \ >= 4.0 && mean <= 3.7) return std::vector<std::string>();\n    // If the mean\
    \ grade is 3.7 or greater and less than 3.3\n    else if(mean >= 3.7 && mean <=\
    \ 3.3) return std::vector<std::string>();\n    // If the mean grade is 3.3 or\
    \ greater and less than 3.0\n    else if(mean >= 3.3 && mean <= 3.0) return std::vector<std::string>();\n\
    \    // If the mean grade is 3.0 or greater and less than 2.7\n    else if(mean\
    \ >= 3.0 && mean <= 2.7) return std::vector<std::string>();\n    // If the mean\
    \ grade is 2.7 or greater and less than 2.3\n    else if(mean >= 2.7 && mean <=\
    \ 2.3) return std::vector<std::string>();\n    // If the mean grade is 2.3 or\
    \ greater and less than 2.0\n    else if(mean >= 2.3 && mean <= 2.0) return std::vector<std::string>();\n\
    \    // If the mean grade is 2.0 or greater and less than 1.7\n    else if(mean\
    \ >= 2.0 && mean <= 1.7) return std::vector<std::string>();\n    // If the mean\
    \ grade is 1.7 or greater and less than 1.3\n    else if(mean >= 1.7 && mean <=\
    \ 1.3) return std::vector<std::string>();\n    // If the mean grade is 1.3 or\
    \ greater and less than 1.0\n    else if(mean >= 1.3 && mean <= 1.0) return std::vector<std::string>();\n\
    \    // If the mean grade is 1.0 or greater and less than 0.7\n    else if(mean\
    \ >= 1.0 && mean <= 0.7) return std::vector<std::string>();\n    // If the mean\
    \ grade is 0.7 or greater and less than 0.0\n    else if(mean >= 0.7 && mean <=\
    \ 0.0) return std::vector<std::string>();\n    // If the mean grade is greater\
    \ than 0.0\n    return std::vector<std::string>();", "    std::vector<std::string>\
    \ letter_grades;\n    \n    for(int i = 0; i < grades.size(); i++)\n    {\n  \
    \      if(grades[i] >= 3.0 && (grades[i] < 3.7))\n        {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if(grades[i] >= 3.7 && grades[i] < 3.3)\n    \
    \    {\n            letter_grades.push_back(\"A\");\n        }\n        else if(grades[i]\
    \ >= 3.3 && grades[i] < 3.0)\n        {\n            letter_grades.push_back(\"\
    A-\");\n        }\n        else if(grades[i] >= 3.0 && grades[i] < 2.7)\n    \
    \    {\n            letter_grades.push_back(\"B+\");\n        }\n        else\
    \ if(grades[i] >= 2.7 && grades[i] < 2.3)\n        {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if(grades[i] >= 2.3 && grades[i] < 2.0)\n     \
    \   {\n            letter_grades.push_back(\"B-\");\n        }\n        else if(grades[i]\
    \ >= 2.0 && grades[i] < 1.7)\n        {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if(grades[i] >= 1.7 && grades[i] < 1.3)\n    \
    \    {\n            letter_grades.push_back(\"C\");\n        }\n        else if(grades[i]\
    \ >= 1.3 && grades[i] < 1.0)\n        {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if(grades[i] >= 1.0 && grades[i] != 0.0)\n   \
    \     {\n            letter_grades.push_back(\"D+\");\n        }\n        else\
    \ if(grades[i] >= 0.7 && grades[i] != 0.0)\n        {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else\n        {\n            letter_grades.push_back(\"\
    D-\");\n        }\n    }\n    return letter_grades;", "    std::vector<std::string>\
    \ output;\n    output.resize(grades.size());\n    for(int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] < 4.0F) {\n            output[i] = \"A+\";\n \
    \       } else if (grades[i] < 3.7F) {\n            output[i] = \"A\";\n     \
    \   } else if (grades[i] < 3.3F) {\n            output[i] = \"A-\";\n        }\
    \ else if (grades[i] < 3.0F) {\n            output[i] = \"B+\";\n        } else\
    \ if (grades[i] < 2.7F) {\n            output[i] = \"B\";\n        } else if (grades[i]\
    \ < 2.3F) {\n            output[i] = \"B-\";\n        } else if (grades[i] < 2.0F)\
    \ {\n            output[i] = \"C+\";\n        } else if (grades[i] < 1.7F) {\n\
    \            output[i] = \"C\";\n        } else if (grades[i] < 1.3F) {\n    \
    \        output[i] = \"C-\";\n        } else if (grades[i] < 1.0F) {\n       \
    \     output[i] = \"D+\";\n        } else if (grades[i] < 0.7F) {\n          \
    \  output[i] = \"D\";\n        } else {\n            output[i] = \"D-\";\n   \
    \     }\n    }\n    return output;", "    std::vector<std::string> answer;\n \
    \   for (int i = 0; i < grades.size(); i++) {\n        std::cout << grades[i]\
    \ << '\\t';\n        if (grades[i] > 0)\n            answer.push_back(std::string(\"\
    A+\"));\n        else if (grades[i] < 0)\n            answer.push_back(std::string(\"\
    A-\"));\n        else if (grades[i] < 2.3)\n            answer.push_back(std::string(\"\
    B+\"));\n        else if (grades[i] < 2.7)\n            answer.push_back(std::string(\"\
    B\"));\n        else if (grades[i] < 3)\n            answer.push_back(std::string(\"\
    B-\"));\n        else if (grades[i] < 3.3)\n            answer.push_back(std::string(\"\
    C+\"));\n        else if (grades[i] < 3.7)\n            answer.push_back(std::string(\"\
    C\"));\n        else if (grades[i] < 4)\n            answer.push_back(std::string(\"\
    C-\"));\n        else if (grades[i] < 4.3)\n            answer.push_back(std::string(\"\
    D+\"));\n        else if (grades[i] < 4.7)\n            answer.push_back(std::string(\"\
    D\"));\n        else if (grades[i] < 5)\n            answer.push_back(std::string(\"\
    D-\"));\n        else\n            answer.push_back(std::string(\"E\"));\n   \
    \     std::cout << '\\n';\n    }\n    return answer;", "    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ >= 4.0)\n            letter_grades.push_back(\"A+\");\n        else if(grades[i]\
    \ >= 3.70)\n            letter_grades.push_back(\"A\");\n        else if(grades[i]\
    \ >= 3.30)\n            letter_grades.push_back(\"A-\");\n        else if(grades[i]\
    \ >= 3.00)\n            letter_grades.push_back(\"B+\");\n        else if(grades[i]\
    \ >= 2.70)\n            letter_grades.push_back(\"B\");\n        else if(grades[i]\
    \ >= 2.30)\n            letter_grades.push_back(\"B-\");\n        else if(grades[i]\
    \ >= 2.00)\n            letter_grades.push_back(\"C+\");\n        else if(grades[i]\
    \ >= 1.80)\n            letter_grades.push_back(\"C\");\n        else if(grades[i]\
    \ >= 1.30)\n            letter_grades.push_back(\"C-\");\n        else if(grades[i]\
    \ >= 1.00)\n            letter_grades.push_back(\"D+\");\n        else if(grades[i]\
    \ >= 0.80)\n            letter_grades.push_back(\"D\");\n        else if(grades[i]\
    \ >= 0.50)\n            letter_grades.push_back(\"D-\");\n        else\n     \
    \       letter_grades.push_back(\"E\");\n    }\n    return letter_grades;", " \
    \   // Grade table is stored in a vector. \n    std::vector<std::string> result;\n\
    \    // Number of decimal places used to store grades. \n    int decimal_places\
    \ = 3;\n    // The letter grade that corresponds with the given grades. \n   \
    \ std::string letter;\n    // The sum of the grades \n    float total_grade =\
    \ 0;\n    // The average of the grades \n    float average_grade;\n    // For\
    \ each grade in the grades vector, find the corresponding letter grade. \n   \
    \ // Note that this grade vector may be empty (grades less than or equal to zero\
    \ \n    // are not graded).\n    for (size_t i = 0; i < grades.size(); i++) {\n\
    \        // Calculate the total grade for all the grades. \n        total_grade\
    \ += grades[i];\n    }\n    // Calculate the average grade. \n    average_grade\
    \ = total_grade / grades.size();\n    // Grade greater than 3.5 is a D\n    if\
    \ (average_grade >= 3.5) {\n        letter = \"D+\";\n    }\n    // Grade less\
    \ than 3.5 is a C\n    else if (average_grade <= 3.4) {\n        letter = \"C\"\
    ;\n    }\n    // Grade less than or equal to 3.3 is a B\n    else if (average_grade\
    \ <= 3.3) {\n        letter = \"B\";\n    }\n    // Grade less than or equal to\
    \ 3.2 is a B-\n    else if (average_grade <= 3.2) {\n        letter = \"B-\";\n\
    \    }\n    // Grade less than or equal to 3.1 is a B-\n    else if (average_grade\
    \ <= 3.1) {\n        letter = \"B+\";\n    }\n    // Grade less than or equal\
    \ to 3.0 is a B+\n    else if (average_grade <= 3.0) {\n        letter = \"B\"\
    ;\n    }\n    // Grade less than or equal to 2.7 is a B\n    else if (average_grade\
    \ <= 2.7) {\n        letter = \"B+\";\n    }\n    // Grade less than or equal\
    \ to 2.3 is a B-\n    else if (average_grade <= 2.3) {\n        letter = \"B-\"\
    ;\n    }\n    // Grade less than or equal to 2.0 is a C+\n    else if (average_grade\
    \ <= 2.0) {\n        letter = \"C+\";\n    }\n    // Grade less than or equal\
    \ to 1.7 is a C\n    else if (average_grade <= 1.7) {\n        letter = \"C\"\
    ;\n    }\n    // Grade less than or equal to 1.3 is a C-\n    else if (average_grade\
    \ <= 1.2) {\n        letter = \"C-\";\n    }\n    // Grade less than or equal\
    \ to 1.0 is a C+\n    else if (average_grade <= 1.0) {\n        letter = \"C+\"\
    ;\n    }\n    // Grade less than or equal to 0.7 is a D\n    else if (average_grade\
    \ <= 0.7) {\n        letter = \"D\";\n    }\n    // Grade less than or equal to ",
  "    std::vector<std::string> result;\n    assert(grades.size() > 0);\n    assert(grades[0]\
    \ > 0);\n    assert(grades[grades.size() - 1] <= 3);\n    std::string grade_string;\n\
    \    if (grades.size() <= 2){\n        // For grades less than or equal to 2 there\
    \ is no need to print anything.\n        for (float grade : grades){\n       \
    \     grade_string = std::to_string((int)grade).substr(1);\n            result.push_back(grade_string);\n\
    \        }\n    }\n    else {\n        std::string grade_prefix = \"A+\";\n  \
    \      std::string grade_suffix = \"E\";\n        // For grades greater than or\
    \ equal to 2 print A+ followed by grades less than or equal to 2.\n        //\
    \ For grades greater than or equal to 3 print A followed by the grade in the middle,\
    \ \n        // followed by grades less than or equal to 3.\n        // For grades\
    \ greater than or equal to 4 print B+ followed by the grade in the middle, \n\
    \        // followed by grades less than or equal to 4.\n        // For grades\
    \ greater than or equal to 5 print B followed by the grade in the middle, \n \
    \       // followed by grades less than or equal to 5.\n        // For grades\
    \ greater than or equal to 6 print B followed by the grade in the middle, \n \
    \       // followed by grades less than or equal to 6.\n        // For grades\
    \ greater than or equal to 7 print C followed by the grade in the middle, \n \
    \       // followed by grades less than or equal to 7.\n        // For grades\
    \ greater than or equal to 8 print C followed by the grade in the middle, \n \
    \       // followed by grades less than or equal to 8.\n        // For grades\
    \ greater than or equal to 9 print C followed by the grade in the middle, \n \
    \       // followed by grades less than or equal to 9.\n        // For grades\
    \ greater than or equal to 10 print C followed by the grade in the middle, \n\
    \        // followed by grades less than or equal to 10.\n        // For grades\
    \ greater than or equal to 11 print C followed by the grade in the middle, \n\
    \        // followed by grades less than or equal to 11.\n        // For grades\
    \ greater than or equal to 12 print D followed by the grade in the middle, \n\
    \        // followed by grades less than or equal to 12.\n        // For grades\
    \ greater than or equal to 13 print D followed by the grade in the middle, \n\
    \        // followed by grades less than or equal to 13.\n        // For grades\
    \ greater than or equal to 14 print D followed by the grade in the middle, \n\
    \        // followed by grades less than or equal to 14.\n        // For grades\
    \ greater than or equal to 15 print D followed by the grade in the middle, \n\
    \        // followed by grades less than or equal to 15.\n        // For grades\
    \ greater than or equal to 16 print E followed by the grade in the middle, \n\
    \        // followed by grades less than or equal to 16.\n        // For grades\
    \ greater than or equal to ", "    std::vector<std::string> letter_grades;\n \
    \   for (float x: grades)\n    {\n        std::string letter = x > 3.6 ? \"A+\"\
    \ : (x > 3.2 ? \"A-\" : (x > 3.0 ? \"B+\" : (x > 2.7 ? \"B\" : (x > 2.3 ? \"B-\"\
    \ : (x > 2.0 ? \"C+\" : \n                (x > 1.7 ? \"C\" : (x > 1.3 ? \"C-\"\
    \ : \n                (x > 1.0 ? \"D+\" : (x > 0.7 ? \"D\" : (x > 0.0 ? \"D-\"\
    \ : \"E\"))));\n        letter_grades.push_back(letter);\n    }\n    return letter_grades;",
  "    // Create a vector for storing the grades\n    std::vector<std::string> letterGrades;\n\
    \    // We will be using the algorithm for calculating letter grades from \n \
    \   // https://www.geeksforgeeks.org/grade-conversion-set-7-a/\n    std::vector<int>\
    \ gradeVector;\n    // Create an empty vector for storing the letter grades\n\
    \    std::string letterGrade;\n    // We will be using the algorithm for calculating\
    \ letter grades from \n    // https://www.geeksforgeeks.org/grade-conversion-set-7-a/\n\
    \    for (int i = 0; i < grades.size(); i++) {\n        gradeVector.push_back(grades[i]);\n\
    \    }\n    for (int i = 0; i < gradeVector.size(); i++) {\n        int grade\
    \ = gradeVector[i];\n        int result = grade - 1;\n        letterGrade = std::to_string(result)\
    \ + \" \";\n        letterGrade = std::to_string(letterGrade);\n        letterGrades.push_back(letterGrade);\n\
    \    }\n    // Return the letter grades\n    return letterGrades;", "    std::vector<std::string>\
    \ letter_grades;\n    std::string grade;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        if (grades[i] >= 4.0f) {\n            grade = \"A+\";\n    \
    \    } else if (grades[i] >= 3.7f) {\n            grade = \"A\";\n        } else\
    \ if (grades[i] >= 3.3f) {\n            grade = \"A-\";\n        } else if (grades[i]\
    \ >= 3.0f) {\n            grade = \"B+\";\n        } else if (grades[i] >= 2.7f)\
    \ {\n            grade = \"B\";\n        } else if (grades[i] >= 2.3f) {\n   \
    \         grade = \"B-\";\n        } else if (grades[i] >= 2.0f) {\n         \
    \   grade = \"C+\";\n        } else if (grades[i] >= 1.7f) {\n            grade\
    \ = \"C\";\n        } else if (grades[i] >= 1.3f) {\n            grade = \"C-\"\
    ;\n        } else if (grades[i] >= 1.0f) {\n            grade = \"D+\";\n    \
    \    } else if (grades[i] >= 0.7f) {\n            grade = \"D\";\n        } else\
    \ if (grades[i] >= 0.0f) {\n            grade = \"D-\";\n        } else {\n  \
    \          grade = \"E\";\n        }\n        letter_grades.push_back(grade);\n\
    \    }\n    return letter_grades;", "    std::vector<std::string> letter_grade;\n\
    \    for(int i=0; i<grades.size(); ++i) {\n        if (grades[i] > 4.0) {\n  \
    \          letter_grade.push_back(\"A+\");\n        }\n        else if (grades[i]\
    \ > 3.7 && grades[i] < 4.0) {\n            letter_grade.push_back(\"A\");\n  \
    \      }\n        else if (grades[i] > 3.3 && grades[i] < 3.7) {\n           \
    \ letter_grade.push_back(\"A-\");\n        }\n        else if (grades[i] > 3.0\
    \ && grades[i] < 3.3) {\n            letter_grade.push_back(\"B+\");\n       \
    \ }\n        else if (grades[i] > 2.7 && grades[i] < 3.0) {\n            letter_grade.push_back(\"\
    B\");\n        }\n        else if (grades[i] > 2.3 && grades[i] < 2.7) {\n   \
    \         letter_grade.push_back(\"B-\");\n        }\n        else if (grades[i]\
    \ > 2.0 && grades[i] < 2.3) {\n            letter_grade.push_back(\"C+\");\n \
    \       }\n        else if (grades[i] > 1.7 && grades[i] < 2.0) {\n          \
    \  letter_grade.push_back(\"C\");\n        }\n        else if (grades[i] > 1.3\
    \ && grades[i] < 1.7) {\n            letter_grade.push_back(\"C-\");\n       \
    \ }\n        else if (grades[i] > 1.0 && grades[i] < 1.3) {\n            letter_grade.push_back(\"\
    D+\");\n        }\n        else if (grades[i] > 0.7 && grades[i] < 1.0) {\n  \
    \          letter_grade.push_back(\"D\");\n        }\n        else if (grades[i]\
    \ > 0.0 && grades[i] < 0.7) {\n            letter_grade.push_back(\"D-\");\n \
    \       }\n        else if (grades[i] == 0.0) {\n            letter_grade.push_back(\"\
    E\");\n        }\n    }\n    return letter_grade;", "  std::vector<std::string>\
    \ letter_grades;\n  for (float grade : grades) {\n    letter_grades.push_back(std::to_string(std::round(grade*10)/10));\n\
    \  }\n  return letter_grades;", "    std::vector<std::string> letter_grades;\n\
    \    for (float grade : grades) {\n        if (grade >= 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        }\n        else if (grade >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if (grade >= 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if (grade >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if (grade >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if (grade >= 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if (grade >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if (grade >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if (grade >= 1.2) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if (grade >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if (grade >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else {\n            letter_grades.push_back(\"D\");\n\
    \        }\n    }\n    return letter_grades;", "    std::vector<std::string> letter_grade;\n\
    \    for(float grade:grades) {\n        if(grade > 4.0)\n            letter_grade.push_back(\"\
    A+\");\n        else if(grade > 3.7)\n            letter_grade.push_back(\"A\"\
    );\n        else if(grade > 3.3)\n            letter_grade.push_back(\"A-\");\n\
    \        else if(grade > 3.0)\n            letter_grade.push_back(\"B+\");\n \
    \       else if(grade > 2.7)\n            letter_grade.push_back(\"B\");\n   \
    \     else if(grade > 2.3)\n            letter_grade.push_back(\"B-\");\n    \
    \    else if(grade > 2.0)\n            letter_grade.push_back(\"C+\");\n     \
    \   else if(grade > 1.7)\n            letter_grade.push_back(\"C\");\n       \
    \ else if(grade > 1.3)\n            letter_grade.push_back(\"C-\");\n        else\
    \ if(grade > 1.0)\n            letter_grade.push_back(\"D+\");\n        else if(grade\
    \ > 0.7)\n            letter_grade.push_back(\"D\");\n        else if(grade >\
    \ 0.0)\n            letter_grade.push_back(\"D-\");\n        else\n          \
    \  letter_grade.push_back(\"E\");\n    }\n    return letter_grade;", "  std::vector<std::string>\
    \ letter_grades;\n  for(int i=0; i<grades.size(); i++) {\n    if(grades[i]>0 &&\
    \ grades[i]<=3.0) {\n      letter_grades.push_back(\"A+\");\n    }\n    else if(grades[i]>3.0\
    \ && grades[i]<=3.7) {\n      letter_grades.push_back(\"A\");\n    }\n    else\
    \ if(grades[i]>3.7 && grades[i]<=4.0) {\n      letter_grades.push_back(\"A-\"\
    );\n    }\n    else if(grades[i]>4.0 && grades[i]<=4.7) {\n      letter_grades.push_back(\"\
    B+\");\n    }\n    else if(grades[i]>4.7 && grades[i]<=5.0) {\n      letter_grades.push_back(\"\
    B\");\n    }\n    else if(grades[i]>5.0 && grades[i]<=5.7) {\n      letter_grades.push_back(\"\
    B-\");\n    }\n    else if(grades[i]>5.7 && grades[i]<=6.0) {\n      letter_grades.push_back(\"\
    C+\");\n    }\n    else if(grades[i]>6.0 && grades[i]<=6.7) {\n      letter_grades.push_back(\"\
    C\");\n    }\n    else if(grades[i]>6.7 && grades[i]<=7.0) {\n      letter_grades.push_back(\"\
    C-\");\n    }\n    else if(grades[i]>7.0 && grades[i]<=7.7) {\n      letter_grades.push_back(\"\
    D+\");\n    }\n    else if(grades[i]>7.7 && grades[i]<=8.0) {\n      letter_grades.push_back(\"\
    D\");\n    }\n    else if(grades[i]>8.0 && grades[i]<=8.7) {\n      letter_grades.push_back(\"\
    D-\");\n    }\n    else if(grades[i]>8.7) {\n      letter_grades.push_back(\"\
    E\");\n    }\n  }\n  return letter_grades;", "    assert(grades.size() == 6);\n\
    \    std::vector<std::string> letter_grades;\n    for (float g : grades) {\n \
    \       float a = (4.0 - g) / 4.0;\n        float b = (3.7 - g) / 3.7;\n     \
    \   float c = (3.3 - g) / 3.3;\n        float d = (3.0 - g) / 3.0;\n        float\
    \ e = (2.7 - g) / 2.7;\n        float f = (2.3 - g) / 2.3;\n        float g =\
    \ (2.0 - g) / 2.0;\n        float h = (1.7 - g) / 1.7;\n        float i = (1.3\
    \ - g) / 1.3;\n        float j = (1.0 - g) / 1.0;\n        float k = (0.7 - g)\
    \ / 0.7;\n        float l = (0.0 - g) / 0.0;\n        letter_grades.push_back((a\
    \ + b + c + d + e + f + g + h + i + j + k + l).c_str());\n    }\n    return letter_grades;",
  "    std::vector<std::string> letter_grades;\n    std::string current_letter_grade;\n\
    \    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0)\
    \ {\n            current_letter_grade = \"A+\";\n        } else if (grades[i]\
    \ >= 3.7) {\n            current_letter_grade = \"A\";\n        } else if (grades[i]\
    \ >= 3.3) {\n            current_letter_grade = \"A-\";\n        } else if (grades[i]\
    \ >= 3.0) {\n            current_letter_grade = \"B+\";\n        } else if (grades[i]\
    \ >= 2.7) {\n            current_letter_grade = \"B\";\n        } else if (grades[i]\
    \ >= 2.3) {\n            current_letter_grade = \"B-\";\n        } else if (grades[i]\
    \ >= 2.0) {\n            current_letter_grade = \"C+\";\n        } else if (grades[i]\
    \ >= 1.7) {\n            current_letter_grade = \"C\";\n        } else if (grades[i]\
    \ >= 1.3) {\n            current_letter_grade = \"C-\";\n        } else if (grades[i]\
    \ >= 1.0) {\n            current_letter_grade = \"D+\";\n        } else if (grades[i]\
    \ >= 0.7) {\n            current_letter_grade = \"D\";\n        } else if (grades[i]\
    \ >= 0.0) {\n            current_letter_grade = \"D-\";\n        } else {\n  \
    \          current_letter_grade = \"E\";\n        }\n        letter_grades.push_back(current_letter_grade);\n\
    \    }\n    return letter_grades;", "    std::vector<std::string> grades_list;\n\
    \    // Write your code here\n    for (size_t i = 0; i < grades.size(); i++) {\n\
    \        if (grades[i] < 3.0) {\n            grades_list.push_back(\"A+\");\n\
    \        } else if (grades[i] < 3.7) {\n            grades_list.push_back(\"A\"\
    );\n        } else if (grades[i] < 3.3) {\n            grades_list.push_back(\"\
    A-\");\n        } else if (grades[i] < 3.0) {\n            grades_list.push_back(\"\
    B+\");\n        } else if (grades[i] < 2.7) {\n            grades_list.push_back(\"\
    B\");\n        } else if (grades[i] < 2.3) {\n            grades_list.push_back(\"\
    B-\");\n        } else if (grades[i] < 2.0) {\n            grades_list.push_back(\"\
    C+\");\n        } else if (grades[i] < 1.7) {\n            grades_list.push_back(\"\
    C\");\n        } else if (grades[i] < 1.3) {\n            grades_list.push_back(\"\
    C-\");\n        } else if (grades[i] < 1.0) {\n            grades_list.push_back(\"\
    D+\");\n        } else if (grades[i] < 0.7) {\n            grades_list.push_back(\"\
    D\");\n        } else if (grades[i] < 0.0) {\n            grades_list.push_back(\"\
    D-\");\n        } else {\n            grades_list.push_back(\"E\");\n        }\n\
    \    }\n    return grades_list;", "    std::vector<std::string> result; \n   \
    \ if (grades.size() == 0) return result;\n    int grades_sum = 0, grades_cnt =\
    \ 0;\n    for (float grade : grades) grades_sum += grade; grades_cnt++;\n    int\
    \ min_gpa = grades_sum / grades_cnt;\n    int max_gpa = -min_gpa;\n    while (max_gpa\
    \ > 1) {\n        if (max_gpa % 2 < 1)\n            max_gpa = (max_gpa + 2) /\
    \ 2;\n        else\n            max_gpa = (max_gpa + 1) / 2;\n    }\n    std::vector<std::pair<int,\
    \ int> > grades_cnt;\n    int gap = 0;\n    for (float grade : grades) {\n   \
    \     int temp_gpa = min_gpa + gap * grade;\n        if (temp_gpa < 0)\n     \
    \       temp_gpa = 0;\n        if (temp_gpa > max_gpa)\n            temp_gpa =\
    \ max_gpa;\n        grades_cnt.push_back({temp_gpa, grades_cnt.size()});\n   \
    \     gap++;\n    }\n    int last_gpa = grades_cnt.back().first;\n    if (last_gpa\
    \ < 0) last_gpa = 0;\n    if (last_gpa > max_gpa) last_gpa = max_gpa;\n    for\
    \ (int i = 0; i < grades_cnt.size(); i++) {\n        float temp_grade = (grades_cnt.at(i).second\
    \ - 1) * gap + grades_cnt.at(i).first;\n        int temp_gpa = min_gpa + temp_grade\
    \ * gap;\n        if (temp_gpa < 0)\n            temp_gpa = 0;\n        if (temp_gpa\
    \ > max_gpa)\n            temp_gpa = max_gpa;\n        grades_cnt.at(i).second\
    \ = temp_gpa;\n    }\n    int cur_gpa = 0;\n    int cur_gpa_index = 0;\n    result.clear();\n\
    \    result.push_back(\"E\");\n    for (std::vector<std::pair<int, int> >::const_iterator\
    \ it = grades_cnt.begin(); it != grades_cnt.end(); it++) {\n        float temp_gpa\
    \ = grades_cnt.at(it->second).first;\n        if (temp_gpa > cur_gpa) {\n    \
    \        result.push_back(\"E\");\n            cur_gpa = temp_gpa;\n         \
    \   cur_gpa_index = 0;\n        } else if (temp_gpa < cur_gpa) {\n           \
    \ if (cur_gpa_index != 0) result.push_back(\"D-\");\n            cur_gpa_index\
    \ = it->second;\n            cur_gpa = temp_gpa;\n        } else if (temp_gpa\
    \ == cur_gpa) {\n            cur_gpa_index++;\n        }\n    }", "    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        int temp;\n      \
    \  temp = grade > 0.0 ? grade/4.0 : grade/0.0;\n        \n        if (temp >=\
    \ 3.7) {\n            letter_grades.push_back(\"A+\");\n        }\n        else\
    \ if (temp >= 3.3) {\n            letter_grades.push_back(\"A\");\n        }\n\
    \        else if (temp >= 3.0) {\n            letter_grades.push_back(\"A-\");\n\
    \        }\n        else if (temp >= 2.7) {\n            letter_grades.push_back(\"\
    B+\");\n        }\n        else if (temp >= 2.3) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if (temp >= 2.0) {\n            letter_grades.push_back(\"\
    B-\");\n        }\n        else if (temp >= 1.7) {\n            letter_grades.push_back(\"\
    C+\");\n        }\n        else if (temp >= 1.3) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if (temp >= 1.0) {\n            letter_grades.push_back(\"\
    C-\");\n        }\n        else if (temp >= 0.7) {\n            letter_grades.push_back(\"\
    D+\");\n        }\n        else if (temp >= 0.3 ) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if (temp >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n        }\n        else {\n            letter_grades.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grades;", "    std::vector<std::string> letter_grades;\n\
    \    // TODO: Complete the code here!\n    return letter_grades;", "  // I implemented\
    \ the above function using recursion.\n  // If you prefer iterative version, you\
    \ can do it with loop instead.\n  std::vector<std::string> grade_list;\n  grade_list.push_back(\"\
    E\");\n  grade_list.push_back(\"D-\");\n  grade_list.push_back(\"C+\");\n  grade_list.push_back(\"\
    B-\");\n  grade_list.push_back(\"B-\");\n  grade_list.push_back(\"A+\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"C\");\n  grade_list.push_back(\"C\");\n  grade_list.push_back(\"\
    B-\");\n  grade_list.push_back(\"B\");\n  grade_list.push_back(\"B+\");\n  grade_list.push_back(\"\
    B-\");\n  grade_list.push_back(\"A\");\n  grade_list.push_back(\"A\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"\
    A-\");\n  grade_list.push_back(\"A-\");\n  grade_list.push_back(\"A-", "    std::vector<std::string>\
    \ letter_grades;\n    \n    for (int i = 0; i < grades.size(); i++) {\n      \
    \  if (grades[i] > 2.0 && grades[i] < 4.0) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if (grades[i] >= 4.0 && grades[i] < 3.7) {\n          \
    \  letter_grades.push_back(\"A\");\n        } else if (grades[i] >= 3.7 && grades[i]\
    \ < 3.3) {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ >= 3.3 && grades[i] < 3.0) {\n            letter_grades.push_back(\"B+\");\n\
    \        } else if (grades[i] >= 3.0 && grades[i] < 2.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.7 && grades[i] < 2.3) {\n           \
    \ letter_grades.push_back(\"B-\");\n        } else if (grades[i] >= 2.3 && grades[i]\
    \ < 2.0) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ >= 2.0 && grades[i] < 1.7) {\n            letter_grades.push_back(\"C\");\n\
    \        } else if (grades[i] >= 1.7 && grades[i] < 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grades[i] >= 1.3 && grades[i] < 1.0) {\n          \
    \  letter_grades.push_back(\"D+\");\n        } else if (grades[i] >= 1.0 && grades[i]\
    \ < 0.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ >= 0.7 && grades[i] < 0.0) {\n            letter_grades.push_back(\"D-\");\n\
    \        } else {\n            letter_grades.push_back(\"E\");\n        }\n  \
    \  }\n    return letter_grades;", "    std::vector<std::string> letter_grades;\n\
    \    assert(grades.size() <= 5);\n    for (int i = 0; i < grades.size(); i++)\
    \ {\n        float gpd = grades[i];\n        char letter_grade;\n        if (gpd\
    \ >= 4.0) {\n            letter_grade = 'A+';\n        } else if (gpd > 3.7) {\n\
    \            letter_grade = 'A';\n        } else if (gpd > 3.3) {\n          \
    \  letter_grade = 'A-';\n        } else if (gpd > 3.0) {\n            letter_grade\
    \ = 'B+';\n        } else if (gpd > 2.7) {\n            letter_grade = 'B';\n\
    \        } else if (gpd > 2.3) {\n            letter_grade = 'B-';\n        }\
    \ else if (gpd > 2.0) {\n            letter_grade = 'C+';\n        } else if (gpd\
    \ > 1.7) {\n            letter_grade = 'C';\n        } else if (gpd > 1.3) {\n\
    \            letter_grade = 'C-';\n        } else if (gpd > 1.0) {\n         \
    \   letter_grade = 'D+';\n        } else if (gpd > 0.7) {\n            letter_grade\
    \ = 'D';\n        } else if (gpd > 0.0) {\n            letter_grade = 'D-';\n\
    \        } else {\n            letter_grade = 'E';\n        }\n        letter_grades.push_back(letter_grade);\n\
    \    }\n    return letter_grades;", "    std::string result;\n    size_t size\
    \ = (int) grades.size();\n    float sum = 0.0f;\n    for (size_t i = 0; i < size;\
    \ ++i) {\n        sum += grades[i];\n    }\n    float average_grade = sum / size;\n\
    \    if (average_grade >= 4.0) {\n        result = \"A+\";\n    } else if (average_grade\
    \ >= 3.7) {\n        result = \"A\";\n    } else if (average_grade >= 3.3) {\n\
    \        result = \"A+\";\n    } else if (average_grade >= 3.0) {\n        result\
    \ = \"B+\";\n    } else if (average_grade >= 2.7) {\n        result = \"B\";\n\
    \    } else if (average_grade >= 2.3) {\n        result = \"B-\";\n    } else\
    \ if (average_grade >= 2.0) {\n        result = \"C+\";\n    } else if (average_grade\
    \ >= 1.7) {\n        result = \"C\";\n    } else if (average_grade >= 1.3) {\n\
    \        result = \"C-\";\n    } else if (average_grade >= 1.0) {\n        result\
    \ = \"D+\";\n    } else if (average_grade >= 0.7) {\n        result = \"D\";\n\
    \    } else {\n        result = \"D-\";\n    }\n    return { std::move(result)\
    \ };", "    std::vector<std::string> letter_grade;\n    for (float g : grades)\
    \ {\n        if (g >= 3.0) {\n            letter_grade.push_back(\"A+\");\n  \
    \      } else if (g > 2.7) {\n            letter_grade.push_back(\"B\");\n   \
    \     } else if (g > 1.7) {\n            letter_grade.push_back(\"B-\");\n   \
    \     } else if (g > 1.0) {\n            letter_grade.push_back(\"C+\");\n   \
    \     } else if (g > 0.7) {\n            letter_grade.push_back(\"C\");\n    \
    \    } else if (g > 0.1) {\n            letter_grade.push_back(\"C-\");\n    \
    \    } else if (g > 0.0) {\n            letter_grade.push_back(\"D+\");\n    \
    \    } else if (g > 0.0) {\n            letter_grade.push_back(\"D\");\n     \
    \   } else if (g > 0.0) {\n            letter_grade.push_back(\"D-\");\n     \
    \   } else if (g > 0.0) {\n            letter_grade.push_back(\"E\");\n      \
    \  } else {\n            letter_grade.push_back(\"F\");\n        }\n    }\n  \
    \  return letter_grade;", "    // Write your code here\n    \n    std::vector<std::string>\
    \ ans;\n    for (int i=0;i<grades.size();i++) {\n        float gpa = grades[i];\n\
    \        if (gpa >= 4.0F) {\n            ans.push_back(\"A+\");\n        } else\
    \ if (gpa > 3.0F && gpa < 4.4F) {\n            ans.push_back(\"A-\");\n      \
    \  } else if (gpa > 2.4F && gpa < 3.7F) {\n            ans.push_back(\"B+\");\n\
    \        } else if (gpa > 2.3F && gpa < 2.7F) {\n            ans.push_back(\"\
    B\");\n        } else if (gpa > 2.1F && gpa < 2.4F) {\n            ans.push_back(\"\
    B-\");\n        } else if (gpa > 2.0F && gpa < 2.7F) {\n            ans.push_back(\"\
    C+\");\n        } else if (gpa > 1.7F && gpa < 2.3F) {\n            ans.push_back(\"\
    C\");\n        } else if (gpa > 1.5F && gpa < 2.1F) {\n            ans.push_back(\"\
    C-\");\n        } else if (gpa > 1.0F && gpa < 1.7F) {\n            ans.push_back(\"\
    D+\");\n        } else if (gpa > 0.7F && gpa < 1.5F) {\n            ans.push_back(\"\
    D\");\n        } else if (gpa > 0.5F && gpa < 1.0F) {\n            ans.push_back(\"\
    D-\");\n        } else if (gpa <= 0.0F) {\n            ans.push_back(\"E\");\n\
    \        }\n    }\n    \n    return ans;", "\tstd::vector<std::string> letter_grades;\n\
    \tfor(auto grade: grades){\n\t\tfloat gpa = grade;\n\t\tstd::string letter_grade\
    \ = to_string(gpa);\n\t\tletter_grades.push_back(letter_grade);\n\t}\n\treturn\
    \ letter_grades;", "  std::vector<std::string> letter_grade;\n  for (float grade\
    \ : grades) {\n    const float MAX_GPA = 4.0;\n    const float MIN_SEM_PER_GPA\
    \ = 3.7;\n    if (grade > MAX_GPA) {\n      letter_grade.push_back(\"D-\");\n\
    \    } else if (grade > MIN_SEM_PER_GPA) {\n      letter_grade.push_back(\"D+\"\
    );\n    } else if (grade > MIN_SEM_PER_GPA && grade < MAX_GPA) {\n      letter_grade.push_back(\"\
    C\");\n    } else if (grade > MIN_SEM_PER_GPA && grade < MAX_GPA && grade < MIN_SEM_PER_GPA)\
    \ {\n      letter_grade.push_back(\"B\");\n    } else if (grade > MIN_SEM_PER_GPA\
    \ && grade < MAX_GPA && grade < MIN_SEM_PER_GPA && grade < MAX_GPA) {\n      letter_grade.push_back(\"\
    B-\");\n    } else if (grade > MIN_SEM_PER_GPA && grade < MAX_GPA && grade < MIN_SEM_PER_GPA\
    \ && grade < MAX_GPA && grade < MIN_SEM_PER_GPA) {\n      letter_grade.push_back(\"\
    A+\");\n    } else if (grade > MIN_SEM_PER_GPA && grade < MAX_GPA && grade < MIN_SEM_PER_GPA\
    \ && grade < MAX_GPA && grade < MIN_SEM_PER_GPA && grade < MAX_GPA) {\n      letter_grade.push_back(\"\
    A\");\n    } else if (grade > MIN_SEM_PER_GPA && grade < MAX_GPA && grade < MIN_SEM_PER_GPA\
    \ && grade < MAX_GPA && grade < MIN_SEM_PER_GPA && grade < MAX_GPA && grade <\
    \ MIN_SEM_PER_GPA) {\n      letter_grade.push_back(\"A-\");\n    } else if (grade\
    \ > MIN_SEM_PER_GPA && grade < MAX_GPA && grade < MIN_SEM_PER_GPA && grade < MAX_GPA\
    \ && grade < MIN_SEM_PER_GPA && grade < MAX_GPA && grade < MIN_SEM_PER_GPA &&\
    \ grade < MAX_GPA) {\n      letter_grade.push_back(\"B+\");\n    } else if (grade\
    \ > MIN_SEM_PER_GPA && grade < MAX_GPA && grade < MIN_SEM_PER_GPA && grade < MAX_",
  "    std::vector<std::string> letterGrades;\n    float sum = 0;\n    for(auto &grade\
    \ : grades)\n        sum += grade;\n    double avg = sum / grades.size();\n  \
    \  for(auto &grade : grades)\n        letterGrades.push_back(std::string(\"A+\"\
    ) + ((grade >= avg) ? 0 : (grade >= 3.3) ? 1 :\n                    (grade >=\
    \ 3.0 ? 2 : 3)) + '-');\n    return letterGrades;", "    std::vector<std::string>\
    \ grades2;\n    std::vector<std::vector<std::string> > grades_table;\n    std::vector<std::string>\
    \ grades_table_temp;\n    std::vector<std::string> grades_table_temp2;\n    for\
    \ (auto i = 0U; i < grades.size(); i++) {\n        std::string temp;\n       \
    \ if (grades[i] < 3.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \     if (grades[i] >= 3.0 && grades[i] < 4.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \     if (grades[i] >= 4.0 && grades[i] < 5.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \     if (grades[i] >= 5.0 && grades[i] < 6.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \     if (grades[i] >= 6.0 && grades[i] < 7.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \     if (grades[i] >= 7.0 && grades[i] < 8.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \     if (grades[i] >= 8.0 && grades[i] < 9.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \     if (grades[i] >= 9.0 && grades[i] < 10.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \     if (grades[i] >= 10.0) {\n            grades_table.push_back(std::vector<std::string>());\n\
    \            grades_table[i].push_back(std::string(\"0.0\"));\n        }\n   \
    \ }\n    // The first two conditions checks whether the GPA is lower than 3.0\
    \ or \n    // greater than 3.0 to decide whether the grade is A+ or B+, respectively\n\
    \    // The third conditions checks whether the GPA is lower than 3.0 \n    //\
    \ or greater than 9.0 (but not less than 10.0) to decide whether the \n    //\
    \ grade is C+ or D+, respectively\n    // The last conditions checks whether the\
    \ GPA is lower than 9.0 or \n    // greater than 10.0 (but not less than or equal\
    \ to 10.0) to decide \n    // whether the grade is D+ or D-, respectively\n  \
    \  for (auto i = 0U; i < grades.size(); i++) {\n        if (grades[i] < 3.0) {\n\
    \            for (auto j = 0U; j < grades_table.size(); j++) {\n             \
    \   grades_table_temp.push_back(std::vector<std::string>());\n               \
    \ grades_", '    // Write your code here', "\t// Write your code here", "    std::vector<std::string>\
    \ letter_grades;\n    letter_grades.push_back(\"A+\");\n    letter_grades.push_back(\"\
    A\");\n    letter_grades.push_back(\"A-\");\n    letter_grades.push_back(\"B+\"\
    );\n    letter_grades.push_back(\"B\");\n    letter_grades.push_back(\"B-\");\n\
    \    letter_grades.push_back(\"C+\");\n    letter_grades.push_back(\"C\");\n \
    \   letter_grades.push_back(\"C-\");\n    letter_grades.push_back(\"D+\");\n \
    \   letter_grades.push_back(\"D\");\n    letter_grades.push_back(\"D-\");\n  \
    \  letter_grades.push_back(\"E\");\n    if (grades.size() == 0)\n        return\
    \ letter_grades;\n    float gpa = grades[0];\n    for (int i = 1; i < grades.size();\
    \ i++) {\n        if (gpa < grades[i]) {\n            gpa = grades[i];\n     \
    \   }\n    }\n    float sum = 0;\n    float temp_gpa = gpa;\n    for (int i =\
    \ 0; i < grades.size(); i++) {\n        sum += grades[i];\n        float percent\
    \ = temp_gpa / sum * 100.0;\n        if (percent > 4.0 && percent < 7.0)\n   \
    \         letter_grades.push_back(\"A+\");\n        if (percent > 3.7 && percent\
    \ < 4.0)\n            letter_grades.push_back(\"A\");\n        if (percent > 3.3\
    \ && percent < 3.7)\n            letter_grades.push_back(\"A-\");\n        if\
    \ (percent > 3.0 && percent < 3.3)\n            letter_grades.push_back(\"B+\"\
    );\n        if (percent > 2.7 && percent < 3.0)\n            letter_grades.push_back(\"\
    B\");\n        if (percent > 2.3 && percent < 2.7)\n            letter_grades.push_back(\"\
    B-\");\n        if (percent > 2.0 && percent < 2.3)\n            letter_grades.push_back(\"\
    C+\");\n        if (percent > 1.7 && percent < 2.0)\n            letter_grades.push_back(\"\
    C\");\n        if (percent > 1.3 && percent < 1.7)\n            letter_grades.push_back(\"\
    C-\");\n        if (percent > 1.0 && percent < 1.3)\n            letter_grades.push_back(\"\
    D+\");\n        if (percent > 0.7 && percent < 1.0)\n            letter_grades.push_back(\"\
    D\");\n        if (percent > 0.0 && percent < 0.7)\n            letter_grades.push_back(\"\
    D-\");\n        if (percent > 0.0 && percent < 0.0)\n            letter_grades.push_back(\"\
    E\");\n        temp_gpa -= grades[i];\n    }\n    return letter_grades;", '    //
    You have to complete this function', "    // We will store the grades in an array.\
    \ \n    std::vector<std::string> letterGrades;\n\n    // We start with the first\
    \ student, A+, which is also the first grade.\n    letterGrades.push_back(\"A+\"\
    );\n\n    // For each grade, if it less than the current grade of the student\
    \ we \n    // move on. Otherwise, if the current grade is bigger than the grade\
    \ we\n    // move on. Otherwise, we output the current grade.\n    for (float\
    \ grade : grades) {\n        if (grade < letterGrades[0]) {\n            for (size_t\
    \ i = 0; i < letterGrades.size(); i++) {\n                if (letterGrades[i]\
    \ != letterGrades[0]) {\n                    letterGrades[i] = letterGrades[0];\n\
    \                    letterGrades[0] = letterGrades[i];\n                }\n \
    \           }\n        }\n        else if (grade > letterGrades[0]) {\n      \
    \      for (size_t i = 0; i < letterGrades.size(); i++) {\n                if\
    \ (letterGrades[i] != letterGrades[0]) {\n                    letterGrades[i]\
    \ = letterGrades[0];\n                    letterGrades[0] = letterGrades[i];\n\
    \                }\n            }\n        }\n        else {\n            for\
    \ (size_t i = 0; i < letterGrades.size(); i++) {\n                letterGrades[i]\
    \ = letterGrades[0];\n                letterGrades[0] = letterGrades[i];\n   \
    \         }\n        }\n    }\n    return letterGrades;", "\tstd::vector<std::string>\
    \ letter_grade;\n\tfor (float grade : grades) {\n\t\tif (grade > 2.0) {\n\t\t\t\
    letter_grade.push_back(\"D+\");\n\t\t} else if (grade > 1.7) {\n\t\t\tletter_grade.push_back(\"\
    D\");\n\t\t} else if (grade > 1.0) {\n\t\t\tletter_grade.push_back(\"D-\");\n\t\
    \t} else if (grade > 1.0) {\n\t\t\tletter_grade.push_back(\"C+\");\n\t\t} else\
    \ if (grade > 0.7) {\n\t\t\tletter_grade.push_back(\"C\");\n\t\t} else if (grade\
    \ > 0.0) {\n\t\t\tletter_grade.push_back(\"C-\");\n\t\t} else if (grade > 0.0)\
    \ {\n\t\t\tletter_grade.push_back(\"B+\");\n\t\t} else if (grade > 0.7) {\n\t\t\
    \tletter_grade.push_back(\"B\");\n\t\t} else if (grade > 0.0) {\n\t\t\tletter_grade.push_back(\"\
    B-\");\n\t\t} else if (grade > 0.0) {\n\t\t\tletter_grade.push_back(\"A+\");\n\
    \t\t} else if (grade > 1.0) {\n\t\t\tletter_grade.push_back(\"A\");\n\t\t} else\
    \ if (grade > 2.0) {\n\t\t\tletter_grade.push_back(\"A-\");\n\t\t} else {\n\t\t\
    \tletter_grade.push_back(\"E\");\n\t\t}\n\t}\n\treturn letter_grade;", "    std::vector<std::string>\
    \ letter_grade;\n    for(float g:grades){\n        char grade = (g>=0)?(std::to_string(g)).at(1):'E';\n\
    \        letter_grade.push_back(grade);\n    }\n    return letter_grade;", "\t\
    std::vector<std::string> letters;\n\t\n\tint sum = 0;\n\tfor (auto grade : grades)\
    \ {\n\t\tsum += grade;\n\t}\n\t\n\tauto percentage = static_cast<double>(sum)/static_cast<double>(grades.size());\n\
    \tfor (int i=0; i<grades.size(); i++) {\n\t\tif (percentage<static_cast<double>(i+1)/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"A+\");\n\t\t\tbreak;\n\t\t} else if (percentage>=static_cast<double>(i+1)/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"A\");\n\t\t\tbreak;\n\t\t} else if (percentage<static_cast<double>(i)/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"A-\");\n\t\t\tbreak;\n\t\t} else if (percentage>=static_cast<double>(i)/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"B+\");\n\t\t\tbreak;\n\t\t} else if (percentage<static_cast<double>(i-1)/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"B\");\n\t\t\tbreak;\n\t\t} else if (percentage>=static_cast<double>(i-1)/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"B-\");\n\t\t\tbreak;\n\t\t} else if (percentage<static_cast<double>(grades.size()-1)/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"C+\");\n\t\t\tbreak;\n\t\t} else if (percentage>=static_cast<double>(grades.size()-1)/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"C\");\n\t\t\tbreak;\n\t\t} else if (percentage<static_cast<double>(grades.size())/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"C-\");\n\t\t\tbreak;\n\t\t} else if (percentage>=static_cast<double>(grades.size())/static_cast<double>(grades.size()))\
    \ {\n\t\t\tletters.push_back(\"D+\");\n\t\t\tbreak;\n\t\t} else if (percentage<static_cast<double>(grades.size())-1)\
    \ {\n\t\t\tletters.push_back(\"D\");\n\t\t\tbreak;\n\t\t} else if (percentage>=static_cast<double>(grades.size())-1)\
    \ {\n\t\t\tletters.push_back(\"D-\");\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn\
    \ letters;", "    // Complete the function.\n    std::vector<std::string> letter_grades;\n\
    \    float sum = 0;\n    for (float grade: grades) {\n        sum += grade;\n\
    \    }\n    int count = 1;\n    int num = 1;\n    while (sum > 0) {\n        sum\
    \ += grades[count] * num;\n        count += 1;\n        num += 1;\n        if\
    \ (count == grades.size()) {\n            letter_grades.push_back(\"D+\");\n \
    \           break;\n        }\n    }\n    return letter_grades;", "    std::vector<std::string>\
    \ letter_grades;\n    for (float g : grades) {\n        char grade;\n        if\
    \ (g > 3.0) {\n            grade = 'B+';\n        } else if (g > 2.7) {\n    \
    \        grade = 'B';\n        } else if (g > 2.3) {\n            grade = 'B-';\n\
    \        } else if (g > 1.7) {\n            grade = 'C+';\n        } else if (g\
    \ > 1.0) {\n            grade = 'C';\n        } else if (g > 0.7) {\n        \
    \    grade = 'C-';\n        } else if (g > 0.2) {\n            grade = 'D+';\n\
    \        } else if (g > 0.0) {\n            grade = 'D';\n        } else if (g\
    \ > -0.2) {\n            grade = 'D-';\n        } else if (g > -1.0) {\n     \
    \       grade = 'E';\n        } else {\n            grade = 'F';\n        }\n\
    \        letter_grades.push_back(grade);\n    }\n    return letter_grades;", " \
    \   std::vector<std::string> grades_vector;\n    float min_grade = *std::min_element(grades.begin(),\
    \ grades.end()); // Find minimum value\n    float max_grade = *std::max_element(grades.begin(),\
    \ grades.end()); // Find maximum value\n    float avg_grade = std::accumulate(grades.begin(),\
    \ grades.end(), 0) / grades.size(); // Calculate average of all grades\n    float\
    \ sum_of_grades = 0.0; // Summation of the grades\n    for (float grade : grades)\
    \ {\n        sum_of_grades += grade; // Add all grades to sum variable\n    }\n\
    \    std::vector<std::string> grades_letter_grade;\n    grades_letter_grade.push_back(\"\
    E\"); // Add E grade to the grades_letter_grade\n    if (sum_of_grades == 0.0)\
    \ { // If all grades are 0.0\n        grades_letter_grade.push_back(\"F\"); //\
    \ Add F grade to the grades_letter_grade\n    }\n    else { // If not all grades\
    \ are 0.0\n        // For each grade\n        for (float grade : grades) {\n \
    \           float percentage = (grade - min_grade) / (max_grade - min_grade);\
    \ // Calculate percentage\n            // If percentage is less than 0\n     \
    \       if (percentage < 0) {\n                percentage = -0.0;\n          \
    \  }\n            std::string letter_grade;\n            if (percentage >= 0.0)\
    \ { // If percentage is greater than or equal to 0\n                if (percentage\
    \ < 0.35) { // If percentage is less than 0.35\n                    letter_grade\
    \ = \"A-\";\n                }\n                else if (percentage < 0.70) {\
    \ // If percentage is less than 0.70\n                    letter_grade = \"B-\"\
    ;\n                }\n                else if (percentage < 0.85) { // If percentage\
    \ is less than 0.85\n                    letter_grade = \"B-\";\n            \
    \    }\n                else if (percentage < 1.05) { // If percentage is less\
    \ than 1.05\n                    letter_grade = \"B+\";\n                }\n \
    \               else if (percentage < 1.35) { // If percentage is less than 1.35\n\
    \                    letter_grade = \"C+\";\n                }\n             \
    \   else if (percentage < 1.65) { // If percentage is less than 1.65\n       \
    \             letter_grade = \"C-\";\n                }\n                else\
    \ if (percentage < 1.85) { // If percentage is less than 1.85\n              \
    \      letter_grade = \"C+\";\n                }\n                else if (percentage\
    \ < 2.05) { // If percentage is less than 2.05\n                    letter_grade\
    \ = \"D+\";\n                }\n                else if (percentage < 2.35) {\
    \ // If percentage is less than 2.35\n                    letter_grade = \"D-\"\
    ;\n                }\n                else if (percentage < 2.65) { // If percentage\
    \ is less than 2.65\n                    letter_grade = \"D+\";\n            \
    \    }\n                else if (percentage < 2.85) { // If percentage is less\
    \ than 2.85\n", "  std::string answer;\n  for(auto grade: grades) {\n    for(float\
    \ i=0.0; i<=5.0;i+=0.5)\n      if(grade <= i)\n        answer += std::string(1,\
    \ 'A+');\n      else\n        answer += std::string(1, 'A-');\n    for(float i=5.0;\
    \ i>=0.0;i-=0.5)\n      if(grade >= i)\n        answer += std::string(1, 'B+');\n\
    \      else\n        answer += std::string(1, 'B-');\n    for(float i=0.0; i>=5.0;i-=0.5)\n\
    \      if(grade <= i)\n        answer += std::string(1, 'C+');\n      else\n \
    \       answer += std::string(1, 'C-');\n    for(float i=5.0; i<=0.0;i+=0.5)\n\
    \      if(grade >= i)\n        answer += std::string(1, 'D+');\n      else\n \
    \       answer += std::string(1, 'D-');\n    answer += std::string(1, 'D');\n\
    \  }\n  return answer;", "    std::vector<std::string> grade_list;\n    for (float\
    \ g : grades) {\n        float temp = g;\n        int decimal_point = floor(log10(temp));\n\
    \        temp /= pow(10.0, decimal_point);\n        if (decimal_point == 0) {\n\
    \            grade_list.push_back(\"E\");\n        } else if (temp > 2.0 && temp\
    \ < 3.7) {\n            grade_list.push_back(\"A-\");\n        } else if (temp\
    \ > 3.7 && temp < 4.0) {\n            grade_list.push_back(\"A-\");\n        }\
    \ else if (temp > 4.0 && temp < 5.3) {\n            grade_list.push_back(\"A-\"\
    );\n        } else if (temp > 5.3 && temp < 5.7) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 5.7 && temp < 6.0) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 6.0 && temp < 6.9) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 6.9 && temp < 7.1) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 7.1 && temp < 7.6) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 7.6 && temp < 8.0) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 8.0 && temp < 9.6) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 9.6 && temp < 10.0) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 10.0 && temp < 11.1) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 11.1 && temp < 11.9) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 11.9 && temp < 12.4) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 12.4 && temp < 12.7) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 12.7 && temp < 13.0) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 13.0 && temp < 13.7) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 13.7 && temp < 14.3) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 14.3 && temp < 14.7) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 14.7 && temp < 15.0) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 15.0 && temp < 15.6) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 15.6 && temp < 16.0) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 16.0 && temp < 16.6) {\n            grade_list.push_back(\"\
    A-\");\n        } else if (temp > 16.6 && temp < 17.0) {\n            grade_list.push_back",
  "    std::vector<std::string> letter_grades;\n    for (float i : grades) {\n   \
    \     if (i > 4.0) {\n            letter_grades.push_back(\"A+\");\n        }\
    \ else if (i > 3.7) {\n            letter_grades.push_back(\"A\");\n        }\
    \ else if (i > 3.3) {\n            letter_grades.push_back(\"A-\");\n        }\
    \ else if (i > 3.0) {\n            letter_grades.push_back(\"B+\");\n        }\
    \ else if (i > 2.7) {\n            letter_grades.push_back(\"B\");\n        }\
    \ else if (i > 2.3) {\n            letter_grades.push_back(\"B-\");\n        }\
    \ else if (i > 2.0) {\n            letter_grades.push_back(\"C+\");\n        }\
    \ else if (i > 1.7) {\n            letter_grades.push_back(\"C\");\n        }\
    \ else if (i > 1.3) {\n            letter_grades.push_back(\"C-\");\n        }\
    \ else if (i > 1.0) {\n            letter_grades.push_back(\"D+\");\n        }\
    \ else if (i > 0.7) {\n            letter_grades.push_back(\"D\");\n        }\
    \ else if (i > 0.0) {\n            letter_grades.push_back(\"D-\");\n        }\
    \ else {\n            letter_grades.push_back(\"E\");\n        }\n    }\n    return\
    \ letter_grades;", "    std::vector<std::string> result;\n    assert(grades.size()\
    \ > 0);\n    result.push_back(\"\");\n    for (int i = 0; i < grades.size(); i++)\
    \ {\n        float average = grades.at(i);\n        float variance = grades.at(i)\
    \ - average;\n        float standard_deviation = sqrt(variance);\n        float\
    \ standard_deviation_grade = average/standard_deviation;\n        float difference\
    \ = average-standard_deviation_grade;\n        float relative_difference = difference/average;\n\
    \        float max_grade;\n        float min_grade;\n        if (relative_difference\
    \ < 0.0)\n            max_grade = \"E\";\n        else if (relative_difference\
    \ > 0.0 && relative_difference < 0.2)\n            max_grade = \"D-\";\n     \
    \   else if (relative_difference > 0.2 && relative_difference < 0.4)\n       \
    \     max_grade = \"C-\";\n        else if (relative_difference > 0.4 && relative_difference\
    \ < 0.6)\n            max_grade = \"B-\";\n        else if (relative_difference\
    \ > 0.6 && relative_difference < 0.8)\n            max_grade = \"B-\";\n     \
    \   else if (relative_difference > 0.8 && relative_difference < 1.0)\n       \
    \     max_grade = \"B-\";\n        else if (relative_difference > 1.0)\n     \
    \       max_grade = \"B-\";\n        else\n            max_grade = \"B-\";\n \
    \       if (standard_deviation_grade > 4.0)\n            result.push_back(\"A+\"\
    );\n        else if (standard_deviation_grade > 3.7 && standard_deviation_grade\
    \ < 3.9)\n            result.push_back(\"A\");\n        else if (standard_deviation_grade\
    \ > 3.3 && standard_deviation_grade < 3.6)\n            result.push_back(\"A-\"\
    );\n        else if (standard_deviation_grade > 3.0 && standard_deviation_grade\
    \ < 3.2)\n            result.push_back(\"B+\");\n        else if (standard_deviation_grade\
    \ > 2.7 && standard_deviation_grade < 2.9)\n            result.push_back(\"B\"\
    );\n        else if (standard_deviation_grade > 2.3 && standard_deviation_grade\
    \ < 2.6)\n            result.push_back(\"B-\");\n        else if (standard_deviation_grade\
    \ > 2.0 && standard_deviation_grade < 2.2)\n            result.push_back(\"C+\"\
    );\n        else if (standard_deviation_grade > 1.7 && standard_deviation_grade\
    \ < 1.9)\n            result.push_back(\"C\");\n        else if (standard_deviation_grade\
    \ > 1.3 && standard_deviation_grade < 1.6)\n            result.push_back(\"C-\"\
    );\n        else if (standard_deviation_grade > 1.0 && standard_deviation_grade\
    \ < 1.2)\n            result.push_back(\"D+\");\n        else if (standard_deviation_grade\
    \ > 0.7 && standard_deviation_grade < 0.9)\n            result.push_back(\"D\"\
    );\n        else\n            result.push_back(\"D-\");\n        result.push_back(max_grade);\n\
    \    }\n    return result;", "    // Write your code here\n    std::vector<std::string>\
    \ result;\n    int size = grades.size();\n    for (int i=0; i<size; i++) {\n \
    \       if (grades[i]>0) result.push_back(\"A+\");\n        else if (grades[i]>3.7)\
    \ result.push_back(\"A\");\n        else if (grades[i]>3.3) result.push_back(\"\
    A-\");\n        else if (grades[i]>3) result.push_back(\"B+\");\n        else\
    \ if (grades[i]>2.7) result.push_back(\"B\");\n        else if (grades[i]>2.3)\
    \ result.push_back(\"B-\");\n        else if (grades[i]>2) result.push_back(\"\
    C+\");\n        else if (grades[i]>1.7) result.push_back(\"C\");\n        else\
    \ if (grades[i]>1.3) result.push_back(\"C-\");\n        else if (grades[i]>1)\
    \ result.push_back(\"D+\");\n        else if (grades[i]>0.7) result.push_back(\"\
    D\");\n        else if (grades[i]>0) result.push_back(\"D-\");\n        else result.push_back(\"\
    E\");\n    }\n    return result;", "    std::vector<std::string> result;\n   \
    \ \n    assert(grades.size() == 14);\n    \n    result.resize(grades.size());\n\
    \    \n    for (int i = 0; i < grades.size(); i++) {\n        float gpa = grades[i];\n\
    \        \n        if (gpa < 0)\n            gpa = -gpa;\n        \n        if\
    \ (gpa >= 4.0) {\n            result[i] = \"A+\";\n        } else if (gpa >= 3.7)\
    \ {\n            result[i] = \"A\";\n        } else if (gpa >= 3.3) {\n      \
    \      result[i] = \"A-\";\n        } else if (gpa >= 3.0) {\n            result[i]\
    \ = \"B+\";\n        } else if (gpa >= 2.7) {\n            result[i] = \"B\";\n\
    \        } else if (gpa >= 2.3) {\n            result[i] = \"B-\";\n        }\
    \ else if (gpa >= 2.0) {\n            result[i] = \"C+\";\n        } else if (gpa\
    \ >= 1.7) {\n            result[i] = \"C\";\n        } else if (gpa >= 1.3) {\n\
    \            result[i] = \"C-\";\n        } else if (gpa >= 1.0) {\n         \
    \   result[i] = \"D+\";\n        } else if (gpa >= 0.7) {\n            result[i]\
    \ = \"D\";\n        } else if (gpa >= 0.0) {\n            result[i] = \"D-\";\n\
    \        } else {\n            result[i] = \"E\";\n        }\n    }\n    \n  \
    \  return result;", "    std::vector<std::string> letter_grade;\n    for(auto\
    \ i = grades.begin(); i != grades.end(); ++i) {\n        for(char &letter : letter_grade)\n\
    \            letter = ' ';\n        if(*i >= 4.0 && i != grades.begin()) \n  \
    \          letter_grade.push_back('A+');\n        else if(*i >= 3.7 && *i <= 3.3)\
    \ \n            letter_grade.push_back('A');\n        else if(*i >= 3.3 && *i\
    \ <= 3.0) \n            letter_grade.push_back('A-');\n        else if(*i >= 3.0\
    \ && *i <= 2.7) \n            letter_grade.push_back('B+');\n        else if(*i\
    \ >= 2.7 && *i <= 2.3) \n            letter_grade.push_back('B');\n        else\
    \ if(*i >= 2.3 && *i <= 2.0) \n            letter_grade.push_back('B-');\n   \
    \     else if(*i >= 2.0 && *i <= 1.7) \n            letter_grade.push_back('C+');\n\
    \        else if(*i >= 1.7 && *i <= 1.3) \n            letter_grade.push_back('C');\n\
    \        else if(*i >= 1.3 && *i <= 1.0) \n            letter_grade.push_back('C-');\n\
    \        else if(*i >= 1.0 && *i <= 0.7) \n            letter_grade.push_back('D+');\n\
    \        else if(*i >= 0.7 && *i <= 0.0) \n            letter_grade.push_back('D');\n\
    \        else \n            letter_grade.push_back('D-');\n    }\n    return letter_grade;",
  "    std::vector<std::string> letter_grades;\n    assert(grades.size() == 12);\n\
    \    float gpa = grades[0];\n    for (float grade : grades)\n    {\n        if\
    \ (gpa >= grade)\n        {\n            letter_grades.push_back(\"A+\");\n  \
    \          gpa -= grade;\n        }\n        else if (gpa > grade + 0.5)\n   \
    \     {\n            letter_grades.push_back(\"A\");\n            gpa -= grade\
    \ + 0.5;\n        }\n        else if (gpa > grade - 0.5)\n        {\n        \
    \    letter_grades.push_back(\"A-\");\n            gpa -= grade - 0.5;\n     \
    \   }\n        else if (gpa > grade + 0.3)\n        {\n            letter_grades.push_back(\"\
    B+\");\n            gpa -= grade + 0.3;\n        }\n        else if (gpa > grade\
    \ - 0.3)\n        {\n            letter_grades.push_back(\"B\");\n           \
    \ gpa -= grade - 0.3;\n        }\n        else if (gpa > grade + 0.2)\n      \
    \  {\n            letter_grades.push_back(\"B-\");\n            gpa -= grade +\
    \ 0.2;\n        }\n        else if (gpa > grade - 0.2)\n        {\n          \
    \  letter_grades.push_back(\"C+\");\n            gpa -= grade - 0.2;\n       \
    \ }\n        else if (gpa > grade + 0.1)\n        {\n            letter_grades.push_back(\"\
    C\");\n            gpa -= grade + 0.1;\n        }\n        else if (gpa > grade\
    \ - 0.1)\n        {\n            letter_grades.push_back(\"C-\");\n          \
    \  gpa -= grade - 0.1;\n        }\n        else if (gpa > grade)\n        {\n\
    \            letter_grades.push_back(\"D+\");\n            gpa -= grade;\n   \
    \     }\n        else if (gpa > grade - 0.7)\n        {\n            letter_grades.push_back(\"\
    D\");\n            gpa -= grade - 0.7;\n        }\n        else\n        {\n \
    \           letter_grades.push_back(\"D-\");\n            gpa -= grade - 0.6;\n\
    \        }\n    }\n    letter_grades.push_back(\"E\");\n    return letter_grades;",
  "    std::vector<std::string> grade_result;\n    float GPA = (float)grades.front();\n\
    \    int count = 0;\n    for(int i = grade_result.size(); i<grades.size(); i++)\
    \ {\n        if(GPA > grades[i]) {\n            GPA = grades[i];\n           \
    \ count = 1;\n        }\n        else if(GPA < grades[i]) {\n            GPA =\
    \ (float)grades[i];\n            count++;\n        }\n        if(count == 3) {\n\
    \            grade_result.push_back(\"C+\");\n            GPA = GPA - (float)grades[i];\n\
    \            count = 1;\n        }\n        else if(count == 2) {\n          \
    \  grade_result.push_back(\"B+\");\n            GPA = GPA - (float)grades[i];\n\
    \            count = 1;\n        }\n        else if(count == 1) {\n          \
    \  grade_result.push_back(\"B\");\n            GPA = GPA - (float)grades[i];\n\
    \            count = 1;\n        }\n        else if(count == 0) {\n          \
    \  grade_result.push_back(\"B\");\n            GPA = GPA - (float)grades[i];\n\
    \            count = 1;\n        }\n    }\n    return grade_result;", "    std::vector<std::string>\
    \ letter_grade;\n    int num = (int)grades.back();\n    if (num < 4.0f)\n    \
    \    letter_grade.push_back(\"A+\");\n    else if (num < 5.0f)\n        letter_grade.push_back(\"\
    A\");\n    else if (num < 6.0f)\n        letter_grade.push_back(\"A-\");\n   \
    \ else if (num < 7.0f)\n        letter_grade.push_back(\"B+\");\n    else if (num\
    \ < 8.0f)\n        letter_grade.push_back(\"B\");\n    else if (num < 9.0f)\n\
    \        letter_grade.push_back(\"B-\");\n    else if (num < 10.0f)\n        letter_grade.push_back(\"\
    C+\");\n    else if (num < 11.0f)\n        letter_grade.push_back(\"C\");\n  \
    \  else if (num < 12.0f)\n        letter_grade.push_back(\"C-\");\n    else if\
    \ (num < 13.0f)\n        letter_grade.push_back(\"D+\");\n    else if (num < 14.0f)\n\
    \        letter_grade.push_back(\"D\");\n    else if (num < 15.0f)\n        letter_grade.push_back(\"\
    D-\");\n    else if (num < 16.0f)\n        letter_grade.push_back(\"E\");\n  \
    \  return letter_grade;", "    assert(grades.size() == 12);\n    std::vector<std::string>\
    \ grade_list;\n    grade_list.reserve(12);\n    grade_list.push_back(\"A+\");\n\
    \    grade_list.push_back(\"A\");\n    grade_list.push_back(\"A-\");\n    grade_list.push_back(\"\
    B+\");\n    grade_list.push_back(\"B\");\n    grade_list.push_back(\"B-\");\n\
    \    grade_list.push_back(\"C+\");\n    grade_list.push_back(\"C\");\n    grade_list.push_back(\"\
    C-\");\n    grade_list.push_back(\"D+\");\n    grade_list.push_back(\"D\");\n\
    \    grade_list.push_back(\"D-\");\n    grade_list.push_back(\"E\");\n    if (grades[0]\
    \ >= 4.0)\n        grade_list[0] = \"A+\";\n    else if (grades[0] > 3.7 && grades[0]\
    \ < 3.8)\n        grade_list[0] = \"A\";\n    else if (grades[0] > 3.3 && grades[0]\
    \ < 3.4)\n        grade_list[0] = \"A-\";\n    else if (grades[0] > 3.0 && grades[0]\
    \ < 3.5)\n        grade_list[0] = \"B+\";\n    else if (grades[0] > 2.7 && grades[0]\
    \ < 2.8)\n        grade_list[0] = \"B\";\n    else if (grades[0] > 2.3 && grades[0]\
    \ < 2.4)\n        grade_list[0] = \"B-\";\n    else if (grades[0] > 2.0 && grades[0]\
    \ < 2.5)\n        grade_list[0] = \"C+\";\n    else if (grades[0] > 1.7 && grades[0]\
    \ < 1.8)\n        grade_list[0] = \"C\";\n    else if (grades[0] > 1.3 && grades[0]\
    \ < 1.4)\n        grade_list[0] = \"C-\";\n    else if (grades[0] > 1.0 && grades[0]\
    \ < 1.5)\n        grade_list[0] = \"D+\";\n    else if (grades[0] > 0.7 && grades[0]\
    \ < 0.8)\n        grade_list[0] = \"D\";\n    else if (grades[0] > 0.0 && grades[0]\
    \ < 0.5)\n        grade_list[0] = \"D-\";\n    else if (grades[0] < 0.0)\n   \
    \     grade_list[0] = \"E\";\n    return grade_list;", "    std::vector<std::pair<float,std::string>>\
    \ grades_map = {\n        {4.0, \"A+\"},\n        {3.7, \"A\"},\n        {3.3,\
    \ \"A-\"},\n        {3.0, \"B+\"},\n        {2.7, \"B\"},\n        {2.3, \"B-\"\
    },\n        {2.0, \"C+\"},\n        {1.7, \"C\"},\n        {1.3, \"C-\"},\n  \
    \      {1.0, \"D+\"},\n        {0.7, \"D\"},\n        {0.0, \"D-\"},\n       \
    \ {0.0, \"E\"}\n    };\n\n    std::vector<std::string> result;\n    for (auto\
    \ &grade : grades) {\n        result.push_back(grades_map[static_cast<float>(grade)]);\n\
    \    }\n\n    return result;", "    std::vector<std::string> grade_list;\n   \
    \ auto length = grades.size();\n    if (length == 0) {\n        return grade_list;\n\
    \    }\n    if (length == 1) {\n        grade_list.push_back((grades[0] < 3.0)\
    \ ? \"B+\" : ((grades[0] < 3.7) ? \"B-\" : ((grades[0] < 4.0) ? \"C+\" : ((grades[0]\
    \ < 4.7) ? \"C-\" : ((grades[0] < 5.0) ? \"D+\" : ((grades[0] < 5.7) ? \"D-\"\
    \ : \"E\"))))));\n        return grade_list;\n    }\n    if (length == 2) {\n\
    \        grade_list.push_back((grades[0] < 3.0) ? \"B+\" : ((grades[0] < 3.7)\
    \ ? \"B-\" : ((grades[0] < 4.0) ? \"C+\" : ((grades[0] < 4.7) ? \"C-\" : ((grades[0]\
    \ < 5.0) ? \"D+\" : ((grades[0] < 5.7) ? \"D-\" : \"E\"))))));\n        grade_list.push_back((grades[1]\
    \ < 3.0) ? \"B+\" : ((grades[1] < 3.7) ? \"B-\" : ((grades[1] < 4.0) ? \"C+\"\
    \ : ((grades[1] < 4.7) ? \"C-\" : ((grades[1] < 5.0) ? \"D+\" : ((grades[1] <\
    \ 5.7) ? \"D-\" : \"E\"))))));\n        return grade_list;\n    }\n    if (length\
    \ == 2) {\n        grade_list.push_back((grades[0] < 3.0) ? \"B+\" : ((grades[0]\
    \ < 3.7) ? \"B-\" : ((grades[0] < 4.0) ? \"C+\" : ((grades[0] < 4.7) ? \"C-\"\
    \ : ((grades[0] < 5.0) ? \"D+\" : ((grades[0] < 5.7) ? \"D-\" : \"E\"))))));\n\
    \        grade_list.push_back((grades[1] < 3.0) ? \"B+\" : ((grades[1] < 3.7)\
    \ ? \"B-\" : ((grades[1] < 4.0) ? \"C+\" : ((grades[1] < 4.7) ? \"C-\" : ((grades[1]\
    \ < 5.0) ? \"D+\" : ((grades[1] < 5.7) ? \"D-\" : \"E\"))))));\n        grade_list.push_back((grades[2]\
    \ < 3.0) ? \"B+\" : ((grades[2] < 3.7) ? \"B-\" : ((grades[2] < 4.0) ? \"C+\"\
    \ : ((grades[2] < 4.7) ? \"C-\" : ((grades[2] < 5.0) ? \"D+\" : ((grades[2] <\
    \ 5.7) ? \"D-\" : \"E\"))))));\n        return grade_list;\n    }\n    if (length\
    \ == 3) {\n        grade_list.push_back((grades[0] < 3.0) ? \"B+\" : ((grades[0]\
    \ < 3.7) ? ", "  \n  // A table of ranges \n  std::vector<std::pair<double, std::pair<double,\
    \ double>>> ranges;\n\n  // For each grade in the array, determine its range and\
    \ save it to ranges\n  for (int i = 0; i < grades.size(); i++) {\n    double lower_bound\
    \ = grades[i] - 0.5;\n    double upper_bound = grades[i] + 0.5;\n    double range_lower\
    \ = lower_bound;\n    double range_upper = upper_bound;\n    double range_diff\
    \ = upper_bound - lower_bound;\n\n    while (range_diff > 0) {\n      ++range_lower;\n\
    \      --range_diff;\n    }\n\n    ranges.push_back(std::make_pair(\n        range_lower,\n\
    \        std::make_pair(lower_bound, upper_bound)));\n  }\n\n  // Now that we\
    \ have ranges, we know that ranges.front().first < 3.0 and\n  // ranges.back().second\
    \ < 3.0\n  // Since we know that, the range is between 3.0-3.7 so we only need\
    \ to \n  // find one pair from ranges that is greater than or equal to 3.7.\n\
    \  std::pair<double, std::pair<double, double>> range_pair = ranges.front();\n\
    \  while (range_pair.first >= 3.7) {\n    range_pair = std::min_element(ranges.begin(),\
    \ ranges.end(), \n        [](const std::pair<double, std::pair<double, double>>\
    \ & p1, \n            const std::pair<double, std::pair<double, double>> & p2)\
    \ {\n          return p1.first < p2.first;\n        });\n  }\n\n  // Now that\
    \ we have range_pair, we know the range is between 3.7-3.0 so we \n  // only need\
    \ to find one pair from ranges that is less than or equal to 3.0.\n  std::pair<double,\
    \ std::pair<double, double>> range_pair_2 = range_pair;\n  while (range_pair_2.second\
    \ <= 3.0) {\n    range_pair_2 = std::max_element(ranges.begin(), ranges.end(),\
    \ \n        [](const std::pair<double, std::pair<double, double>> & p1, \n   \
    \         const std::pair<double, std::pair<double, double>> & p2) {\n       \
    \   return p1.first > p2.first;\n        });\n  }\n\n  // Now that we have range_pair_2\
    \ and ranges, we know the range is between \n  // 3.0-3.7 so we only need to find\
    \ one pair from ranges that is less than or \n  // equal to 3.7.\n  std::pair<double,\
    \ std::pair<double, double>> range_pair_3 = range_pair_2;\n  while (range_pair_3.second\
    \ >= 3.7) {\n    range_pair_3 = std::max_element(ranges.begin(), ranges.end(),\
    \ \n        [](const std::pair<double, std::pair<", "    std::vector<std::string>\
    \ grade_list;\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i]\
    \ >= 3.5)\n            grade_list.push_back(\"B+\");\n        else if (grades[i]\
    \ >= 3.0)\n            grade_list.push_back(\"B\");\n        else if (grades[i]\
    \ >= 2.5)\n            grade_list.push_back(\"B-\");\n        else if (grades[i]\
    \ >= 2.0)\n            grade_list.push_back(\"C+\");\n        else if (grades[i]\
    \ >= 1.7)\n            grade_list.push_back(\"C\");\n        else if (grades[i]\
    \ >= 1.3)\n            grade_list.push_back(\"C-\");\n        else if (grades[i]\
    \ >= 1.0)\n            grade_list.push_back(\"D+\");\n        else if (grades[i]\
    \ >= 0.7)\n            grade_list.push_back(\"D\");\n        else if (grades[i]\
    \ >= 0.0)\n            grade_list.push_back(\"D-\");\n        else\n         \
    \   grade_list.push_back(\"E\");\n    }\n    return grade_list;", "    // Create\
    \ all possible letter grades from the vector\n    std::vector<std::string> letter_grades;\n\
    \    for (int grade = 0; grade < 100; ++grade) {\n        std::string letter_grade;\n\
    \        switch (grade) {\n        case 0:\n            letter_grade = \"E\";\n\
    \            break;\n        case 4:\n            letter_grade = \"A+\";\n   \
    \         break;\n        case 3.7:\n            letter_grade = \"A\";\n     \
    \       break;\n        case 3.3:\n            letter_grade = \"A-\";\n      \
    \      break;\n        case 3.0:\n            letter_grade = \"B+\";\n       \
    \     break;\n        case 2.7:\n            letter_grade = \"B\";\n         \
    \   break;\n        case 2.3:\n            letter_grade = \"B-\";\n          \
    \  break;\n        case 2.0:\n            letter_grade = \"C+\";\n           \
    \ break;\n        case 1.7:\n            letter_grade = \"C\";\n            break;\n\
    \        case 1.3:\n            letter_grade = \"C-\";\n            break;\n \
    \       case 1.0:\n            letter_grade = \"D+\";\n            break;\n  \
    \      case 0.7:\n            letter_grade = \"D\";\n            break;\n    \
    \    case 0.0:\n            letter_grade = \"D-\";\n            break;\n     \
    \   default:\n            letter_grade = \"F\";\n            break;\n        }\n\
    \        letter_grades.push_back(letter_grade);\n    }\n\n    // Find which grades\
    \ we are using\n    std::vector<std::string> grades_used;\n    for (int grade\
    \ = 0; grade < grades.size(); ++grade) {\n        for (int i = 0; i < letter_grades.size();\
    \ ++i) {\n            if (letter_grades[i] == \"F\")\n                continue;\n\
    \            if (letter_grades[i] == letter_grades[grade]) {\n               \
    \ if (grade in grades_used) {\n                    grades_used.erase(grades_used.begin()\
    \ + grade);\n                } else {\n                    grades_used.push_back(letter_grades[grade]);\n\
    \                }\n                break;\n            }\n        }\n    }\n\n\
    \    // Reverse the order of the grades, so that F is at the end\n    for (int\
    \ i = grades_used.size() - 1; i >= 0; --i) {\n        grades_used[grades_used.size()\
    \ - 1 - i] = grades_used[i];\n    }\n\n    // Sort the grades\n    std::sort(grades_used.begin(),\
    \ grades_used.end());\n\n    // Return them\n    return grades_used;", "    std::map<float,\
    \ std::string> letter_grade;\n    letter_grade[4.0] = \"A+\";\n    letter_grade[3.7]\
    \ = \"A\";\n    letter_grade[3.3] = \"A\";\n    letter_grade[3.0] = \"B+\";\n\
    \    letter_grade[2.7] = \"B\";\n    letter_grade[2.3] = \"B\";\n    letter_grade[2.0]\
    \ = \"C+\";\n    letter_grade[1.7] = \"C\";\n    letter_grade[1.3] = \"C\";\n\
    \    letter_grade[1.0] = \"D+\";\n    letter_grade[0.7] = \"D\";\n    letter_grade[0.0]\
    \ = \"D\";\n    for (auto const &grade : grades) {\n        for (auto &kvp : letter_grade)\
    \ {\n            if (kvp.first > grade) {\n                kvp.second = kvp.second\
    \ + \"-\";\n                break;\n            }\n            else if (kvp.first\
    \ == grade) {\n                kvp.second = kvp.second + \"+\";\n            \
    \    break;\n            }\n        }\n    }\n    return std::vector<std::string>(letter_grade.begin(),\
    \ letter_grade.end());", "\t// Calculate the total of all grades\n\tint sum =\
    \ 0;\n\tfor (auto grade : grades) {\n\t\tsum += grade;\n\t}\n\t// Get the lowest\
    \ and highest grade\n\tfloat lowest_grade = grades[0];\n\tfloat highest_grade\
    \ = grades[0];\n\tfor (auto grade : grades) {\n\t\tif (grade < lowest_grade) {\n\
    \t\t\tlowest_grade = grade;\n\t\t}\n\t\tif (grade > highest_grade) {\n\t\t\thighest_grade\
    \ = grade;\n\t\t}\n\t}\n\t// Calculate the total of all grades except the lowest\
    \ and highest grade\n\tint total_except_lowest_highest = 0;\n\tfor (auto grade\
    \ : grades) {\n\t\tif (grade > highest_grade) {\n\t\t\ttotal_except_lowest_highest\
    \ += grade - highest_grade;\n\t\t}\n\t\ttotal_except_lowest_highest += grade;\n\
    \t}\n\t// Calculate the letter grades\n\tstd::vector<std::string> letter_grades;\n\
    \tletter_grades.push_back(\"A+\");\n\tfor (int i = 0; i < lowest_grade / 4; i++)\
    \ {\n\t\tletter_grades.push_back(\"A\");\n\t}\n\tfor (int i = 0; i < total_except_lowest_highest\
    \ / 4; i++) {\n\t\tletter_grades.push_back(\"A-\");\n\t}\n\tfor (int i = 0; i\
    \ < highest_grade / 4; i++) {\n\t\tletter_grades.push_back(\"B+\");\n\t}\n\tfor\
    \ (int i = 0; i < total_except_lowest_highest / 4; i++) {\n\t\tletter_grades.push_back(\"\
    B\");\n\t}\n\tfor (int i = 0; i < lowest_grade / 2; i++) {\n\t\tletter_grades.push_back(\"\
    C\");\n\t}\n\tfor (int i = 0; i < total_except_lowest_highest / 2; i++) {\n\t\t\
    letter_grades.push_back(\"C-\");\n\t}\n\tfor (int i = 0; i < highest_grade / 2;\
    \ i++) {\n\t\tletter_grades.push_back(\"C+\");\n\t}\n\tfor (int i = 0; i < total_except_lowest_highest\
    \ / 2; i++) {\n\t\tletter_grades.push_back(\"D+\");\n\t}\n\tfor (int i = 0; i\
    \ < lowest_grade; i++) {\n\t\tletter_grades.push_back(\"D\");\n\t}\n\tfor (int\
    \ i = 0; i < total_except_lowest_highest; i++) {\n\t\tletter_grades.push_back(\"\
    D-\");\n\t}\n\tfor (int i = 0; i < highest_grade; i++) {\n\t\tletter_grades.push_back(\"\
    E\");\n\t}\n\treturn letter_grades;", "\t// Create an empty vector of strings\n\
    \tstd::vector<std::string> letters;\n\t// For each grade\n\tfor (float grade :\
    \ grades) {\n\t\t// Get the letter grade using its value\n\t\tstd::string letter_grade\
    \ = numerical_grade_to_letter(grade);\n\t\t// Add it to the vector\n\t\tletters.push_back(letter_grade);\n\
    \t}\n\t// Return the vector\n\treturn letters;", "    // Write your code here\n\
    \    std::string result;\n    for(float a:grades) {\n        if(a >= 3.0)\n  \
    \      {\n            if(a>3.0)\n            {\n                if(a>3.0)\n  \
    \              {\n                    if(a>3.0)\n                    {\n     \
    \                   if(a>3.0)\n                        {\n                   \
    \         if(a>3.0)\n                            {\n                         \
    \       if(a>3.0)\n                                {\n                       \
    \             if(a>3.0)\n                                    {\n             \
    \                           if(a>3.0)\n                                      \
    \  {\n                                            if(a>3.0)\n                \
    \                            {\n                                             \
    \   if(a>3.0)\n                                                {\n           \
    \                                         if(a>3.0)\n                        \
    \                            {\n                                             \
    \           if(a>3.0)\n                                                      \
    \  {\n                                                            if(a>3.0)\n\
    \                                                            {\n             \
    \                                                   if(a>3.0)\n              \
    \                                                  {\n                       \
    \                                             if(a>3.0)\n                    \
    \                                                {\n                         \
    \                                               if(a>3.0)\n                  \
    \                                                      {\n                   \
    \                                                         if(a>3.0)\n        \
    \                                                                    {\n     \
    \                                                                           if(a>3.0)\n\
    \                                                                            \
    \    {\n                                                                     \
    \               if(a>3.0)\n                                                  \
    \                                  {\n                                       \
    \                                                 if(a>3.0)\n                \
    \                                                                        {\n \
    \                                                                            \
    \               if(a>3.0)\n                                                  \
    \                                          {\n                               \
    \                                                                 if(a>3.0)\n\
    \                                                                            \
    \                    {\n                                                     \
    \                                               if(a>3.0)\n                  \
    \                                                                            \
    \      {\n                                                                   \
    \                                     if(a>3.0)\n                            \
    \                                                                            {\n\
    \                                                                            \
    \                                if(a>3.0)\n                                 \
    \                                                                           {\n\
    \                                                                            \
    \                                    if(a>3.0)\n                             \
    \                                                                            \
    \       {\n                                                                  \
    \                                                  if(a>3.0)\n               \
    \                                                                            \
    \                         {\n                                                \
    \                                                                        if(a>3.0)\n\
    \                                                                            \
    \                                            {\n                             \
    \                                                                            \
    \                   if(a>3.0)\n                                              \
    \                                                                            \
    \  {\n                                                                       \
    \                                                         if(a>3.0)\n        \
    \                                                                            \
    \                                            {\n                             \
    \                                                                            \
    \                           if(a>3.0)\n                                      \
    \                                                                            \
    \                  {\n                                                       \
    \                                                                            \
    \     if(a>3.0)\n                                                            \
    \                                                                            {\n\
    \                                                                            \
    \                                                                if(a>3.0)\n \
    \                                                                            \
    \                                                               {\n          \
    \                                                                            \
    \                                                          if(a>3.0)\n       \
    \                                                                            \
    \                                                             {\n            \
    \                                                                            \
    \                                                            if(a>3.0)\n     \
    \                                                                            \
    \                                                                   {\n      \
    \                                                                            \
    \                                                                      if(a>3.0)\n\
    \                                                                            \
    \                                                                            {\n\
    \                                                                            \
    \                                                                            \
    \    if(a>3.0)\n                                                             \
    \                                                                            \
    \                   {\n                                                      \
    \                                                                            \
    \                              if(a>3.0)\n                                   \
    \                                                                            \
    \                                                 {\n                        \
    \                                                                            \
    \                                                                if(a>3.0)\n \
    \                                                                            \
    \                                                                            \
    \           {\n                                                              \
    \                                                                            \
    \                              if(a>3.0)\n                                   \
    \                                                                            \
    \                                                         {\n                \
    \                                                                            \
    \                                                                            \
    \    if(a>3.0)\n                                                             \
    \                                                                            \
    \                                   {\n                                      \
    \                                                                            \
    \                                                              if(a>3.0)\n   \
    \                                                                            \
    \                                                 ", "    std::vector<std::string>\
    \ letter_grades;\n    for(float grade: grades) {\n        auto it = std::find(std::begin(numerical_grade),\
    \ std::end(numerical_grade), grade);\n        if(it != std::end(numerical_grade))\
    \ {\n            letter_grades.push_back(std::to_string(it - std::begin(numerical_grade)\
    \ + 1));\n        }\n    }\n    return letter_grades;", "    std::vector<std::string>\
    \ grade_list;\n    // Write your code here.\n    for (float grade : grades) {\n\
    \        if (grade == 0) {\n            grade_list.append(\"E\");\n        } else\
    \ {\n            if (grade < 3.0) {\n                grade_list.append(\"D-\"\
    );\n            } else if (grade < 3.7) {\n                grade_list.append(\"\
    D+\");\n            } else if (grade < 4.0) {\n                grade_list.append(\"\
    D\");\n            } else if (grade < 4.7) {\n                grade_list.append(\"\
    D+\");\n            } else if (grade < 5.0) {\n                grade_list.append(\"\
    D\");\n            } else if (grade < 5.7) {\n                grade_list.append(\"\
    C+\");\n            } else if (grade < 6.0) {\n                grade_list.append(\"\
    C\");\n            } else if (grade < 6.7) {\n                grade_list.append(\"\
    C+\");\n            } else if (grade < 7.0) {\n                grade_list.append(\"\
    C\");\n            } else if (grade < 7.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 8.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 8.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 9.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 9.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 10.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 10.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 11.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 11.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 12.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 12.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 13.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 13.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 14.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 14.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 15.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 15.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 16.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 16.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 17.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 17.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 18.0) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 18.7) {\n                grade_list.append(\"\
    B-\");\n            } else if (grade < 19.0) {\n                ", "    assert(grades.size()\
    \ == 8);\n    std::sort(grades.begin(), grades.end());\n    std::vector<std::string>\
    \ letter_grade;\n    for (float g : grades) {\n        bool found = false;\n \
    \       for (size_t i = 0; i < letter_grade.size(); ++i) {\n            float\
    \ old_g = letter_grade[i].first;\n            float new_g = old_g + g;\n     \
    \       if (new_g > 5.0 || new_g < 0.0) {\n                letter_grade[i].first\
    \ = new_g;\n                found = true;\n                break;\n          \
    \  }\n        }\n        if (!found) {\n            letter_grade.push_back(std::make_pair(g,\
    \ numerical_letter_value(g)));\n        }\n    }\n    std::sort(letter_grade.begin(),\
    \ letter_grade.end());\n    return letter_grade;", "    std::vector<std::string>\
    \ letter_grades;\n    float sum = 0;\n    for (float g : grades)\n        sum\
    \ += g;\n    \n    int counter = 0;\n    \n    // Calculate the grade of each\
    \ student based on their sum\n    for (float g : grades)\n    {\n        letter_grades[counter]\
    \ = static_cast<char>((sum - g)/sum*100);\n        counter++;\n    }\n    \n \
    \   return letter_grades;", "    std::vector<std::string> results;\n    results.reserve(grades.size());\n\
    \    double sum_grades = 0.0;\n    for (int i = 0; i < grades.size(); ++i) {\n\
    \        sum_grades += grades[i];\n        if (grades[i] > 0 && grades[i] < 3.7)\
    \ {\n            results.push_back('A+');\n        } else if (grades[i] > 3.7\
    \ && grades[i] < 3.3) {\n            results.push_back('A');\n        } else if\
    \ (grades[i] > 3.3 && grades[i] < 3.0) {\n            results.push_back('A-');\n\
    \        } else if (grades[i] > 3.0 && grades[i] < 2.7) {\n            results.push_back('B+');\n\
    \        } else if (grades[i] > 2.7 && grades[i] < 2.3) {\n            results.push_back('B');\n\
    \        } else if (grades[i] > 2.3 && grades[i] < 2.0) {\n            results.push_back('B-');\n\
    \        } else if (grades[i] > 2.0 && grades[i] < 1.7) {\n            results.push_back('C+');\n\
    \        } else if (grades[i] > 1.7 && grades[i] < 1.3) {\n            results.push_back('C');\n\
    \        } else if (grades[i] > 1.3 && grades[i] < 1.0) {\n            results.push_back('C-');\n\
    \        } else if (grades[i] > 1.0 && grades[i] < 0.7) {\n            results.push_back('D+');\n\
    \        } else if (grades[i] > 0.7 && grades[i] < 0.0) {\n            results.push_back('D');\n\
    \        } else if (grades[i] == 0.0) {\n            results.push_back('E');\n\
    \        }\n    }\n    // Calculate the letter grade for each student\n    for\
    \ (int i = 0; i < grades.size(); ++i) {\n        if (grades[i] >= 0 && grades[i]\
    \ < sum_grades) {\n            results.push_back(results[grades[i] - 1]);\n  \
    \      }\n    }\n    return results;", "    // We want to store a list of letters\
    \ for each grade\n    std::vector<std::string> grades_str(grades.size());\n  \
    \  // Initialize a vector to store the letters\n    std::vector<std::string> letters(grades.size());\n\
    \    // For each grade in the grades vector\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        // Store the letter grade for grade i \n        letters[i] =\
    \ numerical_letter_grade(grades[i]);\n        // Store the letter grade for grade\
    \ i \n        grades_str[i] = letters[i];\n    }\n    return grades_str;", '    //
    Complete this function', "    std::vector <std::string> letter_grades;\n    float\
    \ a = 0.0;\n    float b = 0.0;\n    float c = 0.0;\n    float d = 0.0;\n    float\
    \ e = 0.0;\n    float f = 0.0;\n    float g = 0.0;\n    float h = 0.0;\n    float\
    \ i = 0.0;\n    float j = 0.0;\n    float k = 0.0;\n    float l = 0.0;\n    float\
    \ m = 0.0;\n    float n = 0.0;\n    float o = 0.0;\n    float p = 0.0;\n    float\
    \ q = 0.0;\n    float r = 0.0;\n    float s = 0.0;\n    float t = 0.0;\n    float\
    \ v = 0.0;\n    float w = 0.0;\n    float x = 0.0;\n    float y = 0.0;\n    float\
    \ z = 0.0;\n    float a = grades[0];\n    float b = grades[1];\n    float c =\
    \ grades[2];\n    float d = grades[3];\n    float e = grades[4];\n    float f\
    \ = grades[5];\n    float g = grades[6];\n    float h = grades[7];\n    float\
    \ i = grades[8];\n    float j = grades[9];\n    float k = grades[10];\n    float\
    \ l = grades[11];\n    float m = grades[12];\n    float n = grades[13];\n    float\
    \ o = grades[14];\n    float p = grades[15];\n    float q = grades[16];\n    float\
    \ r = grades[17];\n    float s = grades[18];\n    float t = grades[19];\n    float\
    \ v = grades[20];\n    float w = grades[21];\n    float x = grades[22];\n    float\
    \ y = grades[23];\n    float z = grades[24];\n    float a = grades[25];\n    float\
    \ b = grades[26];\n    float c = grades[27];\n    float d = grades[28];\n    float\
    \ e = grades[29];\n    float f = grades[30];\n    float g = grades[31];\n    float\
    \ h = grades[32];\n    float i = grades[33];\n    float j = grades[34];\n    float\
    \ k = grades[35];\n    float l = grades[36];\n    float m = grades[37];\n    float\
    \ n = grades[38];\n    float o = grades[39];\n    float p = grades[40];\n    float\
    \ q = grades[41];\n    float r = grades[42];\n    float s = grades[43];\n    float\
    \ t = grades[44", "    std::vector<std::string> letter_grade;\n    size_t total_grades\
    \ = grades.size();\n    size_t i;\n    for (i = 0; i < total_grades; i ++) {\n\
    \        if (grades[i] > 3.0) {\n            letter_grade.push_back(\"C+\");\n\
    \        } else if (grades[i] <= 3.0 && grades[i] >= 2.0) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grades[i] <= 2.0 && grades[i] >= 1.7) {\n          \
    \  letter_grade.push_back(\"C\");\n        } else if (grades[i] <= 1.7 && grades[i]\
    \ >= 1.0) {\n            letter_grade.push_back(\"C\");\n        } else if (grades[i]\
    \ <= 1.0 && grades[i] >= 0.7) {\n            letter_grade.push_back(\"C\");\n\
    \        } else if (grades[i] <= 0.7 && grades[i] >= 0.0) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grades[i] <= 0.0) {\n            letter_grade.push_back(\"\
    D+\");\n        } else {\n            letter_grade.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grade;", "  assert(grades.size() > 0);\n  std::transform(grades.begin(),\
    \ grades.end(), grades.begin(), ::fabs);\n  std::sort(grades.begin(), grades.end());\n\
    \  std::vector<std::string> result(grades.size());\n  int index = 0;\n  while\
    \ (index < grades.size()) {\n    if (grades[index] > 4.0 || grades[index] < 0.0)\
    \ {\n      result[index] = \"E\";\n    } else {\n      if (grades[index] > 3.5\
    \ || grades[index] == 0.0) {\n        if (grades[index] > 2.3 || grades[index]\
    \ < 0.0) {\n          if (grades[index] > 1.7 || grades[index] > 0.0) {\n    \
    \        if (grades[index] > 1.0 || grades[index] < 0.0) {\n              if (grades[index]\
    \ > 0.7) {\n                result[index] = \"D+\";\n              } else if (grades[index]\
    \ > 0.3 && grades[index] < 0.7) {\n                result[index] = \"D\";\n  \
    \            } else if (grades[index] > 0.0 && grades[index] < 0.3 || grades[index]\
    \ > 0.7 && grades[index] < 1.0) {\n                result[index] = \"D-\";\n \
    \             } else {\n                result[index] = \"C-\";\n            \
    \  }\n            } else if (grades[index] < 0.3 && grades[index] > 0.7) {\n \
    \             if (grades[index] > 0.7 || grades[index] < 1.0) {\n            \
    \    if (grades[index] > 0.2) {\n                  result[index] = \"B-\";\n \
    \               } else if (grades[index] > 0.0 && grades[index] < 0.2) {\n   \
    \               result[index] = \"B-\";\n                } else if (grades[index]\
    \ > 0.1 && grades[index] < 0.2) {\n                  result[index] = \"B-\";\n\
    \                } else if (grades[index] > 0.0 && grades[index] < 0.1) {\n  \
    \                result[index] = \"B-\";\n                } else {\n         \
    \         result[index] = \"B-\";\n                }\n              } else {\n\
    \                if (grades[index] > 0.0 && grades[index] < 0.1) {\n         \
    \         result[index] = \"B-\";\n                } else {\n                \
    \  result[index] = \"B-\";\n                }\n              }\n            }\
    \ else {\n              if (grades[index] > 0.3 || grades[index] < 0.0) {\n  \
    \              if (grades[index] > 0.2) {\n                  result[index] = \"\
    B-\";\n                } else if (grades[index] > 0.0 && grades[index] < 0.2)\
    \ {\n                  result[index] = \"B-\";\n                } else if (grades[index]\
    \ > 0.1 && grades[index] < 0.2) {\n                  result[index] = \"B-\";\n\
    \                } else if (grades[index] > 0.0 && grades[index] < 0.1) {\n  \
    \                result[index] = \"B-\";\n                } else {\n         \
    \         result[index] = \"B-\";\n                }\n              } else {\n\
    \                if (grades[index] > 0.0 && grades[index] < 0.1) {\n         \
    \         result[index] = \"B-\";\n                } else {\n                \
    \  result[index] = \"B-\";\n                }\n              }\n            }\n\
    \          } else {\n            if (grades[index] > 0.2 && grades[index] < 0.7)\
    \ {\n              result[index] = \"B-\";\n            } else if (grades[index]\
    \ > 0.0 && ", "    std::vector<std::string> letter_grade;\n    for(int i = 0;\
    \ i < grades.size(); i++) {\n        letter_grade.push_back(\"N/A\");\n    }\n\
    \n    for(int i = 0; i < grades.size(); i++) {\n        float gpa = grades[i];\n\
    \        if((gpa > 4.0) || (gpa < 3.7)) {\n            letter_grade[i] = \"A+\"\
    ;\n        }\n        else if((gpa > 3.7) && (gpa < 3.3)) {\n            letter_grade[i]\
    \ = \"A\";\n        }\n        else if((gpa > 3.3) && (gpa < 3)) {\n         \
    \   letter_grade[i] = \"A-\";\n        }\n        else if((gpa > 3.0) && (gpa\
    \ < 2.7)) {\n            letter_grade[i] = \"B+\";\n        }\n        else if((gpa\
    \ > 2.7) && (gpa < 2.3)) {\n            letter_grade[i] = \"B\";\n        }\n\
    \        else if((gpa > 2.3) && (gpa < 2)) {\n            letter_grade[i] = \"\
    B-\";\n        }\n        else if((gpa > 2.0) && (gpa < 1.7)) {\n            letter_grade[i]\
    \ = \"C+\";\n        }\n        else if((gpa > 1.7) && (gpa < 1.3)) {\n      \
    \      letter_grade[i] = \"C\";\n        }\n        else if((gpa > 1.3) && (gpa\
    \ < 1)) {\n            letter_grade[i] = \"C-\";\n        }\n        else if((gpa\
    \ > 1.0) && (gpa < 0.7)) {\n            letter_grade[i] = \"D+\";\n        }\n\
    \        else if((gpa > 0.7) && (gpa < 0.0)) {\n            letter_grade[i] =\
    \ \"D\";\n        }\n        else {\n            letter_grade[i] = \"D-\";\n \
    \       }\n    }\n\n    return letter_grade;", "\tstd::vector<std::string> grades_;\n\
    \tfor(std::size_t i = 0; i < grades.size(); ++i) {\n\t\tfloat gpa = grades[i];\n\
    \t\tassert(gpa >= 0.0 && gpa <= 5.0);\n\t\tstd::string letter;\n\t\tif(gpa >=\
    \ 3.0) {\n\t\t\tif(gpa > 2.7) {\n\t\t\t\tletter = \"B+\";\n\t\t\t} else if(gpa\
    \ > 2.3) {\n\t\t\t\tletter = \"B-\";\n\t\t\t} else if(gpa > 2.0) {\n\t\t\t\tletter\
    \ = \"C+\";\n\t\t\t} else if(gpa > 1.7) {\n\t\t\t\tletter = \"C\";\n\t\t\t} else\
    \ if(gpa > 1.0) {\n\t\t\t\tletter = \"C-\";\n\t\t\t} else if(gpa > 0.7) {\n\t\t\
    \t\tletter = \"D+\";\n\t\t\t} else if(gpa > 0.2) {\n\t\t\t\tletter = \"D\";\n\t\
    \t\t} else {\n\t\t\t\tletter = \"D-\";\n\t\t\t}\n\t\t} else if(gpa >= 0.0) {\n\
    \t\t\tif(gpa > 1.7) {\n\t\t\t\tletter = \"C\";\n\t\t\t} else if(gpa > 1.0) {\n\
    \t\t\t\tletter = \"C-\";\n\t\t\t} else if(gpa > 0.7) {\n\t\t\t\tletter = \"D+\"\
    ;\n\t\t\t} else if(gpa > 0.2) {\n\t\t\t\tletter = \"D\";\n\t\t\t} else {\n\t\t\
    \t\tletter = \"D-\";\n\t\t\t}\n\t\t} else if(gpa < 0.0) {\n\t\t\tif(gpa > 1.7)\
    \ {\n\t\t\t\tletter = \"E\";\n\t\t\t}\n\t\t}\n\t\tgrades_.push_back(letter);\n\
    \t}\n\treturn grades_;", "    std::vector<char> letterGrades;\n    for (float\
    \ grade : grades) {\n        letterGrades.push_back((grade < 3.0) ? 'A+' : (grade\
    \ > 3.7) ? 'A' : (grade > 3.3) ? 'A-' : (grade > 3.0) ? 'B+' : (grade > 2.7) ?\
    \ 'B' : (grade > 2.3) ? 'B-' : (grade > 2.0) ? 'C+' : (grade > 1.7) ? 'C' : (grade\
    \ > 1.3) ? 'C-' : (grade > 1.0) ? 'D+' : (grade > 0.7) ? 'D' : (grade > 0.0) ?\
    \ 'D-' : 'E');\n    }\n    return letterGrades;", "  assert(grades.size() == 12);\n\
    \  std::vector<std::string> grade_list;\n  grade_list.resize(12);\n  for (int\
    \ i = 0; i < (int) grades.size(); i++) {\n    if (grades[i] >= 4.0) {\n      grade_list[i]\
    \ = \"+\";\n    } else if (grades[i] >= 3.7) {\n      grade_list[i] = \"A\";\n\
    \    } else if (grades[i] >= 3.3) {\n      grade_list[i] = \"A-\";\n    } else\
    \ if (grades[i] >= 3.0) {\n      grade_list[i] = \"B+\";\n    } else if (grades[i]\
    \ >= 2.7) {\n      grade_list[i] = \"B\";\n    } else if (grades[i] >= 2.3) {\n\
    \      grade_list[i] = \"B-\";\n    } else if (grades[i] >= 2.0) {\n      grade_list[i]\
    \ = \"C+\";\n    } else if (grades[i] >= 1.7) {\n      grade_list[i] = \"C\";\n\
    \    } else if (grades[i] >= 1.3) {\n      grade_list[i] = \"C-\";\n    } else\
    \ if (grades[i] >= 1.0) {\n      grade_list[i] = \"D+\";\n    } else if (grades[i]\
    \ >= 0.7) {\n      grade_list[i] = \"D\";\n    } else if (grades[i] >= 0.0) {\n\
    \      grade_list[i] = \"D-\";\n    } else {\n      grade_list[i] = \"E\";\n \
    \   }\n  }\n  return grade_list;", "\t// TODO: your code goes here\n\tstd::vector<std::string>\
    \ grades_vector;\n\tfloat sum = 0;\n\tfor (auto &grade : grades)\n\t\tsum += grade;\n\
    \tfloat average = sum / grades.size();\n\tstd::cout << \"Average grade is: \"\
    \ << average << std::endl;\n\tfor (int i = 0; i < grades.size(); ++i) {\n\t\t\
    if (grades[i] > average) {\n\t\t\tif (grades[i] > 3.0)\n\t\t\t\tgrades_vector.push_back(\"\
    A-\");\n\t\t\telse if (grades[i] >= 3.0 && grades[i] < 3.7)\n\t\t\t\tgrades_vector.push_back(\"\
    A-\");\n\t\t\telse if (grades[i] >= 3.7)\n\t\t\t\tgrades_vector.push_back(\"A\"\
    );\n\t\t\telse\n\t\t\t\tgrades_vector.push_back(\"A+\");\n\t\t}\n\t\telse if (grades[i]\
    \ < average) {\n\t\t\tif (grades[i] < 3.0)\n\t\t\t\tgrades_vector.push_back(\"\
    B-\");\n\t\t\telse if (grades[i] >= 3.0 && grades[i] < 3.7)\n\t\t\t\tgrades_vector.push_back(\"\
    B-\");\n\t\t\telse if (grades[i] >= 3.7)\n\t\t\t\tgrades_vector.push_back(\"B\"\
    );\n\t\t\telse\n\t\t\t\tgrades_vector.push_back(\"B+\");\n\t\t}\n\t\telse if (grades[i]\
    \ == average) {\n\t\t\tif (grades[i] >= 3.0)\n\t\t\t\tgrades_vector.push_back(\"\
    C+\");\n\t\t\telse if (grades[i] >= 3.0 && grades[i] < 3.7)\n\t\t\t\tgrades_vector.push_back(\"\
    C+\");\n\t\t\telse if (grades[i] >= 3.7)\n\t\t\t\tgrades_vector.push_back(\"C\"\
    );\n\t\t\telse\n\t\t\t\tgrades_vector.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ == average) {\n\t\t\tif (grades[i] >= 3.0)\n\t\t\t\tgrades_vector.push_back(\"\
    C-\");\n\t\t\telse if (grades[i] >= 3.0 && grades[i] < 3.7)\n\t\t\t\tgrades_vector.push_back(\"\
    C-\");\n\t\t\telse if (grades[i] >= 3.7)\n\t\t\t\tgrades_vector.push_back(\"C\"\
    );\n\t\t\telse\n\t\t\t\tgrades_vector.push_back(\"C\");\n\t\t}\n\t\telse if (grades[i]\
    \ == average) {\n\t\t\tif (grades[i] >= 3.0)\n\t\t\t\tgrades_vector.push_back(\"\
    D+\");\n\t\t\telse if (grades[i] >= 3.0 && grades[i] < 3.7)\n\t\t\t\tgrades_vector.push_back(\"\
    D+\");\n\t\t\telse if (grades[i] >= 3.7)\n\t\t\t\tgrades_vector.push_back(\"D\"\
    );\n\t\t\telse\n\t\t\t\tgrades_vector.push_back(\"D\");\n\t\t}\n\t\telse if (grades[i]\
    \ == average) {\n\t\t\tif (grades[i] >= 3.0)\n\t\t\t\tgrades_vector.push_back(\"\
    D-\");\n\t\t\telse if (grades[i] >= 3.0 && grades[i] < 3.7)\n\t\t\t\tgrades_vector.push_back(\"\
    D-\");\n\t\t\telse if (grades[i] >= 3.7)\n\t\t\t\tgrades_vector.", "    std::vector<std::string>\
    \ letter_grades;\n    for (float grade : grades) {\n        if (grade >= 0.0 &&\
    \ grade < 1.7) {\n            letter_grades.push_back(\"A+\");\n        } else\
    \ if (grade >= 1.7 && grade < 2.3) {\n            letter_grades.push_back(\"A\"\
    );\n        } else if (grade >= 2.3 && grade < 3.0) {\n            letter_grades.push_back(\"\
    A-\");\n        } else if (grade >= 3.0 && grade < 4.0) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if (grade >= 4.0 && grade < 5.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if (grade >= 5.7 && grade < 6.3) {\n            letter_grades.push_back(\"\
    B-\");\n        } else if (grade >= 6.3 && grade < 7.0) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (grade >= 7.0 && grade < 8.0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (grade >= 8.0 && grade < 9.0) {\n            letter_grades.push_back(\"\
    C-\");\n        } else if (grade >= 9.0 && grade < 10.7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (grade >= 10.7 && grade < 11.3) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (grade >= 11.3 && grade < 12.0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else if (grade >= 12.0) {\n            letter_grades.push_back(\"\
    E\");\n        }\n    }\n    return letter_grades;", "    std::vector<std::string>\
    \ letter_grades;\n    for(int i = 0; i < grades.size(); i++) {\n        if(grades[i]\
    \ < 3.3) {\n            letter_grades.push_back(\"E\");\n        } else if(grades[i]\
    \ < 3.7) {\n            letter_grades.push_back(\"D-\");\n        } else if(grades[i]\
    \ < 4.0) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ < 4.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ < 4.7) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ < 5.0) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ < 5.3) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ < 5.7) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ < 6.0) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ < 6.3) {\n            letter_grades.push_back(\"B-\");\n        } else if(grades[i]\
    \ < 6.7) {\n            letter_grades.push_back(\"B+\");\n        } else if(grades[i]\
    \ < 7.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ < 7.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ < 7.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ < 8.0) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ < 8.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ < 8.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ < 9.0) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ < 9.3) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ < 9.7) {\n            letter_grades.push_back(\"C\");\n        } else if(grades[i]\
    \ < 10.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ < 10.3) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ < 10.7) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ < 11.0) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ < 11.3) {\n            letter_grades.push_back(\"C+\");\n        } else if(grades[i]\
    \ < 11.7) {\n            letter_grades.push_back(\"C+\");\n        ", "    std::vector<std::string>\
    \ letter_grades;\n    float min = std::numeric_limits<float>::max();\n    float\
    \ max = std::numeric_limits<float>::min();\n    for (float g : grades) {\n   \
    \     min = std::min(min, g);\n        max = std::max(max, g);\n    }\n    for\
    \ (int i = 0; i < grades.size(); i++) {\n        if (grades[i] < min) {\n    \
    \        letter_grades.push_back(\"E\");\n        } else if (grades[i] > max)\
    \ {\n            letter_grades.push_back(\"F\");\n        } else {\n         \
    \   char grade = ' ';\n            char grade2 = ' ';\n            if (grades[i]\
    \ > 3.7) {\n                grade = 'A+';\n            } else if (grades[i] <=\
    \ 3.3 && grades[i] > 3.0) {\n                grade = 'A';\n            } else\
    \ if (grades[i] <= 2.7 && grades[i] > 2.3) {\n                grade = 'A-';\n\
    \            } else if (grades[i] <= 2.0 && grades[i] > 1.7) {\n             \
    \   grade = 'B+';\n            } else if (grades[i] <= 1.7 && grades[i] > 1.0)\
    \ {\n                grade = 'B';\n            } else if (grades[i] <= 1.3 &&\
    \ grades[i] > 0.7) {\n                grade = 'B-';\n            } else if (grades[i]\
    \ <= 0.7 && grades[i] > 0.0) {\n                grade = 'C+';\n            } else\
    \ if (grades[i] <= 0.0 && grades[i] > -0.0) {\n                grade = 'C';\n\
    \            } else if (grades[i] <= -0.0 && grades[i] > -3.7) {\n           \
    \     grade = 'C-';\n            } else if (grades[i] <= -3.7 && grades[i] > -3.0)\
    \ {\n                grade = 'D+';\n            } else if (grades[i] <= -3.0 &&\
    \ grades[i] > -2.7) {\n                grade = 'D';\n            } else if (grades[i]\
    \ <= -2.7 && grades[i] > -2.3) {\n                grade = 'D-';\n            }\
    \ else if (grades[i] <= -2.0 && grades[i] > -1.7) {\n                grade = 'E';\n\
    \            } else if (grades[i] <= -1.7 && grades[i] > -1.0) {\n           \
    \     grade = 'F';\n            }\n            if (grade != ' ') {\n         \
    \       letter_grades.push_back(grade);\n            }\n        }\n    }\n   \
    \ return letter_grades;", "    std::vector<std::string> letter_grades;\n    float\
    \ average = std::accumulate(grades.begin(), grades.end(), 0);\n    // Use a map\
    \ instead of a loop to avoid repeating letters.\n    std::map<float, char> letter_grade;\n\
    \    letter_grade[average] = 'D'; letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0]\
    \ = 'C'; letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0] = 'C';\
    \ letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0]\
    \ = 'C';\n    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0] = 'C';\n\
    \    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0]\
    \ = 'C'; letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0] = 'C';\
    \ letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0]\
    \ = 'C';\n    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0] = 'C';\n\
    \    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0]\
    \ = 'C'; letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0] = 'C';\
    \ letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0]\
    \ = 'C';\n    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0] = 'C';\n\
    \    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0]\
    \ = 'C'; letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0] = 'C';\
    \ letter_grade[average/3.0] = 'C';\n    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0]\
    \ = 'C';\n    letter_grade[average/3.0] = 'C'; letter_grade[average/3.0] = 'C';\n\
    \    letter_grade[average/3.0]", "    // Write your code here\n    std::vector<std::string>\
    \ results;\n    std::string letter;\n    float sum=0;\n    for(int i=0; i<grades.size();\
    \ i++){\n        sum+=grades[i];\n        if(sum>=4.0f){\n            letter =\
    \ \"A+\";\n        }\n        else if(sum>=3.6f){\n            letter = \"A\"\
    ;\n        }\n        else if(sum>=3.4f){\n            letter = \"A-\";\n    \
    \    }\n        else if(sum>=3.2f){\n            letter = \"B+\";\n        }\n\
    \        else if(sum>=3.1f){\n            letter = \"B\";\n        }\n       \
    \ else if(sum>=3.0){\n            letter = \"B-\";\n        }\n        else if(sum>=2.7f){\n\
    \            letter = \"C+\";\n        }\n        else if(sum>=2.6f){\n      \
    \      letter = \"C\";\n        }\n        else if(sum>=2.4f){\n            letter\
    \ = \"C-\";\n        }\n        else if(sum>=2.2f){\n            letter = \"D+\"\
    ;\n        }\n        else if(sum>=2.1f){\n            letter = \"D\";\n     \
    \   }\n        else if(sum>=2.0){\n            letter = \"D-\";\n        }\n \
    \       else if(sum>=1.7f){\n            letter = \"E\";\n        }\n        else{\n\
    \            letter = \"D\";\n        }\n        results.push_back(letter);\n\
    \    }\n    return results;", "    // Your code goes here\n    std::vector<std::string>\
    \ answer;\n    int max_grade = 0;\n    float average = 0.0;\n    for (int i =\
    \ 0; i < grades.size(); i++) {\n        if (grades[i] > max_grade) {\n       \
    \     max_grade = grades[i];\n        }\n    }\n    float sum = max_grade + 0.0;\n\
    \    float divisor = sum + 1.0;\n    for (int i = 0; i < grades.size(); i++) {\n\
    \        if (grades[i] > max_grade) {\n            float difference = grades[i]\
    \ - max_grade;\n            float remainder = grade % divisor;\n            if\
    \ (remainder >= 0.0) {\n                float percentage = difference / divisor;\n\
    \                answer.push_back(std::to_string((percentage * 100 - 100.0)) +\
    \ '%' + std::to_string(percentage));\n            }\n        }\n    }\n    return\
    \ answer;", "    std::vector<std::string> letter_grade;\n    assert(grades.size()\
    \ == 12);\n    float gpa = grades[0];\n    letter_grade.push_back(\"A+\");\n \
    \   if (gpa > 3.7) {\n        letter_grade.push_back(\"A\");\n    } else if (gpa\
    \ > 3.3) {\n        letter_grade.push_back(\"A-\");\n    } else if (gpa > 3.0)\
    \ {\n        letter_grade.push_back(\"B+\");\n    } else if (gpa > 2.7) {\n  \
    \      letter_grade.push_back(\"B\");\n    } else if (gpa > 2.3) {\n        letter_grade.push_back(\"\
    B-\");\n    } else if (gpa > 2.0) {\n        letter_grade.push_back(\"C+\");\n\
    \    } else if (gpa > 1.7) {\n        letter_grade.push_back(\"C\");\n    } else\
    \ if (gpa > 1.3) {\n        letter_grade.push_back(\"C-\");\n    } else if (gpa\
    \ > 1.0) {\n        letter_grade.push_back(\"D+\");\n    } else if (gpa > 0.7)\
    \ {\n        letter_grade.push_back(\"D\");\n    } else if (gpa > 0.0) {\n   \
    \     letter_grade.push_back(\"D-\");\n    } else if (gpa <= 0.0) {\n        letter_grade.push_back(\"\
    E\");\n    }\n    return letter_grade;", "  std::vector<std::string> grades_str;\n\
    \  for (float i : grades) {\n    std::string grade;\n    if (i < 0) {\n      grade\
    \ = \"D-\";\n    } else if (i < 3.0) {\n      grade = \"C+\";\n    } else if (i\
    \ < 3.3) {\n      grade = \"C\";\n    } else if (i < 3.7) {\n      grade = \"\
    B+\";\n    } else if (i < 4.0) {\n      grade = \"B\";\n    } else if (i < 4.7)\
    \ {\n      grade = \"A-\";\n    } else if (i < 5.0) {\n      grade = \"A\";\n\
    \    } else if (i < 5.7) {\n      grade = \"A+\";\n    } else {\n      grade =\
    \ \"0\";\n    }\n    grades_str.push_back(grade);\n  }\n  return grades_str;",
  "    // Use assert to check if the vector size is 8\n    assert(grades.size() ==\
    \ 8);\n    std::vector<std::string> letter_grade;\n    \n    // loop through grades\
    \ and calculate letter grade\n    for (float grade: grades) {\n        // Check\
    \ if grade is less than 4.0\n        if (grade <= 3.9) {\n            letter_grade.push_back(\"\
    A+\");\n        } else if (grade <= 3.8) {\n            letter_grade.push_back(\"\
    A\");\n        } else if (grade <= 3.7) {\n            letter_grade.push_back(\"\
    A-\");\n        } else if (grade <= 3.6) {\n            letter_grade.push_back(\"\
    B+\");\n        } else if (grade <= 3.5) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (grade <= 3.4) {\n            letter_grade.push_back(\"\
    B-\");\n        } else if (grade <= 3.3) {\n            letter_grade.push_back(\"\
    C+\");\n        } else if (grade <= 3.2) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grade <= 3.1) {\n            letter_grade.push_back(\"\
    C-\");\n        } else if (grade <= 3.0) {\n            letter_grade.push_back(\"\
    D+\");\n        } else if (grade <= 2.9) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grade <= 2.8) {\n            letter_grade.push_back(\"\
    D-\");\n        } else if (grade <= 2.7) {\n            letter_grade.push_back(\"\
    E\");\n        } else {\n            letter_grade.push_back(\"F\");\n        }\n\
    \    }\n    return letter_grade;", "    std::vector<std::string> grades_result;\
    \ \n    assert(grades.size() > 0);\n    float sum = 0;\n    for (int i = 0; i\
    \ < grades.size(); i++) {\n        grades_result.push_back(\"\");\n        float\
    \ grade = grades[i];\n        grades_result[i].reserve(10);\n        if (grade\
    \ == 0) {\n            grades_result[i] = \"E\";\n            continue;\n    \
    \    } else if (grade == 1) {\n            grades_result[i] = \"F\";\n       \
    \     continue;\n        } else if (grade < 2) {\n            grades_result[i]\
    \ = \"D\";\n            continue;\n        } else if (grade < 3) {\n         \
    \   grades_result[i] = \"C\";\n            continue;\n        } else if (grade\
    \ < 4) {\n            grades_result[i] = \"B\";\n            continue;\n     \
    \   } else if (grade < 5) {\n            grades_result[i] = \"A\";\n         \
    \   continue;\n        } else if (grade < 6) {\n            grades_result[i] =\
    \ \"A+\";\n            continue;\n        } else if (grade < 7) {\n          \
    \  grades_result[i] = \"A-\";\n            continue;\n        } else if (grade\
    \ < 8) {\n            grades_result[i] = \"B+\";\n            continue;\n    \
    \    } else if (grade < 9) {\n            grades_result[i] = \"B-\";\n       \
    \     continue;\n        } else {\n            grades_result[i] = \"C+\";\n  \
    \          continue;\n        }\n        sum += grade;\n    }\n    float div =\
    \ sum / grades.size();\n    int count = 0;\n    for (int i = 0; i < grades.size();\
    \ i++) {\n        float grade = grades[i];\n        if (grade == 0) {\n      \
    \      grades_result[i] = \"E\";\n            continue;\n        } else if (grade\
    \ == 1) {\n            grades_result[i] = \"F\";\n            continue;\n    \
    \    } else if (grade < 2) {\n            grades_result[i] = \"D\";\n        \
    \    continue;\n        } else if (grade < 3) {\n            grades_result[i]\
    \ = \"C\";\n            continue;\n        } else if (grade < 4) {\n         \
    \   grades_result[i] = \"B\";\n            continue;\n        } else if (grade\
    \ < 5) {\n            grades_result[i] = \"A\";\n            continue;\n     \
    \   } else if (grade < 6) {\n            grades_result[i] = \"A+\";\n        \
    \    continue;\n        } else if (grade < 7) {\n            grades_result[i]\
    \ = \"A-\";\n            continue;\n        } else if (grade < 8) {\n        \
    \    grades_result[i] = \"B+\";\n            continue;\n        } else if (grade\
    \ < 9) {\n            grades_result[i] = \"B-\";\n            continue;\n    \
    \    } else {\n            grades_result[i] = \"C+\";\n            continue;\n\
    \        }\n        if (grade == div)\n            grades_result[count] = \"D+\"\
    ;\n        else if (gra", "    // TODO Auto-generated method stub\n    assert(grades.size()\
    \ <= 7);\n    std::vector<std::string> letter_grade;\n    for (int i = 0; i <\
    \ grades.size(); i++) {\n        if (grades[i] >= 3.5){\n            letter_grade.push_back(\"\
    A+\");\n        }\n        else if (grades[i] >= 3.0){\n            letter_grade.push_back(\"\
    A\");\n        }\n        else if (grades[i] >= 2.5){\n            letter_grade.push_back(\"\
    A-\");\n        }\n        else if (grades[i] >= 2.0){\n            letter_grade.push_back(\"\
    B+\");\n        }\n        else if (grades[i] >= 2.0){\n            letter_grade.push_back(\"\
    B\");\n        }\n        else if (grades[i] >= 1.5){\n            letter_grade.push_back(\"\
    B-\");\n        }\n        else if (grades[i] >= 1.0){\n            letter_grade.push_back(\"\
    C+\");\n        }\n        else if (grades[i] >= 1.0){\n            letter_grade.push_back(\"\
    C\");\n        }\n        else if (grades[i] >= 0.0){\n            letter_grade.push_back(\"\
    D+\");\n        }\n        else if (grades[i] >= 0.0){\n            letter_grade.push_back(\"\
    D\");\n        }\n        else {\n            letter_grade.push_back(\"E\");\n\
    \        }\n    }\n    return letter_grade;", "    std::vector<std::string> letter_grade;\n\
    \    // The code below is very similar to the code that you have been given \n\
    \    // to solve the problem.\n    // The code is written by copy-pasting the\
    \ code from the previous part\n    // of the question, so it might have some mistakes.\n\
    \    // The code below is the solution for your assignment\n    assert(grades.size()\
    \ >= 2);\n    assert(grades[0] == 0.0 && grades[1] < 1.0);\n    float mean = grades[0]\
    \ + grades[1];\n    float difference = grades[1] - grades[0];\n    if (difference\
    \ < 0) {\n        std::swap(grades[1], difference);\n    }\n    float gpa_minus_mean\
    \ = grades[0] - mean;\n    float gpa = grades[1] - mean;\n    if (gpa < 0) {\n\
    \        std::swap(grades[1], gpa);\n    }\n    float gpa_plus_mean = grades[0]\
    \ + mean;\n    float gpa_mean = grades[1] + mean;\n    if (gpa_mean < 0) {\n \
    \       std::swap(grades[1], gpa_mean);\n    }\n    float difference;\n    float\
    \ gpa;\n    float mean;\n    float gpa_plus_mean;\n    float gpa_minus_mean;\n\
    \    for (int i = 0; i < grades.size(); i++) {\n        gpa = grades[i];\n   \
    \     mean = grades[i + 1];\n        gpa_plus_mean = grades[i] + (gpa);\n    \
    \    gpa_minus_mean = grades[i] - (gpa);\n        if (gpa_plus_mean > gpa_minus_mean)\
    \ {\n            difference = gpa_plus_mean - gpa_minus_mean;\n            difference\
    \ = difference * 100 / mean;\n            letter_grade.push_back(std::to_string(difference)\
    \ + \"%\");\n        }\n        else if (gpa_plus_mean < gpa_minus_mean) {\n \
    \           difference = gpa_minus_mean - gpa_plus_mean;\n            difference\
    \ = difference * 100 / mean;\n            letter_grade.push_back(std::to_string(difference)\
    \ + \"%\");\n        }\n        else if (gpa_plus_mean == gpa_minus_mean) {\n\
    \            difference = gpa - mean;\n            difference = difference * 100\
    \ / mean;\n            letter_grade.push_back(std::to_string(difference) + \"\
    %\");\n        }\n    }\n    return letter_grade;", "    // Write your code here\n\
    \    std::vector<std::string> result;\n    for(float grade: grades) {\n      \
    \  if(grade >= 0.0 && grade <= 3.7){\n            result.push_back(\"A+\");\n\
    \        }\n        else if(grade > 3.7 && grade <= 3.3){\n            result.push_back(\"\
    A\");\n        }\n        else if(grade > 3.3 && grade <= 3.0){\n            result.push_back(\"\
    A-\");\n        }\n        else if(grade > 3.0 && grade <= 2.7){\n           \
    \ result.push_back(\"B+\");\n        }\n        else if(grade > 2.7 && grade <=\
    \ 2.3){\n            result.push_back(\"B\");\n        }\n        else if(grade\
    \ > 2.3 && grade <= 2.0){\n            result.push_back(\"B-\");\n        }\n\
    \        else if(grade > 2.0 && grade <= 1.7){\n            result.push_back(\"\
    C+\");\n        }\n        else if(grade > 1.7 && grade <= 1.3){\n           \
    \ result.push_back(\"C\");\n        }\n        else if(grade > 1.3 && grade <=\
    \ 1.0){\n            result.push_back(\"C-\");\n        }\n        else if(grade\
    \ > 1.0 && grade <= 0.7){\n            result.push_back(\"D+\");\n        }\n\
    \        else if(grade > 0.7 && grade <= 0.0){\n            result.push_back(\"\
    D\");\n        }\n        else{\n            result.push_back(\"E\");\n      \
    \  }\n    }\n    return result;", "    assert(grades.size() >= 1);\n    std::vector<std::string>\
    \ letter_grades;\n    \n    int max_grade = grades[0];\n    int min_grade = grades[0];\n\
    \    \n    for (std::size_t i = 0; i < grades.size(); i++) {\n        if (grades[i]\
    \ > max_grade) {\n            max_grade = grades[i];\n        }\n        if (grades[i]\
    \ < min_grade) {\n            min_grade = grades[i];\n        }\n    }\n\n   \
    \ for (std::size_t i = 1; i < grades.size(); i++) {\n        double gpa = grades[i]\
    \ / max_grade;\n        double lettergrade = static_cast<double>(max_grade) /\
    \ static_cast<double>(i+1.0);\n        \n        if (gpa < 3.0 && lettergrade\
    \ < 3.0) {\n            letter_grades.push_back(\"A+\");\n        }\n        else\
    \ if (gpa < 3.0 && lettergrade >= 3.0) {\n            letter_grades.push_back(\"\
    A\");\n        }\n        else if (gpa < 3.0 && lettergrade < 3.0) {\n       \
    \     letter_grades.push_back(\"A-\");\n        }\n        else if (gpa >= 3.0\
    \ && lettergrade < 3.0) {\n            letter_grades.push_back(\"B+\");\n    \
    \    }\n        else if (gpa >= 3.0 && lettergrade >= 3.0) {\n            letter_grades.push_back(\"\
    B\");\n        }\n        else if (gpa >= 3.0 && lettergrade < 3.0) {\n      \
    \      letter_grades.push_back(\"B-\");\n        }\n        else if (gpa >= 3.0\
    \ && lettergrade >= 3.0) {\n            letter_grades.push_back(\"C+\");\n   \
    \     }\n        else if (gpa >= 3.0 && lettergrade >= 3.0) {\n            letter_grades.push_back(\"\
    C\");\n        }\n        else if (gpa >= 3.0 && lettergrade < 3.0) {\n      \
    \      letter_grades.push_back(\"C-\");\n        }\n        else if (gpa >= 3.0\
    \ && lettergrade >= 3.0) {\n            letter_grades.push_back(\"D+\");\n   \
    \     }\n        else if (gpa >= 3.0 && lettergrade >= 3.0) {\n            letter_grades.push_back(\"\
    D\");\n        }\n        else if (gpa >= 3.0 && lettergrade >= 3.0) {\n     \
    \       letter_grades.push_back(\"D-\");\n        }\n        else if (lettergrade\
    \ >= 3.0) {\n            letter_grades.push_back(\"E\");\n        }\n    }\n \
    \   return letter_grades;", "    // Write your code here\n    std::vector<std::string>\
    \ letter_grades;\n    int min_grade = grades[0];\n    int max_grade = grades[0];\n\
    \    for (int i = 1; i < grades.size(); ++i) {\n        if (grades[i] > max_grade)\
    \ max_grade = grades[i];\n        if (grades[i] < min_grade) min_grade = grades[i];\n\
    \    }\n    int mid = max_grade - min_grade + 1;\n    for (int i = 0; i < mid;\
    \ ++i) {\n        int g = (min_grade + max_grade) / 2;\n        if (grades[i]\
    \ < g) {\n            letter_grades.push_back(\"D-\");\n        } else if (grades[i]\
    \ > g) {\n            letter_grades.push_back(\"D\");\n        } else {\n    \
    \        letter_grades.push_back(\"D+\");\n        }\n    }\n    for (int i =\
    \ mid + 1; i < grades.size(); ++i) {\n        if (grades[i] < mid) {\n       \
    \     letter_grades.push_back(\"D-\");\n        } else if (grades[i] > mid) {\n\
    \            letter_grades.push_back(\"D\");\n        } else {\n            letter_grades.push_back(\"\
    D+\");\n        }\n    }\n    for (int i = mid; i > -1; --i) {\n        int g\
    \ = (min_grade + max_grade) / 2;\n        if (grades[i] < g) {\n            letter_grades.push_back(\"\
    D-\");\n        } else if (grades[i] > g) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D+\");\n      \
    \  }\n    }\n    for (int i = (mid); i >= 0; --i) {\n        int g = (min_grade\
    \ + max_grade) / 2;\n        if (grades[i] < g) {\n            letter_grades.push_back(\"\
    D-\");\n        } else if (grades[i] > g) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D+\");\n      \
    \  }\n    }\n    for (int i = grades.size(); i > -1; --i) {\n        int g = (min_grade\
    \ + max_grade) / 2;\n        if (grades[i] < g) {\n            letter_grades.push_back(\"\
    D-\");\n        } else if (grades[i] > g) {\n            letter_grades.push_back(\"\
    D\");\n        } else {\n            letter_grades.push_back(\"D+\");\n      \
    \  }\n    }\n    for (int i = 0; i < grades.size(); ++i) {\n        if (grades[i]\
    \ < mid) {\n            letter_grades.push_back(\"D-\");\n        } else if (grades[i]\
    \ > mid) {\n            letter_grades.push_back(\"D\");\n        } else {\n  \
    \          letter_grades.push_back(\"D+\");\n        }\n    }\n    for (int i\
    \ = 0; i < mid; ++i) {\n        int g = (min_grade + max_grade) / 2;\n       \
    \ if (grades[i] < g) {\n            letter_grades.push_back(\"D-\");\n       \
    \ } else if (grades[i] > g) {\n            letter_", "    assert(grades.size()\
    \ <= 100);\n    assert(grades.size() >= 1);\n    std::vector<std::string> result;\n\
    \    result.reserve(grades.size());\n    for (float grade : grades) {\n      \
    \  if (grade >= 3.0) {\n            result.push_back(\"A+\");\n        } else\
    \ if (grade >= 2.7) {\n            result.push_back(\"B+\");\n        } else if\
    \ (grade >= 2.3) {\n            result.push_back(\"B-\");\n        } else if (grade\
    \ >= 2.0) {\n            result.push_back(\"C+\");\n        } else if (grade >=\
    \ 1.7) {\n            result.push_back(\"C\");\n        } else if (grade >= 1.3)\
    \ {\n            result.push_back(\"C-\");\n        } else if (grade >= 1.0) {\n\
    \            result.push_back(\"D+\");\n        } else if (grade >= 0.7) {\n \
    \           result.push_back(\"D\");\n        } else if (grade >= 0.0) {\n   \
    \         result.push_back(\"D-\");\n        } else {\n            result.push_back(\"\
    E\");\n        }\n    }\n    return result;", "    std::vector<std::string> letter_grades;\n\
    \    for (float grade : grades) {\n        float gpa = std::round(grade);\n  \
    \      int gpa_pos = 0;\n        for (size_t i = 0; i < letter_grades.size();\
    \ ++i) {\n            float other_grade = grades[i];\n            if (gpa_pos\
    \ == i) {\n                letter_grades[i] = \"\";\n            }\n         \
    \   if (gpa > other_grade) {\n                letter_grades[i] = \"A+\";\n   \
    \         }\n            else if (gpa < other_grade) {\n                letter_grades[i]\
    \ = \"D-\";\n            }\n            else {\n                letter_grades[i]\
    \ = \"D\";\n            }\n        }\n        std::sort(letter_grades.begin(),\
    \ letter_grades.end());\n    }\n    return letter_grades;", "\tstd::vector<std::string>\
    \ grade_list;\n\tfloat gpa = grades.front();\n\tfor (int i = 0; i < grades.size();\
    \ i++)\n\t{\n\t\tif (gpa < grades[i])\n\t\t{\n\t\t\tgrade_list[i] = \"E\";\n\t\
    \t}\n\t\telse if (gpa > grades[i])\n\t\t{\n\t\t\tif (gpa - grades[i] < 3.0)\n\t\
    \t\t{\n\t\t\t\tgrade_list[i] = \"D-\";\n\t\t\t}\n\t\t\telse if (gpa - grades[i]\
    \ > 3.0 && gpa - grades[i] < 3.7)\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"D\";\n\t\
    \t\t}\n\t\t\telse if (gpa - grades[i] > 3.7 && gpa - grades[i] < 4.0)\n\t\t\t\
    {\n\t\t\t\tgrade_list[i] = \"C-\";\n\t\t\t}\n\t\t\telse if (gpa - grades[i] >\
    \ 4.0 && gpa - grades[i] < 4.3)\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"C\";\n\t\t\
    \t}\n\t\t\telse if (gpa - grades[i] > 4.3)\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"\
    B-\";\n\t\t\t}\n\t\t\telse if (gpa - grades[i] > 4.3 && gpa - grades[i] < 4.6)\n\
    \t\t\t{\n\t\t\t\tgrade_list[i] = \"B\";\n\t\t\t}\n\t\t\telse if (gpa - grades[i]\
    \ > 4.6)\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"A-\";\n\t\t\t}\n\t\t\telse if (gpa\
    \ - grades[i] > 4.6)\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"A\";\n\t\t\t}\n\t\t\t\
    else\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"A+\";\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\
    {\n\t\t\tif (gpa - grades[i] < 3.0)\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"B+\";\n\
    \t\t\t}\n\t\t\telse if (gpa - grades[i] > 3.0 && gpa - grades[i] < 3.7)\n\t\t\t\
    {\n\t\t\t\tgrade_list[i] = \"B\";\n\t\t\t}\n\t\t\telse if (gpa - grades[i] > 3.7\
    \ && gpa - grades[i] < 4.0)\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"B-\";\n\t\t\t\
    }\n\t\t\telse if (gpa - grades[i] > 4.0 && gpa - grades[i] < 4.3)\n\t\t\t{\n\t\
    \t\t\tgrade_list[i] = \"B-\";\n\t\t\t}\n\t\t\telse if (gpa - grades[i] > 4.3)\n\
    \t\t\t{\n\t\t\t\tgrade_list[i] = \"B+\";\n\t\t\t}\n\t\t\telse if (gpa - grades[i]\
    \ > 4.3 && gpa - grades[i] < 4.6)\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"B+\";\n\t\
    \t\t}\n\t\t\telse if (gpa - grades[i] > 4.6)\n\t\t\t{\n\t\t\t\tgrade_list[i] =\
    \ \"B-\";\n\t\t\t}\n\t\t\telse if (gpa - grades[i] > 4.6)\n\t\t\t{\n\t\t\t\tgrade_list[i]\
    \ = \"B-\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tgrade_list[i] = \"B+\";\n\t\
    \t\t}\n\t\t}\n\t\tg", "    std::vector<std::string> letter_grades;\n    for (float\
    \ grade: grades) {\n        std::string letter_grade;\n        if (grade <= 3.7)\
    \ {\n            letter_grade += \"A+\";\n        } else if (grade <= 3.3) {\n\
    \            letter_grade += \"A-\";\n        } else if (grade <= 2.7) {\n   \
    \         letter_grade += \"B+\";\n        } else if (grade <= 2.3) {\n      \
    \      letter_grade += \"B-\";\n        } else if (grade <= 1.7) {\n         \
    \   letter_grade += \"C+\";\n        } else if (grade <= 1) {\n            letter_grade\
    \ += \"C-\";\n        } else if (grade <= 0.7) {\n            letter_grade +=\
    \ \"D+\";\n        } else if (grade <= 0) {\n            letter_grade += \"D-\"\
    ;\n        } else {\n            letter_grade += \"E\";\n        }\n        letter_grades.push_back(letter_grade);\n\
    \    }\n    return letter_grades;", "    if (grades.size() == 0) return {};\n\
    \    std::vector<int> grades_int;\n    for (float grade : grades) {\n        grades_int.push_back((int)grade\
    \ * 10);\n    }\n    \n    std::vector<std::string> letter_grades;\n    for (std::vector<int>::iterator\
    \ it = grades_int.begin(); it != grades_int.end(); ++it) {\n        int current_grade_number\
    \ = *it;\n        if (current_grade_number >= 7) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if (current_grade_number >= 3) {\n            letter_grades.push_back(\"\
    D\");\n        } else if (current_grade_number >= 1) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if (current_grade_number >= 0) {\n            letter_grades.push_back(\"\
    C\");\n        } else if (current_grade_number < 0) {\n            letter_grades.push_back(\"\
    C\");\n        } else {\n            letter_grades.push_back(\"E\");\n       \
    \ }\n    }\n    return letter_grades;", "    std::vector<std::string> grade_names;\n\
    \    for (int i=0; i<grades.size(); ++i) {\n        if (grades[i] >= 3.0 && grades[i]\
    \ <= 3.6) {\n            grade_names.push_back(\"A+\");\n        } else if (grades[i]\
    \ >= 3.7 && grades[i] <= 3.3) {\n            grade_names.push_back(\"A\");\n \
    \       } else if (grades[i] >= 3.3 && grades[i] <= 3.0) {\n            grade_names.push_back(\"\
    A- \");\n        } else if (grades[i] >= 3.0 && grades[i] <= 2.7) {\n        \
    \    grade_names.push_back(\"B+\");\n        } else if (grades[i] >= 2.7 && grades[i]\
    \ <= 2.3) {\n            grade_names.push_back(\"B\");\n        } else if (grades[i]\
    \ >= 2.3 && grades[i] <= 2.0) {\n            grade_names.push_back(\"B-\");\n\
    \        } else if (grades[i] >= 2.0 && grades[i] <= 1.7) {\n            grade_names.push_back(\"\
    C+\");\n        } else if (grades[i] >= 1.7 && grades[i] <= 1.3) {\n         \
    \   grade_names.push_back(\"C\");\n        } else if (grades[i] >= 1.3 && grades[i]\
    \ <= 1.0) {\n            grade_names.push_back(\"C-\");\n        } else if (grades[i]\
    \ >= 1.0 && grades[i] <= 0.7) {\n            grade_names.push_back(\"D+\");\n\
    \        } else if (grades[i] >= 0.7 && grades[i] <= 0.0) {\n            grade_names.push_back(\"\
    D\");\n        } else {\n            grade_names.push_back(\"E\");\n        }\n\
    \    }\n    return grade_names;", "    std::vector<std::string> grades_as_letters;\n\
    \    for (auto&& grade : grades) {\n        std::ostringstream str;\n        str\
    \ << grade;\n        std::string grade_string = str.str();\n        grade_string.erase(std::remove(grade_string.begin(),\
    \ grade_string.end(), '.'), grade_string.end());\n        grades_as_letters.push_back(grade_string);\n\
    \    }\n    return grades_as_letters;", "    std::vector<std::string> grades_;\n\
    \    grades_.reserve(grades.size());\n    for (float g : grades) {\n        if\
    \ (g < 0.0) \n            grades_.emplace_back(\"E\");\n        else if (g >=\
    \ 0.0 && g > 0.7)\n            grades_.emplace_back(\"D+\");\n        else if\
    \ (g >= 0.7 && g > 0.0)\n            grades_.emplace_back(\"D\");\n        else\
    \ if (g >= 0.0 || g < 0.7)\n            grades_.emplace_back(\"B-\");\n      \
    \  else if (g >= 0.3 && g < 1.0)\n            grades_.emplace_back(\"B-\");\n\
    \        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"B-\"\
    );\n        else if (g > 0.3 && g < 1.0)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g > 0.3 && g < 1.0)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g > 0.3 && g < 1.0)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g > 0.3 && g < 1.0)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g > 0.3 && g < 1.0)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g > 0.3 && g < 1.0)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g > 0.3 && g < 1.0)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g > 0.3 && g < 1.0)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g >= 1.0 || g < 0.3)\n            grades_.emplace_back(\"\
    B-\");\n        else if (g > 0.3 && g", "    std::vector<std::string> letter_grades;\n\
    \    for(float grade : grades) {\n        if(grade >= 3.7) {\n            letter_grades.push_back(\"\
    A+\");\n        } else if(grade >= 3.3) {\n            letter_grades.push_back(\"\
    A\");\n        } else if(grade >= 2) {\n            letter_grades.push_back(\"\
    B+\");\n        } else if(grade >= 1.7) {\n            letter_grades.push_back(\"\
    B\");\n        } else if(grade >= 1) {\n            letter_grades.push_back(\"\
    C+\");\n        } else if(grade >= 0.7) {\n            letter_grades.push_back(\"\
    C\");\n        } else if(grade >= 0) {\n            letter_grades.push_back(\"\
    D+\");\n        } else if(grade <= -0.7) {\n            letter_grades.push_back(\"\
    D\");\n        } else if(grade <= 0) {\n            letter_grades.push_back(\"\
    D-\");\n        } else {\n            letter_grades.push_back(\"E\");\n      \
    \  }\n    }\n    return letter_grades;", "  // We need two sets of grades.\n \
    \ // One set contains the non-numeric grades (3.5, 3.3, ..., 1.2)\n  // and the\
    \ other set contains only numeric grades (2.3, 2.0, 1.7, 1.3, ...)\n  std::set<double>\
    \ numeric_grades;\n  std::set<float> non_numeric_grades;\n  \n  // We will save\
    \ the grades in a vector\n  std::vector<char> grades_char;\n  \n  // Loop through\
    \ all grades and put them into the two sets\n  for (float grade : grades) {\n\
    \    if (grade > 4.0) \n      numeric_grades.insert(grade);\n    else\n      non_numeric_grades.insert(grade);\n\
    \  }\n\n  // Loop through all numeric grades\n  for (double grade : numeric_grades)\
    \ {\n    // If no grade is found, break the loop\n    if (non_numeric_grades.find(grade)\
    \ == non_numeric_grades.end())\n      break;\n    // Get the first letter grade\
    \ \n    auto letter_grade = grade / 4.0 + 'A';\n    // Get the second letter grade\n\
    \    auto second_letter_grade = grade / 3.7 + 'A';\n    // Get the third letter\
    \ grade\n    auto third_letter_grade = grade / 3.3 + 'A';\n    // Get the fourth\
    \ letter grade\n    auto fourth_letter_grade = grade / 3.0 + 'A';\n    // Get\
    \ the fifth letter grade\n    auto fifth_letter_grade = grade / 2.7 + 'A';\n \
    \   // Get the sixth letter grade\n    auto sixth_letter_grade = grade / 2.3 +\
    \ 'A';\n    // Get the seventh letter grade\n    auto seventh_letter_grade = grade\
    \ / 2.0 + 'A';\n    // Get the eighth letter grade\n    auto eighth_letter_grade\
    \ = grade / 1.7 + 'A';\n    // Get the ninth letter grade\n    auto ninth_letter_grade\
    \ = grade / 1.3 + 'A';\n    // Get the tenth letter grade\n    auto tenth_letter_grade\
    \ = grade / 1.0 + 'A';\n    // Get the eleventh letter grade\n    auto eleventh_letter_grade\
    \ = grade / 0.7 + 'A';\n    // Get the twelfth letter grade\n    auto twelfth_letter_grade\
    \ = grade / 0.0 + 'A';\n    // Get the grade character\n    char grade = letter_grade\
    \ + second_letter_grade + third_letter_grade + \n    fourth_letter_grade + fifth_letter_grade\
    \ + sixth_letter_grade + \n    seventh_letter_grade + eighth_letter_grade + ninth_letter_grade\
    \ + \n    tenth_letter_grade + ele", "    std::string result;\n    // TODO Auto-generated\
    \ method stub\n    for(int i=0; grades.size(); i++){\n        if(grades[i]>=3.0\
    \ || grades[i]>=3.3){\n            result += std::string(grades[i] - 3.0) + (grades[i]\
    \ - 3.3) + '+';\n        }\n        else if(grades[i]>=3.7 && grades[i]<3.3){\n\
    \            result += std::string(grades[i] - 3.7) + (grades[i] - 3.3) + '-';\n\
    \        }\n        else if(grades[i]>=2.7 && grades[i]<3.3){\n            result\
    \ += std::string(grades[i] - 2.7) + (grades[i] - 3.3) + '-';\n        }\n    \
    \    else if(grades[i]>=2.3 && grades[i]<2.7){\n            result += std::string(grades[i]\
    \ - 2.3) + (grades[i] - 2.7) + '-';\n        }\n        else if(grades[i]>=1.7\
    \ && grades[i]<2.7){\n            result += std::string(grades[i] - 1.7) + (grades[i]\
    \ - 2.7) + '-';\n        }\n        else if(grades[i]>=3.0 && grades[i]<1.7){\n\
    \            result += std::string(grades[i] - 3.0) + (grades[i] - 1.7) + '-';\n\
    \        }\n        else if(grades[i]>=3.7 && grades[i]<3.0){\n            result\
    \ += std::string(grades[i] - 3.7) + (grades[i] - 3.0) + '-';\n        }\n    \
    \    else if(grades[i]>=1.7 && grades[i]<3.7){\n            result += std::string(grades[i]\
    \ - 1.7) + (grades[i] - 3.7) + '-';\n        }\n        else if(grades[i]>=2.0\
    \ && grades[i]<1.7){\n            result += std::string(grades[i] - 2.0) + (grades[i]\
    \ - 1.7) + '-';\n        }\n        else if(grades[i]>=1.7 && grades[i]<2.0){\n\
    \            result += std::string(grades[i] - 1.7) + (grades[i] - 2.0) + '-';\n\
    \        }\n        else if(grades[i]>=3.0 && grades[i]<2.0){\n            result\
    \ += std::string(grades[i] - 3.0) + (grades[i] - 2.0) + '-';\n        }\n    \
    \    else if(grades[i]>=1.7 && grades[i]<3.0){\n            result += std::string(grades[i]\
    \ - 1.7) + (grades[i] - 3.0) + '-';\n        }\n        else if(grades[i]>=2.0\
    \ && grades[i]<2.0){\n            result += std::string(grades[i] - 2.0) + (grades[i]\
    \ - 2.0) + '-';\n        }\n        else if(grades[i]>=3.0 && grades[i]<2.0){\n\
    \            result += std::string(grades[i] - 3.0) + (grades[i] - 2.0) + '-';\n\
    \        }\n        else if(grades[i]>=1.7 && grades[i]<3.0)", "\tstd::vector<std::string>\
    \ grade_vector;\n\t// This for loop below will traverse the vector and assign\
    \ the \n\t// correct letter grade for each GPA value \n\tfor (float gpa: grades)\
    \ {\n\t\tif (gpa >= 3.0) grade_vector.push_back(\"A+\");\n\t\telse if (gpa >=\
    \ 2.7) grade_vector.push_back(\"B+\");\n\t\telse if (gpa >= 2.3) grade_vector.push_back(\"\
    B-\");\n\t\telse if (gpa >= 2.0) grade_vector.push_back(\"C+\");\n\t\telse if\
    \ (gpa >= 1.7) grade_vector.push_back(\"C\");\n\t\telse if (gpa >= 1.3) grade_vector.push_back(\"\
    C-\");\n\t\telse if (gpa >= 1.0) grade_vector.push_back(\"D+\");\n\t\telse if\
    \ (gpa >= 0.7) grade_vector.push_back(\"D\");\n\t\telse if (gpa >= 0.0) grade_vector.push_back(\"\
    D-\");\n\t\telse if (gpa == 0.0) grade_vector.push_back(\"E\");\n\t\telse grade_vector.push_back(\"\
    F\");\n\t}\n\treturn grade_vector;", "    // TODO\n    // your code here\n   \
    \ std::vector<std::string> ret;\n    \n    float sum = 0.0;\n    \n    for(float\
    \ g: grades) {\n        if(g > 0.0)\n            sum += g;\n    }\n    \n    if(sum\
    \ == 0.0) {\n        ret.push_back(\"E\");\n        return ret;\n    }\n    \n\
    \    for(float g = 0.0; g < 4.0; g++) { // from 4.0 to 5.0\n        if(sum - g\
    \ >= 0.0 && sum - g < 3.0) { // from 3.0 to 4.0\n            ret.push_back(\"\
    A+\");\n        } else if(sum - g >= 3.0 && sum - g < 3.7) { // from 3.7 to 4.0\n\
    \            ret.push_back(\"A\");\n        } else if(sum - g >= 3.7 && sum -\
    \ g < 3.3) { // from 3.3 to 4.0\n            ret.push_back(\"A-\");\n        }\
    \ else if(sum - g >= 3.3 && sum - g < 3.7) { // from 3.7 to 4.0\n            ret.push_back(\"\
    B+\");\n        } else if(sum - g >= 3.7 && sum - g < 3.3) { // from 3.3 to 4.0\n\
    \            ret.push_back(\"B\");\n        } else if(sum - g >= 3.3 && sum -\
    \ g < 3.0) { // from 3.0 to 4.0\n            ret.push_back(\"B-\");\n        }\
    \ else if(sum - g >= 3.0 && sum - g < 2.7) { // from 3.7 to 4.0\n            ret.push_back(\"\
    C+\");\n        } else if(sum - g >= 2.7 && sum - g < 2.3) { // from 3.3 to 4.0\n\
    \            ret.push_back(\"C\");\n        } else if(sum - g >= 2.3 && sum -\
    \ g < 2.0) { // from 3.0 to 4.0\n            ret.push_back(\"C-\");\n        }\
    \ else if(sum - g >= 2.0 && sum - g < 1.7) { // from 3.7 to 4.0\n            ret.push_back(\"\
    D+\");\n        } else if(sum - g >= 1.7 && sum - g < 1.3) { // from 3.3 to 4.0\n\
    \            ret.push_back(\"D\");\n        } else if(sum - g >= 1.3 && sum -\
    \ g < 1.0) { // from 3.0 to 4.0\n            ret.push_back(\"D-\");\n        }\
    \ else { // from 3.0 to 4.0\n            ret.push_back(\"E\");\n        }\n  \
    \  }\n    \n    return ret;", "    if (grades.size() == 0)\n        return {};\n\
    \    std::sort(grades.begin(), grades.end());\n    std::vector<std::string> grades_letter;\n\
    \    float mean = grades[0];\n    int count_of_zero = 0;\n    \n    for (int i\
    \ = 1; i < grades.size(); ++i) {\n        if (grades[i] != 0) {\n            float\
    \ deviation = grades[i] - mean;\n            if (deviation > 0) {\n          \
    \      grades_letter.push_back(\"A+\");\n            } else if (deviation < 0)\
    \ {\n                grades_letter.push_back(\"A-\");\n            } else if (deviation\
    \ == 0) {\n                grades_letter.push_back(\"A\");\n                count_of_zero++;\n\
    \            } else {\n                grades_letter.push_back(\"B+\");\n    \
    \        }\n            mean = grades[i];\n        }\n    }\n    \n    if (count_of_zero\
    \ > 0) {\n        for (int i = 0; i < grades_letter.size(); ++i)\n           \
    \ grades_letter[i] = grades_letter[i] + std::to_string(count_of_zero);\n    }\n\
    \    \n    return grades_letter;", "    // Implement the function here\n    std::vector<std::string>\
    \ grades_result;\n    assert(grades.size() == 5); // Make sure the size of the\
    \ vector is correct\n    grades_result.push_back(\"E\");\n    \n    for(float\
    \ i : grades){\n        if(i>3.5){\n            grades_result.push_back(\"B-\"\
    );\n        }else if(i>=3.0){\n            grades_result.push_back(\"B-\");\n\
    \        }else if(i>=2.7){\n            grades_result.push_back(\"B-\");\n   \
    \     }else if(i>=2.3){\n            grades_result.push_back(\"B-\");\n      \
    \  }else if(i>=1.7){\n            grades_result.push_back(\"B-\");\n        }else\
    \ if(i>=1.3){\n            grades_result.push_back(\"B-\");\n        }else if(i>=1.0){\n\
    \            grades_result.push_back(\"B-\");\n        }else if(i>=0.7){\n   \
    \         grades_result.push_back(\"B-\");\n        }else if(i>=0.3){\n      \
    \      grades_result.push_back(\"B-\");\n        }else if(i>=0.0){\n         \
    \   grades_result.push_back(\"B-\");\n        }else if(i<=0.0){\n            grades_result.push_back(\"\
    B-\");\n        }else if(i<=-0.3){\n            grades_result.push_back(\"B-\"\
    );\n        }else if(i<=0.7){\n            grades_result.push_back(\"B-\");\n\
    \        }else if(i<=1.0){\n            grades_result.push_back(\"B-\");\n   \
    \     }else if(i<=2.3){\n            grades_result.push_back(\"B-\");\n      \
    \  }else if(i<=2.7){\n            grades_result.push_back(\"B-\");\n        }else\
    \ if(i<=3.0){\n            grades_result.push_back(\"B-\");\n        }else if(i<=3.5){\n\
    \            grades_result.push_back(\"B-\");\n        }else if(i<=4.0){\n   \
    \         grades_result.push_back(\"B-\");\n        }else{\n            grades_result.push_back(\"\
    A+\");\n        }\n    }\n    return grades_result;", "  std::vector<std::string>\
    \ grades_letter;\n  for (auto grade : grades)\n    grades_letter.push_back( std::to_string(\
    \ grade ) );\n  return grades_letter;", "    // Write your code here\n    // std::vector<std::tuple<float,\
    \ char>> grades_tuple;\n    // for (auto& grade : grades) {\n    //     grades_tuple.emplace_back(std::make_tuple(grade,\
    \ 'C'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade, 'D-'));\n\
    \    //     grades_tuple.emplace_back(std::make_tuple(grade, 'D'));\n    //  \
    \   grades_tuple.emplace_back(std::make_tuple(grade, 'C+'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade,\
    \ 'B-'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade, 'B+'));\n\
    \    //     grades_tuple.emplace_back(std::make_tuple(grade, 'B-'));\n    // \
    \    grades_tuple.emplace_back(std::make_tuple(grade, 'B-'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade,\
    \ 'B'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade, 'B+'));\n\
    \    //     grades_tuple.emplace_back(std::make_tuple(grade, 'B'));\n    //  \
    \   grades_tuple.emplace_back(std::make_tuple(grade, 'A-'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade,\
    \ 'A+'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade, 'A-'));\n\
    \    //     grades_tuple.emplace_back(std::make_tuple(grade, 'A-'));\n    // \
    \    grades_tuple.emplace_back(std::make_tuple(grade, 'A'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade,\
    \ 'A-'));\n    //     grades_tuple.emplace_back(std::make_tuple(grade, 'A-'));\n\
    \    //     grades_tuple.emplace_back(std::make_tuple(grade, 'A'));\n    // }\n\
    \    // return grades_tuple;\n\n    // auto gpa_tuple = std::make_tuple(std::make_tuple(4.0,\
    \ 'C+'), std::make_tuple(3.7, 'C'), std::make_tuple(3.3, 'C-'), std::make_tuple(3.0,\
    \ 'C'), std::make_tuple(2.7, 'B'), std::make_tuple(2.3, 'B'), std::make_tuple(2.0,\
    \ 'B'), std::make_tuple(1.7, 'B'), std::make_tuple(1.3, 'B'), std::make_tuple(1.0,\
    \ 'B'), std::make_tuple(0.7, 'B'), std::make_tuple(0.0, 'B'));\n", "  // Declare\
    \ an array of size equal to the size of the input grades\n  std::string letter_grade[grades.size()+1];\n\
    \  // Fill the array with empty strings\n  for (int i = 0; i < grades.size();\
    \ i++)\n    letter_grade[i] = \"\";\n  // Fill the array with correct values\n\
    \  float mean = std::accumulate(grades.begin(), grades.end(), 0.0) / grades.size();\n\
    \  for (int i = 0; i < grades.size(); i++) {\n    // A value of zero means that\
    \ the input grade is below the mean grade\n    if (grades[i] <= mean) {\n    \
    \  letter_grade[i] = \"E\";\n      continue;\n    }\n    // The rest of the values\
    \ are the letter grades\n    switch (grades[i]) {\n      case 3.0: letter_grade[i]\
    \ = \"B+\"; break;\n      case 3.3: letter_grade[i] = \"B\"; break;\n      case\
    \ 3.7: letter_grade[i] = \"A+\"; break;\n      case 4.0: letter_grade[i] = \"\
    A+\"; break;\n      case 4.3: letter_grade[i] = \"A\"; break;\n      case 4.6:\
    \ letter_grade[i] = \"A-\"; break;\n      case 5.0: letter_grade[i] = \"B-\";\
    \ break;\n      case 5.3: letter_grade[i] = \"B\"; break;\n      case 5.6: letter_grade[i]\
    \ = \"B+\"; break;\n      case 5.9: letter_grade[i] = \"B+\"; break;\n      case\
    \ 6.1: letter_grade[i] = \"B-\"; break;\n      case 6.4: letter_grade[i] = \"\
    B+\"; break;\n      case 6.7: letter_grade[i] = \"B+\"; break;\n      case 7.0:\
    \ letter_grade[i] = \"C+\"; break;\n      case 7.3: letter_grade[i] = \"C\"; break;\n\
    \      case 7.6: letter_grade[i] = \"C+\"; break;\n      case 7.9: letter_grade[i]\
    \ = \"C\"; break;\n      case 8.2: letter_grade[i] = \"C\"; break;\n      case\
    \ 8.5: letter_grade[i] = \"C\"; break;\n      case 8.8: letter_grade[i] = \"C\"\
    ; break;\n      case 9.1: letter_grade[i] = \"C+\"; break;\n      case 9.4: letter_grade[i]\
    \ = \"C\"; break;\n      case 9.7: letter_grade[i] = \"C\"; break;\n      case\
    \ 10.0: letter_grade[i] = \"C\"; break;\n      default:\n        letter_grade[i]\
    \ = \"D+\"; break;\n    }\n  }\n  return std::move(letter_grade);", "    std::vector<std::string>\
    \ letter_grades;\n    auto n = grades.size();\n    auto max_grade = grades.max();\n\
    \    for(int i = 0; i < n; i++) {\n        auto grade = grades[i];\n        auto\
    \ grade = std::to_string((grade - max_grade)/max_grade);\n        letter_grades.push_back(grade);\n\
    \    }\n    return letter_grades;", "    std::vector<std::string> letter_grade;\n\
    \    for(float g : grades){\n        if(g>=3.5){\n            letter_grade.push_back(\"\
    A+\");\n        }else if(g>=3.0){\n            letter_grade.push_back(\"A\");\n\
    \        }else if(g>=2.7){\n            letter_grade.push_back(\"B+\");\n    \
    \    }else if(g>=2.3){\n            letter_grade.push_back(\"B\");\n        }else\
    \ if(g>=2.0){\n            letter_grade.push_back(\"B-\");\n        }else if(g>=1.7){\n\
    \            letter_grade.push_back(\"C+\");\n        }else if(g>=1.3){\n    \
    \        letter_grade.push_back(\"C\");\n        }else if(g>=1.0){\n         \
    \   letter_grade.push_back(\"C-\");\n        }else if(g<=0.7){\n            letter_grade.push_back(\"\
    D+\");\n        }else if(g<=0.0){\n            letter_grade.push_back(\"D\");\n\
    \        }else{\n            letter_grade.push_back(\"D-\");\n        }\n    }\n\
    \    return letter_grade;", "    // Your code goes here\n    std::cout<<\"Numerical\
    \ grades:\\n\";\n    float total = 0;\n    float total2=0;\n    for(float grade\
    \ : grades) {\n        total += grade;\n    }\n    for (float grade : grades)\
    \ {\n        if (total <= 3.7){\n            total2++;\n        }\n        else\
    \ if(total>3.7 && total <=3.3){\n            total2--;\n        }\n        else\
    \ if(total>3.3 && total<=3.0){\n            total2 += 1.7;\n        }\n      \
    \  else if(total>3.0 && total<=2.7){\n            total2 += 1.3;\n        }\n\
    \        else if(total>2.7 && total<=2.3){\n            total2 += 0.7;\n     \
    \   }\n        else if(total>2.3 && total<=1.0){\n            total2 += 0.3;\n\
    \        }\n        else if(total>1.0 && total<=0.7){\n            total2 += 0;\n\
    \        }\n        else if(total>=0.7 && total<=0.3){\n            total2 +=\
    \ -0.3;\n        }\n        else if(total>=0.3){\n            total2 += -0.7;\n\
    \        }\n        else if(total==0){\n            total2 += -1.0;\n        }\n\
    \        std::cout<<total<<\" \"<<total2<<endl;\n    }\n    std::vector<std::string>\
    \ answer;\n    answer.push_back(\"D\");\n    answer.push_back(\"C\");\n    answer.push_back(\"\
    B\");\n    answer.push_back(\"A\");\n    answer.push_back(\"D-\");\n    answer.push_back(\"\
    C-\");\n    answer.push_back(\"B-\");\n    answer.push_back(\"A-\");\n    answer.push_back(\"\
    D+\");\n    answer.push_back(\"C+\");\n    answer.push_back(\"B+\");\n    answer.push_back(\"\
    A+\");\n    answer.push_back(\"E\");\n    return answer;", "    std::string letterGrade\
    \ = \"\";\n    // I do not know the size of the grades, it could be zero\n   \
    \ assert(grades.size() > 0);\n    \n    // Loop through all the grades\n    for\
    \ (float grade : grades) {\n        float points = (grade < 3.3 || grade > 4.0\
    \ || grade == 0.0) ? 0.0 : grade * 100;\n        // If the grade is zero, we want\
    \ to print the letter as 'E'\n        // I do not know what happens if you multiply\
    \ a float by 100\n        if (points < 0.0) points = 0.0;\n        if (points\
    \ == 0.0) points = 1.0;\n        // Find the letter grade\n        letterGrade\
    \ += std::to_string(points / 5.0) + std::string{' '}; // Convert float to string\n\
    \    }\n    \n    return std::vector<std::string>(letterGrade.begin(), letterGrade.end());\
    \ // return string vector", "    std::vector<std::string> res;\n    auto gpa_iter\
    \ = grades.begin();\n    auto letter_grade_iter = grades.end();\n    if (gpa_iter\
    \ == letter_grade_iter)\n        res.push_back(\"E\");\n    while (true) {\n \
    \       float gpa = gpa_iter->first;\n        if (gpa_iter == letter_grade_iter)\
    \ {\n            res.push_back(\"E\");\n            break;\n        }\n      \
    \  float prev = *--letter_grade_iter;\n        if (gpa < prev) \n            res.push_back(\"\
    D-\");\n        if (gpa > prev) {\n            res.push_back(\"D+\");\n      \
    \      ++gpa_iter;\n        }\n        prev = *--letter_grade_iter;\n        if\
    \ (gpa < prev)\n            res.push_back(\"C-\");\n        if (gpa > prev) {\n\
    \            res.push_back(\"C+\");\n            ++gpa_iter;\n        }\n    \
    \    prev = *--letter_grade_iter;\n        if (gpa < prev) \n            res.push_back(\"\
    B-\");\n        if (gpa > prev) {\n            res.push_back(\"B+\");\n      \
    \      ++gpa_iter;\n        }\n        prev = *--letter_grade_iter;\n        if\
    \ (gpa < prev) \n            res.push_back(\"A-\");\n        if (gpa > prev) {\n\
    \            res.push_back(\"A+\");\n            ++gpa_iter;\n        }\n    \
    \    prev = *--letter_grade_iter;\n        if (gpa < prev) \n            res.push_back(\"\
    A-\");\n        if (gpa > prev) {\n            res.push_back(\"A+\");\n      \
    \      ++gpa_iter;\n        }\n        prev = *--letter_grade_iter;\n        if\
    \ (gpa < prev) \n            res.push_back(\"A-\");\n        if (gpa > prev) {\n\
    \            res.push_back(\"A+\");\n            ++gpa_iter;\n        }\n    \
    \    prev = *--letter_grade_iter;\n        if (gpa < prev) \n            res.push_back(\"\
    A-\");\n        if (gpa > prev) {\n            res.push_back(\"A+\");\n      \
    \      ++gpa_iter;\n        }\n        prev = *--letter_grade_iter;\n        if\
    \ (gpa < prev) \n            res.push_back(\"A-\");\n        if (gpa > prev) {\n\
    \            res.push_back(\"A+\");\n            ++gpa_iter;\n        }\n    \
    \    prev = *--letter_grade_iter;\n        if (gpa < prev) \n            res.push_back(\"\
    A-\");\n        if (gpa > prev) {\n            res.push_back(\"A+\");\n      \
    \      ++gpa_iter;\n        }\n        prev = ", "    std::vector<std::string>\
    \ letter_grade;\n    assert(grades.size() % 2 == 0);\n    size_t grades_size =\
    \ grades.size() / 2;\n    for (size_t i = 0; i < grades_size; ++i) {\n       \
    \ if (grades[i] >= 3.3) {\n            letter_grade.push_back(\"A+\");\n     \
    \   } else if (grades[i] >= 3.7) {\n            letter_grade.push_back(\"A\");\n\
    \        } else if (grades[i] >= 3.0) {\n            letter_grade.push_back(\"\
    A\");\n        } else if (grades[i] >= 2.7) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.3) {\n            letter_grade.push_back(\"\
    B\");\n        } else if (grades[i] >= 2.0) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.7) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.2) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grades[i] >= 1.0) {\n            letter_grade.push_back(\"\
    C\");\n        } else if (grades[i] >= 0.7) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.6) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.6) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.6) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.6) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.6) {\n            letter_grade.push_back(\"\
    D\");\n        } else if (grades[i] >= 0.6) {\n            letter_grade.push_back(\"\
    D\");\n        } else {\n            letter_grade.push_back(\"E\");\n        }\n\
    \    }\n    return letter_grade;", "\t// Create a vector for the output\n\tstd::vector<std::string>\
    \ grade_vector;\n\t// Create an array with the values from 0 to 9\n\tstd::vector<int>\
    \ digit_values(10);\n\t// Iterate through the grades and put them in the array\n\
    \tfor (float i : grades) {\n\t\tdigit_values[std::abs(i - std::floor(i))] = 1;\n\
    \t}\n\t// Iterate through the array and add one to the index of the value\n\t\
    // that is closest to zero\n\tfor (int i = 0; i <= 9; i++) {\n\t\tgrade_vector.push_back(static_cast<char>(digit_values[std::abs(i\
    \ - std::floor(i))]));\n\t}\n\t// Return the vector\n\treturn grade_vector;",
  "    // Your code goes here\n    std::vector<std::string> result;\n    std::for_each(grades.begin(),\
    \ grades.end(), [&result](float grade) {\n        std::string grade_name = \"\"\
    ;\n        std::for_each(result.begin(), result.end(), [&grade_name](std::string\
    \ &s) {\n            int num = std::stoi(s) - 1.0;\n            if (num > 0) {\n\
    \                std::string grade = \"A\";\n                grade_name.append(grade);\n\
    \            } else {\n                std::string grade = \"B\";\n          \
    \      grade_name.append(grade);\n            }\n        });\n        result.push_back(grade_name);\n\
    \    });\n    return result;", "    std::vector<std::string> letter_grades;\n\
    \    double sum = 0.0;\n    for (size_t i = 0; i < grades.size(); i++) {\n   \
    \     sum += grades[i];\n    }\n    double average = sum / grades.size();\n  \
    \  size_t max_grade = grades.size() - 1;\n    size_t min_grade = grades.size();\n\
    \    for (size_t i = 0; i < grades.size(); i++) {\n        if (grades[i] > average)\
    \ {\n            max_grade = i;\n        }\n        if (grades[i] < average) {\n\
    \            min_grade = i;\n        }\n    }\n    bool done = false;\n    while\
    \ (!done) {\n        letter_grades.push_back(\"E\");\n        if (max_grade +\
    \ 1 < grades.size()) {\n            double mid_grade = (min_grade + max_grade)\
    \ / 2;\n            double mid_sum = 0.0;\n            size_t mid_max_grade =\
    \ grades.size() - 1;\n            size_t mid_min_grade = grades.size();\n    \
    \        for (size_t i = min_grade; i < mid_grade; i++) {\n                mid_sum\
    \ += grades[i];\n                mid_max_grade = i;\n                mid_min_grade\
    \ = i;\n            }\n            if (mid_sum / mid_grade < average) {\n    \
    \            double temp_sum = average;\n                size_t temp_max_grade\
    \ = grades.size() - 1;\n                size_t temp_min_grade = grades.size();\n\
    \                for (size_t i = min_grade; i < mid_grade; i++) {\n          \
    \          temp_sum += grades[i];\n                    temp_max_grade = i;\n \
    \                   temp_min_grade = i;\n                }\n                double\
    \ temp_average = temp_sum / mid_grade;\n                if (temp_average < average)\
    \ {\n                    max_grade = mid_max_grade;\n                    min_grade\
    \ = mid_min_grade;\n                } else {\n                    max_grade =\
    \ mid_max_grade;\n                    min_grade = mid_min_grade;\n           \
    \         done = true;\n                }\n            } else {\n            \
    \    double temp_average = average;\n                size_t temp_max_grade = grades.size()\
    \ - 1;\n                size_t temp_min_grade = grades.size();\n             \
    \   for (size_t i = min_grade; i < mid_grade; i++) {\n                    temp_sum\
    \ += grades[i];\n                    temp_max_grade = i;\n                   \
    \ temp_min_grade = i;\n                }\n                double temp_average\
    \ = temp_sum / mid_grade;\n                if (temp_average < average) {\n   \
    \                 max_grade = mid_max_grade;\n                    min_grade =\
    \ mid_min_grade;\n                } else {\n                    max_grade = mid_max_grade;\n\
    \                    min_grade = mid_min_grade;\n                    done = true;\n\
    \                }\n            }\n        } else {\n            double temp_average\
    \ = average;\n            size_t temp_max_grade = grades.size() - 1;\n       \
    \     size_t temp_min_grade = grades.size();\n            for (size_t i = min_grade;\
    \ i < grades.size(); i++) {\n                temp_sum += grades[i];\n        \
    \        temp_max_grade", "    assert(grades.size() <= 12); // if there aren't\
    \ enough grades, just return an empty list\n    std::vector<std::string> letter_grade;\n\
    \    std::sort(grades.begin(), grades.end()); \n    std::vector<std::string> grades_strings;\n\
    \    float prev_grade = grades.front();\n    float prev_letter_grade = \"D+\"\
    ; // default letter grade if there are no previous grades\n    int last_index\
    \ = 0;\n    for (int index = 0; index < grades.size(); index++) {\n        float\
    \ grade = grades[index];\n        char letter_grade;\n        if (grade <= prev_grade)\
    \ {\n            if (grade > prev_grade) {\n                letter_grade = 'D-';\
    \ \n            }\n            else if (grade == prev_grade) {\n             \
    \   letter_grade = 'D'; \n            }\n            else {\n                letter_grade\
    \ = 'E'; \n            }\n        }\n        else {\n            if (grade > prev_grade)\
    \ {\n                if (prev_grade > 3.0 && prev_grade < 3.7) {\n           \
    \         letter_grade = 'C-'; \n                }\n                else if (prev_grade\
    \ > 3.3 && prev_grade < 3.8) {\n                    letter_grade = 'C-'; \n  \
    \              }\n                else if (prev_grade > 3.7 && prev_grade < 4.0)\
    \ {\n                    letter_grade = 'C'; \n                }\n           \
    \     else if (prev_grade > 3.8 && prev_grade < 4.1) {\n                    letter_grade\
    \ = 'C'; \n                }\n                else if (prev_grade > 4.0 && prev_grade\
    \ < 4.3) {\n                    letter_grade = 'C'; \n                }\n    \
    \            else if (prev_grade > 4.1 && prev_grade < 4.4) {\n              \
    \      letter_grade = 'C'; \n                }\n                else if (prev_grade\
    \ > 4.3 && prev_grade < 4.5) {\n                    letter_grade = 'C'; \n   \
    \             }\n                else if (prev_grade > 4.4 && prev_grade < 4.7)\
    \ {\n                    letter_grade = 'C'; \n                }\n           \
    \     else if (prev_grade > 4.7) {\n                    letter_grade = 'B'; \n\
    \                }\n                else {\n                    letter_grade =\
    \ 'B'; \n                }\n            }\n            else {\n              \
    \  if (prev_grade > 2.7 && prev_grade < 3.0) {\n                    letter_grade\
    \ = 'B-'; \n                }\n                else if (prev_grade > 2.3 && prev_grade\
    \ < 3.2) {\n                    letter_grade = 'B'; \n                }\n    \
    \            else if (prev_grade > 2.0 && prev_grade < 3.4) {\n              \
    \      letter_grade = 'B'; \n                }\n                else if (prev_grade\
    \ > 2.1 && prev_grade < 3.5) {\n                    letter_grade = 'B", "    //\
    \ Write your code here\n    std::vector<std::string> answer;\n    int size = grades.size();\n\
    \    for (int i = 0; i < size; ++i) {\n        if(grades[i]>=4.0&&grades[i]<3.7){\n\
    \            answer.push_back(\"A+\");\n        }\n        else if(grades[i]>3.7&&grades[i]<3.3){\n\
    \            answer.push_back(\"A\");\n        }\n        else if(grades[i]>3.3&&grades[i]<3.0){\n\
    \            answer.push_back(\"A-\");\n        }\n        else if(grades[i]>3.0&&grades[i]<2.7){\n\
    \            answer.push_back(\"B+\");\n        }\n        else if(grades[i]>2.7&&grades[i]<2.3){\n\
    \            answer.push_back(\"B\");\n        }\n        else if(grades[i]>2.3&&grades[i]<2.0){\n\
    \            answer.push_back(\"B-\");\n        }\n        else if(grades[i]>2.0&&grades[i]<1.7){\n\
    \            answer.push_back(\"C+\");\n        }\n        else if(grades[i]>1.7&&grades[i]<1.3){\n\
    \            answer.push_back(\"C\");\n        }\n        else if(grades[i]>1.3&&grades[i]<1.0){\n\
    \            answer.push_back(\"C-\");\n        }\n        else if(grades[i]>1.0&&grades[i]<0.7){\n\
    \            answer.push_back(\"D+\");\n        }\n        else if(grades[i]>0.7&&grades[i]<0.0){\n\
    \            answer.push_back(\"D\");\n        }\n        else if(grades[i]<=0.0){\n\
    \            answer.push_back(\"E\");\n        }\n    }\n    return answer;",
  "    std::vector<std::string> letter_grade;\n    float avg;\n    for (float g :\
    \ grades) {\n        if (g > avg) {\n            letter_grade.push_back(\"A+\"\
    );\n        } else if (g > 3.9) {\n            letter_grade.push_back(\"A\");\n\
    \        } else if (g > 2.9) {\n            letter_grade.push_back(\"A-\");\n\
    \        } else if (g > 1.9) {\n            letter_grade.push_back(\"B+\");\n\
    \        } else if (g > 1.7) {\n            letter_grade.push_back(\"B\");\n \
    \       } else if (g > 1.2) {\n            letter_grade.push_back(\"B-\");\n \
    \       } else if (g > 0.8) {\n            letter_grade.push_back(\"C+\");\n \
    \       } else if (g > 0.6) {\n            letter_grade.push_back(\"C\");\n  \
    \      } else if (g > 0.4) {\n            letter_grade.push_back(\"C-\");\n  \
    \      } else if (g > 0) {\n            letter_grade.push_back(\"D+\");\n    \
    \    } else if (g > -0.4) {\n            letter_grade.push_back(\"D\");\n    \
    \    } else if (g > -0.6) {\n            letter_grade.push_back(\"D-\");\n   \
    \     } else {\n            letter_grade.push_back(\"E\");\n        }\n      \
    \  avg = g;\n    }\n    return letter_grade;", "    if (grades.size() == 0)\n\
    \        return std::vector<std::string>();\n\n    // If there are no letters,\
    \ return an empty vector of strings.\n    if (grades.front() < 0)\n        return\
    \ std::vector<std::string>();\n\n    // For each GPA, calculate the letter. For\
    \ example, the GPA of 3.3 is B\n    // and the GPA of 1.7 is C.\n    std::vector<char>\
    \ letter_grade(grades.size(), ' ');\n    for (unsigned int i = 0; i < grades.size();\
    \ ++i) {\n        if (grades[i] > 0 && grades[i] < 4)\n            letter_grade[i]\
    \ = '+';\n        else if (grades[i] > 3 && grades[i] < 7)\n            letter_grade[i]\
    \ = 'A';\n        else if (grades[i] > 2 && (grades[i] < 3 || grades[i] > 6))\n\
    \            letter_grade[i] = 'A';\n        else if (grades[i] > 3 && grades[i]\
    \ < 2)\n            letter_grade[i] = 'B';\n        else if (grades[i] > 1 &&\
    \ grades[i] < 3)\n            letter_grade[i] = 'B';\n        else if (grades[i]\
    \ > 0 && grades[i] < 1)\n            letter_grade[i] = 'C';\n        else if (grades[i]\
    \ > 0 && grades[i] < 1)\n            letter_grade[i] = 'C';\n        else if (grades[i]\
    \ > 0 && grades[i] < 1)\n            letter_grade[i] = 'D';\n        else if (grades[i]\
    \ > 0 && grades[i] < 1)\n            letter_grade[i] = 'D';\n        else\n  \
    \          letter_grade[i] = 'E';\n    }\n\n    // Return the vector of strings.\n\
    \    return std::vector<std::string>(letter_grade.begin(), letter_grade.end());",
  "    // Use a vector to store the grades according to GPA\n    std::vector<std::string>\
    \ grades_ordered;\n    // Store the grades in order\n    grades_ordered.push_back(\"\
    \");\n    // Loop through the grades\n    for (size_t i = 0; i < grades.size();\
    \ i++) {\n        // If the grades[i] is greater than 3.0, it must be an C\n \
    \       if (grades[i] >= 3.0) {\n            grades_ordered[i + 1] = \"C\";\n\
    \        } else if (grades[i] >= 2.0) {\n            grades_ordered[i + 1] = \"\
    B-\";\n        } else if (grades[i] >= 1.7) {\n            grades_ordered[i +\
    \ 1] = \"B-\";\n        } else if (grades[i] >= 1.0) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= 0.7) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= 0.5) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= 0.3) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= 0.2) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= 0.1) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= 0.0) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -0.1) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -0.2) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -0.3) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -0.5) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -0.7) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -1.0) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -2.0) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -3.0) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -3.7) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -4.0) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -3.3) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -3.0) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -2.7) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -2.3) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -2.0) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -1.7) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -1.3) {\n            grades_ordered[i\
    \ + 1] = \"B-\";\n        } else if (grades[i] >= -1.0) {\n            grades_ordered[i\
    \ + 1]", "  std::vector<std::string> letter;\n  for (float g : grades) {\n   \
    \ std::string letterGrade = \"\";\n    if (g < 4.0) {\n      letterGrade = \"\
    A+\";\n    } else if (g >= 3.7 && g < 3.3) {\n      letterGrade = \"A\";\n   \
    \ } else if (g >= 3.0 && g < 2.7) {\n      letterGrade = \"A-\";\n    } else if\
    \ (g >= 2.3 && g < 2.0) {\n      letterGrade = \"B+\";\n    } else if (g >= 2.0\
    \ && g < 1.7) {\n      letterGrade = \"B\";\n    } else if (g >= 1.7 && g < 1.0)\
    \ {\n      letterGrade = \"B-\";\n    } else if (g >= 1.0 && g < 0.7) {\n    \
    \  letterGrade = \"C+\";\n    } else if (g >= 0.7 && g < 0.0) {\n      letterGrade\
    \ = \"C\";\n    } else if (g == 0.0) {\n      letterGrade = \"D-\";\n    } else\
    \ {\n      letterGrade = \"D+\";\n    }\n    letter.push_back(letterGrade);\n\
    \  }\n  return letter;", "    // Your code goes here\n    std::vector<std::string>\
    \ letter_grades;\n    assert(grades.size() <= 15);\n    int length = grades.size();\n\
    \    for (int i = 0; i < length; i++) {\n        if (grades[i] < 3.0) {\n    \
    \        letter_grades.push_back(\"A\");\n        } else if (grades[i] <= 3.3)\
    \ {\n            letter_grades.push_back(\"A-\");\n        } else if (grades[i]\
    \ <= 3.7) {\n            letter_grades.push_back(\"A+\");\n        } else if (grades[i]\
    \ <= 4.0) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ <= 4.3) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ <= 4.7) {\n            letter_grades.push_back(\"B\");\n        } else if (grades[i]\
    \ <= 5.0) {\n            letter_grades.push_back(\"B-\");\n        } else if (grades[i]\
    \ <= 5.3) {\n            letter_grades.push_back(\"B+\");\n        } else if (grades[i]\
    \ <= 5.7) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ <= 6.0) {\n            letter_grades.push_back(\"C\");\n        } else if (grades[i]\
    \ <= 6.3) {\n            letter_grades.push_back(\"C-\");\n        } else if (grades[i]\
    \ <= 6.7) {\n            letter_grades.push_back(\"C+\");\n        } else if (grades[i]\
    \ <= 7.0) {\n            letter_grades.push_back(\"D+\");\n        } else if (grades[i]\
    \ <= 7.3) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ <= 7.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ <= 8.0) {\n            letter_grades.push_back(\"D-\");\n        } else if (grades[i]\
    \ <= 8.3) {\n            letter_grades.push_back(\"D-\");\n        } else if (grades[i]\
    \ <= 8.7) {\n            letter_grades.push_back(\"D\");\n        } else if (grades[i]\
    \ <= 9.0) {\n            letter_grades.push_back(\"E\");\n        } else {\n \
    \           letter_grades.push_back(\"D\");\n        }\n    }\n    return letter_grades;",
  "    std::vector<std::string> letter_grades(grades.size());\n    for (unsigned i\
    \ = 0; i < grades.size(); i++) {\n        if (grades[i] >= 4.0 && grades[i] <\
    \ 3.7) {\n            letter_grades[i] = \"A+\";\n        } else if (grades[i]\
    \ >= 3.7 && grades[i] < 3.3) {\n            letter_grades[i] = \"A\";\n      \
    \  } else if (grades[i] >= 3.3 && grades[i] < 3) {\n            letter_grades[i]\
    \ = \"A-\";\n        } else if (grades[i] >= 3.0 && grades[i] < 2.7) {\n     \
    \       letter_grades[i] = \"B+\";\n        } else if (grades[i] >= 2.7 && grades[i]\
    \ < 2.3) {\n            letter_grades[i] = \"B\";\n        } else if (grades[i]\
    \ >= 2.3 && grades[i] < 2) {\n            letter_grades[i] = \"B-\";\n       \
    \ } else if (grades[i] >= 2.0 && grades[i] < 1.7) {\n            letter_grades[i]\
    \ = \"C+\";\n        } else if (grades[i] >= 1.7 && grades[i] < 1.3) {\n     \
    \       letter_grades[i] = \"C\";\n        } else if (grades[i] >= 1.3 && grades[i]\
    \ < 1) {\n            letter_grades[i] = \"C-\";\n        } else if (grades[i]\
    \ >= 1.0 && grades[i] < 0.7) {\n            letter_grades[i] = \"D+\";\n     \
    \   } else if (grades[i] >= 0.7 && grades[i] < 0) {\n            letter_grades[i]\
    \ = \"D\";\n        } else if (grades[i] > 0.0) {\n            letter_grades[i]\
    \ = \"D-\";\n        } else {\n            letter_grades[i] = \"E\";\n       \
    \ }\n    }\n    return letter_grades;", "    // Write your code here\n    std::vector<std::string>\
    \ ans;\n    auto max_grade = *std::max_element(grades.begin(), grades.end());\n\
    \    float max_index = (*std::max_element(grades.begin(), grades.end())).index();\n\
    \    float min_grade = *std::min_element(grades.begin(), grades.end());\n    float\
    \ min_index = (*std::min_element(grades.begin(), grades.end())).index();\n   \
    \ float total_grade = 0;\n    for(int i = 0; i < grades.size(); i++) {\n     \
    \   total_grade += grades[i];\n    }\n    float grades_sum = (total_grade / max_grade).as<float>();\n\
    \    auto iter = std::find(grades.begin(), grades.end(), 0);\n    auto start =\
    \ iter;\n    float prev_total_grade = 0;\n    float prev_max_grade = 0;\n    float\
    \ prev_min_grade = 0;\n    while(iter != grades.end()) {\n        float total_grade\
    \ = std::accumulate(iter, grades.end(), 0);\n        float max_grade = std::accumulate(iter,\
    \ grades.end(), 0);\n        float min_grade = std::accumulate(iter, grades.end(),\
    \ 0);\n        float avg_grade = total_grade / grades.size();\n        float grades_sum\
    \ = (total_grade / max_grade).as<float>();\n        if(avg_grade != prev_avg_grade)\
    \ {\n            ans.push_back(\"D\");\n            break;\n        }\n      \
    \  if(grades_sum != prev_grades_sum) {\n            ans.push_back(\"E\");\n  \
    \          break;\n        }\n        if(min_grade != prev_min_grade) {\n    \
    \        ans.push_back(\"D\");\n            break;\n        }\n        if(max_grade\
    \ != prev_max_grade) {\n            ans.push_back(\"D\");\n            break;\n\
    \        }\n        if(min_grade > max_grade) {\n            ans.push_back(\"\
    A+\");\n            break;\n        }\n        prev_avg_grade = avg_grade;\n \
    \       prev_grades_sum = grades_sum;\n        prev_max_grade = max_grade;\n \
    \       prev_min_grade = min_grade;\n        iter = std::find(grades.begin(),\
    \ grades.end(), 0);\n        start = iter;\n    }\n    return ans;", "    // your\
    \ code here\n    std::vector<std::string> grade_string;\n    for(float grade:\
    \ grades){\n        if(grade >= 4.0f)\n            grade_string.push_back(\"A+\"\
    );\n        else if(grade >= 3.7f){\n            grade_string.push_back(\"A\"\
    );\n        }else if(grade >= 3.3f){\n            grade_string.push_back(\"A-\"\
    );\n        }else if(grade >= 3.0f){\n            grade_string.push_back(\"B+\"\
    );\n        }else if(grade >= 2.7f){\n            grade_string.push_back(\"B\"\
    );\n        }else if(grade >= 2.3f){\n            grade_string.push_back(\"B-\"\
    );\n        }else if(grade >= 2.0f){\n            grade_string.push_back(\"C+\"\
    );\n        }else if(grade >= 1.7f){\n            grade_string.push_back(\"C\"\
    );\n        }else if(grade >= 1.3f){\n            grade_string.push_back(\"C-\"\
    );\n        }else if(grade >= 1.0f){\n            grade_string.push_back(\"D+\"\
    );\n        }else if(grade >= 0.7f){\n            grade_string.push_back(\"D\"\
    );\n        }else if(grade >= 0.0f){\n            grade_string.push_back(\"D-\"\
    );\n        }else {\n            grade_string.push_back(\"E\");\n        }\n \
    \   }\n    return grade_string;", "    std::vector<std::string> letter_grades;\n\
    \    int size = grades.size();\n    assert(size % 2 == 0);\n    int k = 0;\n \
    \   for (float g : grades) {\n        if (g >= 3.0) {\n            letter_grades.push_back(\"\
    A+\");\n            k += 1;\n        } else if (g >= 3.7) {\n            letter_grades.push_back(\"\
    A\");\n            k += 1;\n        } else if (g >= 3.3) {\n            letter_grades.push_back(\"\
    A-\");\n            k += 1;\n        } else if (g >= 3.0) {\n            letter_grades.push_back(\"\
    B+\");\n            k += 1;\n        } else if (g >= 2.7) {\n            letter_grades.push_back(\"\
    B\");\n            k += 1;\n        } else if (g >= 2.3) {\n            letter_grades.push_back(\"\
    B-\");\n            k += 1;\n        } else if (g >= 2.0) {\n            letter_grades.push_back(\"\
    C+\");\n            k += 1;\n        } else if (g >= 1.7) {\n            letter_grades.push_back(\"\
    C\");\n            k += 1;\n        } else if (g >= 1.3) {\n            letter_grades.push_back(\"\
    C-\");\n            k += 1;\n        } else if (g >= 1.0) {\n            letter_grades.push_back(\"\
    D+\");\n            k += 1;\n        } else if (g >= 0.7) {\n            letter_grades.push_back(\"\
    D\");\n            k += 1;\n        } else if (g >= 0.0) {\n            letter_grades.push_back(\"\
    D-\");\n            k += 1;\n        } else {\n            letter_grades.push_back(\"\
    E\");\n            k += 1;\n        }\n    }\n    letter_grades.insert(letter_grades.begin(),\
    \ std::string(k, '-'));\n    return letter_grades;", "    // Your code goes here\n\
    \    std::vector<std::string> grades_v;\n    auto max_value_index = grades.front();\n\
    \    for (auto &grade : grades) {\n        if (grade > max_value_index) {\n  \
    \          max_value_index = grade;\n        }\n    }\n\n    char grade_sign =\
    \ '+';\n    std::string letter_grade;\n    for (auto &grade : grades) {\n    \
    \    if (grade == max_value_index) {\n            letter_grade += grade_sign;\n\
    \        } else if (grade < max_value_index) {\n            letter_grade += grade_sign\
    \ + '-';\n        } else {\n            letter_grade += grade_sign;\n        }\n\
    \n        grade_sign = '+';\n    }\n    grades_v.push_back(letter_grade);\n  \
    \  return grades_v;", "    std::vector<std::string> letter_grades;\n    float\
    \ average = accumulate(grades.begin(), grades.end(), 0.0) / grades.size();\n \
    \   char letter;\n    if (average >= 4.0) {\n        letter = 'A' + 4;\n    }\
    \ else if (average > 3.7) {\n        letter = 'A';\n    } else if (average > 3.3)\
    \ {\n        letter = 'A-';\n    } else if (average > 3.0) {\n        letter =\
    \ 'B' + 3;\n    } else if (average > 2.7) {\n        letter = 'B';\n    } else\
    \ if (average > 2.3) {\n        letter = 'B-';\n    } else if (average > 2.0)\
    \ {\n        letter = 'C' + 2;\n    } else if (average > 1.7) {\n        letter\
    \ = 'C';\n    } else if (average > 1.3) {\n        letter = 'C-';\n    } else\
    \ if (average > 1.0) {\n        letter = 'D' + 1;\n    } else if (average > 0.7)\
    \ {\n        letter = 'D';\n    } else if (average > 0.0) {\n        letter =\
    \ 'D-';\n    } else {\n        letter = 'E';\n    }\n    letter_grades.push_back(letter);\n\
    \    return letter_grades;", "\tstd::vector<std::string> grade_list;\n\tfor (const\
    \ auto& grade : grades) {\n\t\tif (grade >= 4.0f && grade < 5.0f) {\n\t\t\tgrade_list.push_back(\"\
    A+\");\n\t\t} else if (grade >= 4.0f && grade < 5.5f) {\n\t\t\tgrade_list.push_back(\"\
    A\");\n\t\t} else if (grade >= 4.0f && grade < 6.0f) {\n\t\t\tgrade_list.push_back(\"\
    A-\");\n\t\t} else if (grade >= 4.0f && grade < 6.5f) {\n\t\t\tgrade_list.push_back(\"\
    B+\");\n\t\t} else if (grade >= 4.0f && grade < 7.0f) {\n\t\t\tgrade_list.push_back(\"\
    B\");\n\t\t} else if (grade >= 4.0f && grade < 7.5f) {\n\t\t\tgrade_list.push_back(\"\
    B-\");\n\t\t} else if (grade >= 4.0f && grade < 8.0f) {\n\t\t\tgrade_list.push_back(\"\
    C+\");\n\t\t} else if (grade >= 4.0f && grade < 8.5f) {\n\t\t\tgrade_list.push_back(\"\
    C\");\n\t\t} else if (grade >= 4.0f && grade < 9.0f) {\n\t\t\tgrade_list.push_back(\"\
    C-\");\n\t\t} else if (grade >= 4.0f && grade < 9.5f) {\n\t\t\tgrade_list.push_back(\"\
    D+\");\n\t\t} else if (grade >= 4.0f && grade < 10.0f) {\n\t\t\tgrade_list.push_back(\"\
    D\");\n\t\t} else if (grade >= 4.0f && grade < 10.5f) {\n\t\t\tgrade_list.push_back(\"\
    D-\");\n\t\t} else {\n\t\t\tgrade_list.push_back(\"E\");\n\t\t}\n\t}\n\treturn\
    \ grade_list;", "  std::sort(grades.begin(), grades.end());\n  std::unique_ptr<std::string>\
    \ output(new std::string());\n  for (float n : grades) {\n    int digit = static_cast<int>(std::ceil(n\
    \ / 2.0));\n    if (digit == 1) digit = 0;\n    if (digit == 0) digit = 1;\n \
    \   std::string grade(digit, 'A');\n    if (n >= 3.7) grade += \"+\"; else grade\
    \ += grade;\n    if (n >= 3.3) grade += \"-\"; else grade += grade;\n    if (n\
    \ >= 3.0) grade += \"+\"; else grade += grade;\n    if (n >= 2.7) grade += \"\
    +\"; else grade += grade;\n    if (n >= 2.3) grade += \"-\"; else grade += grade;\n\
    \    if (n >= 2.0) grade += \"+\"; else grade += grade;\n    if (n >= 1.7) grade\
    \ += \"+\"; else grade += grade;\n    if (n >= 1.3) grade += \"-\"; else grade\
    \ += grade;\n    if (n >= 1.0) grade += \"+\"; else grade += grade;\n    if (n\
    \ < 0.7) grade += \"-\"; else grade += grade;\n    if (n < 0.0) grade += \"-\"\
    ; else grade += grade;\n    if (n >= 0.0) output->push_back(grade);\n  }\n  return\
    \ std::move(output);", "    std::vector<std::string> grade_list;\n    std::string\
    \ letter;\n    float sum = 0;\n    for (float grade : grades) {\n        if (grade\
    \ > 4.0) \n            letter = \"A+\";\n        else if (grade > 3.7)\n     \
    \       letter = \"A\";\n        else if (grade > 3.3)\n            letter = \"\
    A-\";\n        else if (grade > 3.0)\n            letter = \"B+\";\n        else\
    \ if (grade > 2.7)\n            letter = \"B\";\n        else if (grade > 2.3)\n\
    \            letter = \"B-\";\n        else if (grade > 2.0)\n            letter\
    \ = \"C+\";\n        else if (grade > 1.7)\n            letter = \"C\";\n    \
    \    else if (grade > 1.3)\n            letter = \"C-\";\n        else if (grade\
    \ > 1.0)\n            letter = \"D+\";\n        else if (grade > 0.7)\n      \
    \      letter = \"D\";\n        else\n            letter = \"D-\";\n        sum\
    \ += grade;\n        grade_list.push_back(letter);\n    }\n    float avg = sum\
    \ / grades.size();\n    std::vector<std::string> grade_list_final;\n    int num_of_grades\
    \ = 0;\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >\
    \ avg) {\n            grade_list_final.push_back(grade_list[i] + \"-\" + letter);\n\
    \            num_of_grades++;\n        } else {\n            grade_list_final.push_back(grade_list[i]);\n\
    \        }\n    }\n    return grade_list_final;"]
stop_tokens:
- "\n}"
