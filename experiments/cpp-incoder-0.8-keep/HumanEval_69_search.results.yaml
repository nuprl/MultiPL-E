language: cpp
name: HumanEval_69_search
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    sort(lst.begin(),\
    \ lst.end());\n    long ans = -1;\n    long temp;\n    long long freq = 1;\n \
    \   for (auto it = lst.begin(); it != lst.end(); ++it) {\n        if (*it > temp)\
    \ {\n            temp = *it;\n        }\n        if (*it == temp) {\n        \
    \    freq++;\n        }\n        if (freq > ans) {\n            ans = freq;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqb7yx4wb: /tmp/tmpqb7yx4wb.cpp:32: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    std::vector<long> dp;\n    dp.resize(lst.size()+1, 0);\n    for(int i = 0;\
    \ i <lst.size(); i++){\n        int pos = lst[i];\n        if(ans == -1) {\n \
    \           ans = pos;\n        } else {\n            long last = ans;\n     \
    \       long curr = 0;\n            for(int j = 0; j <lst.size(); j++) {\n   \
    \             if(j == i) {\n                    continue;\n                }\n\
    \                if(dp[j] == 0) {\n                    dp[j] = 1;\n          \
    \      }\n                else {\n                    curr += dp[j];\n       \
    \             dp[j] = (curr > last)? curr : last;\n                }\n       \
    \     }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpuxkkqwz8: /tmp/tmpuxkkqwz8.cpp:40: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.empty())\n\
    \        return -1;\n    long maxFreq = lst[0];\n    long maxVal = maxFreq;\n\
    \    for(long i:lst)\n        if(i == maxFreq)\n            maxFreq = i;\n   \
    \     else if(i > maxFreq)\n            maxVal = i;\n    return maxVal;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp95j902ps: /tmp/tmp95j902ps.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    auto max_freq\
    \ = std::max_element(lst.begin(), lst.end()) - lst.begin();\n    auto min_freq\
    \ = std::min_element(lst.begin(), lst.end()) - lst.begin();\n    if (min_freq\
    \ >= max_freq) {\n        return -1;\n    }\n    int freq = min_freq - max_freq;\n\
    \    auto index = std::find(lst.begin(), lst.end(), max_freq);\n    if (index\
    \ != lst.end() && index != lst.begin() && freq == min_freq - index - max_freq)\
    \ {\n        return max_freq;\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnlsuoub1.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnlsuoub1.cpp:19:72: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   19 |     if (index != lst.end() &&\
    \ index != lst.begin() && freq == min_freq - index - max_freq) {\n      |    \
    \                                                           ~~~~~~~~ ^ ~~~~~\n\
    \      |                                                               |     \
    \     |\n      |                                                             \
    \  long int   __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnlsuoub1.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:974:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  974 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnlsuoub1.cpp:19:74: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long int\u2019\n   19 |     if (index != lst.end() && index != lst.begin()\
    \ && freq == min_freq - index - max_freq) {\n      |                         \
    \                                                 ^~~~~\nIn file included from\
    \ /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/"
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ std::numeric_limits<long long int>::min();\n    long maxIdx = 0;\n    for(auto\
    \ i : lst) {\n        if(i > maxVal) {\n            maxVal = i;\n            maxIdx\
    \ = i;\n        }\n    }\n\n    for(long i = 0; i < lst.size(); i++) {\n     \
    \   if(lst[i] == maxVal && lst[i] > maxIdx) {\n            maxIdx = lst[i];\n\
    \        }\n    }\n\n    return maxIdx;\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy5rc7ly6: /tmp/tmpy5rc7ly6.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long freq[100];\n    long max = 0, index = 0;\n    for(int i\
    \ = 0; i< lst.size(); i++) {\n        freq[i] = 0;\n    }\n    for(int i = 0;\
    \ i< lst.size(); i++) {\n        freq[lst[i]]++;\n    }\n    for(int i = 0; i<\
    \ 100; i++){\n        if(freq[i] >= max) {\n            index = i;\n         \
    \   max = freq[i];\n        }\n    }\n    return index;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpzglpig_v: /tmp/tmpzglpig_v.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    std::vector<long> freq(std::begin(lst), std::end(lst));\n    // std::sort(std::begin(freq),\
    \ std::end(freq));\n    auto it = std::lower_bound(std::begin(freq), std::end(freq),\
    \ 0);\n    if (it != std::end(freq) && freq[it] > 0 && freq[it - 1] >= freq[it])\
    \ {\n        ans = *it;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe1nk_939.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe1nk_939.cpp:16:37: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   16 |     if (it != std::end(freq) &&\
    \ freq[it] > 0 && freq[it - 1] >= freq[it]) {\n      |                       \
    \              ^\nIn file included from /usr/include/c++/9/vector:67,\n      \
    \           from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpe1nk_939.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7: note:\
    \ candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp,\
    \ _Alloc>::size_type) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::reference = long int&; std::vector<_Tp, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1040:28: note: \
    \  no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n 1040 |       operator[](size_type __n)\
    \ _GLIBCXX_NOEXCEPT\n      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1058:28: note:   no known\
    \ conversion for argument "
  stdout: ''
  timestamp: 1660101032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    auto max_elem\
    \ = std::max_element(lst.begin(), lst.end());\n    auto it = max_elem.first;\n\
    \    auto end = max_elem.second;\n    long freq = *max_elem++;\n    long value\
    \ = *max_elem++;\n    long ans = -1;\n    while(it != end) {\n        if(*it <=\
    \ value) {\n            freq--;\n            it++;\n        } else {\n       \
    \     ans = *it;\n            break;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptahukmue.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptahukmue.cpp:13:24: error: \u2018class __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 has no member named \u2018first\u2019\n\
    \   13 |     auto it = max_elem.first;\n      |                        ^~~~~\n\
    /tmp/tmptahukmue.cpp:14:25: error: \u2018class __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 has no member named \u2018second\u2019\n\
    \   14 |     auto end = max_elem.second;\n      |                         ^~~~~~\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    std::map<long, int> m;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        m[lst[i]]++;\n    }\n    long ans = -1;\n    for (auto i : m) {\n\
    \        if (i.second >= i.first) {\n            ans = i.first;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpixa0y8no: /tmp/tmpixa0y8no.cpp:29: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0) return -1;\n    long maxVal = lst[0];\n    int freq[maxVal+1];\n    freq[0]\
    \ = 0;\n    for(long i = 1; i <= maxVal; i++) {\n        freq[i] = freq[i-1];\n\
    \    }\n    for(auto i: lst) {\n        if(freq[i-maxVal] >= i) {\n          \
    \  freq[i-maxVal] += 1;\n            if(freq[i-maxVal] > maxVal) maxVal = i-maxVal;\n\
    \        } else {\n            freq[i-maxVal] = 1;\n        }\n    }\n    return\
    \ maxVal;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj32vmqrz: /tmp/tmpj32vmqrz.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // write your\
    \ code here\n    long m = 0, max = 1;\n    long l = lst.size();\n    for (long\
    \ i = 0; i < l; i++) {\n        if (lst[i] == m) {\n            max = lst[i];\n\
    \        }\n    }\n    for (long i = 1; i <= l; i++) {\n        for (long j =\
    \ 0; j < m; j++) {\n            if (lst[i] > lst[j]) {\n                max =\
    \ lst[i];\n                break;\n            }\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1vv7bpzw: /tmp/tmp1vv7bpzw.cpp:33: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    for(auto &x:lst){\n        long freq=count(lst.begin(),lst.end(),x);\n\
    \        if(freq==0){\n            return -1;\n        }\n        else if(freq>=x){\n\
    \            return x;\n        }\n    }\n    return -1;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp3hnsoru4: /tmp/tmp3hnsoru4.cpp:42: int main(): Assertion `candidate((std::vector<long>({9,
    2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,
    8, 10, 9, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    long result = -1;\n    long freq[100];\n    long ans = 0;\n\
    \    for (auto itr : lst) {\n        if (std::find(lst.begin(), lst.end(), itr)\
    \ != lst.end()) {\n            freq[itr] += 1;\n            if (freq[itr] >= itr)\
    \ {\n                ans = itr;\n            }\n        }\n    }\n    if (ans\
    \ == -1) {\n        return -1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy1pg_kzk: /tmp/tmpy1pg_kzk.cpp:33: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    // std::map<long int, long int> m; \n    // for (auto i = 0; i < lst.size();\
    \ i++) {\n    //     m[lst[i]]++;\n    // }\n\n    // map<long, long int> m;\n\
    \    // for (auto it: lst) {\n    //     long key = it;\n    //     long val =\
    \ m.count(key);\n    //     if (val >= 0) {\n    //         return key;\n    //\
    \     }\n    //     else {\n    //         m.insert(std::pair<long, long int>(key,\
    \ 1));\n    //     }\n    // }\n    long max = 0;\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        long val = lst[i];\n        long freq = m.count(val);\n    \
    \    if (freq >= 0) {\n            if (val > max) {\n                max = val;\n\
    \            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxvza4efg.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxvza4efg.cpp:32:21: error: \u2018m\u2019 was not declared\
    \ in this scope\n   32 |         long freq = m.count(val);\n      |          \
    \           ^\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long count[lst[0]];\n\n    for (long i = 0; i < lst[0]; i++) {\n        count[lst[i]]++;\n\
    \    }\n\n    for (long i = 0; i < lst[0]; i++) {\n        if (count[lst[i]] >=\
    \ lst[i]) {\n            ans = i;\n            break;\n        }\n    }\n\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp87npk4if: /tmp/tmp87npk4if.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // your code goes\
    \ here\n    \n    long greatest = 0;\n    long maxFreq = -1;\n    for(auto x:\
    \ lst){\n        auto it = std::find(lst.begin(),lst.end(),x);\n        if(it\
    \ != lst.end()){\n            \n            auto freq = std::count(lst.begin(),lst.end(),x);\n\
    \            if(maxFreq < freq){\n                greatest = x;\n            \
    \    maxFreq = freq;\n            }\n        }\n    }\n    return greatest;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp54kwlzzq: /tmp/tmp54kwlzzq.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  // code here\n \
    \ int l = lst.size();\n  for (int i = 0; i < l; i++) {\n    for (int j = i + 1;\
    \ j < l; j++) {\n      if (lst[j] >= lst[i]) {\n        continue;\n      }\n \
    \     else {\n        long m = std::max(lst[i], lst[j]);\n        if (m == lst[i])\
    \ {\n          lst[j] -= 1;\n        }\n        else if (m == lst[j]) {\n    \
    \      lst[i] += 1;\n        }\n        continue;\n      }\n    }\n  }\n  std::cout\
    \ << lst.front() << std::endl;\n  return lst.front();\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpoqfpio94: /tmp/tmpoqfpio94.cpp:36: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: '5

    '
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0) return -1;\n    \n    long max_value = lst[0];\n    for(long i : lst)\
    \ \n        if(max_value == 0 || max_value < i) max_value = i;\n        \n   \
    \ std::vector<long> frequency;\n    \n    for(long i : lst) {\n        if(frequency.empty()\
    \ || frequency == [i]) {\n            frequency.push_back(i);\n        }\n   \
    \     else if(frequency[i] < i) {\n            frequency.erase(std::remove(frequency[i].begin(),\
    \ frequency[i].end(), i), frequency[i].end());\n            frequency.push_back(i);\n\
    \        }\n    }\n    \n    return max_value;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7th2vvh.cpp: In lambda function:\n/tmp/tmpz7th2vvh.cpp:21:49:\
    \ error: expected \u2018{\u2019 before \u2018)\u2019 token\n   21 |         if(frequency.empty()\
    \ || frequency == [i]) {\n      |                                            \
    \     ^\n/tmp/tmpz7th2vvh.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz7th2vvh.cpp:21:43: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018search(std::vector<long\
    \ int>)::<lambda()>\u2019)\n   21 |         if(frequency.empty() || frequency\
    \ == [i]) {\nIn file included from /usr/include/c++/9/regex:62,\n            \
    \     from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n          \
    \       from /tmp/tmpz7th2vvh.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpz7th2vvh.cpp:21:49:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   21 |         if(frequency.empty() || frequency == [i]) {\n      |       \
    \                                          ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz7th2vvh.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1099:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpz7th2vvh.cpp:21:49: note:   \u2018s"
  stdout: ''
  timestamp: 1660101032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  long res = -1;\n\
    \  std::unordered_map<long, long> frequency;\n  for (long i : lst) {\n    frequency[i]++;\n\
    \  }\n  for (long i : frequency) {\n    if (i > res) {\n      res = i;\n    }\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1a73isv5.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1a73isv5.cpp:17:17: error: cannot convert \u2018std::pair<const\
    \ long int, long int>\u2019 to \u2018long int\u2019 in initialization\n   17 |\
    \   for (long i : frequency) {\n      |                 ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    int ans = -1;\n    for(long i : lst)\n    {\n        long count = 0;\n  \
    \      for(long j : lst)\n        {\n            if(i == j) continue;\n      \
    \      if(j > i) break;\n            else\n            {\n                ++count;\n\
    \            }\n        }\n        if(count > ans) ans = count;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpo04d9ijo: /tmp/tmpo04d9ijo.cpp:33: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    assert(lst.size() > 0);\n    long result = -1;\n    long freq = std::count_if(lst.begin(),\
    \ lst.end(), [&](int val){return val > 0;});\n    if (freq >= lst[0]) {\n    \
    \    result = lst[0];\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpuc7wnk2a: /tmp/tmpuc7wnk2a.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  long max = -1, pos\
    \ = -1;\n  for (int i = 0; i < lst.size(); i++) {\n    if (max < 0 || max < lst[i]\
    \ || pos != lst[i]) {\n      max = lst[i];\n      pos = lst[i];\n    }\n  }\n\
    \  return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbn7jzp7c: /tmp/tmpbn7jzp7c.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::sort(lst.begin(),lst.end());\n\
    \    if(lst.empty() || lst.size()<2)\n        return -1;\n    long mid = lst.size()/2;\n\
    \    long ans = -1;\n    for(long i = 1; i<mid; ++i)\n        if(lst[i] != lst[mid])\n\
    \            break;\n    if(ans < 0)\n        ans = mid;\n    return ans;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpt03o8svp: /tmp/tmpt03o8svp.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  std::stack<long>\
    \ stk;\n  std::stack<long> stk_copy;\n  std::stack<long> stk_copy2;\n  std::stack<long>\
    \ stk_copy3;\n  std::stack<long> stk_copy4;\n  std::vector<long> stk_temp;\n \
    \ std::stack<long> stk_temp2;\n  std::stack<long> stk_temp3;\n  std::stack<long>\
    \ stk_temp4;\n  std::stack<long> stk_temp5;\n  std::stack<long> stk_temp6;\n \
    \ std::stack<long> stk_temp7;\n  std::stack<long> stk_temp8;\n  std::stack<long>\
    \ stk_temp9;\n  std::stack<long> stk_temp10;\n  std::stack<long> stk_temp11;\n\
    \  std::stack<long> stk_temp12;\n  std::stack<long> stk_temp13;\n  std::stack<long>\
    \ stk_temp14;\n  std::stack<long> stk_temp15;\n  std::stack<long> stk_temp16;\n\
    \  std::stack<long> stk_temp17;\n  std::stack<long> stk_temp18;\n  std::stack<long>\
    \ stk_temp19;\n  std::stack<long> stk_temp20;\n  long x = lst[0];\n  long fx =\
    \ x;\n  long y = lst[1];\n  long fy = y;\n  long z = lst[2];\n  long fz = z;\n\
    \  long h = lst[3];\n  long fh = h;\n  long i = lst[4];\n  long fi = i;\n  long\
    \ j = lst[5];\n  long fj = j;\n  long k = lst[6];\n  long fk = k;\n  long l =\
    \ lst[7];\n  long fl = l;\n  long m = lst[8];\n  long fm = m;\n  long n = lst[9];\n\
    \  long fn = n;\n  long o = lst[10];\n  long fo = o;\n  long p = lst[11];\n  long\
    \ fp = p;\n  long q = lst[12];\n  long fq = q;\n  long r = lst[13];\n  long fr\
    \ = r;\n  long s = lst[14];\n  long fs = s;\n  long t = lst[15];\n  long ft =\
    \ t;\n  long u = lst[16];\n  long fu = u;\n  long v = lst[17];\n  long fv = v;\n\
    \  long w = lst[18];\n  long fw = w;\n  long x = lst[19];\n  \n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwuqnhre.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuwuqnhre.cpp:75:8: error: redeclaration of \u2018long\
    \ int x\u2019\n   75 |   long x = lst[19];\n      |        ^\n/tmp/tmpuwuqnhre.cpp:37:8:\
    \ note: \u2018long int x\u2019 previously declared here\n   37 |   long x = lst[0];\n\
    \      |        ^\n/tmp/tmpuwuqnhre.cpp:77:1: warning: no return statement in\
    \ function returning non-void [-Wreturn-type]\n   77 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    for (long i = 0; i < lst.size(); ++i) {\n        long count = std::count(lst.begin(),\
    \ lst.end(), lst[i]);\n        if (count >= lst[i]) \n        {\n            ans\
    \ = lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjkdg02e_: /tmp/tmpjkdg02e_.cpp:35: int main(): Assertion `candidate((std::vector<long>({6,
    9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) ==
    (5)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.size()<=1)\n\
    \        return -1;\n    long ans = lst[0];\n    for(long i = 1; i < lst.size();\
    \ i++) {\n        if(lst[i] > ans && lst[i] >= lst[i-1]) {\n            ans =\
    \ lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpmyc315f1: /tmp/tmpmyc315f1.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int maxi = -1,\
    \ mini = lst[0], freq = 1;\n    for (long i : lst) {\n        if (i != mini &&\
    \ (maxi == -1 || maxi - i != freq || freq == 0)) {\n            maxi = i;\n  \
    \          freq = 1;\n        }\n        else if ((i != mini || freq != 0) &&\
    \ (maxi == -1 || maxi - i != freq || freq == 0))\n            freq++;\n      \
    \  else\n            return maxi;\n    }\n    return -1;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjmtocfdp: /tmp/tmpjmtocfdp.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long greatest_integer = std::numeric_limits<long>::max();\n \
    \   int greatest_integer_freq = 0;\n    for (auto i : lst) {\n        if (i >\
    \ greatest_integer && i > 0) {\n            greatest_integer_freq += 1;\n    \
    \        greatest_integer = i;\n        }\n    }\n    if (greatest_integer_freq\
    \ < lst.size()) {\n        return -1;\n    }\n    return greatest_integer;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpms1ciouf: /tmp/tmpms1ciouf.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::unordered_map<long,\
    \ int> m;\n    for(auto i:lst)\n        m[i]++;\n    long max_val = -1;\n    for(auto\
    \ i:m)\n    {\n        if(i.second > 0 && i.second >= i.first)\n        {\n  \
    \          max_val = std::max(max_val, i.second);\n        }\n    }\n    return\
    \ max_val == -1 ? -1 : max_val;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7sjhnz6t.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7sjhnz6t.cpp:20:49: error: no matching function for call\
    \ to \u2018max(long int&, int&)\u2019\n   20 |             max_val = std::max(max_val,\
    \ i.second);\n      |                                                 ^\nIn file\
    \ included from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7sjhnz6t.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7sjhnz6t.cpp:20:49: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018int\u2019)\n   20 |             max_val = std::max(max_val, i.second);\n\
    \      |                                                 ^\nIn file included from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7sjhnz6t.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp7sjhnz6t.cpp:20:49:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   20 |             max_val = std::max(max_val,\
    \ i.second);\n      |                                                 ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \            "
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = 0;\n\
    \    long count = 0;\n    for (long i = 0; i < (long)lst.size(); i++) {\n    \
    \    if (lst[i] == (lst[ans]))\n            count++;\n        else {\n       \
    \     ans++;\n            count = 1;\n        }\n        if (count >= (lst[i]))\n\
    \            break;\n    }\n    if (count == lst[ans])\n        return ans;\n\
    \    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpi3ny5rg_: /tmp/tmpi3ny5rg_.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    \n    if(lst.size()\
    \ == 0) return -1;\n    \n    // create a map with number of occurences\n    std::map<long,\
    \ int> map;\n    \n    for(long n: lst) \n        ++map[n];\n    \n    long max_val\
    \ = std::numeric_limits<long>::max();\n    long min_val = std::numeric_limits<long>::min();\n\
    \    \n    for(long n: lst) \n        map[n] -= 1;\n    \n    // if all values\
    \ are 0, then return -1\n    for(auto x: map) \n        if(x.second == 0) return\
    \ -1;\n    \n    for(auto x: map) \n        if(x.second == 0) \n            if(x.first\
    \ >= max_val) \n                max_val = x.first;\n            else \n      \
    \          if(x.first < min_val) \n                    min_val = x.first;\n  \
    \  \n    return max_val;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpo04h_oi_: /tmp/tmpo04h_oi_.cpp:43: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n   long maxValue =\
    \ -1LL;\n   long currValue = 0; \n   long freq = 0; \n   for(long val : lst) {\n\
    \       currValue += val;\n       freq++;\n       if(maxValue < currValue) \n\
    \          maxValue = currValue;\n   }\n   if(maxValue == -1LL) return -1LL;\n\
    \   else if(freq >= maxValue) \n      return maxValue; \n   else {\n      for(long\
    \ val : lst) {\n          if(val == maxValue) {\n             return maxValue;\
    \ \n          } \n      }\n   }\n   return -1LL;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0nun4n8y: /tmp/tmp0nun4n8y.cpp:35: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long res = -1;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0) {\n    \
    \        if (res < 0 || lst[res] >= lst[i]) res = i;\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxmsa2314: /tmp/tmpxmsa2314.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    std::sort(lst.begin(), lst.end(), std::greater<long>());\n    for\
    \ (long i = 1; i < lst.size(); i++) {\n        if (lst[i] != lst[i - 1]) {\n \
    \           return -1;\n        }\n    }\n    return lst[lst.size() - 1];\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpa13ed_yg: /tmp/tmpa13ed_yg.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    for(auto i : lst) {\n        long val = i;\n        if(val > 0) {\n     \
    \       int count = 0;\n            for(auto j : lst) {\n                if(j\
    \ == val) {\n                    count++;\n                }\n            }\n\
    \            assert(count >= 1);\n            ans = max(ans, val);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7t691cb.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb7t691cb.cpp:23:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   23 |             ans =\
    \ max(ans, val);\n      |                   ^~~\n      |                   std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpb7t691cb.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // code here\n\
    \    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpeuf7zv2c: /tmp/tmpeuf7zv2c.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101031
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long low = 0,\
    \ high = lst.size() - 1;\n    while (low < high) {\n        // calculate mid\n\
    \        long mid = (low + high) / 2;\n        // calculate frequency\n      \
    \  long frequency = lst.count(lst[mid]);\n        if (frequency >= mid) {\n  \
    \          high = mid - 1;\n        } else {\n            low = mid + 1;\n   \
    \     }\n    }\n    // if no such value exist\n    if (low >= lst.size()) {\n\
    \        return -1;\n    } else {\n        return lst[low];\n    }\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy7t_cr0g.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy7t_cr0g.cpp:17:30: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   17 |         long frequency\
    \ = lst.count(lst[mid]);\n      |                              ^~~~~\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int cnt = 0;\n\
    \    long maxVal = lst[0];\n    for(auto it=lst.begin(); it!=lst.end(); ++it)\
    \ {\n        if(*it > maxVal) {\n            cnt ++;\n            maxVal = *it;\n\
    \        }\n    }\n    return cnt > 0 ? maxVal : -1;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpia5hg1_r: /tmp/tmpia5hg1_r.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    int count = 0;\n    for (int i=0; i<lst.size(); i++) {\n        if (lst[i]\
    \ == 0) continue;\n        count+=1;\n    }\n    \n    if (count <= 0) return\
    \ -1;\n    long long res = -1;\n    for (int i=0; i<lst.size(); i++) {\n     \
    \   if (lst[i] == 0) {\n            if (res == -1) res = i;\n            continue;\n\
    \        }\n        if (count >= (lst[i] + 1)) {\n            res = i;\n     \
    \       break;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf8h3pga0: /tmp/tmpf8h3pga0.cpp:35: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    std::vector<long> freq;\n    for (long i : lst) {\n        if (freq.find(i)\
    \ != freq.end()) {\n            freq[i] += 1;\n        } else {\n            freq.push_back(i);\n\
    \        }\n    }\n    for (long i : freq) {\n        if (i > 0 && i <= ans) {\n\
    \            ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgrfihvqz.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgrfihvqz.cpp:15:18: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   15 |         if (freq.find(i)\
    \ != freq.end()) {\n      |                  ^~~~\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    if(lst.empty())\n        return -1;\n    long res = 0;\n    for(auto it =\
    \ lst.begin(); it != lst.end(); it++) {\n        if(*it > res)\n            res=*it;\n\
    \    }\n    for(auto it = lst.begin(); it != lst.end(); it++) {\n        if(*it\
    \ == res)\n            if(lst.count(*it) > lst.size()/2)\n                return\
    \ *it;\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy0ew4c4z.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy0ew4c4z.cpp:22:20: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   22 |             if(lst.count(*it)\
    \ > lst.size()/2)\n      |                    ^~~~~\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Complete this\
    \ function\n    \n    long ret = 0;\n    for(long i = 0; i < lst.size(); i++)\n\
    \    {\n        if (lst[i] >= 0)\n        {\n            if (lst.count(lst[i])\
    \ > lst.size())\n            {\n                ret = -1;\n                break;\n\
    \            }\n            if (lst.count(lst[i]) == lst.size())\n           \
    \ {\n                ret = lst[i];\n                break;\n            }\n  \
    \      }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6shd51l.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj6shd51l.cpp:19:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   19 |             if (lst.count(lst[i])\
    \ > lst.size())\n      |                     ^~~~~\n/tmp/tmpj6shd51l.cpp:24:21:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018count\u2019\
    \n   24 |             if (lst.count(lst[i]) == lst.size())\n      |          \
    \           ^~~~~\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxValue\
    \ = INT_MIN;\n    long maxFreq = -1;\n    for (long i : lst)\n        if (i >\
    \ 0)\n            if (maxValue > i)\n                maxValue = i;\n         \
    \   if (maxFreq > i)\n                maxFreq = i;\n    return maxFreq;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpruorwrqb.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpruorwrqb.cpp:18:27: error: \u2018i\u2019 was not declared\
    \ in this scope\n   18 |             if (maxFreq > i)\n      |               \
    \            ^\n"
  stdout: ''
  timestamp: 1660101032
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Code here\n\
    \    // std::vector<long> vec;\n    // std::map<int, int> m;\n    // for (int\
    \ i = 0; i< lst.size(); i++) {\n    //     int val = lst[i];\n    //     if (m.find(val)\
    \ != m.end()) {\n    //         m[val] = m[val] + 1;\n    //     } else {\n  \
    \  //         m[val] = 1;\n    //     }\n    // }\n    // for (auto m : m) {\n\
    \    //     if (m.second >= lst.size()) {\n    //         return m.first;\n  \
    \  //     }\n    // }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5w1jhkek: /tmp/tmp5w1jhkek.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans=-1;\n    for(auto it=lst.begin();it!=lst.end();it++) {\n       \
    \ if (lst.count(*it) > 1) {\n            ans = *it;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppe_nqkj_.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppe_nqkj_.cpp:15:17: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   15 |         if (lst.count(*it)\
    \ > 1) {\n      |                 ^~~~~\n"
  stdout: ''
  timestamp: 1660101031
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long max_int = -9999;\n    long cnt = 0;\n    for (long item : lst) {\n \
    \       if (item > max_int && item > cnt) {\n            max_int = item;\n   \
    \         cnt = 1;\n        } else if (item == max_int) {\n            cnt++;\n\
    \        }\n    }\n    if (max_int == -9999) {\n        return -1;\n    }\n  \
    \  return max_int;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpc0pobjhc: /tmp/tmpc0pobjhc.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101033
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long maxval = (lst.at(0) >= 0? lst.at(0) : -1);\n    for (long i : lst){\n\
    \        if (i <= 0)\n            return -1;\n        if (i > maxval)\n      \
    \      maxval = i;\n    }\n    return maxval;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpe1_2e2jn: /tmp/tmpe1_2e2jn.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101034
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    // Solution \n    long freq[100] = {0};\n    for(auto elem :\
    \ lst)\n        freq[elem]++;\n    for(long i = 0; i < 100; i++)\n        if(freq[i]\
    \ >= lst[i])\n            return i;\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf1sohpt0: /tmp/tmpf1sohpt0.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code goes\
    \ here\n    std::map<long, long> m;\n    for (long x: lst) {\n        m[x]++;\n\
    \        if (m[x] > m[x-1]) {\n            return x;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4kmk5ehp: /tmp/tmp4kmk5ehp.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code goes\
    \ here\n    long m = 0, n = 0;\n    for (long i = 0; i < lst.size(); i++){\n \
    \       if(lst.at(i) > 0){\n            n = n + 1;\n        }\n        if(lst.at(i)\
    \ == lst.at(m)){\n            m = m + 1;\n        }\n    }\n    return lst.at(n);\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 5) >= this->size() (which is 5)\n"
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long freq[1000];\n\
    \    long maxfreq;\n    long max = -1;\n    for (long &i : lst) {\n        int\
    \ index = 0;\n        while (index<1000 && lst[index]!=i) index++;\n        if\
    \ (index>0) {\n            freq[index-1]++;\n        } else {\n            break;\n\
    \        }\n    }\n    maxfreq=freq[0];\n    for (long i=1;i<1000;i++) {\n   \
    \     if (freq[i]>maxfreq) {\n            max=i;\n            maxfreq=freq[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm6evcpx_: /tmp/tmpm6evcpx_.cpp:35: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code goes\
    \ here\n    long ans = -1;\n    int count = 0;\n    for (long i : lst) {\n   \
    \     if (i > 0 && count < i)\n            ans = i;\n        ++count;\n    }\n\
    \    if (ans != -1)\n        return ans;\n    long temp = -1;\n    for (long i\
    \ : lst) {\n        if (i == 0)\n            continue;\n        if (temp < i)\n\
    \            temp = i;\n    }\n    if (temp != -1)\n        return temp;\n   \
    \ else \n        return -1;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpo02846ku: /tmp/tmpo02846ku.cpp:36: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::vector<std::pair<long,\
    \ long>> freq(std::make_pair(0, 0));\n    for (auto i : lst) {\n        auto found\
    \ = std::find(lst.begin(), lst.end(), i);\n        assert(found != lst.end());\n\
    \        ++freq[i - lst[found]].first;\n        ++freq[i - lst[found]].second;\n\
    \    }\n    for (auto i : freq) {\n        if (i.first != 0 || i.second != 0)\
    \ {\n            return i.first;\n        }\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp78p3tydg.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp78p3tydg.cpp:12:65: error: no matching function for call\
    \ to \u2018std::vector<std::pair<long int, long int> >::vector(std::pair<int,\
    \ int>)\u2019\n   12 |     std::vector<std::pair<long, long>> freq(std::make_pair(0,\
    \ 0));\n      |                                                              \
    \   ^\nIn file included from /usr/include/c++/9/vector:67,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp78p3tydg.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2: note: candidate:\
    \ \u2018template<class _InputIterator, class> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\u2019\n  650 |  vector(_InputIterator\
    \ __first, _InputIterator __last,\n      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp78p3tydg.cpp:12:65:\
    \ note:   candidate expects 3 arguments, 1 provided\n   12 |     std::vector<std::pair<long,\
    \ long>> freq(std::make_pair(0, 0));\n      |                                \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp78p3tydg.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = std::pair<long int, long int>; _Alloc = std::allocator<std::pair<long\
    \ int, long int> >; std::vector<_Tp, _Alloc>::allocator_type = std::allocator<std::pair<long\
    \ int, long int> >]\u2019\n  622 |       ve"
  stdout: ''
  timestamp: 1660101034
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n   assert(lst.size()\
    \ > 0);\n   int count[26] = {0};\n   for(int i : lst) ++count[i & 31];\n   long\
    \ ans = -1;\n   for(int i = 0; i < 26; ++i)\n      if(count[i] >= lst.size())\
    \ return -1;\n   for(int i = 0; i < 26; ++i)\n      if(count[i] >= lst.size())\
    \ continue;\n      if(count[i] < lst.size() && count[i] > count[i & 31]) ans =\
    \ i;\n   return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ilwfwjt.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1ilwfwjt.cpp:20:16: error: \u2018i\u2019 was not declared\
    \ in this scope\n   20 |       if(count[i] < lst.size() && count[i] > count[i\
    \ & 31]) ans = i;\n      |                ^\n"
  stdout: ''
  timestamp: 1660101034
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    \n    // std::set is used to store unique elements and std::map is\
    \ used for storing frequency of element in a list.\n    // Key is element and\
    \ value is frequency\n    std::set<long> uset;\n    std::map<long, int> umap;\n\
    \    for (long x : lst) {\n        uset.insert(x);\n        umap[x] = umap.count(x)\
    \ + 1;\n    }\n    \n    long res = -1;\n    for (long x : uset) {\n        if\
    \ (umap.count(x) > 0) {\n            if (umap.at(x) > 0) {\n                res\
    \ = x;\n            }\n        }\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpx9no4jmo: /tmp/tmpx9no4jmo.cpp:36: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long freq = 0;\n\
    \    long max_freq = 0;\n    long temp = 0;\n\n    for (auto i : lst) {\n    \
    \    freq = std::count(lst.begin(), lst.end(), i);\n        max_freq = std::max(freq,\
    \ max_freq);\n        if (freq >= i) {\n            temp = i;\n        }\n   \
    \ }\n\n    if (temp == -1) {\n        return -1;\n    }\n\n    return max_freq;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpr2ev89z7: /tmp/tmpr2ev89z7.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    if (lst.size() == 0 || lst.front() == 0)\n        return -1;\n    long ans\
    \ = lst.front();\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ < ans) {\n            if (ans > 0)\n                return -1;\n           \
    \ ans = lst[i];\n        } else {\n            if (ans > lst[i])\n           \
    \     ans = lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpziansgp5: /tmp/tmpziansgp5.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n   long res = -1;\n\
    \   int counter[100], size = lst.size();\n   for (int i = 0; i < size; i++) {\n\
    \      counter[lst[i]]++;\n   }\n\n   for (int i = size-1; i >= 0; i--) {\n  \
    \    if (counter[lst[i]] >= counter[lst[i]]+1) {\n         counter[lst[i]]--;\n\
    \         res = lst[i];\n      }\n   }\n   return res;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6fuuljk1: /tmp/tmp6fuuljk1.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  long ans = -1;\n\
    \  if (lst.empty())\n    return -1;\n  long v = lst.front();\n  for (long i :\
    \ lst) {\n    if (v == i)\n      continue;\n    if (i > v)\n      ans = i;\n \
    \   else if (v < i)\n      ans = -1;\n    break;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm8b4rg2m: /tmp/tmpm8b4rg2m.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long result =\
    \ -1;\n    long n = lst.size();\n    long freq[100000]; // frequency of each unique\
    \ number\n    long max = 0;\n    for (long i = 0; i < n; i++) // make frequency\
    \ of each unique number\n        freq[lst[i]]++;\n    for (long i = 0; i < n;\
    \ i++) { // find the max number\n        if (freq[i] >= max) {\n            max\
    \ = freq[i];\n            result = lst[i];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpsvbbnp36: /tmp/tmpsvbbnp36.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long res = -1;\n    unordered_map<long, int> temp;\n    for (auto v : lst)\
    \ {\n        temp[v]++;\n    }\n    for (auto it = temp.begin(); it != temp.end();\
    \ it++) {\n        if (it->second >= it->first) {\n            res = it->first;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznymt6gy.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpznymt6gy.cpp:14:5: error: \u2018unordered_map\u2019 was\
    \ not declared in this scope\n   14 |     unordered_map<long, int> temp;\n   \
    \   |     ^~~~~~~~~~~~~\n/tmp/tmpznymt6gy.cpp:14:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/unordered_map:47,\n                 from\
    \ /usr/include/c++/9/functional:61,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpznymt6gy.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:102:11: note:\
    \   \u2018std::unordered_map\u2019\n  102 |     class unordered_map\n      | \
    \          ^~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/functional:61,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpznymt6gy.cpp:2:\n/usr/include/c++/9/unordered_map:68:13:\
    \ note:   \u2018std::pmr::unordered_map\u2019\n   68 |       using unordered_map\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmpznymt6gy.cpp:14:19: error: expected\
    \ primary-expression before \u2018long\u2019\n   14 |     unordered_map<long,\
    \ int> temp;\n      |                   ^~~~\n/tmp/tmpznymt6gy.cpp:16:9: error:\
    \ \u2018temp\u2019 was not declared in this scope\n   16 |         temp[v]++;\n\
    \      |         ^~~~\n/tmp/tmpznymt6gy.cpp:18:20: error: \u2018temp\u2019 was\
    \ not declared in this scope\n   18 |     for (auto it = temp.begin(); it != temp.end();\
    \ it++) {\n      |                    ^~~~\n"
  stdout: ''
  timestamp: 1660101034
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    \n    long res = 0;\n    long freq = 0;\n    long temp = 0;\n\
    \    for (long i : lst) {\n        if (freq >= i) {\n            freq -= i;\n\
    \            res = i;\n        } else if (freq < i) {\n            freq = i;\n\
    \            temp = i;\n        }\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpl9qlbi6m: /tmp/tmpl9qlbi6m.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // O(M+N) solution\n\
    \    std::vector<int> freq(std::begin(lst), std::end(lst));\n    std::sort(std::begin(freq),\
    \ std::end(freq));\n    std::vector<int>::iterator itr = std::upper_bound(std::begin(freq),\
    \ std::end(freq), 0);\n    if (itr == std::begin(freq)) {\n        return -1;\n\
    \    }\n    long result = 0;\n    for (itr = std::begin(freq); itr != std::end(freq);\
    \ ++itr) {\n        if (result <= *itr) {\n            return result;\n      \
    \  }\n        result *= *itr + 1;\n    }\n    return -1;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpq9t8at7n: /tmp/tmpq9t8at7n.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    if (n == 0)\n        return -1;\n    int m = 0;\n    while (m <= lst.size()\
    \ - n) {\n        int count = 0;\n        for (int i = m; i <= m + n; i++)\n \
    \           count += lst.at(i);\n        if (count >= lst.at(m + n))\n       \
    \     return lst.at(m + n);\n        m++;\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 5) >= this->size() (which is 5)\n"
  stdout: ''
  timestamp: 1660101036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0) {\n        return -1;\n    }\n    long maxVal = std::max_element(lst.begin(),\
    \ lst.end()) - lst.begin();\n    long freq = std::count(lst.begin(), lst.end(),\
    \ maxVal);\n    if(max >= freq) {\n        return maxVal;\n    } else {\n    \
    \    return -1;\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp812wz5x5.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp812wz5x5.cpp:17:8: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |     if(max >= freq)\
    \ {\n      |        ^~~\n      |        std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp812wz5x5.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp812wz5x5.cpp:22:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   22 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long max_val =\
    \ INT_MIN;\n    int max_freq = 0;\n    \n    for(auto val : lst){\n        if(val\
    \ > max_val){\n            max_val = val;\n            max_freq = 1;\n       \
    \ }\n        else if(val == max_val && max_freq > 1){\n            max_freq++;\n\
    \        }\n    }\n    return max_val == INT_MIN ? -1 : max_val;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpu4usrz7b: /tmp/tmpu4usrz7b.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    long res = -1;\n    long max = std::numeric_limits<long>::max();\n\
    \    for(auto i : lst) {\n        if(max < i) {\n            max = i;\n      \
    \      res = -1;\n        }\n        else if(max >= i) {\n            max = i;\n\
    \            res = i;\n        }\n    }\n    return res;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp59n5794n: /tmp/tmp59n5794n.cpp:31: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = 0;\n\
    \    long maxFreq = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n      \
    \  if (lst[i] > 0 && lst[i] >= maxFreq) {\n            maxFreq = lst[i];\n   \
    \         ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphl71l6fn: /tmp/tmphl71l6fn.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    sort(lst.begin(),\
    \ lst.end());\n    long max = lst.front();\n    for (long i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n\
    \    }\n    if (max == 0) {\n        return -1;\n    }\n    for (long i = 0; i\
    \ < lst.size(); i++) {\n        if (lst[i] == max) {\n            return i;\n\
    \        }\n    }\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpide1lgl9: /tmp/tmpide1lgl9.cpp:32: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long result = INT_MIN;\n    for (int i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] < result) {\n            result = lst[i];\n        }\n\
    \        if (lst[i] == result && lst[i] < lst[i + 1]) {\n            result =\
    \ lst[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf9_1axvl: /tmp/tmpf9_1axvl.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long max_val =\
    \ 0, max_idx = 0;\n    std::vector<int> freq(std::end(lst), 0);\n    std::for_each(lst.begin(),\
    \ lst.end(), [&](long val){\n        freq[val]++;\n    });\n    for(long i = 1;\
    \ i < freq.size(); ++i) {\n        if(freq[i] >= freq[max_idx]) {\n          \
    \  max_val = i;\n            max_idx = i;\n        }\n    }\n    return max_val;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvxvyt9gp.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvxvyt9gp.cpp:13:43: error: no matching function for call\
    \ to \u2018std::vector<int>::vector(std::vector<long int>::iterator, int)\u2019\
    \n   13 |     std::vector<int> freq(std::end(lst), 0);\n      |              \
    \                             ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvxvyt9gp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpvxvyt9gp.cpp:13:43: note:   deduced conflicting types for parameter\
    \ \u2018_InputIterator\u2019 (\u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018int\u2019)\n   13 |     std::vector<int> freq(std::end(lst),\
    \ 0);\n      |                                           ^\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvxvyt9gp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = int; _Alloc = std::allocator<int>; std::vector<_Tp,\
    \ _Alloc>::allocator_type = std::allocator<int>]\u2019\n  622 |       vector(initializer_list<value_type>\
    \ __l,\n      |       ^~~~~~\n/usr/include/"
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int N = lst.size();\n\
    \    long ans = -1;\n    std::vector<long> freq(lst.size());\n    // To find the\
    \ frequency of given integer we need to loop through the entire list.\n    //\
    \ If frequency of the given integer is greater than or equal to the frequency\
    \ of the integer \n    // in the list then we need to find the greatest integer\
    \ which is greater than zero.\n    for (int i = 0; i < N; i++)\n        freq[i]\
    \ = 0;\n    for (int i = 0; i < N; i++)\n    {\n        freq[lst[i]]++;\n    }\n\
    \    \n    for (int i = 0; i < N; i++)\n    {\n        if (freq[i] >= N)\n   \
    \         break;\n        else if (freq[i] > 0)\n        {\n            long greatest\
    \ = i;\n            long temp = 0;\n            for (int j = i; j < N; j++)\n\
    \            {\n                temp = lst[j];\n                if (lst[j] >=\
    \ lst[greatest])\n                {\n                    greatest = j;\n     \
    \               break;\n                }\n            }\n            if (greatest\
    \ == i)\n            {\n                ans = lst[greatest];\n               \
    \ break;\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpfl9sxldy: /tmp/tmpfl9sxldy.cpp:53: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long res = -1,\
    \ val = 0;\n    for (auto & i : lst) {\n        ++val;\n        if (i > val) {\n\
    \            res = -1;\n            break;\n        } else if (i == val) {\n \
    \           res = i;\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpg5_gsdri: /tmp/tmpg5_gsdri.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    sort(lst.begin(),\
    \ lst.end()); \n    long ret = 0;\n    long i = 0;\n    while (i + 1 < lst.size()\
    \ && lst[i] >= lst[i + 1]) ++i;\n    if (lst[i] >= 0) {\n        for (; i <= lst.size()\
    \ - 1; ++i) {\n            if (lst[i] >= lst[i + 1]) {\n                ret =\
    \ lst[i + 1];\n            }\n        }\n    }\n    return ret >= 0 ? ret : -1;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9ywhmnrq: /tmp/tmp9ywhmnrq.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long long min\
    \ = INT_MAX;\n    long long max = INT_MIN;\n    for(auto& i:lst)\n    {\n    \
    \    if(min > i)\n            min = i;\n        if(max < i)\n            max =\
    \ i;\n    }\n    if(max == min)\n        return -1;\n    long long res = -1;\n\
    \    for(auto& i:lst)\n    {\n        if(i > max || i < min)\n            continue;\n\
    \        if(i > max)\n        {\n            if(i == res)\n                return\
    \ -1;\n            else\n                res = i;\n        }\n        else if(i\
    \ < min)\n        {\n            if(i == res)\n                return -1;\n  \
    \          else\n                res = i;\n        }\n        else\n        {\n\
    \            if(i == res)\n                return i;\n            else\n     \
    \           res = i;\n        }\n    }\n    return res;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpobb9apsi: /tmp/tmpobb9apsi.cpp:54: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::vector<bool>\
    \ v;\n    std::set<long> s;\n    // to find frequency of number\n    for(long\
    \ i : lst) {\n        // if we found same number in list before\n        if(s.find(i)\
    \ != s.end()) v[i] = true;\n        else s.insert(i);\n    }\n    // finding greatest\
    \ number whose frequency is greater than or equal to number\n    long ans = -1;\n\
    \    for(long i : lst) {\n        // if number is not found at all\n        if(!v[i])\
    \ continue;\n        // if frequency is greater than or equal to number itself\n\
    \        if(frequency(v, i) >= i) ans = i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgf5h_ibb.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgf5h_ibb.cpp:26:12: error: \u2018frequency\u2019 was not\
    \ declared in this scope\n   26 |         if(frequency(v, i) >= i) ans = i;\n\
    \      |            ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long n = lst.size();\n\
    \    if (n == 0) return -1;\n    long max_element = -1;\n    long current_element\
    \ = lst[0];\n    for (long i = 1; i < n; ++i) {\n        if (current_element ==\
    \ lst[i]) {\n            current_element++;\n            continue;\n        }\
    \ else {\n            if (current_element > max_element) {\n                max_element\
    \ = current_element;\n            }\n            current_element = lst[i];\n \
    \       }\n    }\n    if (max_element == -1) max_element = 0;\n    return max_element;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp76m389ab: /tmp/tmp76m389ab.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    long currMax = -1;\n    long currFreq = 0;\n    long currVal\
    \ = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] >\
    \ currVal) {\n            currFreq = 0;\n            currVal = lst[i];\n     \
    \   } else if (lst[i] == currVal) {\n            currFreq++;\n        }\n    \
    \    if (currFreq > currMax) {\n            currMax = currFreq;\n            currVal\
    \ = lst[i];\n        }\n    }\n    return currMax;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp90i31h05: /tmp/tmp90i31h05.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    long maxFreq = 0;\n    for (long freq = 1; freq < lst.size();\
    \ freq++) {\n        if (lst.at(freq) >= maxFreq) {\n            maxFreq = lst.at(freq);\n\
    \        }\n    }\n    if (maxFreq == 0) return -1;\n    for (long freq = lst.size()\
    \ - 1; freq >= 0; freq--) {\n        if (lst.at(freq) > maxFreq) {\n         \
    \   maxFreq = lst.at(freq);\n        }\n    }\n    return maxFreq;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvw246wrs: /tmp/tmpvw246wrs.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long max = INT_MIN;\n    long cur = lst[0];\n    for(long i : lst)\n    {\n\
    \        if (i >= max) {\n            ans = -1;\n            max = i;\n      \
    \  } else if (i > max) {\n            ans = max;\n            max = i;\n     \
    \   }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpt7n9_ow0: /tmp/tmpt7n9_ow0.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long maxVal = INT_MIN;\n    long maxFreq = INT_MIN;\n    for (auto x: lst)\
    \ {\n        maxFreq = std::max(maxFreq,std::count_if(lst.begin(),lst.end(),[&x](long\
    \ y){return y>=x;}));\n        maxVal = std::max(maxVal,x);\n    }\n    if (maxFreq>=lst.size())\
    \ {\n        return -1;\n    }\n    return maxVal;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpohtnxn5p: /tmp/tmpohtnxn5p.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long low = 0,\
    \ high = lst.size()-1;\n    while(low<=high) {\n        long mid = (low+high)/2;\n\
    \        if(lst[mid]>0) {\n            low = mid +1;\n        }\n        else\
    \ if(lst[mid]==0) {\n            return lst[mid];\n        }\n        else if(lst[mid]<0)\
    \ {\n            high = mid -1;\n        }\n        else {\n            low =\
    \ mid + 1;\n            high = mid - 1;\n        }\n    }\n    return -1;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbudslml9: /tmp/tmpbudslml9.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ INT_MIN;\n    long maxFreq = 0;\n    long freq = 0;\n    for (auto const &num\
    \ : lst) {\n        if (num > 0) {\n            freq++;\n            if (num ==\
    \ maxVal) {\n                if (freq > maxFreq) {\n                    maxVal\
    \ = num;\n                    maxFreq = freq;\n                }\n           \
    \ } else {\n                if (freq >= maxFreq) {\n                    maxVal\
    \ = num;\n                    maxFreq = freq;\n                }\n           \
    \ }\n        }\n    }\n    if (maxVal == INT_MIN) {\n        return -1;\n    }\
    \ else {\n        return maxVal;\n    }\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpl0khh5s1: /tmp/tmpl0khh5s1.cpp:41: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n        long res =\
    \ -1;\n        std::sort(lst.begin(),lst.end());\n        for(long i:lst)\n  \
    \      {\n            if(i>0)\n            {\n                if(res==-1)\n  \
    \              {\n                    res = i;\n                }\n          \
    \      else\n                {\n                    if(res==i || res>i)\n    \
    \                {\n                        res = i;\n                    }\n\
    \                }\n            }\n        }\n        return res;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpcmeujdoq: /tmp/tmpcmeujdoq.cpp:36: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long res = -1;\n\
    \    long n = lst.size();\n    for (int i = 0; i < n; i++)\n        for (int j\
    \ = i + 1; j < n; j++) {\n            if (lst[i] >= lst[j]) {\n              \
    \  if (lst[i] > res)\n                    res = lst[i];\n                break;\n\
    \            }\n        }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdmznj9g0: /tmp/tmpdmznj9g0.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    long max_val = lst[0];\n    long freq = lst.size() - 1;\n    for\
    \ (long i : lst) {\n        freq--;\n        if (freq > 0 && i == max_val) {\n\
    \            max_val = i;\n            freq = lst.size() - 1;\n        } else\
    \ {\n            if (freq <= 0) {\n                return -1;\n            }\n\
    \        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp2yxhh68m: /tmp/tmp2yxhh68m.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n        long max_value\
    \ = 0;\n        long min_value = INT_MAX;\n        for (long i = 0; i < lst.size();\
    \ i++) {\n            int value = 0;\n            if (lst.at(i) == 0) {\n    \
    \            assert(false);\n            } else {\n                for (int j\
    \ = 0; j < i; j++) {\n                    if (lst.at(i) == lst.at(j)) {\n    \
    \                    value++;\n                    }\n                }\n    \
    \            if (value > 0) {\n                    if (value > max_value) {\n\
    \                        max_value = value;\n                    }\n         \
    \       } else if (value < min_value) {\n                    min_value = value;\n\
    \                }\n            }\n        }\n        return max_value >= min_value\
    \ ? max_value : -1;\n    }\n</code>\n<|/ a |>\n<| c |>\nIn `search([4, 1, 2, 2,\
    \ 3, 1]) == 2`, your output should be 2 but you output 1.\n<|/ c |>\n<| c |>\n\
    It is not homework, it is my homework.\n<|/ c |>\n<| c |>\nThat is not how SO\
    \ works. If you have a specific programming issue, you should open a new question\
    \ with details. Please see [how to ask](https://stackoverflow.com/help/how-to-ask)\
    \ before posting.\n<|/ c |>\n<| c |>\nI have opened new question [here](https://stackoverflow.com/questions/57427692/how-to-solve-this-algorithm-for-finding-the-number-of-times-an-element-appears-in-an)\n\
    <|/ c |>\n<| c |>\nPlease don't ask a question multiple times. I rolled back your\
    \ edit. Also, please see the link in my comment above.\n<|/ c |>\n<| a tags=algorithm,c++,stl,big-o\
    \ dscore=1 |>\nA simple solution would be to use std::map<>'s count() function\
    \ to count the frequency of elements in your array. Using std::set<>'s find()\
    \ function would allow you to find the largest frequency in the set (using its\
    \ upper_bound() function). If the size of the set is more than 1, then return\
    \ the last element in the set (which will be the greatest frequency).\n<|/ a |>\n\
    <| c |>\nThe problem is that it has to be a O(N) algorithm.\n<|/ c |>\n<| c |>\n\
    What do you mean by O(N)? The solution I provided takes O(n) time and O(1) space.\n\
    <|/ c |>\n<| c |>\nO(N) means O(N) algorithm. That means if the input size is\
    \ N then it has to take N+1 time O(N) to complete the task. That's why I mentioned\
    \ O(N). And I don't want to use std::map or std::set for solving this problem.\n\
    <|/ c |>\n<| c |>\nO(N) means O(N) algorithm. What you said \n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj4k7yr6i.cpp:38:4: error: stray \u2018`\u2019 in program\n   38\
    \ | In `search([4, 1, 2, 2, 3, 1]) == 2`, your output should be 2 but you output\
    \ 1.\n      |    ^\n/tmp/tmpj4k7yr6i.cpp:38:36: error: stray \u2018`\u2019 in\
    \ program\n   38 | In `search([4, 1, 2, 2, 3, 1]) == 2`, your output should be\
    \ 2 but you output 1.\n      |                                    ^\n/tmp/tmpj4k7yr6i.cpp:50:11:\
    \ warning: missing terminating ' character\n   50 | Please don't ask a question\
    \ multiple times. I rolled back your edit. Also, please see the link in my comment\
    \ above.\n      |           ^\n/tmp/tmpj4k7yr6i.cpp:50:11: error: missing terminating\
    \ ' character\n   50 | Please don't ask a question multiple times. I rolled back\
    \ your edit. Also, please see the link in my comment above.\n      |         \
    \  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj4k7yr6i.cpp:53:45: warning: character constant too long for its type\n\
    \   53 | A simple solution would be to use std::map<>'s count() function to count\
    \ the frequency of elements in your array. Using std::set<>'s find() function\
    \ would allow you to find the largest frequency in the set (using its upper_bound()\
    \ function). If the size of the set is more than 1, then return the last element\
    \ in the set (which will be the greatest frequency).\n      |                \
    \                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj4k7yr6i.cpp:62:122: warning: character constant too long for its type\n\
    \   62 | O(N) means O(N) algorithm. That means if the input size is N then it\
    \ has to take N+1 time O(N) to complete the task. That's why I mentioned O(N).\
    \ And I don't want to use std::map or std::set for solving this problem.\n   \
    \   |                                                                        \
    \                                                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpj4k7yr6i.cpp:35:1: error: expected unqualified-id before \u2018<\u2019\
    \ token\n   35 | </code>\n      | ^\n/tmp"
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // your code goes\
    \ here\n    long ans = -1;\n    for (int i = 0; i < lst.size(); i++)\n       \
    \ std::cout << \"Searching for \" << lst[i] << \". Found at \" << i << std::endl;\n\
    \    long maxVal = std::numeric_limits<long>::min();\n    for (int i = 0; i <\
    \ lst.size(); i++)\n        if (lst[i] > maxVal)\n            maxVal = lst[i];\n\
    \    for (int i = 0; i < lst.size(); i++)\n        if (lst[i] == maxVal)\n   \
    \         ans++;\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpep6onom0: /tmp/tmpep6onom0.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: 'Searching for 5. Found at 0

    Searching for 5. Found at 1

    Searching for 5. Found at 2

    Searching for 5. Found at 3

    Searching for 1. Found at 4

    '
  timestamp: 1660101036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) return -1;\n    auto result = lst.begin();\n    for (auto it = lst.begin();\
    \ it != lst.end(); ++it) {\n        for (auto jt = result; jt != lst.end(); )\
    \ {\n            if (*it > *jt) {\n                auto temp = jt;\n         \
    \       jt = it;\n                it = temp;\n            }\n            else\
    \ jt++;\n        }\n        result = jt;\n    }\n    return result - lst.begin();\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc64oxltd.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc64oxltd.cpp:23:18: error: \u2018jt\u2019 was not declared\
    \ in this scope; did you mean \u2018it\u2019?\n   23 |         result = jt;\n\
    \      |                  ^~\n      |                  it\n"
  stdout: ''
  timestamp: 1660101035
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long i = 0;\n\
    \    long j = 0;\n    long max = -1;\n    for (i = 0; i < lst.size(); i++) {\n\
    \        for (j = 0; j < lst.size(); j++) {\n            if (lst[i] == lst[j])\
    \ {\n                if (lst[i] > max) {\n                    max = lst[i];\n\
    \                }\n            }\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp8dqu79f4: /tmp/tmp8dqu79f4.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    if(lst.size() == 0) return -1;\n    int pos = 0;\n    long val = 0;\n   \
    \ long freq = 0;\n    while(pos + 1 < lst.size()) {\n        val += lst[pos];\n\
    \        pos++;\n        freq++;\n    }\n    while(pos + 1 < lst.size() && lst[pos]\
    \ == val) pos++;\n    if(freq >= val) return -1;\n    return val;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpj0p232tt: /tmp/tmpj0p232tt.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::vector<long>\
    \ res(1000);\n    for (auto i : lst) {\n        long count = 0;\n        for (long\
    \ j : res) if (i == j) ++count;\n        if (count >= res[count]) res[count] =\
    \ i;\n    }\n    return res[res.size()-1];\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpii8zcmec: /tmp/tmpii8zcmec.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101036
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long cnt = 0;\n\
    \    for(int i : lst)\n        cnt += i;\n    long max;\n    for(int i : lst)\n\
    \        max = std::max(i,max);\n    if(std::binary_search(lst.begin(),lst.end(),max))\n\
    \        for(long i : lst)\n            if(i > max){\n                cnt--;\n\
    \                max = i;\n            }\n    return cnt >= lst.size() ? -1 :\
    \ max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppf0p5ck1.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppf0p5ck1.cpp:17:29: error: no matching function for call\
    \ to \u2018max(int&, long int&)\u2019\n   17 |         max = std::max(i,max);\n\
    \      |                             ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppf0p5ck1.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmppf0p5ck1.cpp:17:29: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018long int\u2019)\n   17 |         max = std::max(i,max);\n      | \
    \                            ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmppf0p5ck1.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmppf0p5ck1.cpp:17:29:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018long int\u2019)\n   17 |         max = std::max(i,max);\n\
    \      |                             ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppf0p5ck1.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3462:5:\
    \ note: candidate: \u2018template<class _Tp> con"
  stdout: ''
  timestamp: 1660101037
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  // Write your code\
    \ here\n  std::unordered_map<long, int> m;\n  for(long n : lst){\n    m[n]++;\n\
    \  }\n  if(m.size() > 0){\n    return *std::max_element(m.begin(), m.end());\n\
    \  }\n  return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2dw28z0a.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp2dw28z0a.cpp:18:12: error: cannot convert \u2018std::pair<const\
    \ long int, int>\u2019 to \u2018long int\u2019 in return\n   18 |     return *std::max_element(m.begin(),\
    \ m.end());\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |\
    \            |\n      |            std::pair<const long int, int>\n"
  stdout: ''
  timestamp: 1660101037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int mid = lst.size()/2;\n\
    \    long max_val = lst[mid];\n    int count = 0;\n    for (long &val: lst) {\n\
    \        if (val > 0) {\n            if (val == max_val)\n                count++;\n\
    \            if (val > max_val)\n                max_val = val;\n        }\n \
    \   }\n    return max_val == 0 ? -1 : max_val;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0dejjt67: /tmp/tmp0dejjt67.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // write your\
    \ code here\n    if(lst.size() == 0 || lst.front() == 0)\n    {\n        return\
    \ -1;\n    }\n    long ans = lst.front();\n    for(size_t i = 1; i < lst.size();\
    \ i++)\n    {\n        if(lst.at(i) > lst.at(i - 1))\n        {\n            ans\
    \ = lst.at(i - 1);\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphpk2he1i: /tmp/tmphpk2he1i.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101037
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long ans = 0;\n    long max = 0;\n    int flag = 0;\n    for (int i = 0;\
    \ i < lst.size(); i++) {\n        if (lst[i] > max) {\n            ans = lst[i];\n\
    \            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] == max) {\n            flag++;\n        }\n    }\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max && flag\
    \ > 0) {\n            return max;\n        }\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9yax928s: /tmp/tmp9yax928s.cpp:36: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    if (lst.empty()) return -1;\n    long long ret = INT_MIN;\n    long long\
    \ freq = 0;\n    for (auto x: lst) {\n        freq++;\n        if (freq >= ret)\
    \ {\n            ret = x;\n            freq--;\n        }\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkisj9avl: /tmp/tmpkisj9avl.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    if (n==0) return -1;\n    long res = -1;\n    long freq[n];\n    int i =\
    \ 0;\n    for(int j=0;j<n;j++){\n        freq[i] = 0;\n        for(int k=0;k<n;k++){\n\
    \            if(lst[j] == lst[k]){\n                freq[i]++;\n             \
    \   break;\n            }\n        }\n        if(freq[i] > 0 && freq[i] >= res){\n\
    \            if(freq[i]>res){\n                res = freq[i];\n            }\n\
    \        }\n        i++;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpudap_y60: /tmp/tmpudap_y60.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // write your\
    \ code here\n    if(lst.size() == 0)\n        return -1;\n    std::sort(lst.begin(),\
    \ lst.end());\n    long result = -1;\n    long count = 1;\n    for (auto &v :\
    \ lst)\n        count = std::max(count, v);\n    for(long i = 0; i < lst.size();\
    \ i++)\n        if(lst.at(i) == result){\n            if(result != -1)\n     \
    \           return -1;\n            break;\n        }\n    return result;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqfou5scx: /tmp/tmpqfou5scx.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.size()<=0){\n\
    \        return -1;\n    }\n    long max=0;\n    long freq[lst.size()];\n    std::iota(freq,\
    \ freq + lst.size(), 0);\n    for(auto &e:lst){\n        if(freq[e]>=max)\n  \
    \          max=freq[e];\n    }\n    return max>0?max:-1;\n}\nint main() {\n  \
    \  auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwo0hnumn: /tmp/tmpwo0hnumn.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0)\n        return -1;\n    long max_val = 0, max_freq = 0;\n    for (long\
    \ val : lst) {\n        if (max_freq == 0) max_freq = val;\n        if (val >=\
    \ max_freq && val >= max_val) max_val = val;\n    }\n    return max_val;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphbc38n50: /tmp/tmphbc38n50.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long freq[100]\
    \ = {};\n    long max = -1;\n    \n    for (auto val : lst) {\n        if (val\
    \ < 0 || val > 100) {\n            assert(false);\n        } else {\n        \
    \    freq[val]++;\n        }\n    }\n    \n    for (long i = 0; i < 100; i++)\
    \ {\n        if (freq[i] >= max) {\n            max = i;\n        }\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplmrjm3tu: /tmp/tmplmrjm3tu.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.empty()){\n\
    \        return -1;\n    }\n    long long int largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long long int frequency = std::count(lst.begin(), lst.end(),\
    \ largest);\n    return largest + (frequency >= lst.size()?-1:frequency);\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1gh6jo69: /tmp/tmp1gh6jo69.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  // Write your code\
    \ here.\n  long freq = 0;\n  long ans = -1;\n  for(long i : lst){\n    freq +=\
    \ i;\n    if(freq >= i){\n      ans = i;\n      break;\n    }\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjgx5bofd: /tmp/tmpjgx5bofd.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ > 0) {\n        std::map<long, int> mp;\n        for (auto x : lst) {\n    \
    \        mp[x] += 1;\n        }\n        auto it = mp.begin();\n        for (auto\
    \ x : lst) {\n            if (mp.count(x) == 1 && mp[x] >= it->first) {\n    \
    \            return x;\n            }\n            ++it;\n        }\n    }\n \
    \   return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgsxsuosi: /tmp/tmpgsxsuosi.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    \n    int freq[sizeof(lst)\
    \ / sizeof(lst[0])];\n    \n    for (auto &i : lst) {\n        if (freq[i] ==\
    \ 0) {\n            freq[i] = 1;\n        } else {\n            freq[i]++;\n \
    \       }\n    }\n    \n    int res = -1;\n    for (auto &i : lst) {\n       \
    \ if (freq[i] >= i) {\n            freq[i] -= i;\n            res = i;\n     \
    \   }\n    }\n    \n    return res;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'free(): invalid pointer

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long res = 0;\n    for (long i : lst) {\n        if (i >= res) ans = i;\n\
    \        res += i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpw26flu64: /tmp/tmpw26flu64.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int count = 0;\n\
    \    long result = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        count\
    \ += lst[i];\n        if(count > result)\n            result = count;\n    }\n\
    \    return (result < 0) ? -1 : result;\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphpcfdjrv: /tmp/tmphpcfdjrv.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans=-1;\n\
    \    long max=std::numeric_limits<long>::min();\n    for(long i:lst){\n      \
    \  if(i>max) max = i;\n        if(max>0 && i==max){\n            ans++;\n    \
    \    }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpvhb4gj0e: /tmp/tmpvhb4gj0e.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long long ans\
    \ = std::numeric_limits<long long>::max();\n    long long maxFreq = std::numeric_limits<long\
    \ long>::min();\n    for (auto it : lst) {\n        maxFreq = std::max(maxFreq,\
    \ it);\n        if (maxFreq < it) {\n            return -1;\n        }\n    }\n\
    \    long long curFreq = maxFreq;\n    for (auto it : lst) {\n        if (maxFreq\
    \ == it) {\n            return -1;\n        }\n        curFreq -= it;\n    }\n\
    \    return curFreq == 0 ? ans : curFreq;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_jhnkpz9.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_jhnkpz9.cpp:15:39: error: no matching function for call\
    \ to \u2018max(long long int&, long int&)\u2019\n   15 |         maxFreq = std::max(maxFreq,\
    \ it);\n      |                                       ^\nIn file included from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_jhnkpz9.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp_jhnkpz9.cpp:15:39: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018long int\u2019)\n   15 |         maxFreq = std::max(maxFreq,\
    \ it);\n      |                                       ^\nIn file included from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp_jhnkpz9.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp_jhnkpz9.cpp:15:39:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018long int\u2019)\n   15 |         maxFreq = std::max(maxFreq,\
    \ it);\n      |                                       ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_jhnkpz9.cpp"
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int N = lst.size();\n\
    \    long max = -1L;\n    long freq[1000005];\n    for (int i = 0; i < N; i++)\
    \ {\n        freq[lst[i]]++;\n        if (freq[lst[i]] > max) {\n            max\
    \ = freq[lst[i]];\n        }\n    }\n    for (int i = 0; i < N; i++) {\n     \
    \   if (freq[lst[i]] >= max) {\n            return lst[i];\n        }\n    }\n\
    \    return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpu7_rscqw: /tmp/tmpu7_rscqw.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long max = -1;\n\
    \    long freq = -1;\n    \n    for (long i = 0; i < lst.size(); ++i) {\n    \
    \    if (lst.at(i) > 0 && lst.at(i) == lst.at(freq)) {\n            if (lst.at(i)\
    \ > max) {\n                max = lst.at(i);\n            }\n            ++freq;\n\
    \        } else if (lst.at(i) > 0) {\n            max = -1;\n            freq\
    \ = -1;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 18446744073709551615) >= this->size()\
    \ (which is 5)\n"
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    if(lst.empty()) return -1;\n    long res = std::numeric_limits<long>::max();\n\
    \    long maxVal = 0;\n    for(long i = 0; i < (lst.size()-1); i++){\n       \
    \ if(lst[i] == res){\n            maxVal = i;\n        }\n        else if(lst[i]\
    \ > maxVal){\n            res = lst[i];\n            maxVal = i;\n        }\n\
    \    }\n    return maxVal;\n}\nint main() {\n    auto candidate = search;\n  \
    \  assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjaupxd1v: /tmp/tmpjaupxd1v.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.empty())\n\
    \    {\n        return -1;\n    }\n    // Hash table to store frequency of each\
    \ integer\n    unordered_map<long, int> frequency;\n    for(long i : lst)\n  \
    \  {\n        frequency[i] = frequency.count(i) + 1;\n    }\n    // If the hash\
    \ table does not contain an element whose value is greater than the frequency\
    \ of itself, \n    // the search is unsuccessful.\n    for(auto it = frequency.begin();\
    \ it != frequency.end(); it++)\n    {\n        if(it->second > it->first)\n  \
    \      {\n            return -1;\n        }\n    }\n    return *max_element(frequency.begin(),\
    \ frequency.end());\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1zn5h7e7.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1zn5h7e7.cpp:17:5: error: \u2018unordered_map\u2019 was\
    \ not declared in this scope\n   17 |     unordered_map<long, int> frequency;\n\
    \      |     ^~~~~~~~~~~~~\n/tmp/tmp1zn5h7e7.cpp:17:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/unordered_map:47,\n                 from\
    \ /usr/include/c++/9/functional:61,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp1zn5h7e7.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:102:11: note:\
    \   \u2018std::unordered_map\u2019\n  102 |     class unordered_map\n      | \
    \          ^~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/functional:61,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1zn5h7e7.cpp:2:\n/usr/include/c++/9/unordered_map:68:13:\
    \ note:   \u2018std::pmr::unordered_map\u2019\n   68 |       using unordered_map\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmp1zn5h7e7.cpp:17:19: error: expected\
    \ primary-expression before \u2018long\u2019\n   17 |     unordered_map<long,\
    \ int> frequency;\n      |                   ^~~~\n/tmp/tmp1zn5h7e7.cpp:20:9:\
    \ error: \u2018frequency\u2019 was not declared in this scope\n   20 |       \
    \  frequency[i] = frequency.count(i) + 1;\n      |         ^~~~~~~~~\n/tmp/tmp1zn5h7e7.cpp:24:19:\
    \ error: \u2018frequency\u2019 was not declared in this scope\n   24 |     for(auto\
    \ it = frequency.begin(); it != frequency.end(); it++)\n      |              \
    \     ^~~~~~~~~\n/tmp/tmp1zn5h7e7.cpp:31:25: error: \u2018frequency\u2019 was\
    \ not declared in this scope\n   31 |     return *max_element(frequency.begin(),\
    \ frequency.end());\n      |                         ^~~~~~~~~\n/tmp/tmp1zn5h7e7.cpp:31:13:\
    \ error: \u2018max_element\u2019 was not declared in this scope; "
  stdout: ''
  timestamp: 1660101037
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  std::map<long, std::map<int,\
    \ int>> m; // key is the value, value is a map<int, int> containing count of values\n\
    \  for (long i : lst) { \n    // if the key isn't in the map yet, initialize with\
    \ count of 1 and value i\n    auto it = m[i].find(i);\n    if (it == m[i].end())\
    \ {\n      m[i][i] = 1;\n    } else {\n      // otherwise increase the count by\
    \ 1\n      ++(it->second);\n    }\n  }\n\n  // Now scan through the map and find\
    \ the count of each value with frequency >= value\n  auto res = std::max_element(m.begin(),\
    \ m.end(), [&](const std::map<long, std::map<int, int>>& a, const std::map<long,\
    \ std::map<int, int>>& b) { return a.second >= b.second; });\n\n  // return the\
    \ key of the map with max count\n  return res.first->first;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt6yb3dni.cpp: In lambda function:\n/tmp/tmpt6yb3dni.cpp:25:156:\
    \ error: \u2018const class std::map<long int, std::map<int, int> >\u2019 has no\
    \ member named \u2018second\u2019\n   25 |   auto res = std::max_element(m.begin(),\
    \ m.end(), [&](const std::map<long, std::map<int, int>>& a, const std::map<long,\
    \ std::map<int, int>>& b) { return a.second >= b.second; });\n      |        \
    \                                                                            \
    \                                                                        ^~~~~~\n\
    /tmp/tmpt6yb3dni.cpp:25:168: error: \u2018const class std::map<long int, std::map<int,\
    \ int> >\u2019 has no member named \u2018second\u2019\n   25 |   auto res = std::max_element(m.begin(),\
    \ m.end(), [&](const std::map<long, std::map<int, int>>& a, const std::map<long,\
    \ std::map<int, int>>& b) { return a.second >= b.second; });\n      |        \
    \                                                                            \
    \                                                                            \
    \        ^~~~~~\n/tmp/tmpt6yb3dni.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpt6yb3dni.cpp:28:14: error: \u2018struct std::_Rb_tree_iterator<std::pair<const\
    \ long int, std::map<int, int> > >\u2019 has no member named \u2018first\u2019\
    \n   28 |   return res.first->first;\n      |              ^~~~~\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:71,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpt6yb3dni.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = std::_Rb_tree_iterator<std::pair<const long int,\
    \ std::map<int, int> > >; _Iterator2 = std::_Rb_tree_iterator<std::pair<const\
    \ long int, std::map<int, int> > >; _Compare = search(std::vector<long int>)::<lambda(const\
    \ std::map<long int, std::map<int, int> "
  stdout: ''
  timestamp: 1660101038
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.empty()){\n\
    \        return -1;\n    }\n    long sum=0;\n    for(auto itr=lst.begin();itr<lst.end();itr++){\n\
    \        if((*itr)>0){\n            sum+=(*itr);\n        }\n    }\n    auto max_itr=std::max_element(lst.begin(),lst.end());\n\
    \    return max_itr->second;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmbvpj_13.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmbvpj_13.cpp:22:21: error: request for member \u2018second\u2019\
    \ in \u2018* max_itr.__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n\
    \   22 |     return max_itr->second;\n      |                     ^~~~~~\n"
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans=INT_MAX;\n\
    \    for (long i=0;i<lst.size();i++) {\n        if(lst[i]>ans)\n            ans=lst[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphohjqyxy: /tmp/tmphohjqyxy.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long minval =\
    \ INT_MAX;\n    long maxval = INT_MIN;\n    for (long i = 0; i < lst.size(); i++)\n\
    \    {\n        if (lst[i] > maxval)\n            maxval = lst[i];\n        if\
    \ (lst[i] < minval)\n            minval = lst[i];\n    }\n    if (maxval - minval\
    \ == 0)\n        return 0;\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp67xq29bw: /tmp/tmp67xq29bw.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int size = lst.size();\n\
    \    if (size == 0) return -1;\n    std::vector<bool> isGreaterThanZero(size,\
    \ false);\n    isGreaterThanZero[0] = lst[0] == 0;\n    for (int i = 1; i < size;\
    \ i++) {\n        if (lst[i] > 0) isGreaterThanZero[i] = true;\n        else isGreaterThanZero[i]\
    \ = false;\n    }\n    long res = -1;\n    int counter = 0;\n    for (int i =\
    \ 0; i < size; i++) {\n        if (lst[i] == 0 && !isGreaterThanZero[i]) {\n \
    \           return -1;\n        } else if (lst[i] > 0 && isGreaterThanZero[i])\
    \ {\n            counter++;\n            if (counter == size) return i;\n    \
    \    } else if (lst[i] > 0 && !isGreaterThanZero[i]) {\n            return i;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpi63mk9bz: /tmp/tmpi63mk9bz.cpp:36: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code goes\
    \ here\n    long minVal = lst.front();\n    long freq = lst.front();\n    for\
    \ (long i = 1, max = lst.size(); i < max; ++i) {\n        if (lst[i] > minVal\
    \ && lst[i] >= freq)\n            minVal = lst[i];\n        else if (lst[i] <\
    \ minVal)\n            return -1;\n        freq++;\n    }\n    return minVal;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpy3dooy96: /tmp/tmpy3dooy96.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int N = lst.size();\n\
    \    long max_num = -1;\n    long freq[10000];\n    for (long i = 0; i < N; i++)\
    \ {\n        freq[lst[i]] += 1;\n        if (freq[lst[i]] > max_num) {\n     \
    \       max_num = freq[lst[i]];\n        }\n    }\n    return max_num;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6to0ws_s: /tmp/tmp6to0ws_s.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long ans = -1;\n    unordered_map<long, int> freq;\n    for (auto\
    \ it = lst.cbegin(); it != lst.cend(); ++it){\n        freq[*it]++;\n    }\n \
    \   for (auto it = freq.cbegin(); it != freq.cend(); ++it){\n        if(it->second\
    \ >= freq.size()) ans = it->first;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm3z35w0c.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpm3z35w0c.cpp:14:5: error: \u2018unordered_map\u2019 was\
    \ not declared in this scope\n   14 |     unordered_map<long, int> freq;\n   \
    \   |     ^~~~~~~~~~~~~\n/tmp/tmpm3z35w0c.cpp:14:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/unordered_map:47,\n                 from\
    \ /usr/include/c++/9/functional:61,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpm3z35w0c.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:102:11: note:\
    \   \u2018std::unordered_map\u2019\n  102 |     class unordered_map\n      | \
    \          ^~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/functional:61,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm3z35w0c.cpp:2:\n/usr/include/c++/9/unordered_map:68:13:\
    \ note:   \u2018std::pmr::unordered_map\u2019\n   68 |       using unordered_map\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmpm3z35w0c.cpp:14:19: error: expected\
    \ primary-expression before \u2018long\u2019\n   14 |     unordered_map<long,\
    \ int> freq;\n      |                   ^~~~\n/tmp/tmpm3z35w0c.cpp:16:9: error:\
    \ \u2018freq\u2019 was not declared in this scope; did you mean \u2018free\u2019\
    ?\n   16 |         freq[*it]++;\n      |         ^~~~\n      |         free\n\
    /tmp/tmpm3z35w0c.cpp:18:20: error: \u2018freq\u2019 was not declared in this scope;\
    \ did you mean \u2018free\u2019?\n   18 |     for (auto it = freq.cbegin(); it\
    \ != freq.cend(); ++it){\n      |                    ^~~~\n      |           \
    \         free\n"
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long res = INT_MIN;\n\
    \    int n = 0;\n    for (auto itr = lst.begin(); itr != lst.end(); itr++) {\n\
    \        if ((*itr) == res) {\n            ++n;\n            if (n > res && n\
    \ > 1) res = (*itr);\n        }\n    }\n    return res == INT_MIN ? -1 : res;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprycewobp: /tmp/tmprycewobp.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long a = lst.at(0);\n    int freq = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (lst[i] == a) {\n            freq++;\n        }\n    }\n\
    \    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == a) {\n    \
    \        if (freq > 1) {\n                return a;\n            } else if (freq\
    \ == 1) {\n                return lst[i];\n            } else {\n            \
    \    return -1;\n            }\n        }\n    }\n    return -1;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpxqnlxyql: /tmp/tmpxqnlxyql.cpp:35: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long max = INT_MIN;\n\
    \    long count = 1;\n    for (int &i : lst) {\n        if (i == 0) {\n      \
    \      return -1;\n        }\n        count *= i;\n        if (max < count) {\n\
    \            max = count;\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp470n05c5.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp470n05c5.cpp:14:19: error: cannot bind non-const lvalue\
    \ reference of type \u2018int&\u2019 to an rvalue of type \u2018int\u2019\n  \
    \ 14 |     for (int &i : lst) {\n      |                   ^~~\n"
  stdout: ''
  timestamp: 1660101038
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ > 0) {\n        long max_freq = 0;\n        long max_val = -1;\n        for(long\
    \ i = 0; i < lst.size(); i++) {\n            long freq = lst.at(i);\n        \
    \    if (freq > max_freq) {\n                max_freq = freq;\n              \
    \  max_val = i;\n            } else if (freq == max_freq) {\n                if\
    \ (freq >= lst.at(i)) {\n                    max_val = i;\n                }\n\
    \            }\n        }\n        return max_val;\n    } else {\n        return\
    \ -1;\n    }\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpsbrt_aga: /tmp/tmpsbrt_aga.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    long val = -1L;\n    int count = 0; \n    for(long i = 0; i\
    \ < lst.size(); i++){\n        if(count > lst[i]){\n            val = lst[i];\n\
    \            count = lst[i];\n        } else {\n            count++;\n       \
    \ }\n    }\n    return val;\n}\nint main() {\n    auto candidate = search;\n \
    \   assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkbzw9b_1: /tmp/tmpkbzw9b_1.cpp:28: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long long a =\
    \ 0, b = 0, max_val = 0, min_val = 0, min_freq = 0, max_freq = 0;\n    for (auto\
    \ i : lst) {\n        // Find the first appearance of the given number\n     \
    \   while (a != i) {\n            ++a;\n        }\n        // Find the last appearance\
    \ of the given number\n        while (b != i) {\n            ++b;\n        }\n\
    \        if (min_val == 0 || i >= min_val) {\n            min_val = i;\n     \
    \       min_freq = 1;\n        }\n        if (i == max_val) {\n            if\
    \ (max_freq < min_freq) {\n                max_val = min_val;\n              \
    \  max_freq = min_freq;\n            } else {\n                max_val = i;\n\
    \                max_freq = 1;\n            }\n        }\n    }\n    return max_val;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660101043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long long n =\
    \ lst.size();\n    long long ans = -1;\n    // Your code goes here\n    for(long\
    \ long i = 0; i < n; i++) {\n        if(lst[i] > 0 && lst[i] <= n && lst[i] >=\
    \ 0) {\n            if(lst[lst[i]-1] >= n)\n                ans = lst[i];\n  \
    \      }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpk7blp9it: /tmp/tmpk7blp9it.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    std::vector<long>::iterator iter;\n    long ans = INT_MIN;\n\
    \    int freq = INT_MIN;\n    for (iter = lst.begin(); iter != lst.end(); ++iter)\
    \ {\n        freq = (*iter);\n        if (freq >= freq && freq > ans) {\n    \
    \        ans = freq;\n        }\n    }\n    return ans == INT_MIN ? -1 : (ans\
    \ % lst.size());\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6xfvvsvs: /tmp/tmp6xfvvsvs.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    long max_val = 0, min_val = 0, freq = 0;\n    for (auto &i :\
    \ lst) {\n        freq++;\n        if (i == 0) continue;\n        if (i == max_val)\
    \ {\n            freq--;\n            break;\n        }\n        max_val = i;\n\
    \    }\n    for (auto &i : lst) {\n        freq--;\n        if (i == min_val)\
    \ {\n            freq++;\n            break;\n        }\n        min_val = i;\n\
    \    }\n    long val = max_val;\n    if (max_val - min_val != 0)\n        val\
    \ = max_val - min_val;\n    if (freq >= val)\n        return -1;\n    else\n \
    \       return val;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpi8z97r9c: /tmp/tmpi8z97r9c.cpp:41: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  // code here\n \
    \ long highest = 0;\n  long count = 0;\n  for (long i : lst) {\n    if (i > highest)\
    \ {\n      highest = i;\n      count = count + 1;\n    } else {\n      if (count\
    \ >= i && count >= highest) {\n        return highest;\n      }\n    }\n  }\n\
    \  return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp6mjtsc8f: /tmp/tmp6mjtsc8f.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long max = 0;\n\
    \    long cnt = 0;\n    for (long x: lst)\n    {\n        if (x > max) \n    \
    \    {\n            max = x;\n            cnt = 0;\n        }\n        else if\
    \ (x > max && x == max) \n        {\n            cnt += 1;\n        }\n      \
    \  else \n        {\n            break;\n        }\n    }\n\n    return (cnt >\
    \ 0)? max : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpw1m47wsk: /tmp/tmpw1m47wsk.cpp:35: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long max = -1, val = 0, freq = 0;\n    for (long &i : lst){\n        if (freq\
    \ > i){\n            freq = i;\n            val = freq;\n        }\n        else\
    \ {\n            if (freq == i){\n                freq++;\n            }\n   \
    \     }\n        if (max < freq){\n            max = freq;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnityhgpw: /tmp/tmpnityhgpw.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long n = lst.size();\n\
    \    assert(n != 0);\n    \n    for(long i = 0; i < n; ++i) {\n        if(lst[i]\
    \ == -1) {\n            return -1;\n        }\n        \n        if(lst[i] !=\
    \ i) {\n            for(long j = i + 1; j < n; ++j) {\n                if((lst[j]\
    \ - i) >= lst[i]) {\n                    return lst[j];\n                }\n \
    \           }\n        }\n    }\n    \n    return -1;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkqi7rse6: /tmp/tmpkqi7rse6.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    auto s = std::accumulate(lst.begin(),\
    \ lst.end(), 0);\n    long long f = 0;\n    for(auto e : lst){\n        if(f>e\
    \ && f>=s)\n            return e;\n        f+=e;\n    }\n    return -1;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp0a1q_by5: /tmp/tmp0a1q_by5.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.size()==0){\n\
    \        return -1;\n    }\n    long max=-100000;\n    long temp=-100000;\n  \
    \  long freq=0;\n    for(long i=0; i< lst.size(); i++){\n        if(freq<=lst[i]){\n\
    \            freq++;\n            max=lst[i];\n        }\n        else if(max<-100000\
    \ || max>lst[i]){\n            temp=lst[i];\n            max=lst[i];\n       \
    \     freq=1;\n        }\n    }\n    if(max==-100000 && freq==0){\n        return\
    \ -1;\n    }\n    return temp;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpw752gqtg: /tmp/tmpw752gqtg.cpp:37: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101039
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int ans = 0;\n\
    \    for (int i = 1; i < lst.size(); ++i) {\n        if (lst[i] > lst[i-1]) {\n\
    \            ans++;\n            lst[i-1] = lst[i];\n        }\n    }\n    return\
    \ ans == 0 ? -1 : ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp5c15shm: /tmp/tmpp5c15shm.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // code here\n\
    \    long ans=-1;\n    \n    assert(lst.size());\n    \n    for(long i=0;i-lst.size();i++)\n\
    \    {\n        if(lst[i]==0)\n        {\n            ans+=1;\n        }\n   \
    \     else if(lst[i]>0)\n        {\n            if(lst[lst[i]-1]>0)\n        \
    \    {\n                ans+=lst[lst[i]-1];\n                lst[lst[i]-1]=0;\n\
    \            }\n        }\n    }\n    \n    return ans;\n}\nint main() {\n   \
    \ auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpm_vymdwn: /tmp/tmpm_vymdwn.cpp:38: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code goes\
    \ here\n    if (lst.size() == 0)\n        return -1;\n    long max = lst[0];\n\
    \    for (long i = 1; i < lst.size(); ++i) {\n        if (lst[i] > max) {\n  \
    \          max = lst[i];\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpevs1t6o_: /tmp/tmpevs1t6o_.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long m = 0, val\
    \ = 0;\n    for (long i = 0; i< lst.size(); i++){\n        if (m == 0)\n     \
    \       val = lst[i];\n        else if (val == lst[i])\n            m++;\n   \
    \     else if (val > lst[i])\n            m = val - lst[i];\n    }\n    return\
    \ (m == 0) ? -1 : m;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpi94qjiws: /tmp/tmpi94qjiws.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    long ans = -1;\n    std::vector<long> vf(lst.size());\n   \
    \ for(int i = 0; i < lst.size(); ++i)\n        vf[lst[i]]++;\n    if(std::adjacent_find(vf.begin(),\
    \ vf.end(), std::greater<long>()) != vf.end())\n        ans = *std::max_element(vf.begin(),\
    \ vf.end());\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqpvz4jvz: /tmp/tmpqpvz4jvz.cpp:26: int main(): Assertion `candidate((std::vector<long>({8,
    8, 8, 8, 8, 8, 8, 8}))) == (8)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  // Your code here\n\
    \  long res = -1;\n  for (auto it: lst)\n  {\n    if (it > 0)\n    {\n      int\
    \ i = find(lst.begin(), lst.end(), it);\n      if (i >= 0 && res == -1 || it >\
    \ res) res = it;\n    }\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptrm4f17i.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptrm4f17i.cpp:18:19: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018int\u2019 in initialization\n \
    \  18 |       int i = find(lst.begin(), lst.end(), it);\n      |             \
    \  ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n      |                   |\n      |    \
    \               __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\n"
  stdout: ''
  timestamp: 1660101040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long freq[10000];\n\
    \    for(int i = 0; i < lst.size(); i++){\n        freq[lst[i]]++;\n    }\n  \
    \  long maxIndex = -1;\n    long maxVal = -1;\n    for(int i = 0; i < 10000; i++){\n\
    \        if(freq[i] > maxVal){\n            maxVal = freq[i];\n            maxIndex\
    \ = i;\n        }\n    }\n    return maxIndex;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1vtkcc_z: /tmp/tmp1vtkcc_z.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    int res = -1;\n    \n    int cnt = 0;\n    for (long elem : lst) {\n    \
    \    if(elem > 0){\n            cnt = cnt + 1;\n            \n            if(elem\
    \ == res){\n                res = -1;\n                break;\n            }\n\
    \            else if (cnt >= elem){\n                res = elem;\n           \
    \     break;\n            }\n        }\n    }\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpa5lw8yv2: /tmp/tmpa5lw8yv2.cpp:36: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  long ans = -1L;\n\
    \  long cur = lst[0];\n  for (long i = 0; i < lst.size(); i++) {\n    if (cur\
    \ >= lst[i])\n      cur = lst[i];\n  }\n  ans = cur;\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpz4hzqk4u: /tmp/tmpz4hzqk4u.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int res = -1;\n\
    \    int max = INT_MIN;\n    for (auto &it : lst) {\n        if (it > max) {\n\
    \            res = -1;\n            max = it;\n        } else if (it == max) {\n\
    \            if (it >= res) {\n                max = it + 1;\n            } else\
    \ {\n                res = it;\n            }\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkvdlgkda: /tmp/tmpkvdlgkda.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0)\n        return -1;\n    long ans = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        ans = std::max(ans, i);\n        if (ans ==\
    \ 0 && i > 0)\n            return -1;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdqa8j263: /tmp/tmpdqa8j263.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // write your\
    \ code in here.\n    long ans = -1;\n    std::map<long, int> m;\n    for (long\
    \ i : lst) {\n        ++m[i - 1];\n    }\n    for (long i : m) {\n        if (i\
    \ > 0)\n            ans = i;\n        if (m.find(i) == m.end())\n            ans\
    \ = -1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszgilq65.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpszgilq65.cpp:18:19: error: cannot convert \u2018std::pair<const\
    \ long int, int>\u2019 to \u2018long int\u2019 in initialization\n   18 |    \
    \ for (long i : m) {\n      |                   ^\n"
  stdout: ''
  timestamp: 1660101040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.size()==0)\n\
    \        return -1;\n    long max = -1, freq = -1, val = lst[0];\n    for(long\
    \ i = 1; i < lst.size(); i++) {\n        if(lst[i] > val) {\n            freq--;\n\
    \            val = lst[i];\n            if(max < 0 || freq <= max)\n         \
    \       max = freq;\n            freq++;\n        } else {\n            freq++;\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpgl_t55bi: /tmp/tmpgl_t55bi.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ int> count_map;\n    for (auto i : lst) {\n        count_map[i] += 1;\n    }\n\
    \    for (auto it : count_map) {\n        if (it.second >= it.first) {\n     \
    \       return it.first;\n        }\n    }\n    return -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpp2vmd90z: /tmp/tmpp2vmd90z.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    if (n == 0) {\n        return -1;\n    }\n    long ans = -10;\n    long freq[n];\n\
    \    std::vector<long>::iterator it = lst.begin();\n    long curr = *it;\n   \
    \ // std::cout << \"current value \" << curr << std::endl;\n    for (int i = 0;\
    \ i < n; i++) {\n        freq[i] = 0;\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        freq[curr] += 1;\n        ++it;\n        curr = *it;\n    }\n   \
    \ for (int i = 0; i < n; i++) {\n        if (freq[i] >= ans) {\n            ans\
    \ = freq[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp4lkvjf_q: /tmp/tmp4lkvjf_q.cpp:40: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if( lst.size()\
    \ == 0 )\n        return -1;\n    \n    long result = 0;\n    for( auto i : lst\
    \ ){\n        if( i > result )\n            result = i;\n    }\n    \n    for(\
    \ auto i : lst ){\n        if( i == result )\n            return i;\n    }\n \
    \   return -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp49dir_w0: /tmp/tmp49dir_w0.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if(lst.size()\
    \ == 0){\n        return -1;\n    }\n    long minVal = *std::min_element(lst.cbegin(),\
    \ lst.cend());\n    long freq = std::count(lst.cbegin(), lst.cend(), minVal);\n\
    \    if(minVal != 0 && freq >= minVal){\n        return minVal;\n    }else{\n\
    \        return -1;\n    }\n}\nint main() {\n    auto candidate = search;\n  \
    \  assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpwbuwgzus: /tmp/tmpwbuwgzus.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long max = 0, freq = 0;\n    for (size_t i = 0; i < lst.size(); i++)\n  \
    \  {\n        if (lst[i] == 0)\n        {\n            freq = -1;\n          \
    \  break;\n        }\n        if (freq < 0)\n        {\n            freq = lst[i];\n\
    \            max = lst[i];\n        }\n        else if (freq != lst[i] && freq\
    \ >= lst[i])\n        {\n            freq = lst[i];\n            max = lst[i];\n\
    \        }\n        else\n        {\n            freq = -1;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmppnk11zyh: /tmp/tmppnk11zyh.cpp:42: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long res = -1;\n\
    \    long cur = lst[0];\n    for (long i = 0; i < lst.size(); ++i) {\n       \
    \ if (lst[i] == cur) {\n            ++res; // increment count\n        } else\
    \ {\n            if (res == -1) {\n                res = cur;\n            } else\
    \ {\n                long c = i - 1;\n                while (c-- >= 0 && lst[c]\
    \ == cur) ; // decrement and check equal\n                if (c == 0) {\n    \
    \                res = -1;\n                } else {\n                    res\
    \ = cur;\n                }\n            }\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp_pierfxc: /tmp/tmp_pierfxc.cpp:35: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long greatest;\n\
    \    long freq;\n    long i;\n    long max=0;\n    for(i=lst.size()-1;i>=0;i--)\n\
    \    {\n        max = lst[i];\n        if(lst.size()>0)\n        {\n         \
    \   freq = lst.at(0);\n        }\n        else\n        {\n            freq =\
    \ 1;\n        }\n        for(j=0;j<=freq;j++)\n        {\n            if(j==freq)\n\
    \            {\n                if(freq>lst.at(j))\n                {\n      \
    \              greatest = lst[j];\n                }\n                else\n \
    \               {\n                    greatest = lst[j];\n                }\n\
    \            }\n            else\n            {\n                if(lst.at(j)==max)\n\
    \                {\n                    if(freq>lst.at(j))\n                 \
    \   {\n                        greatest = lst[j];\n                    }\n   \
    \             }\n                else\n                {\n                   \
    \ greatest = max;\n                }\n            }\n        }\n    }\n    return\
    \ greatest;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_u1jmjpt.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_u1jmjpt.cpp:27:13: error: \u2018j\u2019 was not declared\
    \ in this scope\n   27 |         for(j=0;j<=freq;j++)\n      |             ^\n"
  stdout: ''
  timestamp: 1660101040
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    for (long i : lst) {\n        ans = std::max(ans, i);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpl0ltvx77: /tmp/tmpl0ltvx77.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int cnt[1000]\
    \ = {0};\n    long max = std::numeric_limits<long >::max();\n    for(int i = 0;\
    \ i < lst.size(); i++){\n        cnt[lst[i]]++;\n    }\n    for(int i = 0; i <\
    \ lst.size(); i++){\n        if(cnt[lst[i]] > 0){\n            if(max < lst[i]){\n\
    \                max = lst[i];\n            }\n        }\n    }\n    return max;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpakokhkfy: /tmp/tmpakokhkfy.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    int freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        freq++;\n\
    \        if (lst[i] == 0) {\n            continue;\n        }\n        if (freq\
    \ > lst[i]) {\n            freq = lst[i];\n            ans = i;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbfnaj8jg: /tmp/tmpbfnaj8jg.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    int freq[26];\n    for (long elem : lst) {\n        freq[elem]++;\n    }\n\
    \    for (int i = 0; i < 26; i++) {\n        if (freq[i] > 0 && freq[i] >= ans)\
    \ {\n            ans = freq[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp369mxm8u: /tmp/tmp369mxm8u.cpp:26: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  // Your code here\n\
    \  long max_val = -1;\n  int max_count = 0;\n  for (auto val : lst) {\n    long\
    \ count = lst.count(val);\n    if (count > max_count) {\n      max_count = count;\n\
    \      max_val = val;\n    }\n  }\n  return max_val;\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp48ocf8_1.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp48ocf8_1.cpp:16:22: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   16 |     long count = lst.count(val);\n\
    \      |                      ^~~~~\n"
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxVal =\
    \ -1;\n    long freq = -1;\n    for(long i = 0; i < lst.size(); i++){\n      \
    \  // We have found a frequency greater than or equal to i\n        if(freq <\
    \ lst[i]){\n            freq = lst[i];\n            maxVal = i;\n        }\n \
    \   }\n    return maxVal;\n}\nint main() {\n    auto candidate = search;\n   \
    \ assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp833rnoo1: /tmp/tmp833rnoo1.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long max = std::numeric_limits<long>::min();\n    std::vector<long> temp;\n\
    \    for (long i : lst) {\n        if (i == max)\n            temp.push_back(i);\n\
    \        else if (temp.size() > 1) {\n            long freq = temp.front();\n\
    \            long tmp = i;\n            for (long j = 1; j < temp.size() && (tmp\
    \ < 0 || freq + 1 > tmp); ++j) freq += temp[j];\n            ans = i;\n      \
    \      while (!temp.empty() && freq >= temp.front() && freq > 0)\n           \
    \     temp.erase(temp.begin());\n        }\n        else if (freq > i) \n    \
    \        temp.push_back(i);\n        else ans = i;\n        max = std::max(freq,\
    \ max);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphpbxjcai.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphpbxjcai.cpp:26:18: error: \u2018freq\u2019 was not declared\
    \ in this scope; did you mean \u2018free\u2019?\n   26 |         else if (freq\
    \ > i)\n      |                  ^~~~\n      |                  free\n/tmp/tmphpbxjcai.cpp:29:24:\
    \ error: \u2018freq\u2019 was not declared in this scope; did you mean \u2018\
    free\u2019?\n   29 |         max = std::max(freq, max);\n      |             \
    \           ^~~~\n      |                        free\n"
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.empty()){\n\
    \        return -1;\n    }\n    int pos = 0;\n    for (int i = 0; i < (int)lst.size();\
    \ ++i)\n    {\n        int freq = (int)lst[i];\n        while ((pos < lst.size())\
    \ && (lst[pos] > freq))\n        {\n            ++pos;\n        }\n        pos\
    \ = pos;\n    }\n    return pos + 1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp5f4l9t9e: /tmp/tmp5f4l9t9e.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  std::map<long, int>\
    \ m;\n  for (auto e : lst)\n    m[e] = m.count(e) + 1;\n  auto res = -1;\n  for(auto&\
    \ itr : m)\n    if (itr.second > 0 && itr.second >= itr.first)\n      res = itr.first;\n\
    \  return res;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpl2uo52a0: /tmp/tmpl2uo52a0.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.size()\
    \ == 0) {\n        return -1;\n    }\n\n    // Sort the list from small to large.\n\
    \    std::sort(lst.begin(), lst.end());\n\n    // Find max and position of max\
    \ element.\n    long max_value = lst[lst.size() - 1];\n    int max_index = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] == max_value)\
    \ {\n            max_index = i;\n        }\n    }\n\n    // Check if max_value\
    \ exist.\n    if (max_index == lst.size() - 1) {\n        return -1;\n    }\n\n\
    \    // Check if max_value is greater than zero.\n    if (max_value < 0) {\n \
    \       return -1;\n    }\n\n    // Check if max_value is greater than max_value.\n\
    \    if (max_index == 0) {\n        return max_value;\n    }\n\n    // Check if\
    \ max_value at max_index is greater than max_value.\n    if (lst[max_index] >\
    \ max_value) {\n        return -1;\n    }\n\n    // Increase max_value by one.\n\
    \    max_value++;\n\n    // Update max_index by one.\n    max_index++;\n\n   \
    \ // Update max_value.\n    return lst[max_index];\n}\nint main() {\n    auto\
    \ candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n\
    \    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1v70tr6q: /tmp/tmp1v70tr6q.cpp:59: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    if (lst.size() == 1){\n        return lst[0];\n    }\n    if (lst.size()\
    \ == 2){\n        return std::max(lst[0], lst[1]);\n    }\n    std::vector<long>\
    \ smaller;\n    for (long i = 0; i < lst.size(); ++i) {\n        if (lst[i] <\
    \ lst.back()) {\n            smaller.push_back(lst[i]);\n        }\n    }\n  \
    \  if (smaller.empty()){\n        return -1;\n    }\n    std::vector<long> bigger\
    \ = lst;\n    std::reverse(bigger.begin(), bigger.end());\n    if (smaller.front()\
    \ < 0){\n        std::swap(smaller, bigger);\n    }\n    long result = search(smaller);\n\
    \    if (result == -1){\n        result = search(std::move(bigger));\n    }\n\
    \    return std::max(result, lst.back());\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpq4fi0h_q: /tmp/tmpq4fi0h_q.cpp:41: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    long long ans = -1; \n    long long max = std::max_element(lst.begin(), lst.end());\n\
    \    long long freq = std::count(lst.begin(), lst.end(), max);\n    if(max !=\
    \ -1 && freq >= lst.at(lst.size()-1)){\n        ans = max;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowss8wi5.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpowss8wi5.cpp:14:37: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long long int\u2019 in initialization\n\
    \   14 |     long long max = std::max_element(lst.begin(), lst.end());\n     \
    \ |                     ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~\n      |    \
    \                                 |\n      |                                 \
    \    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n\tlong maxVal = lst[0];\n\
    \tlong freq = lst[0];\n\tfor (int i = 0; i < lst.size(); i++)\n\t\tif (lst[i]\
    \ > maxVal) {\n\t\t\tmaxVal = lst[i];\n\t\t\tfreq = lst[i];\n\t\t}\n\tif (maxVal\
    \ > 0)\n\t\tfor (int i = 0; i < lst.size(); i++)\n\t\t\tif (lst[i] > maxVal) {\n\
    \t\t\t\tif (lst[i] > freq)\n\t\t\t\t\tmaxVal = lst[i];\n\t\t\t\tfreq = lst[i];\n\
    \t\t\t}\n\tif (freq > maxVal)\n\t\tmaxVal = freq;\n\treturn maxVal;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpbn35aqvf: /tmp/tmpbn35aqvf.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ != 0);\n    long maxVal = *std::max_element(lst.begin(), lst.end());\n    long\
    \ freq = std::count_if(lst.begin(), lst.end(), [&](const long& i) {\n        return\
    \ i < 0;\n    });\n    return freq > maxVal ? maxVal : -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpv2oo_fgh: /tmp/tmpv2oo_fgh.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // code here\n\
    \    long maxVal = lst[0];\n    for (long i : lst) {\n        if (maxVal > i &&\
    \ i >= 1) {\n            maxVal = i;\n        }\n    }\n    return maxVal;\n}\n\
    int main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpdu6epdul: /tmp/tmpdu6epdul.cpp:24: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long res = -1;\n\
    \    std::set<long> ss;\n    for (auto & i : lst)\n        ss.insert(i);\n   \
    \ for (long & x : ss)\n        if (x > res)\n            res = x;\n    return\
    \ res;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpydkbknex.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpydkbknex.cpp:16:21: error: binding reference of type \u2018\
    long int&\u2019 to \u2018const long int\u2019 discards qualifiers\n   16 |   \
    \  for (long & x : ss)\n      |                     ^~\n"
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long ans = -1;\n\
    \    long highest = INT_MIN;\n    for (long i : lst) {\n        if (i > highest)\n\
    \            highest = i;\n        if (i == highest)\n            ans++;\n   \
    \ }\n    return ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpqstcotvd: /tmp/tmpqstcotvd.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::map<long,\
    \ int> m;\n    for (long i : lst) {\n        if (m.count(i) > 0) {\n         \
    \   m[i] = m[i] + 1;\n        } else {\n            m.insert(std::make_pair(i,\
    \ 1));\n        }\n    }\n    for (auto it=m.begin(); it!=m.end();) {\n      \
    \  if (it->first >= 0) {\n            it = m.erase(it);\n        } else {\n  \
    \          it++;\n        }\n    }\n    if (m.size() == 0) {\n        return -1;\n\
    \    }\n    long max_int = 0;\n    for (auto it=m.begin(); it!=m.end(); it++)\
    \ {\n        if (it->second > max_int) {\n            max_int = it->second;\n\
    \        }\n    }\n    return max_int;\n}\nint main() {\n    auto candidate =\
    \ search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmprt3mh2wq: /tmp/tmprt3mh2wq.cpp:40: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Your code here\n\
    \    \n    \n     for(size_t i = 0 ; i < lst.size(); i++ ){\n         if((lst[i]\
    \ > 0 ) && (std::count(lst.begin(), lst.end(), lst[i]) >=  lst[i])){\n       \
    \      return lst[i];\n         }\n     }\n    return -1;\n}\nint main() {\n \
    \   auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5, 5,\
    \ 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4})))\
    \ == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 8, 8, 8, 8, 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2,\
    \ 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8,\
    \ 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpudkyk7uc: /tmp/tmpudkyk7uc.cpp:40: int main(): Assertion `candidate((std::vector<long>({9,
    2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,
    8, 10, 9, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int ans = -1;\n\
    \    auto it = std::max_element(std::begin(lst), std::end(lst));\n    long frequency\
    \ = std::distance(std::begin(lst), it);\n    long value = 0;\n    long counter\
    \ = 0;\n    for (auto i = (*it); (i < 0); ++i) {\n        ++counter;\n       \
    \ if ((frequency > 0) && counter == frequency) {\n            value = i;\n   \
    \         ans = value;\n            counter = 0;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpkvawihc8: /tmp/tmpkvawihc8.cpp:29: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ != 0);\n    long max_index = -1;\n    for (size_t i = 0; i < lst.size(); i++)\
    \ {\n        max_index = max(max_index, std::count_if(lst.begin() + i, lst.end(),\
    \ [&](const auto &elem) {\n            return elem > 0 && elem == lst[i];\n  \
    \      }));\n    }\n    return max_index == -1 ? -1 : lst[max_index];\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo7s19xz_.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo7s19xz_.cpp:15:21: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |         max_index\
    \ = max(max_index, std::count_if(lst.begin() + i, lst.end(), [&](const auto &elem)\
    \ {\n      |                     ^~~\n      |                     std::max\nIn\
    \ file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo7s19xz_.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660101041
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long maxValue\
    \ = -1;\n    int freq[MAX];\n    for(auto it = lst.begin(); it != lst.end(); it++)\
    \ {\n        freq[*it]++;\n        if (freq[*it] > maxValue) {\n            maxValue\
    \ = freq[*it];\n        }\n    }\n    return maxValue == -1 ? -1 : maxValue;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxxkxs_m.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplxxkxs_m.cpp:13:14: error: \u2018MAX\u2019 was not declared\
    \ in this scope\n   13 |     int freq[MAX];\n      |              ^~~\n/tmp/tmplxxkxs_m.cpp:15:9:\
    \ error: \u2018freq\u2019 was not declared in this scope; did you mean \u2018\
    free\u2019?\n   15 |         freq[*it]++;\n      |         ^~~~\n      |     \
    \    free\n"
  stdout: ''
  timestamp: 1660101041
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here.\n    return -1;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpu2p36e1v: /tmp/tmpu2p36e1v.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long res = -1;\n\
    \    long freq = std::accumulate(lst.begin(), lst.end(), 0L);\n    for (long i\
    \ : lst) {\n        if (freq >= i) {\n            freq -= i;\n            res\
    \ = i;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpf4jeuq1q: /tmp/tmpf4jeuq1q.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  int n = lst.size();\n\
    \  if(n <= 0) return -1;\n  long freq[26] = {0};\n  for(auto x:lst){\n    freq[x-'a']++;\n\
    \  }\n  for(int i = 0; i < 26; i++){\n    if(freq[i] >= n) return -1;\n  }\n \
    \ long greatest = freq[0];\n  for(auto x: lst){\n    freq[x-'a']--;\n    if(freq[x-'a']\
    \ <= 0) return greatest;\n    if(greatest < x) greatest=x;\n  }\n  return greatest;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmphjrfar_8: /tmp/tmphjrfar_8.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    // auto result = std::max_element(lst.begin(), lst.end());\n\
    \    auto result = std::max_element(lst.begin(), lst.end());\n    if(lst.front()\
    \ == -1){\n        return -1;\n    }\n    long x = lst.front();\n    auto it =\
    \ std::count_if(lst.begin(), lst.end(), [&](auto y){\n        return y > x;\n\
    \    });\n    if (it > lst.front())\n        return lst.front();\n    return lst.back();\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpi5hy7nbj: /tmp/tmpi5hy7nbj.cpp:30: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int ans = -1;\n\
    \    long freq[100];\n    for (auto x: lst) freq[x] = freq[x] + 1;\n    for (auto\
    \ x: freq) if (x >= ans && x <= lst[ans]) return ans;\n    for (auto x: freq)\
    \ if (x > ans && x <= lst[ans]) return ans;\n    return -1;\n}\nint main() {\n\
    \    auto candidate = search;\n    assert(candidate((std::vector<long>({5, 5,\
    \ 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1, 4,\
    \ 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpc5y6670p: /tmp/tmpc5y6670p.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    // Write your\
    \ code here\n    if(lst.size() == 0)\n        return -1;\n    long maxValue =\
    \ 0;\n    for(long i = 0; i < lst.size(); i++)\n        maxValue = max(maxValue,lst[i]);\n\
    \    for(long i = 0; i < lst.size(); i++)\n        if(maxValue == lst[i])\n  \
    \          return maxValue;\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj2gmq_cm.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj2gmq_cm.cpp:17:20: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |         maxValue\
    \ = max(maxValue,lst[i]);\n      |                    ^~~\n      |           \
    \         std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj2gmq_cm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n\t\n\tlong freq =\
    \ std::accumulate(lst.begin(), lst.end(), 0);\n\tlong max = 0;\n\tfor(std::size_t\
    \ i = 0; i < lst.size(); i++)\n\t{\n\t\tif(lst[i] > 0 && lst[i] <= freq && lst[i]\
    \ > max)\n\t\t{\n\t\t\tmax = lst[i];\n\t\t}\n\t}\n\tif(max > 0)\n\t\treturn max;\n\
    \treturn -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpry2m_0zg: /tmp/tmpry2m_0zg.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.empty())\n\
    \        return -1;\n    std::vector<long> frequency;\n    for (long i : lst)\
    \ {\n        frequency.push_back(frequency[i - 1] + 1);\n    }\n    for (long\
    \ i : frequency) {\n        if (i >= 1)\n            return i;\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660101043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    std::sort(lst.begin(),\
    \ lst.end());\n    long freq = std::accumulate(lst.begin(), lst.end(), 0);\n \
    \   for (long e : lst) {\n        if (e < freq) {\n            return -1;\n  \
    \      } else if (e > freq) {\n            return e;\n        }\n    }\n    return\
    \ -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp7fc_numr: /tmp/tmp7fc_numr.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long n=0, freq=0;\n\
    \    for(long i=0; i< lst.size(); i++){\n        if(lst[i] == 1)\n           \
    \ freq++;\n        if(lst[i] == 1 && freq >= lst[i])\n            n = 1;\n   \
    \ }\n    if(n==0 && freq > 0)\n        return -1;\n    return n;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpnemdce_l: /tmp/tmpnemdce_l.cpp:26: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    assert(lst.size()\
    \ > 0);\n    \n    long max = INT_MIN;\n    long cur = INT_MIN;\n    long cnt\
    \ = 0;\n    \n    for (long i = 0; i < lst.size(); i++) {\n        cnt += lst[i];\n\
    \        if (cur > max) {\n            max = cur;\n            cur = cnt;\n  \
    \      } else {\n            if (cnt != lst[i]) {\n                max = cnt;\n\
    \            }\n            cnt = lst[i];\n        }\n    }\n    return cur >\
    \ max ? cur : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmplp88ej5g: /tmp/tmplp88ej5g.cpp:34: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int max = -1;\n\
    \    int frequency = 0;\n\n    for (long i : lst) {\n        if (i > max) {\n\
    \            max = i;\n            frequency++;\n        } else {\n          \
    \  frequency += i;\n        }\n    }\n\n    if (frequency >= max) {\n        return\
    \ -1;\n    }\n    return max;\n}\nint main() {\n    auto candidate = search;\n\
    \    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4,\
    \ 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3})))\
    \ == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8})))\
    \ == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n\
    \    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10,\
    \ 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpq2t4x1of: /tmp/tmpq2t4x1of.cpp:31: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int N = lst.size();\n\
    \    if(N == 0)\n        return -1;\n    sort(lst.begin(), lst.end());\n    int\
    \ ans = -1;\n    int count = 1;\n    int j = 0;\n    for(int i = 1; i < lst.size();\
    \ i++){\n        j = i;\n        while(j > 0 && lst[j] == lst[j-1]){\n       \
    \     count++;\n            j--;\n        }\n        if(ans == -1 || (ans > count\
    \ && count > lst[i]))\n            ans = count;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpoj8_yyhg: /tmp/tmpoj8_yyhg.cpp:33: int main(): Assertion `candidate((std::vector<long>({4,
    1, 4, 1, 4, 4}))) == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660101043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n  long n1 = lst[0],\
    \ n2 = 0; //n1=first number and n2 is the highest number that can be found with\
    \ frequency >= n1\n  \n  for (long i = 1; i < lst.size(); i++) {\n    if (lst[i]\
    \ == n1) \n      n2 = lst[i];\n    else if (lst[i] < n2) \n      n2 = lst[i];\n\
    \    else if (lst[i] > n2 && !(i==lst.size()-1))\n      n2 = -1;\n  }\n  return\
    \ n2;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpclstbffm: /tmp/tmpclstbffm.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,
    3}))) == (-1)'' failed.

    '
  stdout: ''
  timestamp: 1660101043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int n = lst.size();\n\
    \    std::vector<int> hist(n + 1, 0);\n    for(long i = 0; i < n; i++)\n     \
    \   hist[lst[i]]++;\n    \n    long maxi = hist[0];\n    long maxf = 0;\n    for(int\
    \ i = 1; i < hist.size(); i++)\n    {\n        if(hist[i] > maxi)\n        {\n\
    \            maxi = hist[i];\n            maxf = i;\n        }\n    }\n    if(maxf\
    \ >= n)\n        return -1;\n    return maxf;\n}\nint main() {\n    auto candidate\
    \ = search;\n    assert(candidate((std::vector<long>({5, 5, 5, 5, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({4, 1, 4, 1, 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3,\
    \ 3}))) == (-1));\n    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8,\
    \ 8, 8}))) == (8));\n    assert(candidate((std::vector<long>({2, 3, 3, 2, 2})))\
    \ == (2));\n    assert(candidate((std::vector<long>({2, 7, 8, 8, 4, 8, 7, 3, 9,\
    \ 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6, 7, 1, 8, 8,\
    \ 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp39gftdkp: /tmp/tmp39gftdkp.cpp:33: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101043
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    \n    long freq[MAX+1];\n\
    \    int max = 0;\n    long max_val = -1L;\n    \n    for (int i : lst) {\n  \
    \      ++freq[i];\n        if (i > 0 && freq[i] >= freq[i - 1]) {\n          \
    \  freq[i] = freq[i - 1] + 1;\n        } else {\n            freq[i] = 1;\n  \
    \      }\n        if (freq[i] > max_val) max = i;\n        max_val = freq[i];\n\
    \    }\n    if (max > 0)\n        return max;\n    else\n        return -1;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjx6spqmi.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjx6spqmi.cpp:13:15: error: \u2018MAX\u2019 was not declared\
    \ in this scope\n   13 |     long freq[MAX+1];\n      |               ^~~\n/tmp/tmpjx6spqmi.cpp:18:11:\
    \ error: \u2018freq\u2019 was not declared in this scope; did you mean \u2018\
    free\u2019?\n   18 |         ++freq[i];\n      |           ^~~~\n      |     \
    \      free\n"
  stdout: ''
  timestamp: 1660101042
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    if (lst.empty())\
    \ return -1;\n    long ans = lst.front();\n    for (long &i : lst) {\n       \
    \ if (i > ans) ans = i;\n    }\n    long freq[1000010];\n    for (long &i : lst)\
    \ {\n        freq[i]++;\n    }\n    for (long &i : lst) {\n        if (freq[i]\
    \ > ans) {\n            ans = i;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmpjysvb5ri: /tmp/tmpjysvb5ri.cpp:30: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    long i, maxcount\
    \ = 0, freq = 0;\n    for (i = 0; i < lst.size(); i++) {\n        freq = 0;\n\
    \        for (int j = 0; j < lst.size(); j++) {\n            if (lst[i] == lst[j])\
    \ {\n                freq++;\n            }\n        }\n        if (freq > maxcount)\
    \ {\n            maxcount = freq;\n        }\n    }\n    return maxcount > 0 ?\
    \ maxcount : -1;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp9ap3_msu: /tmp/tmp9ap3_msu.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101043
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n   assert(lst.size()\
    \ > 0);\n   std::map<long, int>::iterator it;\n   long ret = -1;\n   for(it =\
    \ lst.begin(); it != lst.end(); it++) {\n      long temp = it->first;\n      int\
    \ cnt = it->second;\n      if( cnt > ret) {\n         ret = cnt;\n      }\n  \
    \ }\n   return ret;\n}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6lm1ux8p.cpp: In function \u2018long int search(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6lm1ux8p.cpp:15:23: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::map<long int, int>::iterator\u2019 {aka \u2018\
    std::_Rb_tree_iterator<std::pair<const long int, int> >\u2019} and \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019})\n   15 |    for(it = lst.begin(); it != lst.end(); it++) {\n\
    \      |                       ^\nIn file included from /usr/include/c++/9/map:60,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:81,\n\
    \                 from /tmp/tmp6lm1ux8p.cpp:2:\n/usr/include/c++/9/bits/stl_tree.h:256:12:\
    \ note: candidate: \u2018constexpr std::_Rb_tree_iterator<std::pair<const long\
    \ int, int> >& std::_Rb_tree_iterator<std::pair<const long int, int> >::operator=(const\
    \ std::_Rb_tree_iterator<std::pair<const long int, int> >&)\u2019\n  256 |   \
    \  struct _Rb_tree_iterator\n      |            ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_tree.h:256:12:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018const std::_Rb_tree_iterator<std::pair<const long int, int> >&\u2019\
    \n/usr/include/c++/9/bits/stl_tree.h:256:12: note: candidate: \u2018constexpr\
    \ std::_Rb_tree_iterator<std::pair<const long int, int> >& std::_Rb_tree_iterator<std::pair<const\
    \ long int, int> >::operator=(std::_Rb_tree_iterator<std::pair<const long int,\
    \ int> >&&)\u2019\n/usr/include/c++/9/bits/stl_tree.h:256:12: note:   no known\
    \ conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018std::_Rb_tree_iterator<std::pair<const long int, int> >&&\u2019\n/tmp/tmp6lm1ux8p.cpp:15:29:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018std::map<long\
    \ int, int>::iterator\u2019 {aka \u2018std::_Rb_tree_iterator<std::pair<const\
    \ long int, int> >\u2019} and \u2018std::vector<long int>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx"
  stdout: ''
  timestamp: 1660101043
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty\
    \ list of positive integers. Return the greatest integer that is greater than\
    \ \n// zero, and has a frequency greater than or equal to the value of the integer\
    \ itself. \n// The frequency of an integer is the number of times it appears in\
    \ the list.\n// If no such a value exist, return -1.\n// Examples:\n// search([4,\
    \ 1, 2, 2, 3, 1]) == 2\n// search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n// search([5,\
    \ 5, 4, 4, 4]) == -1\nlong search(std::vector<long> lst) {\n    int maxEle = INT_MIN;\n\
    \    long frequency = INT_MIN;\n    for(int i=0; i < lst.size(); i++) {\n    \
    \    if(lst[i] > maxEle) {\n            maxEle = lst[i];\n            frequency\
    \ = i;\n        } else if (lst[i] == maxEle) {\n            frequency++;\n   \
    \     }\n    }\n    if (maxEle == INT_MIN) {\n        return -1;\n    }\n    if\
    \ (frequency >= lst[maxEle]) {\n        return -1;\n    }\n    return maxEle;\n\
    }\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({5,\
    \ 5, 5, 5, 1}))) == (1));\n    assert(candidate((std::vector<long>({4, 1, 4, 1,\
    \ 4, 4}))) == (4));\n    assert(candidate((std::vector<long>({3, 3}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({8, 8, 8, 8, 8, 8, 8, 8}))) == (8));\n\
    \    assert(candidate((std::vector<long>({2, 3, 3, 2, 2}))) == (2));\n    assert(candidate((std::vector<long>({2,\
    \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 2, 8, 2}))) == (2));\n    assert(candidate((std::vector<long>({6,\
    \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10}))) == (1));\n    assert(candidate((std::vector<long>({8,\
    \ 8, 3, 6, 5, 6, 4}))) == (-1));\n    assert(candidate((std::vector<long>({6,\
    \ 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9})))\
    \ == (1));\n    assert(candidate((std::vector<long>({1, 9, 10, 1, 3}))) == (1));\n\
    \    assert(candidate((std::vector<long>({6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10,\
    \ 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10}))) == (5));\n    assert(candidate((std::vector<long>({1})))\
    \ == (1));\n    assert(candidate((std::vector<long>({8, 8, 10, 6, 4, 3, 5, 8,\
    \ 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5}))) == (4));\n    assert(candidate((std::vector<long>({2,\
    \ 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10}))) == (2));\n    assert(candidate((std::vector<long>({1,\
    \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3}))) == (1));\n    assert(candidate((std::vector<long>({9,\
    \ 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2,\
    \ 8, 10, 9, 4}))) == (4));\n    assert(candidate((std::vector<long>({2, 6, 4,\
    \ 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7}))) == (4));\n\
    \    assert(candidate((std::vector<long>({9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10,\
    \ 3, 8, 2, 6, 2, 3, 1}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8}))) == (-1));\n\
    \    assert(candidate((std::vector<long>({10}))) == (-1));\n    assert(candidate((std::vector<long>({9,\
    \ 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2}))) == (2));\n    assert(candidate((std::vector<long>({5,\
    \ 4, 10, 2, 1, 1, 10, 3, 6, 1, 8}))) == (1));\n    assert(candidate((std::vector<long>({7,\
    \ 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6}))) == (1));\n\
    \    assert(candidate((std::vector<long>({3, 10, 10, 9, 2}))) == (-1));\n}\n"
  status: Exception
  stderr: 'tmp1x17e66b: /tmp/tmp1x17e66b.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    5, 5, 5, 1}))) == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660101043
