name: HumanEval_23_strlen
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return length of given string\n\
  // >>> strlen('')\n// 0\n// >>> strlen('abc')\n// 3\nlong strlen(std::string string)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = strlen;\n    assert(candidate((\"\"\
  )) == (0));\n    assert(candidate((\"x\")) == (1));\n    assert(candidate((\"asdasnakj\"\
  )) == (9));\n}\n"
completions: ['    return __builtin_strlen(string.c_str());', "    size_t len;\n \
    \   for (size_t i=0; i<string.size(); ++i) {\n        if (string[i]=='\\0')\n\
    \            break;\n        len = len + 1;\n    }\n    return len;", "    int\
    \ len = 0;\n    for(size_t i = 0; i < string.length(); i++)\n        len++;\n\
    \    return len;", "    assert(string.size() > 0);\n    return static_cast<long\
    \ int>(string.size());", "    size_t i = 0;\n    while (string[i] != '\\0') {\n\
    \        i++;\n    }\n    return i;", '    return string.size();', "    long length\
    \ = 0;\n    for (char c : string) {\n        length += 1;\n    }\n    return length;",
  "    long len = 0;\n    while(string.at(len)!='\\0') {\n        len++;\n    }\n\
    \    return len;", '    return string.size();', "    string s;\n    s.assign(string);\n\
    \    return s.length();", "    int i = 0;\n    while (i < string.length()) {\n\
    \        ++i;\n    }\n    return i;", "  long result = 0;\n  for (auto c : string)\
    \ {\n    result = result + 1;\n  }\n  return result;", "    if (string.size()\
    \ <= 1)\n        return 0;\n\n    long len = 0;\n\n    for (auto &c : string)\
    \ {\n        if (c == '\\0')\n            break;\n        ++len;\n    }\n\n  \
    \  return len;", "  long cnt = 0;\n  for (size_t i = 0; i < string.size(); i++)\
    \ {\n    if (string[i] == '\\0')\n      return cnt;\n    cnt++;\n  }\n  return\
    \ cnt;", '    return string.size();', "    long res = 0;\n    for (auto c : string)\
    \ {\n        if (!isalpha(c)) c = '\\0';\n        res++;\n    }\n    return res;",
  "    long result = 0;\n    for (int i = 0; i < string.size(); i++) {\n        result\
    \ += (long) string[i];\n    }\n    return result;", "\treturn string.length();",
  "  // Find the length of string\n  int len = 0;\n  for (int i = string.length()\
    \ - 1; i >= 0; i--) {\n    if (string[i] != '\\0') {\n      len++;\n    }\n  }\n\
    \  return len;", "    size_t index = 0;\n    while (string[index] != 0) {\n  \
    \      index++;\n    }\n    return index;", '    return string.size();', "   \
    \ // Write your code here\n    long counter = 0;\n    for (int i = 0; i < string.length();\
    \ i++)\n        counter++;\n    return counter;", '    return string.length();',
  "    long ans = 0;\n    for (auto itr = string.begin(); itr != string.end(); itr++)\
    \ {\n        ans += 1;\n    }\n    return ans;", "    string s(string);\n    return\
    \ s.length();", '    return string.size();', "    long len = 0;\n    for (int\
    \ i = 0; i < string.length(); i++)\n        len++;\n    return len;", "  int count\
    \ = 0;\n  \n  // Iterate over all characters\n  for (char c : string) {\n    count++;\n\
    \  }\n  return count;", "  // Return the length of the string (excluding null\
    \ byte).\n  // For C++03 compatibility, we count null byte as one character.\n\
    \  return string.length() - 1;", '    return (long)string.size();', "    long\
    \ cnt=0;\n    for(int i = 0; i< string.length(); i++) {\n        cnt++;\n    }\n\
    \    return cnt;", '    return string.size();', "    long count = 0;\n    for\
    \ (auto c : string) {\n        count += 1;\n    }\n    return count;", "    long\
    \ size = 0;\n    for(auto c: string)\n        ++size;\n    return size;", "  \
    \  int length = 0;\n    while(string[length] != '\\0') length++;\n    return length;",
  "    size_t len = string.length();\n    return len;", '  return string.size();',
  "\treturn string.length();", '    return string.size();', "    int i = 0;\n    while\
    \ (string[i] != '\\0')\n        i++;\n    return i;", "  // Initialize length\
    \ to zero\n  long length = 0;\n  // Iterate over the string and find the length\
    \ of it\n  for(unsigned int i = 0; i < string.length(); i++) {\n    length +=\
    \ 1;\n  }\n  // Return length\n  return length;", '    return string.length();',
  "    string::iterator it;\n    long count = 0;\n    for(it = string.begin(); it\
    \ != string.end(); it++) {\n        count += (*it) != '\\0';\n    }\n    return\
    \ count;", "  int len = 0;\n  for (int i = 0;i < string.length();++i)\n    len\
    \ += (string.at(i) == ' ')? 1 : 2;\n  return len;", '    return std::strlen(string.c_str());',
  '    return string.length();', "    long length = 0;\n    for (const char c : string)\
    \ {\n        length += 1;\n    }\n    return length;", "  int i = 0;\n  while\
    \ ((string[i] != '\\0') && (string[i] != '\\n')) {\n    i++;\n  }\n  return i;",
  '    return string.length();', "  if (string.size() == 0)\n    return 0;\n  long\
    \ len = 0;\n  for (auto &c: string) {\n    len++;\n  }\n  return len;", "    string\
    \ temp;\n    stringstream ss;\n    long len = 0;\n    ss << string;\n    while(ss\
    \ >> temp)\n    len++;\n    return len;", "    return std::count(string.begin(),\
    \ string.end(), '\\0');", "    string str = string;\n    return str.length();",
  "    long result = 0;\n    for (auto &c : string)\n        ++result;\n    return\
    \ result;", "    size_t n = 0;\n    for (const char& c: string) {\n        if\
    \ (c != 0) n++;\n    }\n    return n;", "  long len = 0;\n  for (int i = 0; i\
    \ < string.length(); i++) {\n    len++;\n  }\n  return len;", '    return string.length();',
  '    return string.length();', "    long len = 0;\n    string.find_first_not_of(\"\
    \ \", len);\n    return len;", '    return (string.size());', "    // If string\
    \ has '\\0', return length of string - 1\n    if (string.size() >= 2 && string[0]\
    \ == '\\0' && string[1] == '\\0')\n        return string.size() - 1;\n\n    long\
    \ len = 0;\n    for(int i = 0; i < string.size(); i++) {\n        if(string[i]\
    \ == '\\0')\n            return len;\n        len++;\n    }\n    return len;",
  "    if (string.length() == 0) {\n        return 0;\n    }\n    return string.length();",
  "    long len = 0;\n    for(const char i : string) {\n        len++;\n    }\n  \
    \  return len;", "  long result = 0;\n  for (auto i : string) {\n    result +=\
    \ 1;\n  }\n  return result;", '    return string.length();', '    return string.length();',
  "    long length = 0;\n    for (int i = 0; string[i] != '\\0'; i++) {\n        length++;\n\
    \    }\n    return length;", '    return string.length();', "\treturn string.size();",
  '    return string.length();', "    auto result = string.size();\n    assert(result\
    \ != 0);\n    return result;", "    long length = 0;\n    for (auto c: string)\n\
    \        length = length + 1;\n    return length;", "    size_t i = 0;\n    for\
    \ (auto it = string.cbegin(); it != string.cend(); ++it) {\n        i = i + 1;\n\
    \    }\n    return i;", "  int i=0;\n  for (;string[i]!='\\0';i++)\n    ;\n  return\
    \ i;", "    size_t strSize = string.size();\n    return strSize;", "    std::string::size_type\
    \ pos = 0;\n    // Find the position of the first occurence of a non-whitespace\
    \ character\n    while (pos = string.find_first_of('\\0', pos)) {\n        if\
    \ (pos != string::npos)\n            break;\n    }\n    // Return the length of\
    \ the string\n    return static_cast<long int>(pos);", "    long len = string.length();\n\
    \    return len;", "  int i = 0;\n  for (char &c : string) {\n    if (c == '\\\
    0')\n      return i;\n    c++;\n    i++;\n  }\n  return i;", '    return string.size();',
  '    return __builtin_strlen(string.c_str());', "  long len = 0;\n  for (auto c\
    \ : string) {\n    len++;\n  }\n  return len;", "    long n = 0;\n    for(unsigned\
    \ int i = 0; i < (int) string.length(); i++)\n    {\n        n += 1;\n    }\n\
    \    return n;", "    long len = string.size();\n    while(len) {\n        len--;\n\
    \        string.erase(string.begin()+len);\n    }\n    return len;", "  // Write\
    \ your code here.\n  return string.size();", "    long result = 0;\n    for (int\
    \ i = 0; i <= string.length(); i++)\n        result += 1;\n    return result;",
  "    long length = 0;\n    for (auto it = string.begin(); it != string.end(); ++it)\n\
    \        length += 1;\n    return length;", '    return string.size();', '    return
    string.length();', "    size_t len = 0;\n    char ch;\n    while ((ch = string[len++])\
    \ != '\\0') {}\n    return len;", '  return string.size();', '   return string.length();',
  "    std::size_t size = string.size();\n    return size;", "    string::size_type\
    \ pos = 0;\n    while (string[pos] != '\\0')\n        ++pos;\n    return pos;",
  "    long len = 0;\n    for (auto c : string)\n        len += (unsigned char)c;\n\
    \    return len;", "\tlong len = 0;\n\tfor (long i = 0; i < string.length(); i++)\
    \ {\n\t\tlen++;\n\t}\n\treturn len;", "    auto it = string.cbegin();\n    long\
    \ len = string.length();\n    while (it != string.cend()) {\n        len--;\n\
    \        it++;\n    }\n    return len;", "    size_t len = string.size();\n  \
    \  return len;", '    return string.length();', "    long size = string.size();\n\
    \    return size;", '  return string.length();', "    if (string.length() == 0)\
    \ {\n        return 0;\n    }\n    else {\n        long length = 1;\n        for\
    \ (long i = 0; i < string.length(); i++) {\n            length = length * 2 +\
    \ 1;\n        }\n        return length;\n    }", "    long length = 0;\n    for\
    \ (auto c : string) {\n        length += 1;\n    }\n    return length;", "  int\
    \ i = 0;\n  for (int j = string.length() - 1; j >= 0; j--) {\n    ++i;\n  }\n\
    \  return i;", "\treturn string.size();", "\tsize_t len = 0;\n\twhile (string[len]\
    \ != '\\0')\n\t\tlen++;\n\treturn len;", '    return (string.length());', "  \
    \  int i = 0;\n    while (string[i] != '\\0') i++;\n    return i;", "  long length\
    \ = 0;\n  for (int i = 0; i < string.length(); i++) {\n    length += (string.at(i)\
    \ != '\\0') ? 1 : 0;\n  }\n  return length;", '  return string.length();', " \
    \   auto it = string.begin(), end = string.end(); \n    while (it != end) \n \
    \       ++it;\n    return it - string.begin();", "    long l = 0;\n    for (;\
    \ string[l] != '\\0'; l++) {\n        ;\n    }\n    return l;", "    size_t len\
    \ = 0;\n    while(string [len] != '\\0') {\n        len++;\n    }\n    return\
    \ len;", "  int len = 0;\n  for (auto c : string) {\n    len += 1;\n  }\n  return\
    \ len;", '  return string.size();', "    long len = 0;\n    string temp = \"a\"\
    ;\n    while(!temp.empty()){\n        len++;\n        temp += temp[0];\n    }\n\
    \    return len;", '    return (string.length());', "    long len = 0;\n    for\
    \ (auto c : string) {\n        if (c == ' ') {\n            len += 1;\n      \
    \  } else {\n            len += 2;\n        }\n    }\n    return len;", "    long\
    \ len = 0;\n    char c;\n    while ((c = string[len]) != '\\0') {\n        len++;\n\
    \    }\n    return len;", "    int len = 0;\n    for (auto c : string) len++;\n\
    \    return len;", '    return string.length();', "    long length = 0;\n    //\
    \ Iterate until end of string is reached\n    for (const char &character : string)\
    \ {\n        ++length;\n    }\n    return length;", '   return string.length();',
  '    return string.length();', "    if (string.length() > INT_MAX) {\n        return\
    \ INT_MAX;\n    }\n    return string.size();", "  int len = 0;\n  for (int i =\
    \ 0; i < string.length(); i++)\n    len++;\n  return len;", "    long length =\
    \ 0;\n    for (auto it : string)\n        length = length + 1;\n    return length;",
  '    return static_cast<long int>(string.size());', '    return string.length();',
  "    long i = 0;\n    for (char &i : string) {\n        i = i + 1;\n    }\n    return\
    \ i;", '    return string.size();', "    string s;\n    for (size_t i = 0; i <\
    \ string.size(); i++)\n        if (string[i] == '\\0')\n            return i;\n\
    \        else\n            s += string[i];\n    return s.length();", '    return
    string.size();', '    return (string.size());', '    return string.length();',
  "    size_t len = 0;\n    for (;string[len] != '\\0'; len++)\n        ;\n    return\
    \ len;", '    return std::strlen(string.c_str());', '    return (string.length());',
  '    return string.size();', '    return string.length();', '    return string.size();',
  "  // Convert string to c-string\n  const char* c_string = string.c_str();\n  //\
    \ Find length of string\n  long string_length = strlen(c_string);\n  return string_length;",
  "    int result = 0;\n    char* ptr = string.c_str();\n    while (*ptr != '\\0')\n\
    \        ++ptr;\n    ++ptr;\n    while (*ptr != '\\0')\n        ++ptr;\n    ++ptr;\n\
    \    while (*ptr != '\\0')\n        ++ptr;\n    result = ptr - string.c_str();\n\
    \    return result;", "    assert(string);\n    int i = 0;\n    for (; (i < string.length())\
    \ && (string[i] != '\\0'); i++)\n        ;\n    return i;", "    long result =\
    \ 0;\n    for (auto i = string.begin(); i != string.end(); i++) {\n        result\
    \ += 1;\n    }\n    return result;", '    return string.length();', '   return
    string.size();', "    // Return length of given string\n    long length = 0;\n\
    \    // Iterate over string character\n    for(int i = 0; i < string.length();\
    \ i++) {\n        // If character is non-whitespace character\n        if(string[i]\
    \ != ' ') {\n            // Store length of character\n            length = i;\n\
    \        }\n    }\n    // Return length of given string\n    return length;",
  '    return string.size();', "    int length = string.length();\n    return length;",
  "    int count = 0;\n    for(;string[count] != 0;count++);\n    return count;",
  "    int count = 0;\n    for (auto it = string.cbegin(); it != string.cend(); it++)\
    \ {\n        if (*it == '\\0')\n            break;\n        count++;\n    }\n\
    \    return count;", '    return string.length();', "    size_t i = 0;\n    for(;string[i]\
    \ != '\\0';++i){\n    }\n    return i;", "    // Write your code here\n    return\
    \ string.size();", '    return string.length();', '  return (int)string.length();',
  "    long len = 0;\n    for (int i = 0; i < string.length(); i++)\n        len++;\n\
    \    return len;", "  long result = 0;\n  for (long i = 0; i < string.size();\
    \ i++)\n    result += (string[i] == 0);\n  return result;", "    assert(string);\n\
    \    return string.length();", "    // TODO: implement with strlen from <string.h>\n\
    \    return string.size();", "    // code here\n    return 0 ;", '    return string.size();',
  '    return string.length();', '    return (string.length() + (string.size() % 2));',
  "    long result = 0;\n    for (auto c : string) {\n        if (c == 0) return result;\n\
    \        result++;\n    }\n    return result;", '  // return string.size();',
  "    long length = 0;\n    for (auto &character : string) {\n        ++length;\n\
    \    }\n    return length;", "    int c = 0;\n    while(c < string.length() &&\
    \ string[c] != '\\0') {\n        c++;\n    }\n    return c;", "    // Declare\
    \ and initialize length variable as 0\n    // and set it to zero at every iteration\n\
    \    long length = 0;\n\n    // Iterate through string till the end of the string\n\
    \    // and increase the length variable by 1\n    for(int i = 0; i < string.length();\
    \ i++) {\n        length++;\n    }\n\n    return length;", "    long len = 0;\n\
    \    for (auto c : string)\n        len += 1;\n    return len;", "    long len\
    \ = 0;\n    for (char c : string) {\n        len++;\n    }\n    return len;",
  "  // return length of given string\n  return string.size();", "    size_t len =\
    \ 0;\n    for (size_t i = 0; i < string.length(); ++i) {\n        if (string[i]\
    \ != 0) {\n            ++len;\n        }\n    }\n    return len;", "    if (string.length()\
    \ == 0) {\n        return 0;\n    }\n    long result = 0;\n    long len = string.length();\n\
    \    while (len > 0) {\n        if (string[len-1] == '\\0' || string[len-1] ==\
    \ '\\n' || string[len-1] == '\\r') {\n            len--;\n        }\n        else\
    \ {\n            result += 1;\n        }\n    }\n    return result;", "    long\
    \ result = 0;\n    for(auto it = string.begin(); it != string.end(); it++)\n \
    \   {\n        char c = *it;\n        if (c != ' ')\n        {\n            result++;\n\
    \        }\n    }\n    return result;", "\tlong ans = 0;\n\twhile (string[ans]\
    \ != '\\0') {\n\t\tans++;\n\t}\n\treturn ans;", "    long len = string.length();\n\
    \    return len;", "  if (string.length() == 0) {\n    return 0;\n  }\n  return\
    \ static_cast<long>(string.length() - 1);", "\tlong length = 0;\n\tfor (auto c\
    \ : string) length += 1;\n\treturn length;", "    long ret = 0;\n    \n    //\
    \ Traverse every character in string\n    for (auto c: string) \n    {\n     \
    \   // If character is space or null character, return length of the string\n\
    \        if (c != ' ' && c != '\\0') \n        {\n            ret++;\n       \
    \ }\n    }\n    \n    return ret;", "    int i = 0;\n    while (string[i] != '\\\
    0') {\n        i++;\n    }\n    return i;", "    long length = 0;\n    for (auto\
    \ c: string) {\n        if (c != ' ' && c != '\\t') length++;\n    }\n    return\
    \ length;", "    long size = 0;\n    for (auto c: string)\n        ++size;\n \
    \   return size;", '    return string.length();', '    return static_cast<long>(string.size());',
  "    // Write your code in C++.\n    long len = 0;\n    for (char c: string)\n \
    \       len++;\n    return len;", '    return string.length();', "    long length\
    \ = 0;\n    for(int i = 0; i < (int)string.length(); i++) {\n        length++;\n\
    \    }\n    return length;", "    int i = 0;\n    while(i < string.size() && string[i]\
    \ != '\\0')\n        ++i;\n    return i;", "    auto it = string.begin();\n  \
    \  auto end = string.end();\n    long length = 0;\n    while(it != end) {\n  \
    \      it++;\n        length++;\n    }\n    return length;", "    long result\
    \ = 0;\n    for(auto char : string) result += char(0);\n    return result;", " \
    \   int length = 0;\n    for (int i = 0; i < string.size(); ++i) {\n        length\
    \ <<= 1;\n        if (string[i] != '\\0')\n            length |= 1;\n    }\n \
    \   return length;", '    return string.length();', '    return string.size();',
  '    return string.length();', '   return string.length();', "    auto it = string.cbegin();\n\
    \    long length = string.length();\n    while (it!=string.cend()) {\n       \
    \ ++it;\n        ++length;\n    }\n    return length;", "   std::size_t len =\
    \ string.size();\n   return len;", '    return (string.length() > 0) ? string.length()
    - 1 : 0;', "    size_t len = 0;\n    for (char c: string) len++;\n    return len;"]
stop_tokens:
- "\n}"
