name: HumanEval_42_incr_list
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() > 0);\n    std::vector<long>\
    \ r(l.size() + 1, 0);\n    for (long i = 0; i < (long)l.size(); i++) {\n     \
    \   r[(int)(i + 1)] = l[i];\n    }\n    return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmponr0xk_h: /tmp/tmponr0xk_h.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r;\n    long i = 0;\n\
    \    for (auto elem : l) {\n        r[i] = elem + 1;\n        i++;\n    }\n  \
    \  return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (auto& i : l)\n        ++i;\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmptuabfsw0: /tmp/tmptuabfsw0.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> v;\n    v.reserve(l.size()\
    \ + 1);\n    for (size_t i = 0; i <= l.size(); i++) {\n        v.push_back(l[i]\
    \ + 1);\n    }\n    return v;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  // First element of l is always 1.\n  l.push_back(1);\n\
    \  std::vector<long> result(l.size() - 1);\n  // Find element for which all consecutive\
    \ elements differ by 1.\n  for (size_t i = 1; i < l.size(); i++) {\n    if (l[i\
    \ - 1] != l[i]) {\n      result[i - 1] = l[i];\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpgm3dpkk6: /tmp/tmpgm3dpkk6.cpp:23: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> incr;\n    std::size_t\
    \ pos = 0;\n    for (auto &val : l) {\n        incr[pos++] = val + 1;\n    }\n\
    \    return incr;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    long sum = 0;\n    std::vector<long> result;\n\
    \    for (long i : l) {\n        sum += i;\n        result.push_back(sum);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpb8kh5mub: /tmp/tmpb8kh5mub.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    for (auto i : l)\n        ++i;\n    return\
    \ l;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp2ost90cq: /tmp/tmp2ost90cq.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret;\n    for (long\
    \ x : l) {\n        ret.push_back(x+1);\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  auto new_list = l;\n  std::sort(new_list.begin(),\
    \ new_list.end());\n  auto itr = new_list.begin();\n  while (new_list.end() -\
    \ new_list.begin() > 1) {\n    new_list.insert(new_list.begin() + 1, std::min(*itr,\
    \ new_list.end() - 1));\n    itr++;\n  }\n  return new_list;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf31psl2x.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf31psl2x.cpp:13:76: error: no matching function for call\
    \ to \u2018min(long int&, __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >)\u2019\n   13 |     new_list.insert(new_list.begin() + 1, std::min(*itr,\
    \ new_list.end() - 1));\n      |                                             \
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpf31psl2x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:198:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpf31psl2x.cpp:13:76:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   13 |     new_list.insert(new_list.begin() + 1, std::min(*itr,\
    \ new_list.end() - 1));\n      |                                             \
    \                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/in"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(!l.empty());\n    std::vector<long>\
    \ res = l;\n    res.push_back(1);\n    for (auto it = res.begin() ; it != res.end()\
    \ - 1; ++it)\n        it[1]++;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmp1giwkhw3: /tmp/tmp1giwkhw3.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `!l.empty()' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> out(l.size());\n  long\
    \ i = 0;\n  for (auto e : l) {\n    out[i++] = e + 1;\n  }\n  return out;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> result;\n  result.push_back(l[0]);\n\
    \  for (int i = 1; i < l.size(); i++) {\n    result.push_back(result[i - 1] +\
    \ 1);\n  }\n  return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret;\n    long c = 0;\n\
    \    for (auto it=l.begin(); it!=l.end(); ++it) {\n        ret = append(ret,*it);\n\
    \        c = c + 1;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpodr4gb51.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpodr4gb51.cpp:12:15: error: \u2018append\u2019 was not\
    \ declared in this scope\n   12 |         ret = append(ret,*it);\n      |    \
    \           ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> res;\n  for (long i :\
    \ l)\n    res.push_back(++i);\n  return res;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> v(l.size());\n    std::iota(v.begin(),\
    \ v.end(), 0);\n    v.push_back(0);\n    for (std::size_t i = 0; i < v.size()\
    \ - 1; i++)\n        v[i + 1] = v[i] + 1;\n    return v;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpuv3irxtk: /tmp/tmpuv3irxtk.cpp:18: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n\tstd::vector<long> v;\n\tfor (auto e: l)\
    \ {\n\t\tv.push_back(e+1);\n\t}\n\treturn v;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  auto it\
    \ = std::unique(l.begin(), l.end());\n  return std::vector<long>(l.begin(), it);\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpk3sdx9x4: /tmp/tmpk3sdx9x4.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  int n = l.size();\n  assert(n > 0);\n  std::vector<long>\
    \ res = std::vector<long> (n, 0);\n  for (int i = 0; i < n; i++) {\n    int val\
    \ = l[i];\n    res[i] += val;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpv3nd9bzj: /tmp/tmpv3nd9bzj.cpp:10: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `n > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::vector<long>\
    \ r(l.size());\n  std::iota(r.begin(), r.end(), 1);\n  r.erase(r.end() - 1, r.end());\n\
    \  return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmppei6p1c8: /tmp/tmppei6p1c8.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size());\n    auto it = std::unique(l.begin(),\
    \ l.end()); // remove duplicate elements in list\n    l.erase(it, l.end()); //\
    \ remove remaining elements at the end of the list\n    std::sort(l.begin(), l.end());\n\
    \    l.push_back(l.size());\n    return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmp62qw4gif: /tmp/tmp62qw4gif.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size()' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    auto it = l.begin();\n    std::vector<long>\
    \ ret(std::distance(l.begin(), it));\n    for (auto i = l.begin(); i < l.end();\
    \ i++) {\n        ret[i++]++;\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzjmchxti.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpzjmchxti.cpp:12:12: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   12 |         ret[i++]++;\n      | \
    \           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpzjmchxti.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:28:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n 1040 |       operator[](size_type __n)\
    \ _GLIBCXX_NOEXCEPT\n      |                  ~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1058:28:\
    \ note:   no known conversion for argument"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (long e : l)\n        ret.push_back(e+1);\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i : l) {\n        res.push_back(i + 1);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  int size = l.size();\n  std::vector<long>\
    \ res;\n  for (int i = 0; i < size - 1; ++i) {\n    res.push_back(std::max(l[i],\
    \ l[i + 1]));\n  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpvqsmk0n3: /tmp/tmpvqsmk0n3.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    long x = l[0];\n    std::vector<long>\
    \ v;\n    for (int i = 1; i < l.size(); i++) {\n        x += l[i];\n        v.push_back(x);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Copy vector\n    std::vector<long>\
    \ temp(l.begin(), l.end());\n    // Init iterator for copy\n    std::list<long>::iterator\
    \ it = temp.begin();\n    // Iterate through list\n    for (std::vector<long>::iterator\
    \ it1 = temp.begin(); it1 != temp.end(); it1++) {\n        // Increment iterator\n\
    \        it++;\n        // Check, if last element\n        if (it == temp.end())\
    \ {\n            break;\n        }\n        // Add element\n        l.push_back(*it);\n\
    \    }\n    return l;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmphc0ke725.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphc0ke725.cpp:12:46: error: conversion from \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} to non-scalar type \u2018std::__cxx11::list<long int>::iterator\u2019\
    \ {aka \u2018std::_List_iterator<long int>\u2019} requested\n   12 |     std::list<long>::iterator\
    \ it = temp.begin();\n      |                                    ~~~~~~~~~~^~\n\
    /tmp/tmphc0ke725.cpp:18:16: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::__cxx11::list<long int>::iterator\u2019 {aka \u2018std::_List_iterator<long\
    \ int>\u2019} and \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n   18 |         if (it == temp.end())\
    \ {\n      |             ~~ ^~ ~~~~~~~~~~\n      |             |             |\n\
    \      |             |             std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\n      |             std::__cxx11::list<long\
    \ int>::iterator {aka std::_List_iterator<long int>}\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmphc0ke725.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:886:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Declare a new list to return the elements\
    \ into.\n    std::vector<long> ret(l.size());\n    // Initialize list with each\
    \ element as current.\n    for (long i = 1; i < l.size(); i++) {\n        ret[i]\
    \ = l[i - 1] + 1;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpd36zbvp1: /tmp/tmpd36zbvp1.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    for (long\
    \ i : l)\n        res.push_back(++i);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Start with empty list.\n    std::vector<long>\
    \ r;\n    // Iterate over original list.\n    for (long i : l) {\n        // Add\
    \ element to list if it's not the last element.\n        if (i != l.back())\n\
    \            r.push_back(i);\n        // Add element to list if it is the last\
    \ element.\n        if (i == l.back())\n            r.push_back(i);\n        //\
    \ Increment element if the element is not the first or last element.\n       \
    \ else\n            r.push_back(i + 1);\n    }\n    return r;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpjaspsg4y: /tmp/tmpjaspsg4y.cpp:28: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size());\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (auto i : l) {\n        ret.push_back(i\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpw5goz63u: /tmp/tmpw5goz63u.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size()' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret(l.size());\n   \
    \ long n = 1;\n    for (size_t i = 0; i < l.size(); i++) {\n        ret[i] = l[i]\
    \ + n;\n        n++;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmptlgysd0_: /tmp/tmptlgysd0_.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::reverse(l.begin(), l.end());\n  std::vector<long>\
    \ res(l.size());\n  for (size_t i = 1; i < l.size(); i++)\n    res[i] += l[i -\
    \ 1];\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpdempjrtg: /tmp/tmpdempjrtg.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    for (auto it = l.begin() + 1; it != l.end();\
    \ ++it) {\n        *it++;\n    }\n    return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    auto res = l.size();\n    std::vector<long>\
    \ res(res);\n    std::iota(begin(res), end(res), 1);\n    return res;\n}\nint\
    \ main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb1ocw8w9.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpb1ocw8w9.cpp:10:23: error: conflicting declaration \u2018\
    std::vector<long int> res\u2019\n   10 |     std::vector<long> res(res);\n   \
    \   |                       ^~~\n/tmp/tmpb1ocw8w9.cpp:9:10: note: previous declaration\
    \ as \u2018long unsigned int res\u2019\n    9 |     auto res = l.size();\n   \
    \   |          ^~~\n/tmp/tmpb1ocw8w9.cpp:11:15: error: \u2018begin\u2019 was not\
    \ declared in this scope; did you mean \u2018std::begin\u2019?\n   11 |     std::iota(begin(res),\
    \ end(res), 1);\n      |               ^~~~~\n      |               std::begin\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpb1ocw8w9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1224:5:\
    \ note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>&\
    \ __va)\n      |     ^~~~~\n/tmp/tmpb1ocw8w9.cpp:11:27: error: \u2018end\u2019\
    \ was not declared in this scope; did you mean \u2018std::end\u2019?\n   11 |\
    \     std::iota(begin(res), end(res), 1);\n      |                           ^~~\n\
    \      |                           std::end\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpb1ocw8w9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n/tmp/tmpb1ocw8w9.cpp:12:12: error: could not convert\
    \ \u2018res\u2019 from \u2018long unsigned int\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   12 |     return res;\n      |            ^~~\n      |       \
    \     |\n      |            long unsigned int\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> new_list;\n    new_list.reserve(l.size());\n\
    \    for (long i : l) {\n        new_list.push_back(i + 1);\n    }\n    return\
    \ new_list;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() > 0);\n    std::vector<long>\
    \ ret(l.size());\n    for (long i = 0; i < l.size(); i++) {\n        ret[i] =\
    \ l[i] + 1;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp4wyhondl: /tmp/tmp4wyhondl.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  l.push_back(1);\n  for(auto& i: l)\n   \
    \ i += 1;\n  return l;\n}\nint main() {\n    auto candidate = incr_list;\n   \
    \ assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpkny4t9y8: /tmp/tmpkny4t9y8.cpp:16: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> new_l;\n    for (auto\
    \ e : l) {\n        new_l.push_back(new_l.size());\n    }\n    return new_l;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpkumv19sl: /tmp/tmpkumv19sl.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    if (l.size() == 0)\n        return l;\n\
    \    std::vector<long> u;\n    u.reserve(l.size());\n    std::transform(std::next(l.begin()),\
    \ l.end(), std::back_inserter(u), [](long v){return v+1;});\n    return u;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmps2h7hvb8: /tmp/tmps2h7hvb8.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res = l;\n    for (int\
    \ i = l.size(); i > 0; i--) {\n        int x = l[i - 1];\n        for (int j =\
    \ 0; j < i; j++) {\n            x = x + l[j];\n        }\n        l[i - 1] = x;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp_5sc5k44: /tmp/tmp_5sc5k44.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> result;\n    result.reserve(l.size()\
    \ + 1);\n    for (int i = 0; i < l.size(); i++) {\n        result.push_back(l.at(i)\
    \ + 1);\n    }\n    result.back() = l.back() + 1;\n    return result;\n}\nint\
    \ main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  for (auto & i : l)\n    ++i;\n  return l;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> r(l.size());\n  int ind\
    \ = 0;\n  for (int i = 0; i < l.size(); ++i) {\n    while (ind++ != i) {\n   \
    \   r[i] += l[i];\n    }\n  }\n  return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpcwibwvz3: /tmp/tmpcwibwvz3.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() >= 2);\n    std::vector<long>\
    \ ans(l.size() - 1);\n    std::iota(ans.begin(), ans.end(), 0);\n    ans[l.size()\
    \ - 2] = l.back();\n    return ans;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpv2yev68o: /tmp/tmpv2yev68o.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() >= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> out;\n  for (auto el :\
    \ l)\n    out.push_back(el + 1);\n  return out;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() > 0);\n    std::vector<long>\
    \ r = l;\n    r.push_back(r.back() + 1);\n    return r;\n}\nint main() {\n   \
    \ auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp4h66efct: /tmp/tmp4h66efct.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  long ans = 0;\n  for (long i = 0; i < l.size();\
    \ i++) {\n    ans += l[i];\n    l[i] = ans;\n  }\n  return l;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp2t41y6hq: /tmp/tmp2t41y6hq.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() > 1);\n    std::vector<long>\
    \ r;\n    r.push_back(1);\n    long n = l[0];\n    for (long i = 1, j = 0; i <\
    \ l.size(); i++) {\n        r.push_back(n - j);\n        n = l[i];\n        j\
    \ = i;\n    }\n    r.push_back(n - j);\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1veve21k.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1veve21k.cpp:18:21: error: \u2018j\u2019 was not declared\
    \ in this scope\n   18 |     r.push_back(n - j);\n      |                    \
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> tmp(std::begin(l), std::end(l));\n\
    \    std::sort(std::begin(tmp), std::end(tmp));\n    for (long i = 0, c = std::count(std::begin(tmp),\
    \ std::end(tmp), 1); i < c; ++i) ++tmp[i];\n    return tmp;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpmqj0u43a: /tmp/tmpmqj0u43a.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Write your code here.\n    int len\
    \ = l.size();\n    int n = 0;\n    for (int i = 0; i < len; i++) {\n        if\
    \ (l[i] != i) {\n            n++;\n        }\n    }\n    std::vector<long> result;\n\
    \    int count = 0;\n    for (int i = 0; i < len; i++) {\n        if (l[i] !=\
    \ i) {\n            count++;\n        }\n    }\n    for (int i = 0; i < len; i++)\
    \ {\n        if (l[i] != i) {\n            result.push_back(l[i]);\n        }\n\
    \    }\n    for (int i = 0; i < len; i++) {\n        if (l[i] != i) {\n      \
    \      result.push_back(i);\n        }\n    }\n    for (int i = 0; i < len; i++)\
    \ {\n        if (l[i] != i) {\n            result.push_back(count + 1);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmps29_nypp: /tmp/tmps29_nypp.cpp:44: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r;\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        r.push_back(l.at(i + 1));\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 3) >= this->size() (which is 3)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> tmp;\n  for(long i = 0;\
    \ i < l.size(); i++) {\n    tmp.push_back(std::next(l[i - 1], 1, 1));\n  }\n \
    \ return tmp;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw3j_w7bz.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw3j_w7bz.cpp:11:43: error: no matching function for call\
    \ to \u2018next(__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type&,\
    \ int, int)\u2019\n   11 |     tmp.push_back(std::next(l[i - 1], 1, 1));\n   \
    \   |                                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:66,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpw3j_w7bz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator_base_funcs.h:213:5:\
    \ note: candidate: \u2018template<class _InputIterator> _InputIterator std::next(_InputIterator,\
    \ typename std::iterator_traits<_Iter>::difference_type)\u2019\n  213 |     next(_InputIterator\
    \ __x, typename\n      |     ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator_base_funcs.h:213:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpw3j_w7bz.cpp:11:43:\
    \ note:   candidate expects 2 arguments, 3 provided\n   11 |     tmp.push_back(std::next(l[i\
    \ - 1], 1, 1));\n      |                                           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> res(l.size());\n  for\
    \ (size_t i = 0; i < l.size(); i++)\n    res[i] = i + 1;\n  return res;\n}\nint\
    \ main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpu67oub93: /tmp/tmpu67oub93.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> v(l.size());\n    for\
    \ (std::size_t i = 0; i < v.size(); ++i) {\n        v[i] = l[i] + 1;\n    }\n\
    \    return v;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res(l);\n    res.push_back(l[0]);\n\
    \    for (int i = 1; i < l.size(); i++)\n        res[i] = res[i - 1] + l[i];\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  // assert(l.size() >= 2);\n  // assert (std::find(l.begin(),\
    \ l.end(), l.front()) == l.end());\n  std::vector<long> ret;\n  ret.push_back(l.front());\n\
    \  long x = l.front();\n  for (long i = 1; i < l.size(); ++i) {\n    ret.push_back(x);\n\
    \    x = x + l[i];\n  }\n  return ret;\n}\nint main() {\n    auto candidate =\
    \ incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret;\n    for (long\
    \ &i: ret)\n        i = i + 1;\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpr49ft3ds: /tmp/tmpr49ft3ds.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> r(l);\n  for (int i =\
    \ 1; i < r.size(); ++i)\n    r[i] += r[i - 1];\n  return r;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmplg6gpuf2: /tmp/tmplg6gpuf2.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    if (l.size() <= 1) return l;\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (long x : l) {\n        ret.push_back(x\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> res(l.size());\n  std::iota(res.begin(),\
    \ res.end(), 1);\n  for (size_t i = 0; i < res.size(); ++i) {\n    l[i] += res[i];\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpuvo4r17b: /tmp/tmpuvo4r17b.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> result;\n  for (int i\
    \ = l.size() - 1; i > -1; i--) {\n    if (result.size() == 0) {\n      result.push_back(1);\n\
    \    } else {\n      result.back() += l[i];\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpggd9bqgh: /tmp/tmpggd9bqgh.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> v;\n    v.push_back(l[0]);\n\
    \    for (long i = 1; i < l.size(); i++) {\n        v.push_back(l[i] + v[i - 1]);\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    long n = l.size();\n\
    \    for (long i = 0; i < n; i++) {\n        res.push_back(std::max((res.at(i)\
    \ + 1), l.at(i)));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 0) >= this->size() (which is 0)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> incremented_list;\n\
    \    incremented_list.push_back(l.at(0));\n    for (size_t i = 1; i < l.size();\
    \ ++i) {\n        incremented_list.push_back(incremented_list[i - 1] + 1);\n \
    \   }\n    return incremented_list;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 0) >= this->size() (which is 0)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret = l;\n    for (auto&\
    \ i : ret) {\n        i = i + 1;\n    }\n    return ret;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    long prev_elem\
    \ = 0, prev_count = 1;\n    for (size_t i = 0; i < l.size(); i++) {\n        if\
    \ (l[i] == prev_elem) {\n            prev_count++;\n            prev_elem = l[i];\n\
    \        }\n        else {\n            res.push_back(prev_elem);\n          \
    \  prev_elem = l[i];\n            prev_count = 1;\n        }\n        res.push_back(prev_elem);\n\
    \        res.push_back(prev_count);\n    }\n    res.push_back(prev_elem);\n  \
    \  res.push_back(prev_count);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmp9c0cl8tf: /tmp/tmp9c0cl8tf.cpp:30: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it)\n        ret.push_back(*it+1);\n\
    \    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    res.insert(res.begin(),\
    \ std::next(l.begin()), l.end());\n    res.erase(std::unique(std::begin(res),\
    \ std::end(res)), std::end(res));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::length_error'\n  what():\
    \  vector::_M_range_insert\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> temp;\n  for (auto i =\
    \ l.begin(); i != l.end(); i++) {\n    temp.push_back((*i) + 1);\n  }\n  return\
    \ temp;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res(l);\n    std::sort(res.begin(),\
    \ res.end());\n    auto it = res.begin();\n    for (; it < res.end(); it++) {\n\
    \        it++;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmp55hof0je: /tmp/tmp55hof0je.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    for (auto i = l.begin(); i != l.end();\
    \ ++i) {\n        ++(*i);\n    }\n    return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret(l.size());\n   \
    \ for (std::size_t i = 0; i != l.size(); ++i) {\n        ret[i] = l[i] + 1;\n\
    \    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r(l.size());\n    std::iota(std::begin(r),\
    \ std::end(r), 1);\n    std::vector<long>::iterator it = std::adjacent_find(std::begin(r),\
    \ std::end(r));\n    while (it != std::end(r)) {\n        r[it] = (r[it] + 1)\
    \ % l.size();\n        it = std::adjacent_find(it, std::end(r));\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxqyh3w6f.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxqyh3w6f.cpp:13:10: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019})\n   13 |         r[it] = (r[it] + 1) % l.size();\n      |   \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpxqyh3w6f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:28:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |        \
    \          ~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/shared/centos7/gcc/9"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> newlist;\n    for(auto\
    \ i : l) {\n        newlist.push_back(i+1);\n    }\n    return newlist;\n}\nint\
    \ main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> l;\n    for (auto e\
    \ : l)\n        l.push_back(e+1);\n    return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkbdsipoq.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkbdsipoq.cpp:9:23: error: declaration of \u2018std::vector<long\
    \ int> l\u2019 shadows a parameter\n    9 |     std::vector<long> l;\n      |\
    \                       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  int size = l.size();\n  for (int i = 0;\
    \ i < size; i++) {\n    l[i]++;\n    if (l[i] > 1000000) l[i] %= 1000000;\n  }\n\
    \  return l;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Your code goes here\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> res(l.size());\n    long sum = 0;\n    for(long\
    \ i=0;i<l.size();i++) {\n        res[i] = sum;\n        sum += l[i];\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpa6tj37_h: /tmp/tmpa6tj37_h.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() > 0);\n    std::vector<long>\
    \ res(l.size());\n    for (size_t i = 0; i < res.size(); ++i) {\n        res[i]\
    \ = l[i] + 1;\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpcy9yt7zi: /tmp/tmpcy9yt7zi.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> result;\n  long x = 0;\n\
    \  for (int i = 0; i < l.size(); i++) {\n    if (l[i] % 2 == 1) {\n      result.push_back(l[i]\
    \ + x);\n      x = 1;\n    } else {\n      result.push_back(l[i]);\n      x =\
    \ 0;\n    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpkhhhbh25: /tmp/tmpkhhhbh25.cpp:25: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    for (long i = 0; i < l.size(); i++) {\n\
    \        l[i] += 1;\n    }\n    return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // TODO: Your code here\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmprm5s5cue: /tmp/tmprm5s5cue.cpp:14: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret = {l[0]};\n    auto\
    \ itr = l.begin();\n    for (itr != l.end(); ++itr) {\n        ret.push_back(ret[itr-1]\
    \ + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3tm5x5sn.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3tm5x5sn.cpp:11:26: error: could not convert \u2018itr.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator++()\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018bool\u2019\n   11 |     for (itr\
    \ != l.end(); ++itr) {\n      |                          ^~~~~\n      |      \
    \                    |\n      |                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmp3tm5x5sn.cpp:11:31: error: expected \u2018\
    ;\u2019 before \u2018)\u2019 token\n   11 |     for (itr != l.end(); ++itr) {\n\
    \      |                               ^\n      |                            \
    \   ;\n/tmp/tmp3tm5x5sn.cpp:12:26: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   12 |         ret.push_back(ret[itr-1]\
    \ + 1);\n      |                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp3tm5x5sn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1040:28:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019}\n 1040 |       operator[](size_type __n)\
    \ _GLIBC"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> v(l.size());\n  for (long\
    \ i = 0; i < v.size(); ++i)\n    v[i] = l[i] + 1;\n  return v;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res = l;\n    for (auto\
    \ e : l)\n        res.push_back(res.back() + 1);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpvkinqo6u: /tmp/tmpvkinqo6u.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::partial_sum(l.begin(), l.end(), l.begin());\n\
    \  return l;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpjiqn1fgg: /tmp/tmpjiqn1fgg.cpp:15: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> incremented_list;\n\
    \    long current_value = l[0];\n    for (size_t i = 1; i < l.size(); i++) {\n\
    \        incremented_list.push_back(current_value + l[i]);\n        current_value\
    \ = incremented_list[incremented_list.size() - 1];\n    }\n    return incremented_list;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> v{};\n  v.push_back(l[0]);\n\
    \  for (long i : l) v.push_back(v.back() + i);\n  return v;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res(l);\n    for (size_t\
    \ i = 0; i < l.size(); i++) {\n        res[i] += 1;\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() >= 2);\n    std::vector<long>\
    \ res(l.size() - 1);\n    for (auto it = l.begin() + 1; it != l.end(); it++) {\n\
    \        long temp = *it;\n        res[res.length() - 1 - temp] = it;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1vy_q9ux.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1vy_q9ux.cpp:13:17: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018length\u2019\n   13 |         res[res.length()\
    \ - 1 - temp] = it;\n      |                 ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::vector<long>\
    \ ret(l.size());\n  for (int i = 0; i < l.size(); i++) {\n    ret[i] += 1;\n \
    \ }\n  return ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp7pabjsn4: /tmp/tmp7pabjsn4.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> out;\n    std::sort(l.begin(),\
    \ l.end());\n    long x = l[0];\n    long y = l[1];\n    long z = l[2];\n    for\
    \ (int i = 3; i < l.size(); i++) {\n        long tempx = l[i];\n        long tempy\
    \ = y;\n        long tempz = z;\n        y = tempx;\n        z = tempy;\n    \
    \    x = tempz;\n    }\n    out.push_back(x + 1);\n    out.push_back(y + 1);\n\
    \    out.push_back(z + 1);\n    return out;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  long count = 1;\n  for (auto i : l)\n  \
    \  count *= i;\n  std::vector<long> result(count + 1);\n  long prev_i = 1;\n \
    \ for (auto i : l) {\n    result[i - 1] += prev_i;\n    prev_i = i;\n  }\n  result[count\
    \ - 1] += prev_i;\n  return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpm3lj4e6k: /tmp/tmpm3lj4e6k.cpp:23: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    long i = l[0];\n\
    \    long j = 1;\n    for(long k = 1; k < l.size(); k++) {\n        if(l[k] <\
    \ i) {\n            i = l[k];\n            res.push_back(j);\n            j +=\
    \ 1;\n        } else {\n            res.push_back(l[k]);\n        }\n    }\n \
    \   res.push_back(j);\n    return res;\n}\nint main() {\n    auto candidate =\
    \ incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r(l);\n    r.push_back(r.front()+1);\n\
    \    return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::size_t sz = l.size();\n  std::vector<long>\
    \ r;\n  r.reserve(sz + 1);\n  for (std::size_t i = 0; i < sz; ++i) {\n    r.push_back(l[i]\
    \ + 1);\n  }\n  return r;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> result = l;\n  for (long\
    \ i = 0; i < result.size(); i++) {\n    result[i] += 1;\n    if (result[i] > 1000000)\
    \ {\n      long j = result[i] % 1000000;\n      result[i] = result[i] / 1000000;\n\
    \      result.insert(result.begin() + i, j);\n    }\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> r;\n  r.push_back(l.size());\n\
    \  std::transform(l.begin(), l.end(), std::back_inserter(r), [](long n) { return\
    \ n + 1; });\n  return r;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpxqtr9ws1: /tmp/tmpxqtr9ws1.cpp:16: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r(l.size());\n    std::iota(r.begin(),\
    \ r.end(), 0);\n    for (long i = 1; i < l.size(); ++i) {\n        r[i - 1] +=\
    \ l[i];\n    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpt_gq2ulw: /tmp/tmpt_gq2ulw.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r;\n    for (long i\
    \ : l) {\n        r.push_back(i + 1);\n    }\n    return r;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ ans;\n  ans.push_back(l.front());\n  for(size_t i = 1; i < l.size(); i++) {\n\
    \    ans.push_back(l[i-1] + 1);\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> r(l.size());\n  for (size_t\
    \ i = 0; i < l.size(); ++i) {\n    r[i] = l[i] + 1;\n  }\n  return r;\n}\nint\
    \ main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> u(l.size());\n    for\
    \ (long i = 0; i < l.size(); ++i) {\n        u[i] = l[i] + 1;\n    }\n    return\
    \ u;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> result;\n    result.reserve(l.size());\n\
    \    for (long i : l) {\n        result.push_back(i+1);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() >= 2);\n    std::vector<long>\
    \ r(l.size() - 1, l.back() + 1);\n    for (long i = l.size() - 2; i >= 0; i--)\
    \ {\n        r[i + 1] = l[i];\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmporh9i8d3: /tmp/tmporh9i8d3.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() >= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> result;\n    result.push_back(l[0]);\n\
    \    for (size_t i = 1; i < l.size(); i++) {\n        result.push_back(result[i\
    \ - 1] + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    for(auto i\
    \ = l.begin(); i != l.end(); i++) res.push_back(*(i + 1));\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpqnb2iidz: /tmp/tmpqnb2iidz.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (auto it = l.begin(); it != l.end(); it++) {\n        auto it_incr =\
    \ it+1;\n        std::advance(it_incr, 1);\n        res.push_back(*it_incr);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n  \
    \  assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp66dpmwcb: /tmp/tmp66dpmwcb.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    for (long i = 1; i < l.size(); ++i) {\n\
    \        l[i] += l[i - 1];\n    }\n    return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpduaafc_g: /tmp/tmpduaafc_g.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res(l.size());\n   \
    \ for (size_t i = 0; i < l.size(); i++)\n        res[i] = l[i] + 1;\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r(l.size());\n    for(std::size_t\
    \ i=0;i<l.size();i++) {\n        r[i] += 1;\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpwgpgib9s: /tmp/tmpwgpgib9s.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    auto\
    \ last = l.back();\n    l.back()++;\n    for (long i = 0; i <= last; ++i) {\n\
    \        l.push_back(i);\n    }\n    return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    long i = 0;\n\
    \    // Loop through the vector and add +1 to the next element on every iteration.\n\
    \    for (auto el : l) {\n        res.push_back(el + i);\n        i += 1;\n  \
    \  }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpt8dswbrl: /tmp/tmpt8dswbrl.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ans;\n    for (long\
    \ el : l)\n        ans.push_back(el + 1);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> res;\n  res.reserve(l.size());\n\
    \  for (auto it=l.begin(); it!=l.end(); it++) {\n    long tmp = *it;\n    if (tmp\
    \ != 0) {\n      res.push_back(tmp + 1);\n    }\n  }\n  return res;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpgktsqy80: /tmp/tmpgktsqy80.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Initialize vector with initial element.\n\
    \    std::vector<long> temp(l.size());\n    temp[0] = l[0];\n    long val = l[0];\n\
    \    // Iterate over all elements and increment elements.\n    for (size_t i =\
    \ 1; i < l.size(); i++) {\n        temp[i] = val++;\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r;\n    for (long i\
    \ = 1; i < l.size(); i++)\n        r.push_back(l[i] + i);\n    return r;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpxjol32vj: /tmp/tmpxjol32vj.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> temp;\n    for (long\
    \ e : l) {\n        temp.push_back(e+1);\n    }\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> ret;\n  for (long i :\
    \ l) {\n    ret[i] = i + 1;\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> incremented(l.size());\n\
    \    for (size_t i = 0; i < l.size(); ++i) {\n        incremented[i] = l[i] +\
    \ 1;\n    }\n    return incremented;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> u(l.size());\n    for\
    \ (std::size_t i = 0; i < l.size(); i++) {\n        u[i] = l[i] + 1;\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> ret(l.begin(), l.end());\n\
    \  std::sort(ret.begin(), ret.end());\n  for (long i = 1; i < ret.size(); i++)\
    \ {\n    ret[i] += ret[i - 1];\n  }\n  return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpw6gdudui: /tmp/tmpw6gdudui.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    long i = 0;\n    std::vector<long> res;\n\
    \    res.reserve(l.size());\n    for(auto i : l) {\n        res.push_back(i +\
    \ 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() != 0);\n    long prev\
    \ = 0;\n    std::vector<long> res;\n    for (const auto &i : l) {\n        res.push_back(i+prev);\n\
    \        prev = i;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpiuumo9yz: /tmp/tmpiuumo9yz.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    int i = 0;\n\
    \    for(auto &e : l)\n        res.emplace_back(e + i++);\n    return res;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpwhue9xhe: /tmp/tmpwhue9xhe.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() > 0);\n    std::vector<long>\
    \ res(l.size() - 1);\n    for (long i = 0; i < l.size() - 1; i++)\n        res[i]\
    \ = l[i] + 1;\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpjiovtf7b: /tmp/tmpjiovtf7b.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    auto it = std::begin(l);\n    auto next_it\
    \ = [&]() {\n        ++it;\n        if (it != std::end(l))\n            return\
    \ it;\n        return std::end(l);\n    };\n    return std::vector<long>(next_it,\
    \ next_it());\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy85_2cc_.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy85_2cc_.cpp:16:48: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(incr_list(std::vector<long int>)::<lambda()>&,\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >)\u2019\n   16\
    \ |     return std::vector<long>(next_it, next_it());\n      |               \
    \                                 ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpy85_2cc_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpy85_2cc_.cpp:16:48:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    incr_list(std::vector<long int>)::<lambda()>\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   16 |     return std::vector<long>(next_it,\
    \ next_it());\n      |                                                ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpy85_2cc_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    int i = l.size() - 1;\n    for (int j\
    \ = l.size() - 1; j > 0; j--) {\n        if (l[j] > l[j - 1]) {\n            l[j]\
    \ += 1;\n            l[i] = j + 1;\n            break;\n        }\n    }\n   \
    \ return l;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp23le1cc0: /tmp/tmp23le1cc0.cpp:22: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    l.push_back(l.size());\n    return std::move(l);\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpidovno8h: /tmp/tmpidovno8h.cpp:14: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::map<long, long> m;\n  for(long i: l)\
    \ m[i]++;\n  std::vector<long> r;\n  for(auto e: m) r.push_back(e);\n  return\
    \ r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptj58cvpx.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptj58cvpx.cpp:12:31: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::pair<const long int, long int>&)\u2019\
    \n   12 |   for(auto e: m) r.push_back(e);\n      |                          \
    \     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmptj58cvpx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018std::pair<const long int,\
    \ long int>\u2019 to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019\
    }\n 1184 |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::pair<const long int,\
    \ long int>\u2019 to \u2018std::vector<long int>::value_type&&\u2019 {aka \u2018\
    long int&&\u2019}\n 1200 |       push_back(value_type&& __x)\n      |        \
    \         ~~~~~~~~~~~~~^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    if (l.size() == 0) return l;\n    std::vector<long>\
    \ r((l.size()+1)*l.size());\n    std::copy(l.begin(),l.end(),r.begin()+1);\n \
    \   for (int i = 0; i < l.size(); ++i) r[i] = l[i]+1;\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpq2vloo9l: /tmp/tmpq2vloo9l.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    auto\
    \ it = l.begin() + 1;\n    std::vector<long> res(l, it + 1);\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt9050jau.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpt9050jau.cpp:11:36: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(std::vector<long int>&, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >)\u2019\n   11 |     std::vector<long> res(l, it\
    \ + 1);\n      |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpt9050jau.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:650:2: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpt9050jau.cpp:11:36:\
    \ note:   deduced conflicting types for parameter \u2018_InputIterator\u2019 (\u2018\
    std::vector<long int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\u2019)\n   11 |     std::vector<long> res(l, it + 1);\n\
    \      |                                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpt9050jau.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::allocator<long int>]\u2019\n\
    \ "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res = l;\n    for (auto&\
    \ i : l)\n        res.push_back(i + 1);\n    return res;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpg7d3ptf7: /tmp/tmpg7d3ptf7.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ans;\n    for (long\
    \ i = 0; i < l.size(); i++)\n        ans.push_back(l.at(i) + 1);\n    return ans;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret = l;\n    auto it\
    \ = l.begin();\n    for (; it != l.end(); ++it) {\n        ++(*it);\n        ret.insert(ret.end(),\
    \ *it, *it + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpfzrk5mza: /tmp/tmpfzrk5mza.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> ans(l.size());\n  long\
    \ c = 0;\n  for (auto i : l) {\n    ans[c] = i;\n    c += 1;\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp9zrk3m6j: /tmp/tmp9zrk3m6j.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> incr(l.size());\n  \
    \  long curr = 0;\n    long prev = 0;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] > prev) {\n            curr++;\n        }\n        incr[i]\
    \ = curr;\n        prev = l[i];\n    }\n    return incr;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpv1j694kv: /tmp/tmpv1j694kv.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  assert(l.size() % 2 == 0);\n  long s = 0;\n\
    \  for (auto itr = l.cbegin(); itr != l.cend(); ++itr) {\n    s += *itr;\n   \
    \ l.push_back(*itr);\n  }\n  l.push_back(s);\n  l.resize(l.size() / 2);\n  return\
    \ l;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpth4dycyc: /tmp/tmpth4dycyc.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> new_l (l.size());\n\
    \    for(int i=0; i<l.size(); i++) {\n        new_l[i] = l[i]+1;\n    }\n    return\
    \ new_l;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    std::vector<long> res(l.size());\n    for (long i :\
    \ l)\n        res[i++] += 1;\n    return res;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpcg_8dk_d: /tmp/tmpcg_8dk_d.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Create new vector, initialize it with\
    \ size l.\n    // And initialize it with 0\n    std::vector<long> v2(l.size(),\
    \ 0);\n\n    // Iterate over all elements of l and increase corresponding\n  \
    \  // element of v2.\n    for (long i = 0; i < l.size(); i++) {\n        v2[i]++;\n\
    \    }\n    // Return updated vector\n    return v2;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmphcb6qpm2: /tmp/tmphcb6qpm2.cpp:24: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  std::vector<long>\
    \ ret;\n  long curr = 0;\n  // Insert next element into the list.\n  for (long\
    \ e : l) {\n    if (e < curr) {\n      ret.push_back(curr);\n      curr = e;\n\
    \    } else {\n      curr++;\n    }\n  }\n  ret.push_back(curr);\n  return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpe4hw7md7: /tmp/tmpe4hw7md7.cpp:26: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ll;\n    for (long i\
    \ = 0; i < l.size(); i++)\n        ll.push_back(l[i] + 1);\n    return ll;\n}\n\
    int main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  auto new_end\
    \ = std::unique(l.begin(), l.end());\n  l.erase(new_end, l.end());\n  return l;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpje75pj5h: /tmp/tmpje75pj5h.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res(l.size());\n   \
    \ for (int i = 0; i < l.size(); i++) {\n        res[i] = l[i] + 1;\n    }\n  \
    \  return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> incr(l.size());\n  \
    \  std::vector<long>::size_type i = 0, j = 0;\n    for (i = 0; i < l.size(); ++i)\
    \ {\n        incr[i] += 1;\n        j = 0;\n        while (j < incr.size() &&\
    \ incr[j] == incr[i]) {\n            ++j;\n        }\n        incr.erase(incr.begin()\
    \ + j);\n        incr[i] = incr[i] + 1;\n    }\n    return incr;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r;\n    for (long i\
    \ = 0; i < l.size() - 1; i++) {\n        r.push_back(l[i] + 1);\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res = l;\n    std::sort(res.begin(),\
    \ res.end());\n    for(auto it : res) {\n        if(it != res[res.size() - 1])\n\
    \            res[res.size() - 1] += 1;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpu5e1mfxi: /tmp/tmpu5e1mfxi.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> out;\n    long temp;\n\
    \    long n = 0;\n    for (long i = 0; i < l.size(); i++) {\n        temp = (l[i]\
    \ + 1);\n        if (temp > n) {\n            out.push_back(n);\n            n\
    \ = temp;\n        } else {\n            out.push_back(temp);\n        }\n   \
    \ }\n    out.push_back(n);\n    return out;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpuxbojh3b: /tmp/tmpuxbojh3b.cpp:26: int main(): Assertion `candidate((std::vector<long>()))\
    \ == (std::vector<long>())' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < l.size() - 1; i++) {\n        if (l[i] ==\
    \ l[i + 1]) {\n            result.push_back(l[i] + 1);\n        }\n        else\
    \ {\n            result.push_back(l[i]);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> res(l.size());\n  for\
    \ (size_t i = 0; i < l.size(); ++i) {\n    res[i] = l[i] + 1;\n  }\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ r{l};\n    for (long i = l.size() - 1; i >= 0; --i) {\n        r.push_back(i\
    \ + 1);\n    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpy49p3l_c: /tmp/tmpy49p3l_c.cpp:19: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n\tauto it = std::begin(l);\n\tstd::advance(it,\
    \ 1);\n\treturn std::vector{it, std::end(l)}; // this works in C++14\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0pj5xskr.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0pj5xskr.cpp:11:20: error: missing template arguments\
    \ before \u2018{\u2019 token\n   11 |  return std::vector{it, std::end(l)}; //\
    \ this works in C++14\n      |                    ^\n/tmp/tmp0pj5xskr.cpp:11:20:\
    \ error: expected \u2018;\u2019 before \u2018{\u2019 token\n   11 |  return std::vector{it,\
    \ std::end(l)}; // this works in C++14\n      |                    ^\n      |\
    \                    ;\n/tmp/tmp0pj5xskr.cpp:11:36: error: expected \u2018;\u2019\
    \ before \u2018}\u2019 token\n   11 |  return std::vector{it, std::end(l)}; //\
    \ this works in C++14\n      |                                    ^\n      | \
    \                                   ;\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> out(l.size());\n   \
    \ for (long i = 0; i < l.size(); ++i)\n        out[i] += l[i];\n    return out;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpdj2uw9z0: /tmp/tmpdj2uw9z0.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret(l.size());\n   \
    \ for (size_t i = 0; i < l.size(); i++)\n        ret[i] = l[i]+1;\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res(l);\n    std::iota(res.begin(),\
    \ res.end(), 0);\n    return res;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpmvg7bf0j: /tmp/tmpmvg7bf0j.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Check size of l is bigger than 0, if\
    \ yes, just return l.\n    if (l.size() <= 0) return l;\n    // Reserve space\
    \ for new vector with the size of l.\n    std::vector<long> new_l; new_l.reserve(l.size());\n\
    \    // Iterate over l, for each element we add 1 to new_l and save it back\n\
    \    // to the original vector.\n    for (auto &elem : l) {\n        new_l.push_back(elem\
    \ + 1);\n        elem = new_l[l.size() - 1];\n    }\n    return new_l;\n}\nint\
    \ main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() > 0);\n    std::vector<long>\
    \ r(l.size());\n    for (long i = 0; i < l.size(); i++) {\n        r[i] = l[i]\
    \ + 1;\n    }\n    return r;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp608demdd: /tmp/tmp608demdd.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r;\n    long x = 0;\n\
    \    for (auto i : l) {\n        r.push_back(x = i + 1);\n    }\n    return r;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> res = l;\n  std::for_each(std::begin(l),\
    \ std::end(l), [&res](long const &i) { res.push_back(i + 1); });\n  return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp6amgyozo: /tmp/tmp6amgyozo.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r(l.size(), 0);\n  \
    \  for (long i = 0; i < l.size(); i++) {\n        r[i] = r[i] + 1;\n        if\
    \ (r[i] < l[i])\n            r[i] = l[i];\n    }\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpeel7_lxx: /tmp/tmpeel7_lxx.cpp:20: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n\tstd::vector<long> result = l;\n\tfor (long\
    \ i = 0; i < l.size(); ++i) {\n\t\tresult[i + 1] += result[i];\n\t}\n\treturn\
    \ result;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpih29b4ar: /tmp/tmpih29b4ar.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  for (size_t i = 0; i < l.size(); i++) {\n\
    \    l[i+1] = l[i] + 1;\n  }\n  return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmp4ykpjlee: /tmp/tmp4ykpjlee.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n\tstd::vector<long> ret;\n\tret.reserve(l.size());\n\
    \tlong t = 0;\n\tfor (long i = 0; i < l.size(); ++i) {\n\t\tret.push_back(l[i]\
    \ + 1);\n\t}\n\treturn ret;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  assert (l.size() >= 2) ;\n  std::vector<long>\
    \ res (l.size() - 1) ;\n  long i = l[0], j = 1 ;\n  for (long k = 1; k < l.size()\
    \ ; k++)\n  {\n    if (i > l[k])\n    {\n      res[j++] = l[k] ++ ;\n      i =\
    \ l[k] ;\n    }\n    else\n    {\n      res[j++] = l[k] ++ ;\n    }\n  }\n  res[j++]\
    \ = l[k++] ;\n  return res ;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvlj9dscj.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvlj9dscj.cpp:24:16: error: \u2018k\u2019 was not declared\
    \ in this scope\n   24 |   res[j++] = l[k++] ;\n      |                ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    // Invariant 1: No duplicate elements\
    \ in the input list.\n    assert(std::adjacent_find(l.begin(), l.end()) == l.end());\n\
    \    // Invariant 2: No empty or null elements.\n    assert(l.size() > 0);\n \
    \   std::vector<long> r;\n    r.push_back(l.front());\n    for (long i = l.size()\
    \ - 2; i >= 0; i--) {\n        long a = r.back() + 1;\n        r.push_back(a);\n\
    \        if (r.size() >= 3) {\n            long b = r.back() + 1;\n          \
    \  long c = r.back() + 1;\n            r.push_back(b);\n            r.push_back(c);\n\
    \            if (r.size() >= 6) {\n                long d = r.back() + 1;\n  \
    \              long e = r.back() + 1;\n                long f = r.back() + 1;\n\
    \                r.push_back(d)\n                r.push_back(e);\n           \
    \     r.push_back(f);\n                if (r.size() >= 12) {\n               \
    \     long g = r.back() + 1;\n                    long h = r.back() + 1;\n   \
    \                 long i = r.back() + 1;\n                    long j = r.back()\
    \ + 1;\n                    long k = r.back() + 1;\n                    long l\
    \ = r.back() + 1;\n                    long m = r.back() + 1;\n              \
    \      long n = r.back() + 1;\n                    r.push_back(m)\n          \
    \          r.push_back(n);\n                    r.push_back(g);\n            \
    \        r.push_back(h);\n                    r.push_back(i);\n              \
    \      r.push_back(j);\n                    r.push_back(k);\n                \
    \    r.push_back(l);\n                }\n            }\n        }\n    }\n   \
    \ return r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_nqyjo9k.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_nqyjo9k.cpp:27:31: error: expected \u2018;\u2019 before\
    \ \u2018r\u2019\n   27 |                 r.push_back(d)\n      |             \
    \                  ^\n      |                               ;\n   28 |       \
    \          r.push_back(e);\n      |                 ~              \n/tmp/tmp_nqyjo9k.cpp:39:35:\
    \ error: expected \u2018;\u2019 before \u2018r\u2019\n   39 |                \
    \     r.push_back(m)\n      |                                   ^\n      |   \
    \                                ;\n   40 |                     r.push_back(n);\n\
    \      |                     ~              \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res(l.size());\n   \
    \ for(size_t i = 0; i < l.size(); ++i) {\n        ++res[i];\n        if(res[i]\
    \ != l[i]) {\n            res[i] = l[i];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmph4ery04o: /tmp/tmph4ery04o.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  for (int i = l.size(); i > 1; --i) {\n \
    \   l[i] += l[i - 1];\n  }\n  return l;\n}\nint main() {\n    auto candidate =\
    \ incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmppur5aowm: /tmp/tmppur5aowm.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret;\n    ret.reserve(l.size());\n\
    \    for (auto it = l.begin(), last = l.end(); it != last; ++it)\n        ++ret[*it];\n\
    \    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpcuckku6n: /tmp/tmpcuckku6n.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> incr;\n    for (long\
    \ e : l)\n        incr.push_back(e+1);\n    return incr;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res(l.size());\n   \
    \ for (size_t i = 0; i < l.size(); i++) {\n        res[i] = l[i] + 1;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r(l.size());\n    for\
    \ (size_t i = 0; i < r.size(); i++) {\n        r[i] = l[i] + 1;\n    }\n    return\
    \ r;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> incr_vec(l.size());\n\
    \    for (long i = 0; i < l.size(); ++i) {\n        incr_vec[i] = l[i] + 1;\n\
    \    }\n    return incr_vec;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r(l.size());\n    for\
    \ (long i = 0; i < l.size(); i++) r[i] = i + 1;\n    return r;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpoxqn480r: /tmp/tmpoxqn480r.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    res.insert(res.begin(),\
    \ l.begin(), l.end());\n    return res;\n}\nint main() {\n    auto candidate =\
    \ incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpr2j5z_fz: /tmp/tmpr2j5z_fz.cpp:16: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size());\n\
    \    for (long i = 0; i < l.size(); ++i)\n        res.push_back(l.at(i + 1));\n\
    \    return res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 3) >= this->size() (which is 3)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    assert(l.size() != 0);\n    std::vector<long>\
    \ r(l.size());\n    for (long i = 0; i < l.size(); i++) {\n        assert(l[i]\
    \ >= 0);\n        r[i] = l[i] + 1;\n    }\n    return r;\n}\nint main() {\n  \
    \  auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpek5m187x: /tmp/tmpek5m187x.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() != 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    auto n = l.size();\n    std::vector<long>\
    \ temp;\n    std::vector<long> result(n - 1, 0);\n\n    for (size_t i = 1; i <\
    \ n; i++) {\n        temp.push_back(temp[i - 1] + 1);\n        result[i] = temp[i];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::length_error'\n  what():\
    \  cannot create std::vector larger than max_size()\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::vector<long>\
    \ r(l.size());\n  std::iota(r.begin(), r.end(), 0);\n  std::sort(r.begin(), r.end(),\
    \ [&l](long i1, long i2){ return l[i1] > l[i2]; });\n  for (long i = 0; i + 1\
    \ < l.size(); ++i)\n    r[i + 1] += r[i];\n  return r;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmp25vv6kms: /tmp/tmp25vv6kms.cpp:9: std::vector<long int> incr_list(std::vector<long\
    \ int>): Assertion `l.size() > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::size_t size\
    \ = l.size();\n  std::vector<long> result;\n  for (long i = 1, j = 0, k = 0; i\
    \ < size; i++) {\n    if (j < i) {\n      result.push_back(j);\n      j = i;\n\
    \    } else if (j > i) {\n      if (k) {\n        result.push_back(k);\n     \
    \   k += i;\n      } else if (i - j > 0) {\n        k = i + j - i;\n        result.push_back(j);\n\
    \      } else if (j - i <= 0) {\n        k = i;\n      } else {\n        result.push_back(j);\n\
    \        j += i;\n      }\n    }\n  }\n  result.push_back(j);\n  return result;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkt9vvw2x.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkt9vvw2x.cpp:31:20: error: \u2018j\u2019 was not declared\
    \ in this scope\n   31 |   result.push_back(j);\n      |                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  auto it = std::begin(l);\n  auto it_end\
    \ = std::end(l);\n  std::vector<long> ret;\n  while (it != it_end) {\n    auto\
    \ it = std::next(it, 1);\n    ret.push_back(*it);\n  }\n  return ret;\n}\nint\
    \ main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv1t321ie.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv1t321ie.cpp:13:25: error: use of \u2018it\u2019 before\
    \ deduction of \u2018auto\u2019\n   13 |     auto it = std::next(it, 1);\n   \
    \   |                         ^~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> r;\n  // Use a reverse\
    \ iterator to avoid copying entire list.\n  for (auto it = l.rbegin(); it != l.rend();\
    \ ++it)\n    r.push_back(*it + 1);\n  return r;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmpqquvxogn: /tmp/tmpqquvxogn.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> temp;\n    long ans\
    \ = l.front();\n    for (long x : l)\n        ans += 1;\n    for (long i = l.size()\
    \ - 1; i >= 0; i--)\n        temp.push_back(ans);\n    return temp;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> v(l.size());\n    std::iota(v.begin(),\
    \ v.end(), 0);\n    std::sort(v.begin(), v.end(), std::greater<long>());\n   \
    \ return v;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp4_o336ub: /tmp/tmp4_o336ub.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> res;\n    res.reserve(l.size()\
    \ + 1);\n    for (auto &e : l)\n        res.push_back(e+1);\n    return res;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> ret;\n  for (auto v :\
    \ l) {\n    ret.push_back(v + 1);\n  }\n  return ret;\n}\nint main() {\n    auto\
    \ candidate = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> r;\n    for(auto i :\
    \ l)\n        r.push_back(r.size() + 1);\n    return r;\n}\nint main() {\n   \
    \ auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpqq9ywq99: /tmp/tmpqq9ywq99.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::map<long, long> res;\n  for (int i\
    \ = 0; i < l.size(); i++)\n    res[++l[i]] = l[i];\n  return std::vector<long>(std::begin(res),\
    \ std::end(res));\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_tempbuf.h:60,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwyor7gi_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_construct.h:\
    \ In instantiation of \u2018void std::_Construct(_T1*, _Args&& ...) [with _T1\
    \ = long int; _Args = {std::pair<const long int, long int>&}]\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:83:18:\
    \   required from \u2018static _ForwardIterator std::__uninitialized_copy<_TrivialValueTypes>::__uninit_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = std::_Rb_tree_iterator<std::pair<const\
    \ long int, long int> >; _ForwardIterator = long int*; bool _TrivialValueTypes\
    \ = false]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:134:15:\
    \   required from \u2018_ForwardIterator std::uninitialized_copy(_InputIterator,\
    \ _InputIterator, _ForwardIterator) [with _InputIterator = std::_Rb_tree_iterator<std::pair<const\
    \ long int, long int> >; _ForwardIterator = long int*]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_uninitialized.h:289:37:\
    \   required from \u2018_ForwardIterator std::__uninitialized_copy_a(_InputIterator,\
    \ _InputIterator, _ForwardIterator, std::allocator<_Tp>&) [with _InputIterator\
    \ = std::_Rb_tree_iterator<std::pair<const long int, long int> >; _ForwardIterator\
    \ = long int*; _Tp = long int]\u2019\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1582:33:\
    \   required from \u2018void std::vector<_Tp, _Alloc>::_M_range_initialize(_ForwardIterator,\
    \ _ForwardIterator, std::forward_iterator_tag) [with _ForwardIterator = std::_Rb_tree_iterator<std::pair<const\
    \ long int, long int> >; _Tp = long int; _Alloc = std::allocator<long int>]\u2019\
    \n/shared/ce"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    for (long i = 0, k = 0; i < l.size();\
    \ i++) {\n        l[i]++;\n        if (l[i] != k) {\n            k = l[i];\n \
    \       }\n    }\n    return l;\n}\nint main() {\n    auto candidate = incr_list;\n\
    \    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    auto it = l.begin();\n    std::vector<long>\
    \ ret;\n    ret.reserve(l.size());\n    for (; it != l.end(); ++it) {\n      \
    \  ret.push_back(*it);\n        ret.push_back(ret[ret.size() - 1] + 1);\n    }\n\
    \    return ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpsahrt57_: /tmp/tmpsahrt57_.cpp:21: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> result;\n    result.insert(std::end(result),\
    \ std::begin(l), std::end(l));\n    for(auto i : l) ++result[i];\n    return result;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpy131p_zf: /tmp/tmpy131p_zf.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret(l.size());\n   \
    \ for (long i = 0; i < l.size(); i++) {\n        ret[i] = i + 1;\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpnyzo73ih: /tmp/tmpnyzo73ih.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  l.insert(l.begin(), l.begin() + 1, l.end());\n\
    \  return l;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::length_error'\n  what():\
    \  vector::_M_range_insert\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    long long i, sum = 1;\n    std::vector<long>\
    \ res;\n    for (i = 1; i < l.size(); i++) sum += l[i];\n    for (i = 0; i < sum;\
    \ i++) {\n        res.push_back(l.size());\n        l += l;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3cd1djue.cpp: In function \u2018std::vector<long int> incr_list(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3cd1djue.cpp:14:11: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   14 |         l += l;\n      |         ~~^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  for (long i = 0; i < l.size(); ++i) {\n\
    \    if (i == 0) {\n      l[i] = l[i] + 1;\n    }\n    else if (l[i] == l[i -\
    \ 1] + 1) {\n      l[i] = l[i] + 1;\n    }\n    else {\n      l[i - 1] = l[i -\
    \ 1] + 1;\n      std::swap(l[i], l[i - 1]);\n    }\n  }\n  return l;\n}\nint main()\
    \ {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmpayaup36h: /tmp/tmpayaup36h.cpp:26: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> out(l.size());\n   \
    \ for (long &i: out)\n        i = i + 1;\n    return out;\n}\nint main() {\n \
    \   auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: "tmp_07fzqru: /tmp/tmp_07fzqru.cpp:17: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  l.clear();\n  for (long i = 1; i <= l.size();\
    \ ++i) {\n    l.push_back(i);\n  }\n  return l;\n}\nint main() {\n    auto candidate\
    \ = incr_list;\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({3, 2, 1}))) == (std::vector<long>({4,\
    \ 3, 2})));\n    assert(candidate((std::vector<long>({5, 2, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1, 124})));\n}\n"
  stdout: ''
  stderr: "tmp4q7jknzf: /tmp/tmp4q7jknzf.cpp:18: int main(): Assertion `candidate((std::vector<long>({3,\
    \ 2, 1}))) == (std::vector<long>({4, 3, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n  std::vector<long> res;\n  for (auto it =\
    \ l.begin(); it != l.end(); ++it) {\n    res.push_back(*it+1);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> ret(l);\n    for (size_t\
    \ i = 0; i < ret.size(); i++) {\n        ret[i] += 1;\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = incr_list;\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list with elements\
    \ incremented by 1.\n// >>> incr_list([1, 2, 3])\n// [2, 3, 4]\n// >>> incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4, 4, 10, 1, 124]\nstd::vector<long>\
    \ incr_list(std::vector<long> l) {\n    std::vector<long> v;\n    for (long i\
    \ : l) {\n        v.push_back(++i);\n    }\n    return v;\n}\nint main() {\n \
    \   auto candidate = incr_list;\n    assert(candidate((std::vector<long>())) ==\
    \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({3, 2, 1})))\
    \ == (std::vector<long>({4, 3, 2})));\n    assert(candidate((std::vector<long>({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({6, 3, 6, 3, 4, 4, 10, 1,\
    \ 124})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
