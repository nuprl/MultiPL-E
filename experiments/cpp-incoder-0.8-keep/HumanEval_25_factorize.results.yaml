name: HumanEval_25_factorize
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // find prime factors\
    \ first\n    std::vector<long> factors;\n    for (long i = 1; i < n; ++i) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    // add remaining factors\n    while (n != 1)\n\
    \        factors.push_back(n);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long p = 1;\n    while (p < n) {\n        if (n % p == 0) {\n           \
    \ factors.push_back(p);\n            n = n / p;\n        }\n        p += 2;\n\
    \    }\n    factors.push_back(n);\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpov_ufkjt: /tmp/tmpov_ufkjt.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // We are going to store\
    \ list of all prime factors of n in vector of size n.\n    // To do that we need\
    \ an array of size n with values 0..n-1.\n    // Thus we make vector of size n\
    \ and initialize all its values to 0.\n    // Then we find factors of n and set\
    \ proper value to n%i where i is element of vector.\n    std::vector<long> factor(n);\n\
    \n    long i = 2;\n    long counter = 1;\n    for (long factor = 0; factor < n;\
    \ ++factor) {\n        while (n % i == 0) {\n            ++counter;\n        \
    \    factor[i++] = 0;\n        }\n        factor[factor] += counter;\n       \
    \ n/= i;\n        counter = 1;\n    }\n    return factor;\n}\nint main() {\n \
    \   auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcn8knvzh.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpcn8knvzh.cpp:24:23: error: invalid types \u2018long int[long\
    \ int]\u2019 for array subscript\n   24 |             factor[i++] = 0;\n     \
    \ |                       ^\n/tmp/tmpcn8knvzh.cpp:26:22: error: invalid types\
    \ \u2018long int[long int]\u2019 for array subscript\n   26 |         factor[factor]\
    \ += counter;\n      |                      ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> f(n\
    \ + 1);\n    f[0] = 2;\n    long f = 2;\n    for (int i = 1; i <= n; i++) {\n\
    \        while ((f % i) == 0) {\n            f[i] = f;\n            f *= i;\n\
    \        }\n        f[i] = f;\n        f[0] += 1;\n    }\n    return f;\n}\nint\
    \ main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa44o2hzz.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpa44o2hzz.cpp:15:10: error: conflicting declaration \u2018\
    long int f\u2019\n   15 |     long f = 2;\n      |          ^\n/tmp/tmpa44o2hzz.cpp:13:23:\
    \ note: previous declaration as \u2018std::vector<long int> f\u2019\n   13 | \
    \    std::vector<long> f(n + 1);\n      |                       ^\n/tmp/tmpa44o2hzz.cpp:17:19:\
    \ error: no match for \u2018operator%\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018int\u2019)\n   17 |         while ((f % i) == 0) {\n  \
    \    |                 ~ ^ ~\n      |                 |   |\n      |         \
    \        |   int\n      |                 std::vector<long int>\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n   \
    \              from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpa44o2hzz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpa44o2hzz.cpp:17:21:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   17 |         while ((f % i) == 0) {\n\
    \      |                     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpa44o2hzz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> prime;\n\
    \    long counter = 1;\n    long limit = sqrt(n);\n    for (long i = 1; i < limit;\
    \ ++i) {\n        while (n % i == 0) {\n            counter++;\n            n\
    \ /= i;\n        }\n        if (counter > 2) {\n            counter = 1;\n   \
    \         prime.resize(2);\n            prime[0] = 2;\n            prime[1] =\
    \ i;\n        }\n    }\n    std::vector<long> factors;\n    for (long i = 0; i\
    \ < counter; ++i) {\n        while (n % prime[i] == 0) {\n            factors.push_back(i);\n\
    \            n /= prime[i];\n        }\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long fact = n;\n    long f = 1;\n    while (fact != 1) {\n        if (n %\
    \ f) {\n            fact = fact / f;\n            factors.push_back(f);\n    \
    \        f++;\n        } else {\n            fact = fact / f;\n            factors.push_back(f);\n\
    \        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    std::bitset<long> bs(n);\n    for (long i = 2; i <= n; ++i) {\n        while\
    \ (bs[i]) {\n            factors.push_back(i);\n            while (factors.size()\
    \ * i <= n) {\n                while (n % i == 0) {\n                    factors.push_back(i);\n\
    \                    n /= i;\n                }\n            }\n        }\n  \
    \  }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiib9xspw.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpiib9xspw.cpp:14:21: error: type/value mismatch at argument\
    \ 1 in template parameter list for \u2018template<long unsigned int _Nb> class\
    \ std::bitset\u2019\n   14 |     std::bitset<long> bs(n);\n      |           \
    \          ^\n/tmp/tmpiib9xspw.cpp:14:21: note:   expected a constant of type\
    \ \u2018long unsigned int\u2019, got \u2018long int\u2019\n/tmp/tmpiib9xspw.cpp:16:20:\
    \ error: invalid types \u2018int[long int]\u2019 for array subscript\n   16 |\
    \         while (bs[i]) {\n      |                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> f;\n\
    \    std::vector<bool> d(n, true);\n    long product = 1;\n    while (true) {\n\
    \        long k = 1;\n        while (product % k == 0) {\n            product\
    \ /= k;\n            f.push_back(k);\n            long p = 2;\n            while\
    \ (p < product && p <= n && d[p]) p *= k;\n        }\n        if (product < n)\
    \ break;\n        product = n * k;\n    }\n    return f;\n}\nint main() {\n  \
    \  auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization;\n\
    \    factorization.push_back(n);\n    std::vector<long> divisors = std::vector<long>();\n\
    \    for (long i = 1; i <= n; i++) {\n        long max_divisor = 0;\n        for\
    \ (long j = 1; j <= n / i; j++) {\n            if (n % j == 0) {\n           \
    \     max_divisor = std::max(max_divisor, j);\n            }\n        }\n    \
    \    divisors.push_back(max_divisor);\n    }\n    for (long i : divisors) {\n\
    \        for (long j : divisors) {\n            long k = i * j;\n            if\
    \ (k > n) {\n                k = n;\n            }\n            while (k % i ==\
    \ 0) {\n                factorization.push_back(k / i);\n                divisors.push_back(j);\n\
    \                break;\n            }\n        }\n    }\n    return factorization;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpsdxagxkf: /tmp/tmpsdxagxkf.cpp:42: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> facts;\n\
    \    std::vector<long> factors;\n    long i = 2;\n    while (i * i <= n) {\n \
    \       while (n % i == 0) {\n            facts.push_back(i);\n            factors.push_back(i\
    \ * i);\n            n /= i;\n        }\n        i++;\n    }\n    if (n != 1)\
    \ {\n        facts.push_back(n);\n        factors.push_back(n);\n    }\n    for\
    \ (long i : facts) {\n        while (factors.count(i) > 0) {\n            facts.erase(facts.begin()\
    \ + std::find(facts.begin(), facts.end(), i));\n            factors.erase(factors.begin()\
    \ + std::find(factors.begin(), factors.end(), i));\n        }\n    }\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpu3heyzao.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpu3heyzao.cpp:29:24: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   29 |         while (factors.count(i)\
    \ > 0) {\n      |                        ^~~~~\n/tmp/tmpu3heyzao.cpp:30:39: error:\
    \ no match for \u2018operator+\u2019 (operand types are \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   30 |             facts.erase(facts.begin() + std::find(facts.begin(),\
    \ facts.end(), i));\n      |                         ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                    |             |\n      |         \
    \                           |             __normal_iterator<[...],[...]>\n   \
    \   |                                    __normal_iterator<[...],[...]>\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpu3heyzao.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:859:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\t// Store all the prime\
    \ factors in the factorization array in descending order.\n\t// Initially, all\
    \ the primes will be stored in this vector.\n\tstd::vector<long> primeFactorization(n,\
    \ 2);\n\tlong p = 2;\n\tlong c = 0;\n\t// Initialize all the primes to 2\n\twhile\
    \ (p < n) {\n\t\tif (n % p == 0) {\n\t\t\tc += 1;\n\t\t} else {\n\t\t\tc = 0;\n\
    \t\t}\n\t\tprimeFactorization[p] = c;\n\t\tp++;\n\t}\n\treturn primeFactorization;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp1awxhc69: /tmp/tmp1awxhc69.cpp:32: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Use Sieve of Eratosthenes\
    \ method to generate all the prime factors\n    std::vector<bool> isPrime(n, true);\n\
    \    for (long i = 2; i < n; i++) {\n        // if any factor is prime then skip\
    \ that factor\n        if (!isPrime[i]) {\n            for (int j = i * i; j <\
    \ n; j += i) {\n                isPrime[j] = false;\n            }\n        }\n\
    \    }\n    // Store all the factors\n    std::vector<long> result;\n    for (long\
    \ i = 1; i < n; i++) {\n        if (isPrime[i]) {\n            // If factorized\
    \ number is not factor of other factors, add to list\n            if (n % i ==\
    \ 0) {\n                result.push_back(i);\n            }\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp093tzyhk: /tmp/tmp093tzyhk.cpp:37: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization;\n\
    \    assert(n > 0);\n    long factor = 2L;\n    // Get prime factors of n using\
    \ Sieve of Eratosthenes\n    std::vector<long> prime_factorization;\n    while\
    \ (prime_factorization.size() < n) {\n        // If n is divisible by factor\n\
    \        if (n % factor == 0) {\n            // Add factor to factorization\n\
    \            factorization.push_back(factor);\n            // Multiply factor\
    \ by n to make it prime again\n            n = n * factor;\n            // Get\
    \ new prime factors\n            while (n % factor == 0) {\n                factorization.push_back(factor);\n\
    \                n /= factor;\n            }\n        }\n        // If n is composite\n\
    \        else {\n            // Add factor to factorization\n            factorization.push_back(factor);\n\
    \            // Get new prime factors\n            while (n % factor == 0) {\n\
    \                factorization.push_back(factor);\n                n /= factor;\n\
    \            }\n        }\n        factor += 2;\n    }\n    return factorization;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> res;\n\
    \  std::vector<long> factors;\n  long count = 1;\n  for (long i = 2; i <= n /\
    \ 2; ++i) {\n    if (n % i == 0) {\n      factors.push_back(i);\n      count *=\
    \ i;\n    }\n  }\n  while (count > 2) {\n    if (n % 2 == 0) {\n      factors.push_back(2);\n\
    \      count /= 2;\n    } else {\n      factors.push_back(n / 2);\n      count\
    \ /= 2;\n    }\n  }\n  while (count > 1) {\n    for (long i = 2; i * count <=\
    \ n; ++i) {\n      if (n % i == 0) {\n        factors.push_back(i);\n        count\
    \ *= i;\n      }\n    }\n  }\n  std::sort(factors.begin(), factors.end());\n \
    \ for (long i = factors.size(); i >= 0; --i) {\n    res.push_back(factors[i]);\n\
    \    if (i > 1 && factors[i] == factors[i - 1]) {\n      res.push_back(1);\n \
    \   }\n  }\n  return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    long f[] = {1, 2, 3,\
    \ 5, 7, 11, 13, 17, 19};\n    std::vector<long> factor(n);\n    for (int i = 0;\
    \ i < n; i++) {\n        long f1 = 0;\n        for (int j = 0; j < f.size(); j++)\
    \ {\n            if (f[j] * f[i] > n)\n                break;\n            if\
    \ (n / f[j] > f1)\n                f1 = n / f[j];\n        }\n        factor[i]\
    \ = f[f1 - 1];\n    }\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzw4sb5mq.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpzw4sb5mq.cpp:17:31: error: request for member \u2018size\u2019\
    \ in \u2018f\u2019, which is of non-class type \u2018long int [9]\u2019\n   17\
    \ |         for (int j = 0; j < f.size(); j++) {\n      |                    \
    \           ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // If number is less\
    \ than 2 it is already a prime number\n    if (n < 2)\n        return std::vector<long>{2};\n\
    \    // Find prime factors of number\n    std::vector<long> factors((n + 1) >>\
    \ 1, 1);\n    // Calculate prime factors\n    long p = 3;\n    long q = 2;\n \
    \   while (p < n) {\n        while ((n % p) == 0) {\n            factors[q] =\
    \ p;\n            n /= p;\n            q++;\n        }\n        p++;\n    }\n\
    \    // Return factors\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp1fadkhht: /tmp/tmp1fadkhht.cpp:34: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors(2);\n\
    \    long a = 1;\n    long b = 1;\n    while (b <= n) {\n        if (n % b ==\
    \ 0) {\n            factors[0] += b; a = b;\n        }\n        else {\n     \
    \       while (a <= n / b) {\n                factors[a] += 1;\n             \
    \   a++;\n            }\n        }\n        b++;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpeaga113_: /tmp/tmpeaga113_.cpp:32: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Sieve of Eratosthenes\
    \ \n    int limit = sqrt(n);\n    std::vector<long> factor;\n    for (int i =\
    \ 2; i <= limit; i++) {\n        // Check if i is already a factor\n        if\
    \ (n % i == 0) {\n            factor.push_back(i);\n            while (n / i !=\
    \ i) {\n                n /= i;\n                factor.push_back(i);\n      \
    \      }\n        }\n    }\n\n    return factor;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxstb00z2: /tmp/tmpxstb00z2.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factors;\n\
    \  for (long i = 1; i <= n; i++) {\n    factors.push_back(i);\n  }\n  std::vector<long>::iterator\
    \ it;\n  for (it = factors.begin() + 1; it != factors.end(); it++) {\n    if (n\
    \ % *it == 0) {\n      long mod = n % *it;\n      std::vector<long> f = factorize(n\
    \ / mod);\n      for (auto it = f.begin(); it != f.end(); it++) {\n        if\
    \ (it != f) f.push_back(*it);\n        else break;\n      }\n      f.push_back(*it);\n\
    \      factors = f;\n      break;\n    }\n  }\n  return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnuh28qql.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpnuh28qql.cpp:23:16: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018std::vector<long int>\u2019)\n   23 |         if (it\
    \ != f) f.push_back(*it);\n      |             ~~ ^~ ~\n      |             |\
    \     |\n      |             |     std::vector<long int>\n      |            \
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n       \
    \          from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnuh28qql.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnuh28qql.cpp:23:19:\
    \ note:   \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \n   23 |         if (it != f) f.push_back(*it);\n      |                   ^\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpnuh28qql.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_al"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factor;\n\
    \    if (n <= 1) return factor;\n    long i = 2;\n    long counter = 2;\n    while\
    \ (i <= n / i) {\n        counter++;\n        factor.push_back(i);\n        i\
    \ += i;\n    }\n    if (n % i == 0) {\n        counter++;\n        factor.push_back(n);\n\
    \    }\n    return factor;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpft4nmfu9: /tmp/tmpft4nmfu9.cpp:31: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> result;\n\
    \    if (n == 1) \n        result.push_back(1);\n    else { \n        long root\
    \ = n;\n        long q = root;\n        long n = 1;\n        while (q > 1) {\n\
    \            while (n % q == 0) {\n                result.push_back(n);\n    \
    \            n /= q;\n            }\n            q = q / 2;\n        }\n    }\n\
    \    for (long i = 2; i < result.size(); i++)\n        if (result[i] == 1)\n \
    \           result.erase(result.begin() + i);\n    return result;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpiegdahab: /tmp/tmpiegdahab.cpp:35: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Create a vector to\
    \ store factors\n    std::vector<long> factors;\n    // Iterate till the integer\
    \ is less than the number itself.\n    while (n != 1) {\n        // Get all the\
    \ factors.\n        // If number is divisible by some number, then it is not a\
    \ prime number.\n        // If number is divisible by all prime numbers, then\
    \ it is prime.\n        // If number is not divisible by any prime number, then\
    \ it is a composite number.\n        if (n % 2 == 0) {\n            factors.push_back(2);\n\
    \            n /= 2;\n        } else if (n % 3 == 0) {\n            factors.push_back(3);\n\
    \            n /= 3;\n        } else if (n % 5 == 0) {\n            factors.push_back(5);\n\
    \            n /= 5;\n        } else if (n % 7 == 0) {\n            factors.push_back(7);\n\
    \            n /= 7;\n        } else if (n % 11 == 0) {\n            factors.push_back(11);\n\
    \            n /= 11;\n        } else if (n % 13 == 0) {\n            factors.push_back(13);\n\
    \            n /= 13;\n        } else if (n % 17 == 0) {\n            factors.push_back(17);\n\
    \            n /= 17;\n        } else if (n % 19 == 0) {\n            factors.push_back(19);\n\
    \            n /= 19;\n        } else if (n % 23 == 0) {\n            factors.push_back(23);\n\
    \            n /= 23;\n        } else {\n            factors.push_back(1);\n \
    \       }\n    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> f;\n\
    \    if (n == 1)\n        f.push_back(1);\n    else if (n & 1 == 0) {\n      \
    \  f.push_back(2);\n    } else {\n        int m = n / 2;\n        long p = 3;\n\
    \        long q = 1;\n        while ((p & 1) == 0) {\n            p = p * 2;\n\
    \            q++;\n        }\n        while (p <= m) {\n            if (m % p\
    \ == 0) {\n                f.push_back(q);\n                m = m / p;\n     \
    \           p = 3;\n                q = 1;\n            } else if (m % p == 1)\
    \ {\n                f.push_back(q);\n                m = m / p;\n           \
    \     p = p;\n                q *= p;\n            } else {\n                p\
    \ = p * 2;\n                q++;\n            }\n        }\n    }\n    return\
    \ f;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp36_a7aus: /tmp/tmp36_a7aus.cpp:47: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // if n <= 1 return empty\
    \ list\n    if (n <= 1) return std::vector<long>{};\n    // Store primes of 3\
    \ & 5 which lie in the range [1, sqrt(n)]\n    std::vector<long> primes = {3};\n\
    \    primes.push_back(5);\n    primes.push_back(7);\n\n    // Check if n is divisible\
    \ by any of the primes\n    while (n%primes.size() != 0) {\n        primes.push_back(primes.size()\
    \ + 2);\n    }\n    // Store the factors of n in prime number\n    std::vector<long>\
    \ factors;\n    std::vector<long>::iterator it = std::find(primes.begin(), primes.end(),\
    \ n);\n    for (; it != primes.end(); ++it) {\n        // Check if n is divisible\
    \ by current prime\n        if (n%*it == 0) {\n            factors.push_back(*it);\n\
    \            n = n/*it;\n        }\n    }\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9_1lp908.cpp:31:18: error: unterminated comment\n   31 |      \
    \       n = n/*it;\n      |                  ^\n/tmp/tmp9_1lp908.cpp: In function\
    \ \u2018std::vector<long int> factorize(long int)\u2019:\n/tmp/tmp9_1lp908.cpp:31:18:\
    \ error: expected \u2018;\u2019 at end of input\n   31 |             n = n/*it;\n\
    \      |                 ~^\n      |                  ;\n/tmp/tmp9_1lp908.cpp:31:17:\
    \ error: expected \u2018}\u2019 at end of input\n   31 |             n = n/*it;\n\
    \      |                 ^\n/tmp/tmp9_1lp908.cpp:29:25: note: to match this \u2018\
    {\u2019\n   29 |         if (n%*it == 0) {\n      |                         ^\n\
    /tmp/tmp9_1lp908.cpp:31:17: error: expected \u2018}\u2019 at end of input\n  \
    \ 31 |             n = n/*it;\n      |                 ^\n/tmp/tmp9_1lp908.cpp:27:38:\
    \ note: to match this \u2018{\u2019\n   27 |     for (; it != primes.end(); ++it)\
    \ {\n      |                                      ^\n/tmp/tmp9_1lp908.cpp:31:17:\
    \ error: expected \u2018}\u2019 at end of input\n   31 |             n = n/*it;\n\
    \      |                 ^\n/tmp/tmp9_1lp908.cpp:12:37: note: to match this \u2018\
    {\u2019\n   12 | std::vector<long> factorize(long n) {\n      |              \
    \                       ^\n/tmp/tmp9_1lp908.cpp:31:17: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   31 |             n = n/*it;\n \
    \     |                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Check whether the\
    \ number is prime or not\n    assert(n % 2 == 0 && \"The given number should be\
    \ divisible by 2\");\n    int i = 3; // Start from 3, then check if number is\
    \ prime by dividing it by all odd numbers other than 3\n    std::vector<long>\
    \ factors;\n    for (; i < (n >> 1) && n % i == 0; i += 2)\n        if (n / i\
    \ == i)\n            factors.push_back(i);\n\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpq31880lz: /tmp/tmpq31880lz.cpp:25: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  // To store all the factors\n\
    \  std::vector<long> factors;\n  // To store all the prime factors\n  std::vector<bool>\
    \ prime;\n  // To store the factor counts of prime factors\n  std::map<long, long>\
    \ factor_count;\n  // Find all prime factors\n  for (long i = 1; i <= n; ++i)\
    \ {\n    if (!prime[i - 1]) {\n      // Check whether it is prime\n      long\
    \ c = i;\n      for (long d = 2; d <= i; ++d) {\n        if (i % d == 0) {\n \
    \         break;\n        }\n      }\n      if (d == i) {\n        prime[i - 1]\
    \ = true; // mark as prime\n        factors.push_back(i);\n        factor_count[i]\
    \ = 1;\n      } else {\n        // If it is a prime number then check if it is\
    \ a factor of n\n        for (long d = 2; d <= c; ++d) {\n          if (n % d\
    \ == 0) {\n            factors.push_back(d);\n            // update factor count\n\
    \            factor_count[d]++;\n            break;\n          }\n        }\n\
    \      }\n    }\n  }\n  return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9itpp95g.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp9itpp95g.cpp:29:11: error: \u2018d\u2019 was not declared\
    \ in this scope\n   29 |       if (d == i) {\n      |           ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  assert(n > 1);\n  std::vector<long>\
    \ factors;\n  std::set<long> primes;\n\n  for (int i = 2; i <= n / i; ++i) {\n\
    \    while (n % i == 0) {\n      primes.insert(i);\n      factors.push_back(i);\n\
    \      n /= i;\n    }\n  }\n\n  while (n > 1) {\n    if (primes.count(n)) {\n\
    \      factors.push_back(n);\n      n /= primes.find(n)->second;\n    } else {\n\
    \      factors.push_back(primes.find(n)->second);\n      n /= primes.find(n)->second;\n\
    \    }\n  }\n\n  return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5zbz8_hj.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp5zbz8_hj.cpp:28:28: error: request for member \u2018second\u2019\
    \ in \u2018* primes.std::set<long int>::find(n).std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   28 |       n /= primes.find(n)->second;\n      |                        \
    \    ^~~~~~\n/tmp/tmp5zbz8_hj.cpp:30:41: error: request for member \u2018second\u2019\
    \ in \u2018* primes.std::set<long int>::find(n).std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   30 |       factors.push_back(primes.find(n)->second);\n      |          \
    \                               ^~~~~~\n/tmp/tmp5zbz8_hj.cpp:31:28: error: request\
    \ for member \u2018second\u2019 in \u2018* primes.std::set<long int>::find(n).std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   31 |       n /= primes.find(n)->second;\n      |                        \
    \    ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factorization;\n\
    \  long factor = 1;\n  long temp = 1;\n\n  for (long i = 1; i <= n; i++) {\n \
    \   temp *= i;\n    if (temp <= n && temp % i == 0) {\n      factor *= i;\n  \
    \    factorization.push_back(i);\n    }\n  }\n  return factorization;\n}\nint\
    \ main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxjvc2c0b: /tmp/tmpxjvc2c0b.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> ans;\n\
    \    ans.push_back(n);\n    long maxFactor = n;\n    long counter = 1;\n    long\
    \ x = 2;\n    while(maxFactor != 1) {\n        while(maxFactor % x == 0) {\n \
    \           maxFactor /= x;\n            counter++;\n        }\n        ans.push_back(counter);\n\
    \        x++;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp1azfjbp5: /tmp/tmp1azfjbp5.cpp:30: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long s = n; //initialize s to n\n    // if s is even, add 2\n    // if s\
    \ is odd, add 1\n    if(s % 2 == 0){\n        factors.push_back(2);\n        s\
    \ = s/2;\n    }\n    if(s % 2 != 0){\n        factors.push_back(1);\n        s\
    \ = s/2;\n    }\n    while(s > 1){\n        long c = 1;\n        long f = 0;\n\
    \        while (c <= s){\n            if (n % c == 0) {\n                f++;\n\
    \                c++;\n                break;\n            }\n        }\n    \
    \    if(f != 0){\n            factors.push_back(f);\n            n = n/f;\n  \
    \          if(n == 1)\n                factors.push_back(n);\n        }\n    }\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpa410hrhe: /tmp/tmpa410hrhe.cpp:46: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // If n is 0 or 1, factorize\
    \ returns an empty list.\n    if (n == 0) {\n        return std::vector<long>(1,\
    \ 1);\n    }\n    std::vector<long> factors;\n    long prime = 2;\n    long p\
    \ = 2;\n    while (p * p <= n) {\n        while (n % p == 0) {\n            factors.push_back(p);\n\
    \            n /= p;\n        }\n        p++;\n    }\n    // If n was not a multiple\
    \ of the smallest prime factor, add it to the list.\n    if (n > 1) {\n      \
    \  factors.push_back(n);\n    }\n    // Remove the smallest prime factor from\
    \ the list.\n    factors.remove(0);\n    return factors;\n}\nint main() {\n  \
    \  auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa5ad0l3_.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpa5ad0l3_.cpp:32:13: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018remove\u2019\n   32 |     factors.remove(0);\n\
    \      |             ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factor;\n\
    \    if (n <= 1) return factor;\n    // Compute number of times each factor appears\n\
    \    std::vector<long> count(n + 1, 0);\n    // Compute factorization by dividing\
    \ number by all primes smaller than n\n    for (long p = 2; p <= n; p++) {\n \
    \       while (n % p == 0) {\n            count[p]++;\n            n /= p;\n \
    \       }\n    }\n    // Append factors of count to factor\n    for (long p =\
    \ 2; p <= n; p++) {\n        while (count[p]) {\n            factor.push_back(p);\n\
    \            count[p]--;\n        }\n    }\n    return factor;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpby6rxzfp: /tmp/tmpby6rxzfp.cpp:35: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> fac(n\
    \ + 1);\n  std::vector<long> factors;\n  fac[0] = 1;\n  factors.push_back(1);\n\
    \  for (int i = 1; i <= n; ++i) {\n    while (n % i == 0) {\n      fac[i] = fac[i]\
    \ + 1;\n      factors.push_back(i);\n      n = n / i;\n    }\n  }\n  return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Write your code here.\n\
    \    long factor = 1;\n    std::vector<long> v(n);\n    long mod = n;\n    for(int\
    \ i = 1; i <= n; i++) {\n        while(mod % i == 0) {\n            v[i] = factor;\n\
    \            mod = mod / i;\n            factor *= i;\n        }\n    }\n    return\
    \ v;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // If number is divisible\
    \ by 2, then it's prime factorization\n    if (n & 1)\n        return std::vector<long>(1,\
    \ n);\n    // If number is divisible by 2, then it's prime factorization\n   \
    \ if (n <= 1)\n        return std::vector<long>(1);\n    // Set all multiples\
    \ of 3 to 2\n    // If number is divisible by 3 then it's prime factorization\n\
    \    if (n & 3)\n        return std::vector<long>(2);\n    // Set all multiples\
    \ of 5 to 3\n    // If number is divisible by 5 then it's prime factorization\n\
    \    if (n & 5)\n        return std::vector<long>(3);\n    // Set all multiples\
    \ of 7 to 5\n    // If number is divisible by 7 then it's prime factorization\n\
    \    if (n & 7)\n        return std::vector<long>(5);\n    // Set all multiples\
    \ of 11 to 7\n    // If number is divisible by 11 then it's prime factorization\n\
    \    if (n & 11)\n        return std::vector<long>(7);\n    // Set all multiples\
    \ of 13 to 11\n    // If number is divisible by 13 then it's prime factorization\n\
    \    if (n & 13)\n        return std::vector<long>(11);\n    // Set all multiples\
    \ of 17 to 13\n    // If number is divisible by 17 then it's prime factorization\n\
    \    if (n & 17)\n        return std::vector<long>(13);\n    // Set all multiples\
    \ of 19 to 17\n    // If number is divisible by 19 then it's prime factorization\n\
    \    if (n & 19)\n        return std::vector<long>(17);\n    // Set all multiples\
    \ of 23 to 19\n    // If number is divisible by 23 then it's prime factorization\n\
    \    if (n & 23)\n        return std::vector<long>(19);\n    // Set all multiples\
    \ of 29 to 23\n    // If number is divisible by 29 then it's prime factorization\n\
    \    if (n & 29)\n        return std::vector<long>(23);\n    // Set all multiples\
    \ of 31 to 29\n    // If number is divisible by 31 then it's prime factorization\n\
    \    if (n & 31)\n        return std::vector<long>(29);\n    // Set all multiples\
    \ of 37 to 31\n    // If number is divisible by 37 then it's prime factorization\n\
    \    if (n & 37)\n        return std::vector<long>(31);\n    // Set all multiples\
    \ of 41 to 37\n    // If number is divisible by 41 then it's prime factorization\n\
    \    if (n & 41)\n        return std::vector<long>(37);\n    // Set all multiples\
    \ of 43 to 41\n    // If number is divisible by 43 then it's prime factorization\n\
    \    if (n & 43)\n        return std::vector<long>(41);\n    // Set all multiples\
    \ of 47 to 43\n    // If number is divisible by 47 then it's prime \n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpd7dsb7na: /tmp/tmpd7dsb7na.cpp:76: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> primes;\n\
    \  long factor = 1;\n  while (n != 1) {\n    while (n % factor == 0) {\n     \
    \ n /= factor;\n      primes.push_back(factor);\n    }\n    factor++;\n  }\n \
    \ return primes;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n == 1)\n       \
    \ return std::vector<long>{1};\n\n    std::vector<long> factors;\n\n    for (long\
    \ f = 1; f <= n; f++) {\n        while ((n % f) == 0) {\n            factors.push_back(f);\n\
    \            n = n / f;\n        }\n    }\n\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> p;\n\
    \    for (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n         \
    \   n /= i;\n            p.push_back(i);\n        }\n        if (i == 2)\n   \
    \         p.push_back(i);\n    }\n    return p;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp7wegffn8: /tmp/tmp7wegffn8.cpp:26: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long product = 1;\n    for (int i = 2; i <= n / i; ++i) {\n        while\
    \ (n % i == 0) {\n            factors.push_back(i);\n            product *= i;\n\
    \            n /= i;\n        }\n    }\n    while (n > 1) {\n        factors.push_back(n);\n\
    \        product *= n;\n        n /= i;\n    }\n    factors.push_back(product);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplmqvv_ji.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmplmqvv_ji.cpp:25:14: error: \u2018i\u2019 was not declared\
    \ in this scope\n   25 |         n /= i;\n      |              ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::stack<long> factorization;\n\
    \    long count = 1;\n    factorization.push(n);\n    while(!factorization.empty())\
    \ {\n        long current_element = factorization.top();\n        if(current_element\
    \ > 1) {\n            for(long i = current_element; i > 1; i--) {\n          \
    \      count *= i;\n                factorization.push(i);\n            }\n  \
    \      }\n        else {\n            count++;\n            factorization.pop();\n\
    \        }\n    }\n    std::vector<long> result;\n    while(count != 1) {\n  \
    \      result.push_back(count);\n        count--;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long factor = 1;\n    long current = n;\n    while (current != 1) {\n   \
    \     while (current % factor == 0) {\n            factor *= factor;\n       \
    \     factors.push_back(factor);\n        }\n        current /= factor;\n    \
    \    factor *= 2;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n <= 1)\n       \
    \ return {};\n    std::vector<long> factors{2, n};\n    for (long i = 2; i <=\
    \ n / 2; i++)\n        while (n % i == 0)\n            factors.push_back(i);\n\
    \        if (factors.size() >= 3)\n            factors.erase(std::remove(factors.begin(),\
    \ factors.end(), i));\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpewhznpw2.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpewhznpw2.cpp:20:71: error: \u2018i\u2019 was not declared\
    \ in this scope\n   20 |             factors.erase(std::remove(factors.begin(),\
    \ factors.end(), i));\n      |                                               \
    \                        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    for (long i = 2; i <= n / 2; ++i) {\n        while (n % i == 0) {\n     \
    \       factors.push_back(i);\n            n = n / i;\n        }\n    }\n    factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp3099y83n: /tmp/tmp3099y83n.cpp:26: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    for (long i = 2; i <= n; ++i) {\n        while (n % i == 0) {\n         \
    \   factors.push_back(i);\n            n /= i;\n        }\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tstd::vector<long> p;\n\t\
    long sqr = n;\n\twhile (sqr > 1) {\n\t\tlong root;\n\t\troot = sqr / 2;\n\t\t\
    while (n % root == 0) {\n\t\t\tp.push_back(root);\n\t\t\tn = n / root;\n\t\t}\n\
    \t\tsqr = root;\n\t}\n\treturn p;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long largest = n;\n    long current;\n    long limit;\n    long factor =\
    \ 2;\n    bool found = false;\n    long counter = 1;\n    while (counter <= largest)\
    \ {\n        current = (current * factor) / counter;\n        if (current == n)\
    \ {\n            found = true;\n            break;\n        }\n        limit =\
    \ (limit + factor - 1) / factor;\n        while (current * factor <= limit &&\
    \ counter <= largest) {\n            factor = (factor * factor) / counter;\n \
    \           counter++;\n        }\n        if (!found) {\n            factors.push_back(factor);\n\
    \            counter = 1;\n            found = false;\n        }\n        counter++;\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // List of factors\n\
    \    std::vector<long> factors;\n    // Factorization of this number\n    long\
    \ factorization[n + 1];\n\n    // Finding factorization of this number\n    for\
    \ (int i = 0; i <= n; i++) {\n        // If not divisible by i, then add it to\
    \ factors\n        if (n % i == 0) {\n            factors.push_back(i);\n    \
    \    }\n        // If it is divisible by i, then multiply its factorization with\
    \ i (that how many times a given factor appears in the factorization)\n      \
    \  else {\n            factorization[i] = factorization[i] * i;\n        }\n \
    \   }\n\n    // Factors of given number\n    for (int i = 1; i <= n; i++) {\n\
    \        // If no more factors of this number appeared yet in the factorization,\
    \ then we can add it to our result\n        if (factorization[i] == 0) {\n   \
    \         factors.push_back(i);\n        }\n        // If we have already found\
    \ a factor of this number then we will increase its count by one\n        else\
    \ if (factorization[i] > 0) {\n            factorization[i]++;\n        }\n  \
    \      // If no more factors of this number appeared yet in the factorization,\
    \ then we print it\n        else {\n            std::cout << i << \" appears \"\
    \ << factorization[i] << \" times in factorization.\" << std::endl;\n        }\n\
    \    }\n\n    // Returning list of factors\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n >= 2);\n   \
    \ // We will use bitmasks to count how many times the given number has appeared\
    \ in factorization.\n    // For example if we take 70 as an input, if we see 7\
    \ in factorization, we will increment mask by 1.\n    // If mask is 1 after counting\
    \ all numbers, it means that all numbers have appeared in factorization.\n   \
    \ // This optimization will help us eliminate unnecessary iterations while factorizing\
    \ big numbers.\n    long mask = 1;\n    // Store factorizations in vector, indexed\
    \ by their factors\n    std::vector<long> factorization;\n    // We will be using\
    \ the same bitmask and we keep reseting it to 1 for every number in factorization\n\
    \    // If we set it to 0 after each number has appeared in factorization, we\
    \ will have unnecessary loops\n    // which will decrease performance.\n    //\
    \ To avoid this, we will reset bitmask to 1 before we start factorization.\n \
    \   // We will use this bitmask to check if a number has appeared in factorization.\n\
    \    // For example if we take 70 as an input , we will set mask to 1 when we\
    \ see 7 in factorization.\n    long count = 0;\n    long last_number;\n    for\
    \ (long i = 2; i <= n; i++) {\n        long number = n / i;\n        // We will\
    \ use bitwise and to check if the last number we saw and the number we saw so\
    \ far are equal.\n        // If the numbers are equal, we will increment count\n\
    \        // If not, we will reset mask to 1 and increment count again\n      \
    \  count += mask & number;\n        // We will use this bitmask to check if we\
    \ saw number in factorization\n        mask = mask + 1;\n        // We will use\
    \ this bitmask to check if we saw number in factorization\n        // for numbers\
    \ like 25, if we see 7 twice in factorization it will be set twice as mask, hence\
    \ we will have unnecessary loops\n        // for these numbers. To avoid this,\
    \ we will reset bitmask to 1 before we start factorization.\n        last_number\
    \ = number;\n    }\n    factorization.push_back(count);\n    return factorization;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmphgrp_jh9: /tmp/tmphgrp_jh9.cpp:47: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // initialize a vector\
    \ to store factors\n    std::vector<long> factors;\n    long x = 1;\n    // iterate\
    \ until we find one factor\n    for (; n >= x; x++) {\n        // if the number\
    \ is evenly divisible by x, then it's a factor\n        if (n % x == 0) {\n  \
    \          // append the number to the vector and decrement n\n            factors.push_back(x);\n\
    \            n /= x;\n        }\n    }\n    // if we get to here, then n is a\
    \ prime number\n    factors.push_back(n);\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpqckonu2j: /tmp/tmpqckonu2j.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> facts(std::max(1,\
    \ (int)sqrt(n)));\n  for (int i = facts.size() - 1; i >= 0; --i) {\n    while\
    \ (n % facts[i] == 0) {\n      facts[i]++;\n      n /= facts[i];\n    }\n  }\n\
    \  return facts;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> f(n+1);\n\
    \  f[0] = 1;\n  f[1] = n;\n  f[2] = 2;\n  for (long i = 3; i <= n; i ++) {\n \
    \   while (f[i -1] > 1) {\n      f[i ] = f[i - 2] * f[i - 1];\n      i --;\n \
    \   }\n    f[i] = 1;\n  }\n  return f;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp3j42rdul: /tmp/tmp3j42rdul.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> primeFactors;\n\
    \    long i = 2;\n    while (i <= n && n % i == 0) {\n        primeFactors.push_back(i);\n\
    \        long j = 2 * i;\n        while (j <= n && n % j == 0) {\n           \
    \ j++;\n        }\n        i = j;\n    }\n    primeFactors.push_back(1);\n   \
    \ return primeFactors;\n}\nint main() {\n    auto candidate = factorize;\n   \
    \ assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpgo2mdowq: /tmp/tmpgo2mdowq.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Initialize prime numbers.\n\
    \    std::vector<long> primes(PrimeNumbers);\n    primes.push_back(2);\n\n   \
    \ // Initialize list of factors.\n    std::vector<long> factors(PrimeNumbers);\n\
    \n    // Initialize list of numbers containing factors.\n    std::vector<long>\
    \ factors_within_n(n);\n\n    // Initialize list of numbers greater than n.\n\
    \    std::vector<long> factors_greater_than(n);\n\n    // Initialize list of numbers\
    \ less than n.\n    std::vector<long> factors_less_than(n);\n\n    // Initialize\
    \ list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_greater_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers greater than n.\n    std::vector<long> factors_greater_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n    // Initialize list of numbers less than n.\n    std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \n\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmplx96abh_.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmplx96abh_.cpp:14:30: error: \u2018PrimeNumbers\u2019 was\
    \ not declared in this scope\n   14 |     std::vector<long> primes(PrimeNumbers);\n\
    \      |                              ^~~~~~~~~~~~\n/tmp/tmplx96abh_.cpp:36:23:\
    \ error: redeclaration of \u2018std::vector<long int> factors_greater_than_or_equal_to_n\u2019\
    \n   36 |     std::vector<long> factors_greater_than_or_equal_to_n(n);\n     \
    \ |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplx96abh_.cpp:33:23:\
    \ note: \u2018std::vector<long int> factors_greater_than_or_equal_to_n\u2019 previously\
    \ declared here\n   33 |     std::vector<long> factors_greater_than_or_equal_to_n(n);\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplx96abh_.cpp:39:23:\
    \ error: redeclaration of \u2018std::vector<long int> factors_less_than_or_equal_to_n\u2019\
    \n   39 |     std::vector<long> factors_less_than_or_equal_to_n(n);\n      | \
    \                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplx96abh_.cpp:30:23:\
    \ note: \u2018std::vector<long int> factors_less_than_or_equal_to_n\u2019 previously\
    \ declared here\n   30 |     std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplx96abh_.cpp:42:23:\
    \ error: redeclaration of \u2018std::vector<long int> factors_less_than_or_equal_to_n\u2019\
    \n   42 |     std::vector<long> factors_less_than_or_equal_to_n(n);\n      | \
    \                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplx96abh_.cpp:30:23:\
    \ note: \u2018std::vector<long int> factors_less_than_or_equal_to_n\u2019 previously\
    \ declared here\n   30 |     std::vector<long> factors_less_than_or_equal_to_n(n);\n\
    \      |                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplx96abh_.cpp:45:23:\
    \ error: redeclaration of \u2018std::vector<long int> factors_less_than_or_equal_to_n\u2019\
    \n   45 |     std::vector<long> factors_less_than_or_equal_to_n(n);\n      | \
    \                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmplx96abh_.cpp:30:23:\
    \ note: \u2018std::vector<long int> factors_less_than_or_equal_to_n\u2019 previ"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> result;\n\
    \  long p = n;\n  while (p != 1) {\n    while (p%2 == 0) {\n      p = p/2;\n \
    \     result.push_back(p);\n    }\n    while (p%3 == 0) {\n      p = p/3;\n  \
    \    result.push_back(p);\n    }\n    while (p%5 == 0) {\n      p = p/5;\n   \
    \   result.push_back(p);\n    }\n    while (p%7 == 0) {\n      p = p/7;\n    \
    \  result.push_back(p);\n    }\n    while (p%11 == 0) {\n      p = p/11;\n   \
    \   result.push_back(p);\n    }\n    while (p%13 == 0) {\n      p = p/13;\n  \
    \    result.push_back(p);\n    }\n    while (p%17 == 0) {\n      p = p/17;\n \
    \     result.push_back(p);\n    }\n    while (p%19 == 0) {\n      p = p/19;\n\
    \      result.push_back(p);\n    }\n    while (p%23 == 0) {\n      p = p/23;\n\
    \      result.push_back(p);\n    }\n    while (p%29 == 0) {\n      p = p/29;\n\
    \      result.push_back(p);\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpbjg380y8: /tmp/tmpbjg380y8.cpp:61: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tstd::vector<long> factors(n);\n\
    \tlong p = (long) sqrt(n);\n\tfor (long i = 1; p * i <= n; i++) {\n\t\twhile (n\
    \ % i == 0) {\n\t\t\tfactors[i / p]++;\n\t\t\tn /= i;\n\t\t}\n\t}\n\treturn factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    long ans = 1;\n    //\
    \ n = product of factors\n    if (n >= 2) {\n        do {\n            while (n\
    \ % 2 == 0 && n < ans * ans)\n                ans = ans * 2;\n            if (n\
    \ % 2 != 0)\n                ans = ans * 2;\n        } while (n /= 2);\n    }\n\
    \    return std::vector<long>(ans, ans + 1);\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpsxfwpegd: /tmp/tmpsxfwpegd.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> res;\n\
    \  // Make n a multiple of 2\n  if (n % 2 == 0) {\n    n = n / 2;\n  }\n  long\
    \ d = 2;\n  // Find prime factors and add them to the vector\n  while (d * d <=\
    \ n) {\n    if (n % d == 0) {\n      n /= d;\n      res.push_back(d);\n    } else\
    \ {\n      d += 2;\n    }\n  }\n  // Check if n is a prime or not\n  while (n\
    \ % 2 == 0) {\n    n = n / 2;\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp9gze2c1_: /tmp/tmp9gze2c1_.cpp:36: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    for (long i = 1; i <= n; i++) {\n        while (n % i == 0) {\n         \
    \   n /= i;\n            factors.push_back(i);\n        }\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long num = n;\n    long curr = 0;\n    while (num > 1) {\n        while (n\
    \ % num == 0)\n            curr++;\n        factors.push_back(curr);\n       \
    \ n /= num;\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n == 1)\n       \
    \ return std::vector<long>{1};\n    std::vector<long> res;\n    long count = 1;\n\
    \    long p = 1;\n    long d = n;\n    for (;;) {\n        if ((n % p) == 0) {\n\
    \            res.push_back(p);\n            count *= p;\n            if (d ==\
    \ 1)\n                break;\n            p += 1;\n            d = d / p;\n  \
    \      } else {\n            res.push_back(p);\n            count *= p;\n    \
    \    }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpx5esxuzg: /tmp/tmpx5esxuzg.cpp:36: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors(2);\n\
    \    for (long i = 2; i <= n / 2; ++i) {\n        while (n % i == 0) {\n     \
    \       factors[i] += 1;\n            n /= i;\n        }\n    }\n    if (n !=\
    \ 1) factors[0] += 1;\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzewvf6gg: /tmp/tmpzewvf6gg.cpp:25: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    if (n == 1) {\n        factors.push_back(1);\n        return factors;\n \
    \   }\n    if (n < 2) {\n        return {};\n    }\n    // If n is a prime number,\
    \ then it can have at most 1 factor.\n    if (n == 2) {\n        return {2};\n\
    \    }\n    // If n is even, then there are two factors.\n    if (n & 1) {\n \
    \       factors.push_back(n);\n        return factors;\n    }\n    // If n is\
    \ odd, then there is only one factor.\n    // For n = 3, factors.push_back(n)\
    \ is called 3 times.\n    // For n = 5, factors.push_back(n) is called 3 times.\n\
    \    // For n = 15, factors.push_back(n) is called 5 times.\n    // For n = 27,\
    \ factors.push_back(n) is called 7 times.\n    // For n = 375, factors.push_back(n)\
    \ is called 9 times.\n    // For n = 877, factors.push_back(n) is called 10 times.\n\
    \    // For n = 1777, factors.push_back(n) is called 10 times.\n    // For n =\
    \ 2839, factors.push_back(n) is called 10 times.\n    // For n = 36197, factors.push_back(n)\
    \ is called 10 times.\n    // For n = 375577, factors.push_back(n) is called 10\
    \ times.\n    // For n = 113297, factors.push_back(n) is called 10 times.\n  \
    \  // For n = 1243177, factors.push_back(n) is called 10 times.\n    // For n\
    \ = 1429387, factors.push_back(n) is called 10 times.\n    // For n = 15472677,\
    \ factors.push_back(n) is called 10 times.\n    // For n = 5291113, factors.push_back(n)\
    \ is called 10 times.\n    // For n = 6351887, factors.push_back(n) is called\
    \ 10 times.\n    // For n = 68573787, factors.push_back(n) is called 10 times.\n\
    \    // For n = 115961787, factors.push_back(n) is called 10 times.\n    // For\
    \ n = 1269793787, factors.push_back(n) is called 10 times.\n    // For n = 1384173787,\
    \ factors.push_back(n) is called 10 times.\n    // For n = 1595573787, factors.push_back(n)\
    \ is called 10 times.\n    // For n = 5259115961787, factors.push_back(n) is called\
    \ 10 times.\n    // For n = 6371984173787, factors.push_back(n) is called 10 times.\n\
    \    // For n = 1219793787, factors.push_back(n) is called 10 times.\n    // For\
    \ n = 1384173787, factors.push_back(n) is called 10 times.\n    // For n = 1384173787,\
    \ factors.push_back(n\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvaq0mkdx: /tmp/tmpvaq0mkdx.cpp:61: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Make factorization\
    \ of n.\n    std::vector<long> f(n);\n    for (int i = 0; i < n; i++) {\n    \
    \    for (int j = i + i; j < n; j += i) {\n            f[j] = i;\n        }\n\
    \    }\n    std::vector<long> factorization;\n    // Count occurences of each\
    \ factor.\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++)\
    \ {\n            if (f[i] == f[j]) {\n                factorization.push_back(f[i]);\n\
    \            }\n        }\n    }\n    return factorization;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  long a = n;\n  long b =\
    \ 1;\n  std::vector<long> factor;\n\n  while (a % 2 == 0) {\n    a /= 2;\n   \
    \ factor.push_back(b);\n    b *= 2;\n  }\n  while (a > 1) {\n    while (a % 2\
    \ == 0) {\n      a /= 2;\n      factor.push_back(b);\n      b *= 2;\n    }\n \
    \   while (b * b <= a) {\n      b += 1;\n    }\n  }\n\n  return factor;\n}\nint\
    \ main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp9x9s8dvr: /tmp/tmp9x9s8dvr.cpp:37: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> ans;\n\
    \    long a = 1, b = n, c = 2;\n    while (true) {\n        while (a < b) { a\
    \ *= c; if (a > n) break;}\n        while (b >= c) { b -= c; if (b < 1) break;}\n\
    \        if (b > 1) {\n            ans.push_back(b);\n            while (a % b\
    \ == 0) { b -= a; a *= c; }\n            if (a > n) {\n                ans.push_back(a);\n\
    \                break;\n            }\n        }\n        c++;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tstd::vector<long> factorization(n);\n\
    \tint i = 2;\n\twhile (i <= sqrt(n))\n\t{\n\t\tif (n % i == 0) {\n\t\t\twhile\
    \ (i <= sqrt(n) && n % i == 0) {\n\t\t\t\tfactorization[i++] = 1;\n\t\t\t\tn /=\
    \ i;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\ti *= 2;\n\t}\n\treturn factorization;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpct5uxcd_: /tmp/tmpct5uxcd_.cpp:30: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    std::vector<long> factorial(factors.size() + 1);\n    long prod = 1;\n  \
    \  for (long i = 1; i < n; i++) {\n        long c = 1;\n        for (long j =\
    \ i; j < n; j++)\n            c *= j;\n        prod *= c;\n    }\n    for (long\
    \ i = 0; i < factors.size(); i++)\n        factorial[i] = 1;\n    for (long i\
    \ = 1; i < prod; i++)\n        factorial[i] = factorial[i - 1] * i;\n    for (long\
    \ i = 1; i < factors.size(); i++)\n        if (factorial[i] <= factors[i - 1])\n\
    \            factors[i - 1] = factorial[i];\n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp_vt8q6a3: /tmp/tmp_vt8q6a3.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Store list of factors\
    \ and how many times each one appeared in factorization\n    std::vector < long\
    \ > factors;\n    long counter = 0;\n\n    // Generate list of factors of number\n\
    \    do {\n        // If current number is divisible by all factors\n        if\
    \ (n % i == 0) {\n            // Add factor to list\n            factors.push_back(i);\n\
    \n            // Add 1 to count of this factor in factorization\n            counter++;\n\
    \n            // Remove number from number (since we've already gotten it above)\n\
    \            n /= i;\n        }\n    } while (n > 1);\n\n    // Return factors\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_l4seilp.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp_l4seilp.cpp:20:17: error: \u2018i\u2019 was not declared\
    \ in this scope\n   20 |         if (n % i == 0) {\n      |                 ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization;\n\
    \    long i = 2;\n    while (i < n && n % i == 0) {\n        factorization.push_back(i);\n\
    \        long m = n / i;\n        while (m) {\n            i = i + 1;\n      \
    \      m = m / i;\n        }\n    }\n    return factorization;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0j9jodug: /tmp/tmp0j9jodug.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\t// n is odd\n\tif (n %\
    \ 2 == 0) {\n\t\tstd::vector<long> factors(3, 1);\n\t\tfor (int i = 3; i <= n;\
    \ i += 2)\n\t\t\twhile (n % i == 0) {\n\t\t\t\tn /= i;\n\t\t\t\tfactors[factors.size()\
    \ - 1]++;\n\t\t\t}\n\t\tif (n > 1) {\n\t\t\tfactors[factors.size() - 1]++;\n\t\
    \t}\n\t\treturn factors;\n\t} else {\n\t\t// n is even\n\t\tstd::vector<long>\
    \ factors(3, 1);\n\t\tfor (int i = 3; i <= sqrt(n); i += 2)\n\t\t\twhile (n %\
    \ i == 0) {\n\t\t\t\tn /= i;\n\t\t\t\tfactors[factors.size() - 1]++;\n\t\t\t}\n\
    \t\tif (n > 1) {\n\t\t\tfactors[factors.size() - 1]++;\n\t\t}\n\t\treturn factors;\n\
    \t}\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpnj5ix377: /tmp/tmpnj5ix377.cpp:41: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tstd::vector<long> primes;\n\
    \tstd::vector<long> factors;\n\tfactorize(n, primes, factors);\n\treturn factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpktf_kbtu.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpktf_kbtu.cpp:15:30: error: too many arguments to function\
    \ \u2018std::vector<long int> factorize(long int)\u2019\n   15 |  factorize(n,\
    \ primes, factors);\n      |                              ^\n/tmp/tmpktf_kbtu.cpp:12:19:\
    \ note: declared here\n   12 | std::vector<long> factorize(long n) {\n      |\
    \                   ^~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> ans;\n\
    \    long i, fac, facNum, factor;\n    fac = n;\n    factor = 2;\n    facNum =\
    \ 0;\n    while (factor <= fac) {\n        ans.push_back(factor);\n        while\
    \ (factor % 2 == 0) {\n            factor /= 2;\n            facNum++;\n     \
    \   }\n        while (factor % 3 == 0) {\n            factor /= 3;\n         \
    \   facNum++;\n        }\n        while (factor % 5 == 0) {\n            factor\
    \ /= 5;\n            facNum++;\n        }\n        while (factor % 7 == 0) {\n\
    \            factor /= 7;\n            facNum++;\n        }\n        while (factor\
    \ % 11 == 0) {\n            factor /= 11;\n            facNum++;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n % 2 == 0);\n\
    \    if (n == 2 || n == 3)\n        return std::vector<long>{2};\n    std::vector<long>\
    \ factors;\n    long prime = 2;\n    while (prime * prime <= n) {\n        if\
    \ (n % prime == 0) {\n            factors.push_back(prime);\n            n = n\
    \ / prime;\n        } else {\n            prime += 1;\n        }\n    }\n    if\
    \ (n > 1)\n        factors.push_back(n);\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpm27p0euc: /tmp/tmpm27p0euc.cpp:13: std::vector<long int> factorize(long\
    \ int): Assertion `n % 2 == 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  long f = 1;\n  std::vector<long>\
    \ primes;\n  while (n >= 2) {\n    while (n % 2 == 0) n /= 2;\n    while (n %\
    \ 3 == 0) n /= 3;\n    while (n % 5 == 0) n /= 5;\n    while (n % 7 == 0) n /=\
    \ 7;\n    if (n != 1) f *= n;\n    primes.push_back(n);\n  }\n  return primes;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpagbqp6d8: /tmp/tmpagbqp6d8.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factor;\n\
    \  factor.resize(n);\n  for (long i = 2; i * i <= n; i++)\n  {\n    // For every\
    \ number factor smaller than n, we need to divide it n times to get prime factors\n\
    \    // and their count should be equal or less than the given number\n    if\
    \ (n % i == 0) {\n      // If n is a prime factor, we will add 1\n      // But\
    \ if n is a factor of any number, we will only add 1\n      // So when n is prime\
    \ number, we need to add 1 every time\n      if (n > 1) factor[n / i] += 1;\n\
    \      n = i / i; // remove factor from number\n    } else {\n      // n is not\
    \ a prime factor\n      // We need to divide it once to get prime factors and\
    \ then add it to factors\n      // But when n is not a factor of any number, we\
    \ do not need to divide it\n      // So when n is not a prime number, we do not\
    \ need to add 1 every time\n      // and we can skip that step\n    }\n  }\n \
    \ return factor;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp6ewrt0qo: /tmp/tmp6ewrt0qo.cpp:37: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factors;\n\
    \  factors.push_back(n);\n  for (int i = 2; i <= n/2; i++) {\n    while (n % i\
    \ == 0) {\n      n = n / i;\n      factors.push_back(i);\n    }\n  }\n  return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpm3ohhhdc: /tmp/tmpm3ohhhdc.cpp:26: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tstd::vector<long> factors;\n\
    \tstd::vector<long> prime_factors(n + 1);\n\tstd::vector<bool> is_factor(n, true);\n\
    \n\tprime_factors[0] = 2;\n\tis_factor[0] = true;\n\tfor (long i = 1; i <= n;\
    \ ++i) {\n\t\tfor (long j = 0; j <= n; ++j) {\n\t\t\tif (j * j > i) {\n\t\t\t\t\
    break;\n\t\t\t}\n\t\t\tif (is_factor[j] == true && prime_factors[j] >= prime_factors[i])\
    \ {\n\t\t\t\tprime_factors[j] += prime_factors[i];\n\t\t\t\tis_factor[j] = false;\n\
    \t\t\t}\n\t\t}\n\t\tif (is_factor[i] == true) {\n\t\t\tfactors.push_back(i);\n\
    \t\t}\n\t}\n\treturn factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpmjqgqy41: /tmp/tmpmjqgqy41.cpp:38: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> ret;\n\
    \    long factor = 1;\n    while (factor <= n) {\n        while (n % factor ==\
    \ 0) {\n            ret.resize(ret.size()+1);\n            ret[ret.size()-1] =\
    \ factor;\n            n = n/factor;\n        }\n        factor++;\n    }\n  \
    \  if (n != 1) ret.resize(ret.size()+1);\n    return ret;\n}\nint main() {\n \
    \   auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> ans;\n\
    \  // Base cases\n  if (n == 1) return ans;\n  if (n <= 2) return ans;\n  long\
    \ k = 2;\n  while (n % k == 0) {\n    ans.push_back(k);\n    n /= k;\n  }\n  if\
    \ (n > 2) ans.push_back(n - 1);\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmphiv7hx0y: /tmp/tmphiv7hx0y.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Create list to store\
    \ factors\n    std::vector<long> factors;\n    // Initialize list with 1 and itself\n\
    \    factors.push_back(1L);\n    // Iterate from 2 to N-1\n    for (int i = 2;\
    \ i <= n; i++) {\n        // If current number is divisible by any number in the\
    \ list, then divide it by all numbers in the list\n        if (n % i == 0) {\n\
    \            for (int j = i; j < n; j++)\n                factors.push_back(j);\n\
    \            // If the current number is not divisible by any number in the list,\
    \ add it to the list and continue\n            factors.push_back(i);\n       \
    \ }\n    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpfvocre_y: /tmp/tmpfvocre_y.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factor;\n\
    \    long prime = 2;\n    for (long i = 2; i <= n / prime; ++i) {\n        if\
    \ (n % prime == 0) {\n            factor.push_back(prime);\n            n /= prime;\n\
    \        } else {\n            prime++;\n        }\n    }\n    if (n > 1) {\n\
    \        factor.push_back(n);\n    }\n    return factor;\n}\nint main() {\n  \
    \  auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmps_mwuket: /tmp/tmps_mwuket.cpp:32: int main(): Assertion `candidate((8))\
    \ == (std::vector<long>({2, 2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factors;\n\
    \  if (n == 1) {\n    factors.push_back(1);\n    return factors;\n  }\n\n  std::vector<bool>\
    \ isPrime(n + 1, true);\n  std::vector<long> factorization(n + 1);\n\n  long lastPrimeFactor\
    \ = factorization[n];\n  for (long i = 2; i <= n; ++i) {\n    if (isPrime[i])\
    \ {\n      long factor = lastPrimeFactor * i;\n      lastPrimeFactor = factor;\n\
    \      factors.push_back(factor);\n      factorization[i] = factor;\n    }\n \
    \ }\n  return factors;\n}\nint main() {\n    auto candidate = factorize;\n   \
    \ assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpyvb8f1ol: /tmp/tmpyvb8f1ol.cpp:35: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Scan the number to\
    \ find its factors and store them in an array of long.\n    std::vector<long>\
    \ factors;\n    while (true) {\n        // Divide number by each of the factors\
    \ in the array.\n        for (long i = 0; i < factors.size(); i++) {\n       \
    \     long temp = n / factors[i];\n            if (temp == 1) break;\n       \
    \     n = temp;\n        }\n        // If there are no more factors left, stop.\n\
    \        if (n <= 1) break;\n        // Add this number to the list of factors.\n\
    \        factors.push_back(n);\n    }\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> fac(0);\n\
    \    long p = 2;\n    while (p <= n) {\n        while (n % p == 0) {\n       \
    \     fac.push_back(p);\n            n /= p;\n        }\n        p++;\n    }\n\
    \    return fac;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization;\n\
    \    long i = 1;\n    while ((n % i) != 0) {\n        i++;\n    }\n    while (i\
    \ != 2) {\n        i++;\n        if (i % 2 == 0) {\n            continue;\n  \
    \      }\n        for (long j = 3; j <= i / j; j += 2) {\n            if (i %\
    \ j == 0) {\n                break;\n            }\n        }\n        if (j >\
    \ i / j) {\n            factorization.push_back(i/j);\n            i /= j;\n \
    \       }\n    }\n    if (n != 1) {\n        factorization.push_back(n);\n   \
    \ }\n    return factorization;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr1jvfzlm.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpr1jvfzlm.cpp:28:13: error: \u2018j\u2019 was not declared\
    \ in this scope\n   28 |         if (j > i / j) {\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> v;\n\
    \    v.push_back(1);\n    long factor = 2;\n    while (factor <= n) {\n      \
    \  while (n % factor == 0) {\n            v.push_back(factor);\n            n\
    \ /= factor;\n        }\n        factor++;\n    }\n    v.push_back(n);\n    return\
    \ v;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpyt8yad3w: /tmp/tmpyt8yad3w.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> primes;\n\
    \n  // If n is prime, return it immediately.\n  if (n%2 == 0 || n%3 == 0) return\
    \ primes.push_back(n);\n\n  // Divide n by prime divisors, one by one to maintain\
    \ order.\n  long divs[2] = {1, n};\n  long remainder;\n  while (n%divs[0] != 0)\
    \ {\n    remainder = divs[0];\n    divs[0] = divs[1]/remainder;\n    divs[1] =\
    \ remainder;\n  }\n  remainder = divs[1];\n\n  // Check for all remaining prime\
    \ divisors.\n  long next_divisor = 1;\n  while (next_divisor <= remainder) {\n\
    \    if (n%next_divisor == 0) {\n      primes.push_back(next_divisor);\n     \
    \ n /= next_divisor;\n    } else {\n      next_divisor += 1;\n    }\n  }\n\n \
    \ return primes;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpiuf2rdd2.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpiuf2rdd2.cpp:16:52: error: could not convert \u2018primes.std::vector<long\
    \ int>::push_back(n)\u2019 from \u2018void\u2019 to \u2018std::vector<long int>\u2019\
    \n   16 |   if (n%2 == 0 || n%3 == 0) return primes.push_back(n);\n      |   \
    \                                 ~~~~~~~~~~~~~~~~^~~\n      |               \
    \                                     |\n      |                             \
    \                       void\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> res;\n\
    \    long i, temp;\n    long factor = 1;\n    while (n > 1) {\n        temp =\
    \ n % factor;\n        res.push_back(temp);\n        n /= factor;\n        factor++;\n\
    \    }\n    i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n        \
    \    res.push_back(i);\n            n /= i;\n            i--;\n        }\n   \
    \     i++;\n    }\n    if (n != 1) res.push_back(n);\n    return res;\n}\nint\
    \ main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpyxw_g7sr: /tmp/tmpyxw_g7sr.cpp:36: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> fct;\n\
    \    for (long i = 1; i <= n; ++i) {\n        while (!(n%i)) {\n            ++i;\n\
    \        }\n        fct.push_back(i);\n    }\n    return fct;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxg4xlrqk: /tmp/tmpxg4xlrqk.cpp:24: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    long factor = n;\n  \
    \  long factorization[10000];\n    long factorization[10000];\n    long count\
    \ = 1;\n    long i;\n\n    while(factor != 1) {\n        for ( i = 2; i <= factor;\
    \ i++ ) {\n            if ( factor % i == 0 ) {\n                factor = factor\
    \ / i;\n                factorization[i] = factor;\n                count++;\n\
    \                break;\n            }\n        }\n    }\n    // Printing the\
    \ count of factors for each number in the factorization\n    for ( i = 0; i <\
    \ count; i++ )\n        printf(\"%ld \", factorization[i]);\n    return factorization;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6cj2z36e.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp6cj2z36e.cpp:15:10: error: redeclaration of \u2018long\
    \ int factorization [10000]\u2019\n   15 |     long factorization[10000];\n  \
    \    |          ^~~~~~~~~~~~~\n/tmp/tmp6cj2z36e.cpp:14:10: note: \u2018long int\
    \ factorization [10000]\u2019 previously declared here\n   14 |     long factorization[10000];\n\
    \      |          ^~~~~~~~~~~~~\n/tmp/tmp6cj2z36e.cpp:32:12: error: could not\
    \ convert \u2018factorization\u2019 from \u2018long int [10000]\u2019 to \u2018\
    std::vector<long int>\u2019\n   32 |     return factorization;\n      |      \
    \      ^~~~~~~~~~~~~\n      |            |\n      |            long int [10000]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factor;\n\
    \  long count = 1;\n  long temp = n;\n  while (temp != 1) {\n    while (temp %\
    \ 2 == 0) {\n      temp = temp / 2;\n      count++;\n    }\n    while (temp %\
    \ 3 == 0) {\n      temp = temp / 3;\n      count++;\n    }\n    if (temp != 1)\
    \ factor.push_back(temp);\n    temp = count;\n  }\n  return factor;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factorization;\n\
    \  long r = 1;\n  while (n % r != 0) {\n    long c = r * 2;\n    while (n % c\
    \ != 0) {\n      c = c * 2;\n    }\n    r = c;\n  }\n  factorization.push_back(r);\n\
    \  while (n != 1) {\n    r = r * 2;\n    n = n / r;\n    if (n != 1) {\n     \
    \ factorization.push_back(r);\n    }\n  }\n  return factorization;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpf5p_ct93: /tmp/tmpf5p_ct93.cpp:34: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::cin >> n;\n    std::vector<long>\
    \ factors;\n    long current = n;\n    long i = 2;\n    while (current % i ==\
    \ 0) {\n        while (current % i == 0) {\n            current = current / i;\n\
    \            factors.push_back(i);\n            i = i * 3 + 1;\n        }\n  \
    \      i++;\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpsnrl0_nc: /tmp/tmpsnrl0_nc.cpp:30: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> result;\n\
    \    // Sieve of Erastosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n\
    \    std::vector<bool> seen{true, true, false, true, false, true, false};\n  \
    \  for (long i = 2; i < n; i++) {\n        if (!seen[i]) {\n            long factor\
    \ = i;\n            for (long j = i * i; j < n; j += i) {\n                seen[j]\
    \ = false;\n            }\n            while (factor * factor < n) {\n       \
    \         seen[factor * factor] = false;\n                factor++;\n        \
    \    }\n            result.push_back(factor);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw7alcga3: /tmp/tmpw7alcga3.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> f(n\
    \ + 1);\n    // if n is even, divide it by 2 and see if remainder is even\n  \
    \  while (n & 1 == 0) {\n        // if remainder is odd, divide it by 2 and see\
    \ if remainder is even\n        if (n & 1) n = n / 2;\n        else n = n / 2;\n\
    \    }\n    for (int i = 1; i < n; ++i) {\n        while (n % i == 0) {\n    \
    \        f[i] = i;\n            n /= i;\n        }\n    }\n    if (n != 1) f[n]\
    \ = n;\n    return f;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Start with 2 and multiply\
    \ by 2 for each iteration of factorization of n.\n    std::vector<long> factors;\n\
    \    long p = 2;\n    long p2 = n;\n    while (p != 2 && p2 != 1) {\n        while\
    \ (p2 % p == 0) {\n            factors.push_back(p);\n            p2 /= p;\n \
    \       }\n        p *= 2;\n    }\n    while (p != 1 && p2 != 1) {\n        while\
    \ (p2 % p == 0) {\n            factors.push_back(p);\n            p2 /= p;\n \
    \       }\n        p *= 2;\n    }\n    return factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factors;\n\
    \  long f = 1;\n  while (f <= n) {\n    while (n % f == 0) {\n      factors.push_back(f);\n\
    \      n = n / f;\n    }\n    f++;\n  }\n  return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tstd::vector<long> factors;\n\
    \t// Store factors up to sqrt(n).\n\tlong factor = 10;\n\tlong i = 2;\n\tlong\
    \ j = n;\n\twhile (i <= j) {\n\t\twhile (j % i == 0) {\n\t\t\tj = j / i;\n\t\t\
    \tfactors.push_back(i);\n\t\t\ti = 2 * factor;\n\t\t}\n\t\tfactor = factor ==\
    \ 10 ? 2 : factor;\n\t\ti++;\n\t}\n\treturn factors;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmprp9juer2: /tmp/tmprp9juer2.cpp:32: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\t// Write your code here\n\
    \tstd::vector<long> result;\n\tlong i = 3;\n\twhile (i <= n) {\n\t\twhile (n %\
    \ i == 0) {\n\t\t\tresult.push_back(i);\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t}\n\
    \tif (n > 1) {\n\t\tresult.push_back(n);\n\t}\n\treturn result;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpgr79kcj2: /tmp/tmpgr79kcj2.cpp:31: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n > 0);\n    std::vector<long>\
    \ res(n);\n    long fact = 1;\n    for (long i = 0; i < n; i++) {\n        while\
    \ (fact % i == 0) {\n            fact = fact / i;\n            res[i] = fact;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Create vector to store\
    \ factors\n    std::vector<long> factors(n, 0);\n\n    // Fill vector with prime\
    \ numbers using Sieve of Eratosthenes\n    std::vector<long> p(n - 1, 2);\n  \
    \  for (long i = 2; i * i <= n; ++i) {\n        if (p[i] != 0)\n            continue;\n\
    \        for (long j = i * i; j < n; j += i) {\n            p[j] = 0;\n      \
    \  }\n    }\n\n    // Fill vector with factors of given number\n    for (long\
    \ i = 2; i < n; ++i) {\n        if (p[i] != 0)\n            factors[i] = p[i];\n\
    \        else\n            factors[i] = i;\n    }\n\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmph4ui1yie: /tmp/tmph4ui1yie.cpp:38: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Write your code here.\n\
    \    std::vector<long> factorization(n,1);\n    std::vector<bool> visited(n,false);\n\
    \    long count=0;\n    for(long i=2;i<n;i++){\n        if(!visited[i]){\n   \
    \         for(long j=2;i*j<n;j++){\n                if(n%i==0){\n            \
    \        count++;\n                    if(n%j==0){\n                        factorization[i/j]+=1;\n\
    \                    }\n                }\n            }\n        }\n        visited[i]=true;\n\
    \    }\n    return factorization;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp1831epjp: /tmp/tmp1831epjp.cpp:34: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> p;\n\
    \    for (long i = 2; i <= n / 2; i++) {\n        while (n % i == 0) {\n     \
    \       p.push_back(i);\n            n /= i;\n        }\n    }\n    if (n != 1)\
    \ p.push_back(n);\n    return p;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::stack<long> primes;\n\
    \    primes.push(n);\n    std::vector<long> factors;\n    while (!primes.empty())\
    \ {\n        long x = primes.top();\n        primes.pop();\n        for (long\
    \ y = 2; y < x; ++y) {\n            if (x % y == 0) {\n                long i\
    \ = y;\n                while (i != 0) {\n                    if (x % i == 0)\
    \ {\n                        factors.push_back(i);\n                        x\
    \ /= i;\n                    } else\n                        break;\n        \
    \            i /= i;\n                }\n                break;\n            }\n\
    \        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpny2zrqcu: /tmp/tmpny2zrqcu.cpp:38: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    long sum = 0;\n    for\
    \ (long i = 1; i <= n; i++) {\n        while (n%i == 0) {\n            sum +=\
    \ i;\n            n /= i;\n        }\n    }\n    // Now we have sum of factors\
    \ and count of times each factor appeared in factorization\n    std::vector<long>\
    \ factorization(n, 0);\n    for (long i = 1; i <= n; i++) {\n        while (n\
    \ % i == 0) {\n            n /= i;\n            factorization[i]++;\n        }\n\
    \    }\n    return factorization;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factor;\n\
    \    long div = 1;\n    long sq = sqrt(n);\n    for (long i = 3; i <= sq; i +=\
    \ 2)\n        if (n % i == 0) {\n            long k = i / div;\n            factor.push_back(k);\n\
    \            div *= k;\n        }\n    factor.push_back(div);\n    return factor;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjgg1v_24: /tmp/tmpjgg1v_24.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tstd::vector<long> factor;\n\
    \tlong m = n;\n\tlong n = n;\n\tfor (;;) {\n\t\tlong q = m / n;\n\t\twhile (q*n\
    \ <= m) {\n\t\t\tfactor.push_back(q);\n\t\t\tn += q;\n\t\t}\n\t\tm--;\n\t\tif\
    \ (n == 1)\n\t\t\tbreak;\n\t}\n\treturn factor;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvrfzkg2x.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpvrfzkg2x.cpp:15:7: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   15 |  long n = n;\n      |       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Initialize all elements\
    \ to 0\n    std::fill(primes.begin(), primes.end(), 0);\n\n    // Initialize a\
    \ list to store result\n    std::vector<long> result;\n\n    // Compute all prime\
    \ factors of n\n    for (int i = 2; i <= n / i; i++) {\n        // If i is prime\
    \ then update its count by 1 and its factor in the result list\n        if (isprime(i))\
    \ {\n            primes[i] += 1;\n            result.push_back(i);\n        }\n\
    \    }\n\n    // Return factorized version of n\n    return result;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp93vt8dmj.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp93vt8dmj.cpp:14:15: error: \u2018primes\u2019 was not declared\
    \ in this scope\n   14 |     std::fill(primes.begin(), primes.end(), 0);\n   \
    \   |               ^~~~~~\n/tmp/tmp93vt8dmj.cpp:22:13: error: \u2018isprime\u2019\
    \ was not declared in this scope; did you mean \u2018isprint\u2019?\n   22 | \
    \        if (isprime(i)) {\n      |             ^~~~~~~\n      |             isprint\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  long num = n, factor =\
    \ 0, i;\n  std::vector<long> factorization;\n  while (num > 1) {\n    factor =\
    \ num % 2;\n    factorization.push_back(factor);\n    num /= 2;\n  }\n  return\
    \ factorization;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5f5266my: /tmp/tmp5f5266my.cpp:24: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization;\n\
    \    factorization.push_back(n);\n    long m = n;\n    long factor = 1;\n    while\
    \ (m != 1) {\n        while (m%factor == 0) {\n            factor++;\n       \
    \ }\n        if (factor != 2) {\n            factorization.push_back(factor);\n\
    \        }\n        m /= factor;\n    }\n    return factorization;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> res;\n\
    \  long max_count = 0, max_factor = 0, max_factor_count = 1, max_prime_factor\
    \ = 0;\n  int counter = 0;\n  long factor = 2;\n  long factor_count = 1;\n  while\
    \ (true) {\n    // Stop when factor of n becomes 1\n    if (n % factor == 0) {\n\
    \      res.push_back(factor);\n      counter++;\n      n/= factor;\n      continue;\n\
    \    }\n    // If factor is prime\n    if (factor == 2) {\n      if (n >= 2) {\n\
    \        res.push_back(factor);\n        counter++;\n        n/= factor;\n   \
    \   }\n      continue;\n    }\n    // If current factor count > max factor count\n\
    \    if (factor_count > max_factor_count) {\n      max_factor_count = factor_count;\n\
    \      max_factor = factor;\n      max_prime_factor = factor;\n    }\n    // If\
    \ current factor count < max factor count\n    if (factor_count < max_factor_count)\
    \ {\n      // If current factor count < max factor count\n      if (max_factor_count\
    \ == factor_count) {\n        // If current factor > max prime factor\n      \
    \  if (factor > max_prime_factor) {\n          max_factor_count = factor_count;\n\
    \          max_factor = factor;\n          max_prime_factor = factor;\n      \
    \  }\n      } else {\n        // If current factor < max prime factor\n      \
    \  if (factor < max_prime_factor) {\n          max_factor_count = factor_count;\n\
    \          max_factor = factor;\n          max_prime_factor = factor;\n      \
    \  }\n      }\n    }\n    // If current factor count > max factor count\n    if\
    \ (factor_count > max_factor_count) {\n      max_factor_count = factor_count;\n\
    \      max_factor = factor;\n      max_prime_factor = factor;\n    }\n    factor++;\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Factor map\n    std::map<long,\
    \ std::set<long>> factors;\n\n    // If n is prime then its factors are itself\
    \ and 1.\n    if (n == 1) {\n        return {1};\n    }\n\n    // Factor map\n\
    \    std::map<long, std::set<long>> factors;\n\n    // If n is prime then its\
    \ factors are itself and 1.\n    if (n == 1) {\n        return {1};\n    }\n\n\
    \    // Factor map\n    std::map<long, std::set<long>> factors;\n\n    // Initialize\
    \ factor map with first two prime numbers\n    for (long i = 2; i <= n / 2; i++)\
    \ {\n        std::set<long> factor_set;\n        factor_set.insert(i);\n     \
    \   factors[2 * i] = factor_set;\n    }\n\n    // For each number from 3 to sqrt(n)\n\
    \    for (long i = 3; i <= (n - 1) / 2; i++) {\n        // If n divides i then\
    \ we already have factorization\n        if (n % i == 0) {\n            continue;\n\
    \        }\n\n        // Update factor map\n        std::set<long> factor_set\
    \ = factors[2 * i];\n        factor_set.insert(i);\n        factors[2 * i] = factor_set;\n\
    \n        // Update factor map\n        std::set<long> factor_set = factors[2\
    \ * i + 1];\n        factor_set.insert(i);\n        factors[2 * i + 1] = factor_set;\n\
    \    }\n\n    // Remove factors that are smaller than 1\n    for (std::map<long,\
    \ std::set<long>>::iterator it = factors.begin(); it != factors.end(); ++it) {\n\
    \        if (it->second.size() == 1) {\n            it->second.erase(it->second.begin());\n\
    \        }\n    }\n\n    // Return list of prime factors\n    std::vector<long>\
    \ factors;\n    for (std::map<long, std::set<long>>::iterator it = factors.begin();\
    \ it != factors.end(); ++it) {\n        factors.push_back(it->second.size());\n\
    \    }\n\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp61llm291.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp61llm291.cpp:22:36: error: redeclaration of \u2018std::map<long\
    \ int, std::set<long int> > factors\u2019\n   22 |     std::map<long, std::set<long>>\
    \ factors;\n      |                                    ^~~~~~~\n/tmp/tmp61llm291.cpp:14:36:\
    \ note: \u2018std::map<long int, std::set<long int> > factors\u2019 previously\
    \ declared here\n   14 |     std::map<long, std::set<long>> factors;\n      |\
    \                                    ^~~~~~~\n/tmp/tmp61llm291.cpp:30:36: error:\
    \ redeclaration of \u2018std::map<long int, std::set<long int> > factors\u2019\
    \n   30 |     std::map<long, std::set<long>> factors;\n      |               \
    \                     ^~~~~~~\n/tmp/tmp61llm291.cpp:14:36: note: \u2018std::map<long\
    \ int, std::set<long int> > factors\u2019 previously declared here\n   14 |  \
    \   std::map<long, std::set<long>> factors;\n      |                         \
    \           ^~~~~~~\n/tmp/tmp61llm291.cpp:52:24: error: redeclaration of \u2018\
    std::set<long int> factor_set\u2019\n   52 |         std::set<long> factor_set\
    \ = factors[2 * i + 1];\n      |                        ^~~~~~~~~~\n/tmp/tmp61llm291.cpp:47:24:\
    \ note: \u2018std::set<long int> factor_set\u2019 previously declared here\n \
    \  47 |         std::set<long> factor_set = factors[2 * i];\n      |         \
    \               ^~~~~~~~~~\n/tmp/tmp61llm291.cpp:65:23: error: conflicting declaration\
    \ \u2018std::vector<long int> factors\u2019\n   65 |     std::vector<long> factors;\n\
    \      |                       ^~~~~~~\n/tmp/tmp61llm291.cpp:14:36: note: previous\
    \ declaration as \u2018std::map<long int, std::set<long int> > factors\u2019\n\
    \   14 |     std::map<long, std::set<long>> factors;\n      |                \
    \                    ^~~~~~~\n/tmp/tmp61llm291.cpp:67:17: error: \u2018class std::map<long\
    \ int, std::set<long int> >\u2019 has no member named \u2018push_back\u2019\n\
    \   67 |         factors.push_back(it->second.size());\n      |              \
    \   ^~~~~~~~~\n/tmp/tmp61llm291.cpp:70:12: error: could not convert \u2018factors\u2019\
    \ from \u2018std::map<long int, std::set<long int> >\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   70 |     return factors;\n     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    long product = 1, factors[1000];\n\
    \    for (int i = 1; i <= n; i++)\n        product *= i;\n    for (int i = 1;\
    \ i <= n; i++) {\n        for (int j = 1; j <= product; j++) {\n            if\
    \ (product % j == 0) {\n                factors[j] += 1;\n                if (factors[j]\
    \ == i) break;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n\
    \        factors[i] = factors[i] ? factors[i] : 1;\n    std::sort(std::begin(factors),\
    \ std::end(factors));\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3_gmk6e8.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp3_gmk6e8.cpp:27:12: error: could not convert \u2018factors\u2019\
    \ from \u2018long int [1000]\u2019 to \u2018std::vector<long int>\u2019\n   27\
    \ |     return factors;\n      |            ^~~~~~~\n      |            |\n  \
    \    |            long int [1000]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    factors.push_back(n);\n    \n    long factor = 1;\n    long n2 = n;\n   \
    \ while (std::next_permutation(factors.begin(), factors.end()))\n    {\n     \
    \   factor *= n2;\n        n2 *= n2;\n    }\n    \n    std::vector<long>::iterator\
    \ it;\n    for (it = factors.begin(); it != factors.end(); it++)\n    {\n    \
    \    if (factors.at(*it) < std::sqrt(n))\n        {\n            factors.at(*it)\
    \ *= std::sqrt(n);\n            factors.erase(std::remove(factors.begin(), factors.end(),\
    \ *it), factors.end());\n        }\n    }\n    \n    return factors;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 2) >= this->size() (which is 1)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n>0);\n    std::vector<long>\
    \ factors;\n    long i = 2;\n    long factor = 1;\n    while(i*i<n) {\n      \
    \  if(n%i==0) {\n            factor++;\n            factors.push_back(factor);\n\
    \            n /= i;\n        }\n        i++;\n    }\n    factors.push_back(1);\n\
    \    factors.push_back(factor);\n    factors.push_back(n);\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpxby6ccl9: /tmp/tmpxby6ccl9.cpp:32: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factor;\n\
    \  factor.push_back(n);\n  long fact = 1;\n  long i = 2;\n  while ((fact*i) <=\
    \ n) {\n    while (n % (i*i) == 0) {\n      factor.push_back(i);\n      n = n\
    \ / i;\n    }\n    fact = fact * i;\n    i++;\n  }\n  while (fact < n) {\n   \
    \ factor.push_back(fact);\n    fact = fact * i;\n    i++;\n  }\n  return factor;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp9bppvoy6: /tmp/tmp9bppvoy6.cpp:35: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factor;\n\
    \    for (long i = 1; i <= n; i++) {\n        long f = 1;\n        while (n %\
    \ i == 0) {\n            f *= i;\n            n /= i;\n        }\n        factor.push_back(f);\n\
    \    }\n    factor.push_back(n);\n    return factor;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> f(n);\n\
    \    for (int i = 1; i <= n; i++) f[i] = i;\n    // print all factors\n    for\
    \ (long i = 2; i * i <= n; i++) {\n        // skip factor of 1\n        if (n\
    \ % (i) == 0) continue;\n        while (n % i == 0) {\n            f[i / i]++;\n\
    \            n /= i;\n        }\n    }\n    return f;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmprkru71f4: /tmp/tmprkru71f4.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long temp = 1;\n    for (long i = 2; i <= n / i; i++) {\n        if (n %\
    \ i == 0) {\n            factors.push_back(i);\n            temp = temp * i;\n\
    \            if (temp > n) {\n                factors.push_back(i);\n        \
    \        factors.push_back(i);\n                factors.push_back(i);\n      \
    \          break;\n            }\n        }\n    }\n    return factors;\n}\nint\
    \ main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmptxo25l1j: /tmp/tmptxo25l1j.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // A set with all the\
    \ prime factors\n    std::set<long> factors;\n\n    // Iterate over all the factors\n\
    \    for (long i = 2; i <= std::sqrt(n); i++) {\n        // If a factor has already\
    \ been found for that iteration\n        if (factors.count(i) > 0) {\n       \
    \     continue;\n        }\n\n        // For every number for which the factors\
    \ are already found\n        for (long j = 2 * i; j < n; j += i) {\n         \
    \   // If that number is already a factor of some factors\n            if (factors.count(j)\
    \ == 0) {\n                // Add that factor to the set of factors\n        \
    \        factors.insert(j);\n            }\n        }\n    }\n\n    // Get the\
    \ size of the returned vector\n    size_t size = factors.size();\n\n    // Create\
    \ the output vector\n    std::vector<long> out;\n    out.reserve(size);\n\n  \
    \  // Iterate over all the factors and copy it to the output vector\n    for (auto\
    \ it = factors.begin(); it != factors.end(); ++it) {\n        out.push_back(*it);\n\
    \    }\n\n    // Return the vector of factors\n    return out;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpw4eg1zfo: /tmp/tmpw4eg1zfo.cpp:50: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    int s = 1;\n    long f = 1;\n    while (n % f == 0) {\n        factors.push_back(f);\n\
    \        n /= f;\n        ++s;\n    }\n    if (n > 1) {\n        factors.push_back(1);\n\
    \    }\n    while (s > 1) {\n        f = 1;\n        s += 1;\n        while (n\
    \ % f == 0) {\n            factors.push_back(f);\n            n /= f;\n      \
    \      ++s;\n        }\n        if (n > 1) {\n            factors.push_back(1);\n\
    \        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors(0,\
    \ 1);\n    long p = n;\n    long pc = 1;\n    while (p % 2 == 0) {\n        if\
    \ (p % 3 == 0)\n            factors.push_back(pc);\n        pc += 2;\n       \
    \ p = p / 2;\n    }\n    p = n;\n    while (p % 5 == 0) {\n        if (p % 7 ==\
    \ 0)\n            factors.push_back(pc);\n        pc += 5;\n        p = p / 5;\n\
    \    }\n    p = n;\n    while (p % 11 == 0) {\n        if (p % 13 == 0)\n    \
    \        factors.push_back(pc);\n        pc += 11;\n        p = p / 11;\n    }\n\
    \    p = n;\n    while (p % 17 == 0) {\n        if (p % 19 == 0)\n           \
    \ factors.push_back(pc);\n        pc += 17;\n        p = p / 17;\n    }\n    p\
    \ = n;\n    while (p % 23 == 0) {\n        if (p % 29 == 0)\n            factors.push_back(pc);\n\
    \        pc += 23;\n        p = p / 23;\n    }\n    p = n;\n    while (p % 29\
    \ == 0) {\n        if (p % 35 == 0)\n            factors.push_back(pc);\n    \
    \    pc += 29;\n        p = p / 29;\n    }\n    while (p % 43 == 0) {\n      \
    \  if (p % 47 == 0)\n            factors.push_back(pc);\n        pc += 43;\n \
    \       p = p / 43;\n    }\n    while (p % 67 == 0) {\n        if (p % 71 == 0)\n\
    \            factors.push_back(pc);\n        pc += 67;\n        p = p / 67;\n\
    \    }\n    while (p % 131 == 0) {\n        if (p % 135)\n            factors.push_back(pc);\n\
    \        pc += 131;\n        p = p / 131;\n    }\n    while (p % 181 == 0) {\n\
    \        if (p % 185)\n            factors.push_back(pc);\n        pc += 181;\n\
    \        p = p / 181;\n    }\n    while (p % 351 == 0) {\n        if (p % 371)\n\
    \            factors.push_back(pc);\n        pc += 351;\n        p = p / 351;\n\
    \    }\n    while (p % 731 == 0) {\n        if (p % 731)\n            factors.push_back(pc);\n\
    \        pc += 731;\n        p = p / 731;\n    }\n    while (p % 1433 == 0) {\n\
    \        if (p % 1437)\n            factors.push_back(pc);\n        pc += 1433;\n\
    \        p = p / 1433;\n    }\n    while (p % 1447 == 0) {\n        if (p % 1459)\n\
    \            factors.push_back(pc);\n        pc += 1457;\n        p = p / 1457;\n\
    \    }\n    while (p % 16\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmps0gy9xfq.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmps0gy9xfq.cpp:105:18: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n  105 |     while (p % 16\n      |           ~      ^\n\
    \      |                  )\n  106 | }\n      | ~                 \n/tmp/tmps0gy9xfq.cpp:106:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  106 | }\n \
    \     | ^\n/tmp/tmps0gy9xfq.cpp:106:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    int p = 1;\n    long\
    \ x = n;\n    std::vector<long> result;\n    while (x != 1) {\n        long rem\
    \ = x % p;\n        if (rem == 0) {\n            result.push_back(p);\n      \
    \      x /= p;\n            p *= 2;\n        }\n        else {\n            x\
    \ /= p;\n            p *= 2;\n        }\n    }\n    std::sort(result.begin(),\
    \ result.end());\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmprmwravgc: /tmp/tmprmwravgc.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n == 1)\n       \
    \ return std::vector<long>(1, 1);\n    std::vector<long> factors;\n    for (long\
    \ i = 1; i <= n; i++)\n        if (n % i == 0)\n            factors.push_back(i);\n\
    \    if (factors.size() == 0)\n        return std::vector<long>(1, 1);\n    for\
    \ (int i = 1; i < factors.size(); i++) {\n        while (factors[i] * i <= n)\
    \ {\n            long long temp = factors[i] * i;\n            factors.erase(std::remove(factors.begin(),\
    \ factors.end(), temp), factors.end());\n            factors.push_back(temp);\n\
    \        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Create base cases:\
    \ 0 and 1 should be not factorized, everything else should have factorization.\n\
    \    // Note that if input number is less than 2, factorization is empty\n   \
    \ if (n < 2) {\n        return std::vector<long>();\n    }\n    if (n == 2) {\n\
    \        return {2};\n    }\n    // Create list of possible factors\n    std::vector<long>\
    \ factors;\n    // The prime factor list will be empty if input number is less\
    \ than 2 because that is the base case\n    factors.push_back(n);\n    // Loop\
    \ will continue as long as factors vector is not empty\n    while (factors.size()\
    \ > 0) {\n        // Find largest factor in factors vector\n        long largest_factor\
    \ = 0;\n        // If input number is divisible by any factor, it is a composite\
    \ number\n        for (auto factor : factors) {\n            if (n % factor ==\
    \ 0) {\n                // It is a composite number, add it to the factors vector\n\
    \                factors.push_back(factor);\n                // Break the loop,\
    \ because we are not interested in divisible numbers anymore\n               \
    \ break;\n            }\n            // If input number is less than the factor,\
    \ the number is divisible by current factor\n            if (n < factor) {\n \
    \               // It is a composite number, add it to the factors vector\n  \
    \              factors.push_back(factor);\n                break;\n          \
    \  }\n            // If input number is more than the factor, it is a composite\
    \ number\n            if (n > factor) {\n                // It is a composite\
    \ number, add it to the factors vector\n                factors.push_back(factor);\n\
    \                // Break the loop, because we are not interested in divisible\
    \ numbers anymore\n                break;\n            }\n        }\n        //\
    \ Remove largest factor from the factors vector\n        factors.erase(std::remove(factors.begin(),\
    \ factors.end(), largest_factor), factors.end());\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Find factor for given\
    \ number n\n    long factor = 1;\n    for (long i = 2; i <= n / i; i++) {\n  \
    \      if (n % i == 0) {\n            factor *= i;\n            while (n % i ==\
    \ 0) {\n                n /= i;\n                factor++;\n            }\n  \
    \      }\n    }\n    \n    // Return list of prime factors of given number n in\
    \ ascending order of factor count\n    std::vector<long> result;\n    int count\
    \ = 1;\n    for (long i = 2; i <= factor; i++) {\n        while (n % i == 0) {\n\
    \            n /= i;\n            result.push_back(i);\n            count++;\n\
    \        }\n    }\n    result.push_back(factor);\n    result.push_back(count);\n\
    \    return result;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp2ymajzph: /tmp/tmp2ymajzph.cpp:41: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    for (long i = 1; i <= n; i++) {\n        while ((n % i) == 0) {\n       \
    \     factors.push_back(i);\n            n = n / i;\n        }\n    }\n    factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> f;\n\
    \  f.push_back(n);\n  long long k = n;\n  while (k > 1) {\n    long long c = 1;\n\
    \    while (k > 1) {\n      if (k%2 == 0) {\n        f.push_back(2);\n       \
    \ k/=2;\n      } else {\n        c*=2;\n        k/=2;\n      }\n    }\n    k =\
    \ c;\n  }\n  return f;\n}\nint main() {\n    auto candidate = factorize;\n   \
    \ assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpx6ll2l8r: /tmp/tmpx6ll2l8r.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    int max_factorization_size\
    \ = 0, max_factorization = 0;\n    std::vector<long> factorization;\n    std::vector<bool>\
    \ is_factorized;\n    long max_number = 1, min_number = 2;\n    int counter =\
    \ 0;\n    while(n > 1) {\n        counter++;\n        while(n % min_number ==\
    \ 0 && n != 1 && n % min_number != 0) {\n            n = n / min_number;\n   \
    \         counter--;\n        }\n        if (n > 1) {\n            factorization.push_back(n);\n\
    \            is_factorized.push_back(true);\n        }\n        min_number = min_number*2;\n\
    \        max_number = max_number*2;\n    }\n    for(int i = factorization.size()\
    \ - 1; i >= 0; i--) {\n        int x = i;\n        while(x > 0 && !is_factorized[x])\
    \ {\n            x--;\n        }\n        if (x > 0 && x > max_factorization_size)\
    \ {\n            max_factorization_size = x;\n            max_factorization =\
    \ factorization[i];\n        }\n    }\n    return std::vector<long>(factorization.begin(),\
    \ factorization.end());\n}\nint main() {\n    auto candidate = factorize;\n  \
    \  assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n   std::vector<long> result;\n\
    \   std::vector<long> divisors;\n   for (long i = 2; i <= n; ++i)\n      divisors.push_back(i);\n\
    \   while (!divisors.empty()) {\n      long cur = divisors.back();\n      divisors.pop_back();\n\
    \      for (long d : divisors)\n         if (cur % d == 0) {\n            divisors.push_back(d);\n\
    \            break;\n         }\n      result.push_back(cur);\n   }\n   return\
    \ result;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  long factors[] = {1, n};\n\
    \  long i = 3, factor = 1;\n  while(i < n) {\n    while(n % i == 0) {\n      factor\
    \ *= i;\n      factors[2] = factors[2];\n      factors[1] = factors[1] * factor;\n\
    \      i += 2;\n    }\n    i += 1;\n  }\n  return std::vector<long>(factors, factors+3);\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpbunx4f1g: /tmp/tmpbunx4f1g.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    long factorization[1000000];\n\
    \    int count = 0;\n    // initialize array\n    for(long i = 2; i*i <= n; i++)\
    \ {\n        if(n%i == 0) {\n            factorization[count] = i;\n         \
    \   count ++;\n            n = n/i;\n        }\n    }\n    std::vector<long> factors;\n\
    \    // return all factors of n\n    while(n != 1) {\n        factors.push_back(factorization[count-1]);\n\
    \        n /= factorization[count-1];\n        count--;\n    }\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> vec(n\
    \ + 1, 0);\n    // Initialize all numbers to 1 and go from 1 to n and mark each\
    \ number as visited.\n    for(int i = 1; i <= n; ++i)\n        vec[i] = 1;\n\n\
    \    // Keep incrementing i by 1 and mark the number as visited only if i is a\
    \ prime number\n    for(int i = 2; i <= n; ++i) {\n        if(vec[i] == 1) {\n\
    \            for(int j = i; j <= n; ++j)\n                if(vec[j] == 1)\n  \
    \                  vec[j]++;\n        }\n    }\n\n    // Now to find all factors\
    \ we need to go through the vector and copy the numbers with same number of occurrences\
    \ to result vector.\n    std::vector<long> result;\n    for(int i = 1; i <= n;\
    \ ++i) {\n        if(vec[i] == 1) {\n            for(int j = i; j <= n; ++j)\n\
    \                if(vec[j] == 1)\n                    result.push_back(j);\n \
    \       }\n    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpvcfzrbku: /tmp/tmpvcfzrbku.cpp:40: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Sieve of Eratosthenes\n\
    \    // n is the given integer.\n    // k is the maximum integer that will be\
    \ factorized upon.\n    // We will loop over the range [2, k] and for each number\
    \ i, we store the factors of n in their array,\n    // and remove them from n\
    \ to leave only the remaining k - i numbers.\n    // If n is divisible by any\
    \ number from that array (which means n is prime here), then n only contains one\
    \ factor.\n    std::vector<long> f(n);\n    for (long i = 2; i <= n; i++) f[i]\
    \ = i;\n\n    for (long i = 2; i < f[n]; i++) {\n        for (long j = f[n]; j\
    \ < i; j += f[j]) f[j] = f[j] + f[j + 1];\n    }\n    return f;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp65ca1whm: /tmp/tmp65ca1whm.cpp:29: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors(2);\n\
    \    // First step is to divide n into factors until we find no more factors\n\
    \    do {\n        n = n/2;\n        factors[0]++;\n    } while (n%2);\n    //\
    \ Now go through remaining factors\n    for (int i = 1; i < factors.size(); i++)\
    \ {\n        while (n%i == 0) {\n            n = n/i;\n            factors[i]++;\n\
    \        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate =\
    \ factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    if (n <= 1)\n        return factors;\n    long r = n - 1;\n    long q;\n\
    \    while (r % 2 == 0) {\n        r--;\n        factors.push_back(r);\n    }\n\
    \    while (r % 3 == 0) {\n        q = 3;\n        while (r % q == 0) {\n    \
    \        q += 2;\n        }\n        r -= q;\n        factors.push_back(q);\n\
    \    }\n    while (r % 5 == 0) {\n        q = 5;\n        while (r % q == 0) {\n\
    \            q += 2;\n        }\n        r -= q;\n        factors.push_back(q);\n\
    \    }\n    while (r % 7 == 0) {\n        q = 7;\n        while (r % q == 0) {\n\
    \            q += 2;\n        }\n        r -= q;\n        factors.push_back(q);\n\
    \    }\n    if (r >= 2) {\n        q = 1;\n        while (r % q == 0) {\n    \
    \        q += 2;\n        }\n        r -= q;\n        factors.push_back(q);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpcy82w844: /tmp/tmpcy82w844.cpp:58: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Sieve of Erastothenes\
    \ for n\n    std::vector<bool> primes;\n    // Start with 2\n    primes.push_back(true);\n\
    \    // Now go through odd numbers till sqrt(n)\n    for (long i = 3; i * i <=\
    \ n; i += 2) {\n        // If n is prime, add it to prime list\n        if (primes[i])\
    \ {\n            primes.push_back(false);\n        }\n        // If n has no multiple\
    \ primes greater than or equal to its square root, continue to next number.\n\
    \        for (long j = i*i; j <= n; j += i) {\n            if (primes[j]) {\n\
    \                primes.push_back(false);\n                break;\n          \
    \  }\n        }\n    }\n\n    // If n is not prime, return empty vector\n    if\
    \ (primes.empty()) {\n        return std::vector<long>();\n    }\n\n    // If\
    \ n is prime, return only its prime factors\n    if (primes.size() == 1) {\n \
    \       return std::vector<long>({(int)primes[0]});\n    }\n\n    // Else return\
    \ all prime factors\n    std::vector<long> factors(primes.size());\n    for (long\
    \ i = 0; i < primes.size(); ++i) {\n        factors[i] = primes[i] ? i : -1;\n\
    \    }\n\n    // Sort the factors based on how many times they appeared in factorization\n\
    \    // To do this, we sort the factors by number of times they appeared in factorization.\n\
    \    std::sort(factors.begin(), factors.end(), [n, factors] (long a, long b) {\n\
    \        return factors[a] < factors[b];\n    });\n\n    return factors;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpgqhe1x62: /tmp/tmpgqhe1x62.cpp:58: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  assert(n % 2 == 0);\n \
    \ std::vector<long> factors;\n  std::vector<int> counter(2);\n  while (n != 1)\
    \ {\n    if (n % 2 == 0) {\n      factors.push_back(2);\n      counter[0]++;\n\
    \    } else {\n      for (int i = 1; i <= counter[1]; i++) {\n        if (n %\
    \ i == 0) {\n          factors.push_back(i);\n          counter[i] = counter[i]\
    \ + 1;\n          break;\n        }\n      }\n      counter[1]++;\n    }\n   \
    \ n = (n - 1) % 2;\n  }\n  return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpjsv8wdwx: /tmp/tmpjsv8wdwx.cpp:37: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    int factors[1000000]\
    \ = {0};\n    long result = 1;\n    long factor = 1;\n    factors[factor]++;\n\
    \    while (n > 1) {\n        result = result * factor + 1;\n        for (int\
    \ i = 2; i <= (n / result); i++) {\n            if (factors[i] == 0) continue;\n\
    \            factors[factor]++;\n            factors[n - result * i - 1]--;\n\
    \            break;\n        }\n        factor++;\n        factors[factor]++;\n\
    \        n /= result;\n    }\n    std::vector<long> ans;\n    for (int i = factor;\
    \ i >= 2; i--) {\n        while (factors[i] == 0) continue;\n        ans.push_back(factors[i]);\n\
    \    }\n    std::sort(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpuyyrppkj: /tmp/tmpuyyrppkj.cpp:39: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Initilize result list\
    \ with zeroes for all factors\n    std::vector<long> f(n+1, 0);\n    // Initilize\
    \ result list with 1 for all integers\n    std::vector<long> f(n+1, 1);\n    //\
    \ Iterate over all numbers from 2 to sqrt(n)\n    for(int i=2; i<=(int)sqrt(n);\
    \ i++) {\n        // If remainder is 0, factor number is 1\n        if(f[i]==0)\
    \ {\n            f[i] = 1;\n            continue;\n        }\n        // If any\
    \ number in f divides i then factor i is prime\n        long j = i;\n        while(j\
    \ > 1) {\n            if(f[j]%j==0)\n                break;\n            j = j/2;\n\
    \        }\n        // If j is 1 then i is prime and factor i is 1\n        if(j==1)\n\
    \            f[i] = 1;\n    }\n    return f;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4bxufxmw.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp4bxufxmw.cpp:16:23: error: redeclaration of \u2018std::vector<long\
    \ int> f\u2019\n   16 |     std::vector<long> f(n+1, 1);\n      |            \
    \           ^\n/tmp/tmp4bxufxmw.cpp:14:23: note: \u2018std::vector<long int> f\u2019\
    \ previously declared here\n   14 |     std::vector<long> f(n+1, 0);\n      |\
    \                       ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factors;\n\
    \  if (n < 2) {\n    return factors;\n  }\n\n  if (n <= 3) {\n    factors.push_back(n);\n\
    \    return factors;\n  }\n\n  std::vector<long> primes;\n  for (long i = 3; i\
    \ <= sqrt(n); i += 2) {\n    if (n % i == 0) {\n      primes.push_back(i);\n \
    \     n = n / i;\n    }\n  }\n\n  // If given integer is divisible by all prime\
    \ factors\n  if (n == 1) {\n    return factors;\n  }\n\n  // If given integer\
    \ is prime itself\n  for (long p : primes) {\n    if (n == p) {\n      factors.push_back(n);\n\
    \      break;\n    }\n  }\n\n  return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp6c3mgmzp: /tmp/tmp6c3mgmzp.cpp:49: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tif (n == 1) {\n\t\treturn\
    \ {};\n\t}\n\tstd::vector<long> factors;\n\twhile (n != 1) {\n\t\tlong current\
    \ = 1;\n\t\twhile (n % current == 0) {\n\t\t\tn = n / current;\n\t\t\tfactors.push_back(current);\n\
    \t\t}\n\t\tcurrent++;\n\t}\n\treturn factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  // Start with square of\
    \ n. Because we already know that n will be prime from factorization.\n  // Since\
    \ square of n will always be less than n. \n  // So we can just use square of\
    \ n to start our factorization.\n  long squareOfN = n*n; \n  long long factorization[squareOfN+1]\
    \ = {1};\n  \n  // For each number from 1 to sqrt(n).\n  for (long long i = 1;\
    \ i <= sqrt(n); ++i){\n    // If square of current number is less than or equal\
    \ than square of n\n    // We can skip this number.\n    if(squareOfN >= squareOfN\
    \ - i*i){\n      continue;\n    }\n    // Find the square root of current number.\n\
    \    long long root = sqrt(n) - i*i;\n    // Find the product of all factors of\
    \ current number.\n    long long product = 1;\n    // Check how many times the\
    \ current number appears in the factorization.\n    for(long long j = 1; j < factorization[root];\
    \ ++j){\n      // If the current number multiplied by all factors\n      // of\
    \ current number == original number\n      // then we can add current number to\
    \ factorization.\n      if(product * root == n){ \n        factorization[root]\
    \ = j;\n        product *= root;\n      }\n    }\n  }\n  return std::vector<long>(factorization,\
    \ factorization + squareOfN+1);\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp0eia9qjc: /tmp/tmp0eia9qjc.cpp:45: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors(2,\
    \ 1);\n    for (long i = 3; i <= n; i = i * 3 + 1) {\n        while (n % i ==\
    \ 0) {\n            factors[factors.size() - 1] += 1;\n            n /= i;\n \
    \       }\n    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpzsmm5o3i: /tmp/tmpzsmm5o3i.cpp:24: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Initialize list of\
    \ factors\n    std::vector<long> factors;\n    // Initialize base cases\n    if\
    \ (n <= 1) {\n        factors.push_back(n);\n        return factors;\n    }\n\
    \    // Initialize list of factors\n    std::vector<long> factors;\n    // Initialize\
    \ base cases\n    if (n <= 2) {\n        factors.push_back(2);\n        factors.push_back(n);\n\
    \        return factors;\n    }\n    // Initialize list of factors\n    std::vector<long>\
    \ factors;\n    // Initialize base cases\n    if (n <= 3) {\n        factors.push_back(3);\n\
    \        factors.push_back(n);\n        return factors;\n    }\n    // Initialize\
    \ list of factors\n    std::vector<long> factors;\n    // Initialize base cases\n\
    \    if (n <= 5) {\n        factors.push_back(5);\n        factors.push_back(n);\n\
    \        return factors;\n    }\n    // Initialize list of factors\n    std::vector<long>\
    \ factors;\n    // Initialize base cases\n    if (n <= 7) {\n        factors.push_back(7);\n\
    \        factors.push_back(n);\n        return factors;\n    }\n    // Initialize\
    \ list of factors\n    std::vector<long> factors;\n    // Initialize base cases\n\
    \    if (n <= 10) {\n        factors.push_back(10);\n        factors.push_back(n);\n\
    \        return factors;\n    }\n    // Initialize list of factors\n    std::vector<long>\
    \ factors;\n    // Initialize base cases\n    if (n <= 20) {\n        factors.push_back(20);\n\
    \        factors.push_back(n);\n        return factors;\n    }\n    // Initialize\
    \ list of factors\n    std::vector<long> factors;\n    // Initialize base cases\n\
    \    if (n <= 40) {\n        factors.push_back(40);\n        factors.push_back(n);\n\
    \        return factors;\n    }\n    // Initialize list of factors\n    std::vector<long>\
    \ factors;\n    // Initialize base cases\n    if (n <= 80) {\n        factors.push_back(80);\n\
    \        factors.push_back(n);\n        return factors;\n    }\n    // Initialize\
    \ list of factors\n    std::vector<long> factors;\n    // Initialize base cases\n\
    \    if (n <= 100) {\n        factors.push_back(100);\n        factors.push_back(n);\n\
    \        return factors;\n    }\n    // Initialize list of factors\n    std::vector<long>\
    \ factors;\n    // Initialize base cases\n    if (n <= 200) {\n        factors.push_back(200);\n\
    \        factors.push_back(n);\n        return factors;\n    }\n    // Initialize\
    \ list of factors\n    std::vector<long> factors;\n    // Initialize base cases\n\
    \    if (n <= 500) {\n        factors.push_back(500);\n        factors.push_back(n);\n\
    \        return factors;\n    }\n\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfbc167rf.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpfbc167rf.cpp:21:23: error: redeclaration of \u2018std::vector<long\
    \ int> factors\u2019\n   21 |     std::vector<long> factors;\n      |        \
    \               ^~~~~~~\n/tmp/tmpfbc167rf.cpp:14:23: note: \u2018std::vector<long\
    \ int> factors\u2019 previously declared here\n   14 |     std::vector<long> factors;\n\
    \      |                       ^~~~~~~\n/tmp/tmpfbc167rf.cpp:29:23: error: redeclaration\
    \ of \u2018std::vector<long int> factors\u2019\n   29 |     std::vector<long>\
    \ factors;\n      |                       ^~~~~~~\n/tmp/tmpfbc167rf.cpp:14:23:\
    \ note: \u2018std::vector<long int> factors\u2019 previously declared here\n \
    \  14 |     std::vector<long> factors;\n      |                       ^~~~~~~\n\
    /tmp/tmpfbc167rf.cpp:37:23: error: redeclaration of \u2018std::vector<long int>\
    \ factors\u2019\n   37 |     std::vector<long> factors;\n      |             \
    \          ^~~~~~~\n/tmp/tmpfbc167rf.cpp:14:23: note: \u2018std::vector<long int>\
    \ factors\u2019 previously declared here\n   14 |     std::vector<long> factors;\n\
    \      |                       ^~~~~~~\n/tmp/tmpfbc167rf.cpp:45:23: error: redeclaration\
    \ of \u2018std::vector<long int> factors\u2019\n   45 |     std::vector<long>\
    \ factors;\n      |                       ^~~~~~~\n/tmp/tmpfbc167rf.cpp:14:23:\
    \ note: \u2018std::vector<long int> factors\u2019 previously declared here\n \
    \  14 |     std::vector<long> factors;\n      |                       ^~~~~~~\n\
    /tmp/tmpfbc167rf.cpp:53:23: error: redeclaration of \u2018std::vector<long int>\
    \ factors\u2019\n   53 |     std::vector<long> factors;\n      |             \
    \          ^~~~~~~\n/tmp/tmpfbc167rf.cpp:14:23: note: \u2018std::vector<long int>\
    \ factors\u2019 previously declared here\n   14 |     std::vector<long> factors;\n\
    \      |                       ^~~~~~~\n/tmp/tmpfbc167rf.cpp:61:23: error: redeclaration\
    \ of \u2018std::vector<long int> factors\u2019\n   61 |     std::vector<long>\
    \ factors;\n      |                       ^~~~~~~\n/tmp/tmpfbc167rf.cpp:14:23:\
    \ note: \u2018std::vector<long int> factors\u2019 previously declared here\n \
    \  14 |     std::vector<long> factors;\n      |                       ^~~"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tstd::vector<long> result;\n\
    \tlong factors = n;\n\tlong factor = 1;\n\tlong max_factor = 1;\n\tfor (; factors\
    \ > 1; factors = factors / factor) {\n\t\tif (n % factor == 0) {\n\t\t\tfactor++;\n\
    \t\t\tmax_factor = factor;\n\t\t}\n\t}\n\tif (max_factor == 1)\n\t\treturn result;\n\
    \tlong div = max_factor;\n\twhile (true) {\n\t\tif (n % div == 0)\n\t\t\tresult.push_back(div);\n\
    \t\tif (div > 2) {\n\t\t\tdiv--;\n\t\t\tn /= div;\n\t\t} else {\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxftf_43t: /tmp/tmpxftf_43t.cpp:41: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> res(2);\n\
    \    for (long i = 2; i*i <= n; ++i) {\n        while (n % i == 0) {\n       \
    \     n /= i;\n            res[res.length()-1] = i;\n        }\n    }\n    if\
    \ (n != 1)\n        res[res.length()-1] = n;\n    return res;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmptem1hkqa.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmptem1hkqa.cpp:17:21: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018length\u2019\n   17 |             res[res.length()-1]\
    \ = i;\n      |                     ^~~~~~\n/tmp/tmptem1hkqa.cpp:21:17: error:\
    \ \u2018class std::vector<long int>\u2019 has no member named \u2018length\u2019\
    \n   21 |         res[res.length()-1] = n;\n      |                 ^~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorized(n\
    \ - 1, 0);\n    std::vector<long> primes(n, 2);\n\n    for (long i = 0; i < n;\
    \ i++) {\n        if (primes[i] <= factorized[i]) {\n            factorized[i]++;\n\
    \        } else {\n            std::swap(factorized[i], primes[i]);\n        }\n\
    \    }\n\n    for (long i = primes.size() - 1; i >= 0; i--) {\n        while (factorized[i]\
    \ == 0) {\n            factorized[i] = primes[i] + 1;\n        }\n    }\n\n  \
    \  for (long i = 0; i < factorized.size(); i++) {\n        factorized[i] *= i;\n\
    \    }\n\n    return factorized;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpcj_nbe4h: /tmp/tmpcj_nbe4h.cpp:38: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    if (n <= 1) {\n        return factors;\n    }\n    long d = 2;\n    while\
    \ (d * d <= n) {\n        // While d is smaller than the given number, divide\
    \ each of its factors by d\n        while (n % d == 0) {\n            n /= d;\n\
    \            factors.push_back(d);\n        }\n        d++;\n    }\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjvjfnqog: /tmp/tmpjvjfnqog.cpp:30: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\tif (n <= 1) return std::vector<long>(1,\
    \ n);\n\tstd::vector<long> factors(0);\n\tlong max_num = 0;\n\tlong current_num\
    \ = 1;\n\t// Find the largest factor for current number in factorization\n\tfor\
    \ (long i = 1; i < n; i++) {\n\t\tlong m = n;\n\t\twhile (m % i == 0) {\n\t\t\t\
    m /= i;\n\t\t\tfactors.push_back(i);\n\t\t}\n\t\tif (m < current_num) {\n\t\t\t\
    factors.push_back(current_num);\n\t\t\tcurrent_num = m;\n\t\t}\n\t}\n\tif (current_num\
    \ > max_num) {\n\t\tfactors.push_back(current_num);\n\t}\n\treturn factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    long factorization[]\
    \ = {1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199};\n    long product = 1;\n\
    \    std::vector<long> factors;\n    factors.resize(factorization[0]);\n    //\
    \ Sieve of Eratosthenes\n    for (int i = 1; i < factorization[factorization[0]-1];\
    \ i++) {\n        long curr = (i*factorization[factorization[0]-1]) % product;\n\
    \        while (curr < n) {\n            factors[factorization[curr]] += 1;\n\
    \            curr += factorization[curr];\n        }\n    }\n    // Sort the factors\n\
    \    sort(factors.begin(), factors.end());\n    // Return the factors\n    return\
    \ factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpfeq91toe: /tmp/tmpfeq91toe.cpp:32: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Initialize primes\
    \ to all primes less than n\n    std::vector<long> primes(n);\n    for (long i\
    \ = 2; i * i <= n; ++i) {\n        if (primes[i] == 0) {\n            primes[i]\
    \ = i;\n            while (n % i == 0) {\n                primes[i] = 0;\n   \
    \             n /= i;\n            }\n        }\n    }\n\n    std::vector<long>\
    \ factorization(n);\n    long product = 1;\n    for (long i = 0; i < n; ++i) {\n\
    \        long divisor = primes[i];\n        while (n % divisor == 0) {\n     \
    \       factorization[i] = divisor;\n            n /= divisor;\n            product\
    \ *= divisor;\n        }\n    }\n    factorization.push_back(n);\n    factorization.push_back(product);\n\
    \    return factorization;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> result;\n\
    \  std::vector<bool> was(2 * n + 1, false);\n  long factor = 2;\n  while (n >=\
    \ factor) {\n    if (was[factor]) factor++;\n    else if (n % factor == 0) result.push_back(factor);\n\
    \    while (n % factor == 0) n /= factor;\n    factor++;\n  }\n  if (n != 1) result.push_back(n);\n\
    \  return result;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpjv2disu_: /tmp/tmpjv2disu_.cpp:28: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n <= 1) return std::vector<long>{};\n\
    \    std::vector< std::vector<long> > factors;\n    std::vector< std::vector<long>\
    \ >::iterator it;\n    // find factors and sort them in increasing order\n   \
    \ for (it = factors.begin(); it != factors.end(); it++) {\n        std::vector<long>\
    \ temp = *it;\n        long n = 1;\n        for (std::vector<long>::iterator it\
    \ = temp.begin(); it != temp.end(); it++) {\n            long temp = *it;\n  \
    \          if (temp > 1) {\n                n += temp;\n            } else {\n\
    \                temp.push_back(n);\n                temp.clear();\n         \
    \       factors.push_back(temp);\n            }\n        }\n    }\n    // if factors\
    \ list is empty, return empty list\n    if (factors.empty()) return std::vector<long>{};\n\
    \    std::vector<long> ans;\n    long current = 1;\n    for (std::vector<std::vector<long>\
    \ >::iterator it = factors.begin(); it != factors.end(); it++) {\n        for\
    \ (std::vector<long>::iterator it = it->begin(); it != it->end(); it++) {\n  \
    \          if (current * it == n) {\n                ans.push_back(*it);\n   \
    \             break;\n            }\n        }\n    }\n    ans.push_back(1);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmper45a_62.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmper45a_62.cpp:25:22: error: request for member \u2018push_back\u2019\
    \ in \u2018temp\u2019, which is of non-class type \u2018long int\u2019\n   25\
    \ |                 temp.push_back(n);\n      |                      ^~~~~~~~~\n\
    /tmp/tmper45a_62.cpp:26:22: error: request for member \u2018clear\u2019 in \u2018\
    temp\u2019, which is of non-class type \u2018long int\u2019\n   26 |         \
    \        temp.clear();\n      |                      ^~~~~\n/tmp/tmper45a_62.cpp:27:39:\
    \ error: no matching function for call to \u2018std::vector<std::vector<long int>\
    \ >::push_back(long int&)\u2019\n   27 |                 factors.push_back(temp);\n\
    \      |                                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmper45a_62.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = std::vector<long int>; _Alloc = std::allocator<std::vector<long\
    \ int> >; std::vector<_Tp, _Alloc>::value_type = std::vector<long int>]\u2019\n\
    \ 1184 |       push_back(const value_type& __x)\n      |       ^~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1184:35:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    const value_type&\u2019 {aka \u2018const std::vector<long int>&\u2019}\n 1184\
    \ |       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = std::vector<long int>; _Alloc = std::allocator<std::vector<long\
    \ int> >; std::vector<_Tp, _Alloc>::value_type = std::vector<long int>]\u2019\n\
    \ 1200 |       push_back(value_type&& __x)\n     "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> res;\n\
    \    for(long i=2; i<=n/2;i++) {\n        while(n%i==0) {\n            res.push_back(i);\n\
    \            n = n/i;\n        }\n    }\n    res.push_back(n);\n    return res;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpby9azbf_: /tmp/tmpby9azbf_.cpp:26: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> res;\n\
    \    std::sort(begin(factorization), end(factorization));\n    long cur = factorization[0];\n\
    \    long cnt = 0;\n    while (cur <= n) {\n        while (factorization.find(cur)\
    \ != end(factorization)) {\n            res.push_back(cur);\n            cnt++;\n\
    \            cur /= factorization[factorization.find(cur)];\n        }\n     \
    \   if (cnt != 0) {\n            factorization.push_back(cnt);\n            cnt\
    \ = 1;\n        } else {\n            factorization.push_back(1);\n          \
    \  cnt = 0;\n        }\n    }\n    for (long i = 0; i < factorization.size();\
    \ i++) {\n        factorization[i] *= factorization[i + 1];\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp2hb64lp9.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp2hb64lp9.cpp:14:21: error: \u2018factorization\u2019 was\
    \ not declared in this scope; did you mean \u2018factorize\u2019?\n   14 |   \
    \  std::sort(begin(factorization), end(factorization));\n      |             \
    \        ^~~~~~~~~~~~~\n      |                     factorize\n/tmp/tmp2hb64lp9.cpp:14:15:\
    \ error: \u2018begin\u2019 was not declared in this scope; did you mean \u2018\
    std::begin\u2019?\n   14 |     std::sort(begin(factorization), end(factorization));\n\
    \      |               ^~~~~\n      |               std::begin\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp2hb64lp9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1224:5:\
    \ note: \u2018std::begin\u2019 declared here\n 1224 |     begin(const valarray<_Tp>&\
    \ __va)\n      |     ^~~~~\n/tmp/tmp2hb64lp9.cpp:14:37: error: \u2018end\u2019\
    \ was not declared in this scope; did you mean \u2018std::end\u2019?\n   14 |\
    \     std::sort(begin(factorization), end(factorization));\n      |          \
    \                           ^~~\n      |                                     std::end\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp2hb64lp9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:1244:5:\
    \ note: \u2018std::end\u2019 declared here\n 1244 |     end(const valarray<_Tp>&\
    \ __va)\n      |     ^~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization;\n\
    \    long m = n;\n    long max_divisor = n;\n    for (long i = 2; i <= max_divisor;\
    \ i++) {\n        while (m % i == 0) {\n            m /= i;\n            factorization.push_back(i);\n\
    \        }\n    }\n    if (m > 1)\n        factorization.push_back(m);\n    return\
    \ factorization;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n == 1)\n       \
    \ return std::vector<long>(1, 1);\n    std::vector<long> factors;\n    std::vector<long>\
    \ prefactors(n);\n    prefactors[0] = 1;\n    while (n > 1) {\n        for (long\
    \ i = 2; i <= n / 2; ++i) {\n            if (prefactors[i] == 0)\n           \
    \     continue;\n            if (n % i == 0) {\n                factors.push_back(i);\n\
    \                prefactors[i]--;\n            }\n        }\n        n--;\n  \
    \  }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpernlicam: /tmp/tmpernlicam.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factors;\n\
    \  std::vector<long> prime_factorization;\n  for (long i = 2; i <= sqrt(n); i++)\
    \ {\n    // If number is not prime\n    if (n % i == 0) {\n      // Check whether\
    \ it has already been appended to the factors vector\n      bool is_exist = false;\n\
    \      for (long j = 0; j < factors.size(); j++) {\n        if (factors[j] ==\
    \ i) {\n          is_exist = true;\n          break;\n        }\n      }\n   \
    \   // If it has not yet been appended to the vector, append it\n      if (!is_exist)\
    \ {\n        factors.push_back(i);\n      }\n    }\n  }\n  // Get the prime factorization\
    \ of the given number\n  for (long i = 0; i < factors.size(); i++) {\n    long\
    \ num_factor = 1;\n    for (long j = 0; j < factors.size(); j++) {\n      // If\
    \ current factor is smaller than previous one, multiply them together\n      if\
    \ (factors[j] < factors[i]) {\n        num_factor *= factors[j];\n      }\n  \
    \  }\n    prime_factorization.push_back(num_factor);\n  }\n  return prime_factorization;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpwy_6pj13: /tmp/tmpwy_6pj13.cpp:47: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    factors.push_back(1);\n    for (long i = 2; i <= n; i++) {\n        while\
    \ ((n % i) == 0) {\n            factors.push_back(i);\n            n /= i;\n \
    \       }\n    }\n    if (n != 1) {\n        factors.push_back(n);\n    }\n  \
    \  return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp5xt7gxt9: /tmp/tmp5xt7gxt9.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factorized(n,\
    \ 0);\n  for (long i = 2; i <= n; ++i) {\n    while (n % i == 0) {\n      factorized[i]\
    \ += 1;\n      n /= i;\n    }\n  }\n  std::sort(factorized.begin(), factorized.end());\n\
    \  return factorized;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpx7xdyzkz: /tmp/tmpx7xdyzkz.cpp:25: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> v;\n\
    \    if (n == 1) return v;\n    long l = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        while (n % i == 0) {\n            v.push_back(i);\n            n\
    \ /= i;\n        }\n        l += 1;\n    }\n    v.push_back(l);\n    if (n > 1)\
    \ v.push_back(1);\n    return v;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp8y1o_pfa: /tmp/tmp8y1o_pfa.cpp:29: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Factorization algorithm\
    \ works in O(log(log(n))) time\n    std::vector<long> factors;\n    // Initialize\
    \ all factors upto the square root\n    long limit = (long double) sqrt(n);\n\
    \    for (long i = 1; i != limit; i++) {\n        long x = n / i;\n        if\
    \ (i % x == 0) {\n            factors.push_back(i);\n            factors.push_back(x\
    \ * i);\n        }\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmphg03mpxf: /tmp/tmphg03mpxf.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization(n);\n\
    \    long long i = 2;\n    while (factorization[i] < n) {\n        while (n %\
    \ i == 0) {\n            n /= i;\n            factorization[i]++;\n        }\n\
    \        i++;\n    }\n    factorization[n] = 1;\n    return factorization;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpnyx6q4mi: /tmp/tmpnyx6q4mi.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorized(1,\
    \ 1);\n    // Initialize factorized vector with initial value 1\n    for (long\
    \ i = 0; i < factorized.size(); i++)\n        factorized[i] = 1;\n    for (long\
    \ i = 2; i <= sqrt(n); i++) {\n        while (n % i == 0) {\n            factorized[i\
    \ / 2]++;\n            n /= i;\n        }\n    }\n    return factorized;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmphdhi288w: /tmp/tmphdhi288w.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factor(n);\n\
    \    long i = 3;\n    long counter = 1;\n    while ((i * i) <= n) {\n        while\
    \ (n % i == 0) {\n            factor[counter++] = i;\n            n /= i;\n  \
    \      }\n        i += 2;\n    }\n    return factor;\n}\nint main() {\n    auto\
    \ candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpkk4obq__: /tmp/tmpkk4obq__.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    assert(n >= 2);\n    // Find all prime factors of n\n    long i = 2;\n  \
    \  while (i * i <= n) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n        ++i;\n    }\n    if (n != 1) factors.push_back(n);\n\
    \    return factors;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorized;\n\
    \    long largest = n;\n    for (int i = 2; i <= largest; i++) {\n        while\
    \ (n % i == 0) {\n            factorized.push_back(i);\n            n /= i;\n\
    \        }\n        if (n != 1) {\n            factorized.push_back(n);\n    \
    \    }\n    }\n    return factorized;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpw6h8owrd: /tmp/tmpw6h8owrd.cpp:31: int main(): Assertion `candidate((57))\
    \ == (std::vector<long>({3, 19}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> res;\n\
    \    long m = n;\n    long a = 2;\n    while (m != 1) {\n        while (m%a ==\
    \ 0) {\n            res.push_back(a);\n            m /= a;\n        }\n      \
    \  a++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n <= 1) {\n     \
    \   return {};\n    }\n    std::vector<long> f(n + 1);\n    f[0] = 2;\n    for\
    \ (long i = 1; i <= n; i++) {\n        long cur = i;\n        for (long j = n;\
    \ j > 1; j--) {\n            if (cur % j == 0) {\n                cur = j;\n \
    \           }\n        }\n        f[i] = cur;\n    }\n    return f;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpxxyu_ym9: /tmp/tmpxxyu_ym9.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long max_factor = 1;\n    long min_factor = 2;\n    for (long i = 3; i <=\
    \ n; i += 2) {\n        while (n % i == 0) {\n            factors.push_back(i);\n\
    \            n = n / i;\n        }\n    }\n    for (long i = 2; i <= n; i++) {\n\
    \        while (n % i == 0) {\n            factors.push_back(i);\n           \
    \ n /= i;\n        }\n    }\n    for (int i = 0; i < factors.size(); i++) {\n\
    \        long tmp = factors.at(i);\n        for (int j = 0; j < factors.size();\
    \ j++) {\n            if (factors.at(j) == tmp) factors.at(j) *= factors.at(i);\n\
    \        }\n    }\n    factors.push_back(1);\n    for (int i = 0; i <= factors.size();\
    \ i++) {\n        factors.at(i) *= max_factor;\n        if (factors.at(i) > max_factor)\
    \ max_factor = factors.at(i);\n    }\n    for (int i = 0; i < factors.size();\
    \ i++) {\n        factors.at(i) *= min_factor;\n        if (factors.at(i) < min_factor)\
    \ min_factor = factors.at(i);\n    }\n    std::vector<long> result(factors.size());\n\
    \    for (int i = 0; i < factors.size(); i++) {\n        result[i] = factors.at(i);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 2) >= this->size() (which is 2)\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    // Find largest factor of n.\n    long largest = n; //2\n    while (n%2 ==\
    \ 0)\n        n/=2;\n    // Find all factors of n\n    for (long i = 3; i <= largest;\
    \ i += 2)\n        if (n%i == 0) {\n            factors.push_back(i);\n      \
    \      n = n/i;\n        }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp_zi245vf: /tmp/tmp_zi245vf.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::stack<long> factors;\n\
    \    long currentFactor = n;\n    long product = currentFactor;\n    long factorCount\
    \ = 1;\n    while (factor != 1) {\n        if (product % factor == 0) {\n    \
    \        factorCount = factorCount;\n            while (product % factor == 0)\
    \ {\n                product /= factor;\n                factorCount++;\n    \
    \        }\n            factors.push_back(factor);\n        }\n        factor++;\n\
    \    }\n    std::reverse(factors.begin(), factors.end());\n    return {factors.begin(),\
    \ factors.end()};\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmprwwjiu1f.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmprwwjiu1f.cpp:17:12: error: \u2018factor\u2019 was not declared\
    \ in this scope; did you mean \u2018factors\u2019?\n   17 |     while (factor\
    \ != 1) {\n      |            ^~~~~~\n      |            factors\n/tmp/tmprwwjiu1f.cpp:24:21:\
    \ error: \u2018class std::stack<long int>\u2019 has no member named \u2018push_back\u2019\
    \n   24 |             factors.push_back(factor);\n      |                    \
    \ ^~~~~~~~~\n/tmp/tmprwwjiu1f.cpp:28:26: error: \u2018class std::stack<long int>\u2019\
    \ has no member named \u2018begin\u2019\n   28 |     std::reverse(factors.begin(),\
    \ factors.end());\n      |                          ^~~~~\n/tmp/tmprwwjiu1f.cpp:28:43:\
    \ error: \u2018class std::stack<long int>\u2019 has no member named \u2018end\u2019\
    \n   28 |     std::reverse(factors.begin(), factors.end());\n      |         \
    \                                  ^~~\n/tmp/tmprwwjiu1f.cpp:29:21: error: \u2018\
    class std::stack<long int>\u2019 has no member named \u2018begin\u2019\n   29\
    \ |     return {factors.begin(), factors.end()};\n      |                    \
    \ ^~~~~\n/tmp/tmprwwjiu1f.cpp:29:38: error: \u2018class std::stack<long int>\u2019\
    \ has no member named \u2018end\u2019\n   29 |     return {factors.begin(), factors.end()};\n\
    \      |                                      ^~~\n/tmp/tmprwwjiu1f.cpp:29:43:\
    \ error: could not convert \u2018{<expression error>, <expression error>}\u2019\
    \ from \u2018<brace-enclosed initializer list>\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   29 |     return {factors.begin(), factors.end()};\n      |  \
    \                                         ^\n      |                         \
    \                  |\n      |                                           <brace-enclosed\
    \ initializer list>\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long num = n;\n    int i = 0;\n    long k = 2, j = 2;\n    while (j < num\
    \ / 2)\n        while (num % (k * j) == 0) {\n            factors.push_back(j);\n\
    \            j = k + 1;\n        }\n        k = j;\n        i++;\n    return factors;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmp96dz425c: /tmp/tmp96dz425c.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> result;\n\
    \  if (n <= 1)\n    return result;\n  std::vector<long> factor(n);\n  std::iota(factor.begin(),\
    \ factor.end(), 2);\n  int pos = 0;\n  for (auto i : factor) {\n    while (n %\
    \ i == 0)\n      factor[pos++] = i;\n    n /= i;\n  }\n  for (; pos != 0; pos--)\n\
    \    factor.push_back(1);\n  if (n != 1)\n    factor.push_back(n);\n  while (n\
    \ != 1) {\n    int idx = 0;\n    for (auto i : factor) {\n      if (n % i == 0)\
    \ {\n        factor[idx] = i;\n        n /= i;\n        break;\n      }\n    \
    \  idx++;\n    }\n  }\n  // std::cout << \"Factors of \" << n << \" : \" << factor\
    \ << std::endl;\n  result.insert(result.end(), factor.begin(), factor.end());\n\
    \  return result;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: -11
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization;\n\
    \    if (n == 1)\n        return factorization;\n    std::vector<long> primes;\n\
    \    primes.push_back(n);\n    for (int i = 2; i * i <= n; i++)\n        if (primes.count(i)\
    \ == 0) {\n            primes.push_back(i);\n            long l = n;\n       \
    \     for (long j = i * i; j < n; j += i) {\n                if (n % (j - i) ==\
    \ 0)\n                    l++;\n                else\n                    break;\n\
    \            }\n            factorization.push_back(l);\n        }\n    return\
    \ factorization;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmptn510f8n.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmptn510f8n.cpp:19:20: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018count\u2019\n   19 |         if (primes.count(i)\
    \ == 0) {\n      |                    ^~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> factors;\
    \ // Vector to store factors\n  // Fill vector with 1\n  for (long i = 1; i <=\
    \ n; i++) {\n    factors.push_back(i);\n  }\n  // To find factors starting from\
    \ 2\n  for (long i = 2; i * i < n; i++) {\n    while (n % i == 0) {\n      factors.push_back(i);\
    \ // Add to vector only when factor is found\n      n /= i; // Make n divisible\
    \ by i\n    }\n  }\n  return factors; // Return vector of factors\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpg4g1uupr: /tmp/tmpg4g1uupr.cpp:29: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n != 0);\n   \
    \ // Use a set so we don't have to check every number up to sqrt(n)\n    std::set<long>\
    \ factors; // set of factors we've already factored\n    // Initialize result\n\
    \    std::vector<long> factorized(n);\n    // The input number is divided into\
    \ primes 2..(n-1)\n    // If no prime factors found, return input number\n   \
    \ if (factors.count(n) == 0) return factorized;\n\n    for (long i = 1; i < n;\
    \ ++i) {\n        if (factors.count(i) == 0) {\n            long product = 1;\n\
    \            for (long j = i; j * i <= n; ++j) product *= j;\n            // If\
    \ n is not divisible by any prime, add it to factors\n            if (product\
    \ % n == 0) {\n                factors.insert(i);\n                factorized\
    \ = factorized.insert(factorized.end(), product);\n            }\n        }\n\
    \    }\n    return factorized;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpct9j4brd.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmpct9j4brd.cpp:29:73: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019})\n   29 |                 factorized = factorized.insert(factorized.end(),\
    \ product);\n      |                                                         \
    \                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:72,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpct9j4brd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/vector.tcc:199:42: note:\
    \   no known conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018const std::vector<long int>&\u2019\n  199 |     operator=(const vector<_Tp,\
    \ _Alloc>& __x)\n      |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpct9j4brd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:706:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(std::vector<_Tp,\
    \ _Alloc>&&) [with _Tp = long int; _Alloc = std::allocator<long int>]\u2019\n\
    \  706 |   "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // n is always equal\
    \ to product of all factors\n    // e.g. factorize(70) returns [2, 5, 7]\n   \
    \ // e.g. factorize(8) returns [2, 2, 2]\n\n    if (n == 1) return std::vector<long>{1};\n\
    \    if (n == 2) return std::vector<long>{2};\n\n    std::vector<long> retVal;\n\
    \    // Factor of each digit in the number\n    std::set<long> factors;\n    //\
    \ Add number to factors\n    for (long i = 2; i < n; ++i) {\n        factors.insert(i);\n\
    \    }\n\n    for (auto i : factors) {\n        // For each digit, multiply number\
    \ by all factors of the digit\n        long currFactor = 1;\n        for (auto\
    \ j : factors) {\n            currFactor *= j;\n        }\n\n        // Check\
    \ if current factor is greater than n\n        if (currFactor > n) {\n       \
    \     // If yes, break out of the loop\n            break;\n        }\n\n    \
    \    // If currFactor is not greater than n, then add the current factor\n   \
    \     retVal.push_back(currFactor);\n    }\n\n    return retVal;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpo8vigbz1: /tmp/tmpo8vigbz1.cpp:50: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> ans;\n\
    \    long f = 2;\n    for(;; f++) {\n        if(n%f == 0) {\n            ans.push_back(f);\n\
    \            n /= f;\n        }\n        else if(f*f > n) {\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpkvnv4ym2: /tmp/tmpkvnv4ym2.cpp:29: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factorization;\n\
    \    // List of prime factors\n    std::vector<int> primeFactorization;\n    //\
    \ Count of how many times each prime factor appears\n    std::vector<int> factorCount;\n\
    \    factorization.resize(n);\n\n    // Generate list of prime factors\n    std::vector<int>\
    \ primeFactors;\n    for (long i = 0; i < (1L << n); ++i)\n        if (std::find(primeFactorization.begin(),\
    \ primeFactorization.end(), i) == primeFactorization.end())\n        {\n     \
    \       primeFactors.push_back(i);\n            std::copy(std::begin(primeFactorization),\
    \ std::end(primeFactorization), std::back_inserter(primeFactorization));\n   \
    \     }\n    std::sort(std::begin(primeFactorization), std::end(primeFactorization));\n\
    \n    // Count of how many times each prime factor appears\n    for (long i =\
    \ 0; i < (1L << n); ++i)\n    {\n        factorCount.push_back(0);\n    }\n\n\
    \    // Generate factorization\n    for (long i = 0; i < (1L << n); ++i)\n   \
    \ {\n        int factor = 1;\n        for (long j = 0; j < primeFactors.size();\
    \ ++j)\n        {\n            bool isPrime = true;\n            for (int k =\
    \ 0; k < 3; k++)\n            {\n                if ((i >> j) % primeFactors[j]\
    \ == 0)\n                {\n                    isPrime = false;\n           \
    \         break;\n                }\n            }\n            if (isPrime)\n\
    \            {\n                factor *= primeFactors[j];\n                ++factorCount[primeFactors[j]];\n\
    \            }\n        }\n        factorization.push_back(factor);\n    }\n\n\
    \    return factorization;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n != 1);\n   \
    \ int res = 0;\n    std::vector<long> factor;\n    long num = n;\n    long rem\
    \ = num;\n    while (num > 2) {\n        long d = num / 2;\n        if (n % d\
    \ == 0) {\n            rem += d;\n            num -= d;\n            factor.push_back(d\
    \ * (rem/d));\n        }\n    }\n    if (num == 1) {\n        factor.push_back(1);\n\
    \    }\n    return factor;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpu107zljd: /tmp/tmpu107zljd.cpp:33: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors(1,\
    \ n);\n    long factor = 2;\n    while (factor <= n) {\n        while (n % factor\
    \ == 0) {\n            factors[factors-1] += 1;\n            n /= factor;\n  \
    \      }\n        factor++;\n    }\n    return factors;\n}\nint main() {\n   \
    \ auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ogeamyx.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp1ogeamyx.cpp:17:28: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   17 |             factors[factors-1] += 1;\n      |                     ~~~~~~~^~\n\
    \      |                     |       |\n      |                     |       int\n\
    \      |                     std::vector<long int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp1ogeamyx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp1ogeamyx.cpp:17:29:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   17 |             factors[factors-1] += 1;\n      |                      \
    \       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n%2==0 && \"n\
    \ is not an odd number\");\n    // Store all factors into the vector list\n  \
    \  std::vector<long> list;\n    int i=2;\n    while(i*i <= n) {\n        if (n%i==0)\
    \ {\n            list.push_back(i);\n            n /= i;\n            i += 2;\n\
    \        }\n        else {\n            i++;\n        }\n    }\n    // Return\
    \ list with duplicates\n    std::vector<long> temp(list);\n    std::sort(temp.begin(),\
    \ temp.end());\n    std::vector<long> result(list);\n    for(auto x: temp) {\n\
    \        auto itr=std::find(result.begin(), result.end(), x);\n        if(itr\
    \ == result.end()) result.push_back(x);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpcqbtaqp1: /tmp/tmpcqbtaqp1.cpp:39: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> ans;\n\
    \    long f1 = 1;\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (f1 %\
    \ i == 0) {\n            for (long j = i; j <= n; j *= i) {\n                ans.push_back(j);\n\
    \            }\n            return ans;\n        }\n        f1 *= i;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpw2b64gxl: /tmp/tmpw2b64gxl.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Make array of factors\
    \ (size should be power of 2)\n    std::vector<long> factors(1 << n, 0);\n   \
    \ // Number of factors\n    long numOfFactors = 0;\n    while (true) {\n     \
    \   // Find smallest number that divides given number\n        long smallestFactor\
    \ = 1;\n        for (size_t i = 0; i < factors.size(); i++) {\n            if\
    \ (smallestFactor % 2 != 0) {\n                if (n / smallestFactor == 1) {\n\
    \                    // Found a factor\n                    factors[i] = smallestFactor;\n\
    \                    numOfFactors++;\n                    // Exit this loop since\
    \ there is no point to continue dividing if factors array is full\n          \
    \          break;\n                }\n            }\n            smallestFactor\
    \ /= 2;\n        }\n        // If no more factors found, return empty array (empty\
    \ array is also a factorization of a number)\n        if (numOfFactors == 0) {\n\
    \            return factors;\n        }\n        // Update array if number divided\
    \ by one of the factors\n        while (n % factors[factors.size() - 1] == 0)\
    \ {\n            factors[--factors.size()] = factors[factors.size() - 1] + 1;\n\
    \        }\n        // Update factorization\n        n = n / factors[factors.size()\
    \ - 1];\n    }\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp6_8dhh4q.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp6_8dhh4q.cpp:38:36: error: lvalue required as decrement\
    \ operand\n   38 |             factors[--factors.size()] = factors[factors.size()\
    \ - 1] + 1;\n      |                                    ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    long product = n;\n    long currFactor = 1;\n    // Fill factors array\n\
    \    while (n) {\n        long val = product / currFactor;\n        product -=\
    \ val * currFactor;\n        factors.push_back(val);\n        currFactor++;\n\
    \        n--;\n    }\n    return factors;\n}\nint main() {\n    auto candidate\
    \ = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp4ol8g74x: /tmp/tmp4ol8g74x.cpp:28: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Initialize list of\
    \ factors.\n    std::vector<long> factors(1, 1);\n    int count = 0, product =\
    \ 1;\n    while (n > 1) {\n        // Increment counter\n        count++;\n  \
    \      // Set next product of factors.\n        product = product * factors[0];\n\
    \        // Check if factor is prime\n        if (n % product) {\n           \
    \ // Update list of factors.\n            factors[0] = factors[1];\n         \
    \   factors[1] = product;\n            // Reset counter.\n            count =\
    \ 1;\n        } else {\n            // If no factor is found, reset count.\n \
    \           count = 1;\n            // Set next product of factors.\n        \
    \    product = product;\n        }\n        // Update n.\n        n = n / factors[0];\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors(n);\n\
    \    long d = n;\n    for (long i = 2; i < d; i++) {\n        if (d % i == 0)\
    \ {\n            while (d % i == 0) {\n                d /= i;\n             \
    \   factors[factors.size() - 1] *= i;\n            }\n        }\n    }\n    std::vector<long>::iterator\
    \ it;\n    for (it = factors.begin(); it != factors.end(); ++it)\n        if ((*it)\
    \ != 0)\n            assert(*it > 0);\n    return factors;\n}\nint main() {\n\
    \    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpn8yp8xd_: /tmp/tmpn8yp8xd_.cpp:31: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n >= 2);\n   \
    \ std::vector<long> factors(n, 1);\n    std::vector<long>::iterator it;\n    for\
    \ (it = factors.begin(); *it <= n; it++) {\n        while (n % *it == 0) {\n \
    \           ++*it;\n        }\n    }\n    if (n > 2) {\n        while (n > 1)\
    \ {\n            std::vector<long>::iterator it = factors.begin();\n         \
    \   do {\n                long temp = *it;\n                *it = 1;\n       \
    \         n = (n / temp);\n            } while (n > 1);\n            it = ++factors.begin();\n\
    \            for (; *it <= n; it++) {\n                while (n % *it == 0) {\n\
    \                    ++*it;\n                }\n            }\n        }\n   \
    \ }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n \
    \   assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> factors;\n\
    \    if (n == 1) return factors;\n\n    long sq = sqrt(n);\n    long sq2 = sq;\n\
    \    long p = 2;\n    long max = 2;\n    long cnt = 0;\n    while (sq > 1) {\n\
    \        long m = 2 * p * sq;\n        if (m <= n) {\n            sq -= m;\n \
    \           cnt += 1;\n        }\n        if (sq2 == sq && sq % 2 == 0) {\n  \
    \          max *= 2;\n            sq2 -= 2;\n        } else {\n            max\
    \ *= p;\n            sq2 += p;\n        }\n        p++;\n    }\n\n    for (long\
    \ i = 1; i <= max; i++)\n        if (n % i == 0) {\n            factors.push_back(i);\n\
    \            n /= i;\n        }\n    if (n > 1) {\n        factors.push_back(n);\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpya8o2fth: /tmp/tmpya8o2fth.cpp:49: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> result;\n\
    \  // Loop until you find a factor\n  for (long i = 2; i <= n / i; i++) {\n  \
    \  // If this factor is smaller than the number to be divided or we found a factor\
    \ before\n    // the number to be divided, then keep dividing it and storing the\
    \ factors.\n    while (n % i == 0 || n / i / i == i) {\n      result.push_back(i);\n\
    \      // If the number to be divided is not a factor (because all its factors\
    \ are less than or\n      // equal to this number) then increase number to be\
    \ divided by this factor so that it becomes\n      // a factor.\n      if (n /\
    \ i == i) {\n        n /= i;\n      }\n    }\n  }\n  // If no factor is found\
    \ after the number to be divided, then this number is already a\n  // prime number.\n\
    \  if (!(n / i == i)) {\n    result.push_back(n);\n  }\n  return result;\n}\n\
    int main() {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2z_x4cr8.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp2z_x4cr8.cpp:30:13: error: \u2018i\u2019 was not declared\
    \ in this scope\n   30 |   if (!(n / i == i)) {\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n  std::vector<long> ans;\n\
    \  ans.push_back(n);\n  long a = 1;\n  long b = n;\n  while (true) {\n    long\
    \ mid = a + (b - a) / 2;\n    if (mid == 0) {\n      break;\n    }\n    if (mid\
    \ * mid == n) {\n      ans.push_back(mid / 2);\n      b /= 2;\n    } else {\n\
    \      if (b > 1) {\n        long mid2 = a + (b - a) / 2;\n        if (mid2 *\
    \ mid2 == n) {\n          ans.push_back(mid / 2);\n          b /= 2;\n       \
    \ } else {\n          ans.push_back(mid2);\n          b /= 2;\n        }\n   \
    \   } else {\n        break;\n      }\n    }\n    a = mid;\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2)) ==\
    \ (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpu11vml55: /tmp/tmpu11vml55.cpp:45: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> ans;\n\
    \    int i = 2;\n    while (i <= sqrt(n)) {\n        while (n % i == 0) {\n  \
    \          n /= i;\n            ans.push_back(i);\n        }\n        i++;\n \
    \   }\n    if (n != 1) ans.push_back(n);\n    return ans;\n}\nint main() {\n \
    \   auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    std::vector<long> res;\n\
    \    for (int i = 2; i <= n / i; ++i) {\n        while (n % i == 0) {\n      \
    \      res.push_back(i);\n            n /= i;\n        }\n    }\n    res.push_back(n);\n\
    \    return res;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "tmpvd19la77: /tmp/tmpvd19la77.cpp:26: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n == 1) return std::vector<long>(1,\
    \ 1);\n    // Create vector of prime numbers\n    std::vector<long> primes(n);\n\
    \    primes[0] = 2;\n    primes[1] = 1;\n    // Create vector of factors\n   \
    \ std::vector<long> factors(n);\n    for (int i = 2; i < n; ++i) {\n        while\
    \ (n % i == 0) {\n            factors[i] = i;\n            n /= i;\n        }\n\
    \        primes[n - i] = i;\n    }\n    std::vector<long> final;\n    for (int\
    \ i = 3; i <= n; ++i) {\n        while (n % i == 0) {\n            factors[i]\
    \ = i;\n            n /= i;\n        }\n    }\n    std::vector<long>::iterator\
    \ j;\n    for (j = factors.begin(); j < factors.end(); ++j) {\n        // Remove\
    \ factor n from the list if n is factorized already\n        while (n % j == 0)\
    \ --n;\n    }\n    for (j = factors.begin(); j < factors.end(); ++j) {\n     \
    \   // Add factor n to the list if n is not factorized yet\n        while ((n%j)\
    \ == 0) ++n;\n    }\n    final.push_back(n);\n    for (auto i : primes) {\n  \
    \      while (!final.end() && final.back() != i) final.pop_back();\n    }\n  \
    \  return final;\n}\nint main() {\n    auto candidate = factorize;\n    assert(candidate((2))\
    \ == (std::vector<long>({2})));\n    assert(candidate((4)) == (std::vector<long>({2,\
    \ 2})));\n    assert(candidate((8)) == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57))\
    \ == (std::vector<long>({3, 19})));\n    assert(candidate((3249)) == (std::vector<long>({3,\
    \ 3, 19, 19})));\n    assert(candidate((185193)) == (std::vector<long>({3, 3,\
    \ 3, 19, 19, 19})));\n    assert(candidate((20577)) == (std::vector<long>({3,\
    \ 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp1nz85san.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp1nz85san.cpp:37:18: error: no match for \u2018operator%\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   37 |         while (n % j == 0) --n;\n      |                ~ ^ ~\n  \
    \    |                |   |\n      |                |   std::vector<long int>::iterator\
    \ {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >}\n    \
    \  |                long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp1nz85san.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp1nz85san.cpp:37:20:\
    \ note:   mismatched types \u2018const std::_Expr<_Dom1, typename _Dom1::value_type>\u2019\
    \ and \u2018long int\u2019\n   37 |         while (n % j == 0) --n;\n      | \
    \                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/valarray:603,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp1nz85san.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modu"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    if (n <= 1) return std::vector<long>();\n\
    \    std::vector<long> ret;\n    long sq = n;\n    long l = 1;\n    while (sq\
    \ > 0) {\n        long mod = sq % l;\n        sq /= l;\n        ret.push_back(mod);\n\
    \        l++;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmpyiblqg2o: /tmp/tmpyiblqg2o.cpp:27: int main(): Assertion `candidate((2))\
    \ == (std::vector<long>({2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    assert(n > 1);\n    std::vector<long>\
    \ factors;\n    long temp = n;\n    std::vector<bool> f(n + 1, true);\n    while\
    \ (temp > 1) {\n        for (long i = 0; i < n; i++) {\n            if (f[i])\
    \ {\n                while (temp % i == 0) {\n                    f[i] = false;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     for (long i = n; i > 0; i--) {\n            if (f[i]) {\n              \
    \  while (temp % i == 0) {\n                    f[i] = false;\n              \
    \      break;\n                }\n            }\n        }\n        if (f[0])\
    \ {\n            factors.push_back(n);\n        }\n        temp /= n;\n      \
    \  n--;\n    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n\t// Check input validity\n\
    \tassert(n > 0);\n\tassert(n % 2 == 0);\n\n\tstd::vector<long> factorization;\n\
    \n\t// Loop all possible divisors\n\tfor (long div = 3; div <= n / 2; div += 2)\
    \ {\n\t\twhile (n % div == 0) {\n\t\t\tfactorization.push_back(div);\n\t\t\tn\
    \ /= div;\n\t\t}\n\t}\n\n\t// If there is no remaining factors\n\tif (n > 1) {\n\
    \t\tfactorization.push_back(n);\n\t}\n\n\treturn factorization;\n}\nint main()\
    \ {\n    auto candidate = factorize;\n    assert(candidate((2)) == (std::vector<long>({2})));\n\
    \    assert(candidate((4)) == (std::vector<long>({2, 2})));\n    assert(candidate((8))\
    \ == (std::vector<long>({2, 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3,\
    \ 19})));\n    assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n\
    \    assert(candidate((185193)) == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n\
    \    assert(candidate((20577)) == (std::vector<long>({3, 19, 19, 19})));\n   \
    \ assert(candidate((18)) == (std::vector<long>({2, 3, 3})));\n}\n"
  stdout: ''
  stderr: "tmp3ioeq0qf: /tmp/tmp3ioeq0qf.cpp:37: int main(): Assertion `candidate((4))\
    \ == (std::vector<long>({2, 2}))' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return list of prime factors\
    \ of given integer in the order from smallest to largest.\n// Each of the factors\
    \ should be listed number of times corresponding to how many times it appeares\
    \ in factorization.\n// Input number should be equal to the product of all factors\n\
    // >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n// [5, 5]\n// >>> factorize(70)\n\
    // [2, 5, 7]\nstd::vector<long> factorize(long n) {\n    // Scan the numbers from\
    \ largest to smallest to find prime factors\n    long n = std::sqrt(n);\n    long\
    \ cur = n;\n    std::vector<long> factors;\n    while (cur != 1) {\n        for\
    \ (long i = 2; i <= cur; ++i) {\n            if (n % i == 0) {\n             \
    \   // If the number divides evenly, then its a prime factor.\n              \
    \  factors.push_back(i);\n                n /= i;\n            }\n        }\n\
    \    }\n    return factors;\n}\nint main() {\n    auto candidate = factorize;\n\
    \    assert(candidate((2)) == (std::vector<long>({2})));\n    assert(candidate((4))\
    \ == (std::vector<long>({2, 2})));\n    assert(candidate((8)) == (std::vector<long>({2,\
    \ 2, 2})));\n    assert(candidate((57)) == (std::vector<long>({3, 19})));\n  \
    \  assert(candidate((3249)) == (std::vector<long>({3, 3, 19, 19})));\n    assert(candidate((185193))\
    \ == (std::vector<long>({3, 3, 3, 19, 19, 19})));\n    assert(candidate((20577))\
    \ == (std::vector<long>({3, 19, 19, 19})));\n    assert(candidate((18)) == (std::vector<long>({2,\
    \ 3, 3})));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0d6q57mf.cpp: In function \u2018std::vector<long int> factorize(long\
    \ int)\u2019:\n/tmp/tmp0d6q57mf.cpp:14:10: error: declaration of \u2018long int\
    \ n\u2019 shadows a parameter\n   14 |     long n = std::sqrt(n);\n      |   \
    \       ^\n"
  exit_code: 1
  status: SyntaxError
