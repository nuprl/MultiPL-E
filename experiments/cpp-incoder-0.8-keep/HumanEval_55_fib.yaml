name: HumanEval_55_fib
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n\
  // >>> fib(10)\n// 55\n// >>> fib(1)\n// 1\n// >>> fib(8)\n// 21\nlong fib(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
  \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
  \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
completions: ["    if(n<2) return 1;\n    long result = fib(n - 1) + fib(n - 2);\n\
    \    return result;", "    if (n == 0) return 0;\n    if (n == 1) return 1;\n\
    \    return fib(n - 1) + fib(n - 2);", "  assert(n > 0 && \"fibonacci sequence\
    \ only exists for positive integers\");\n  long a = 1;\n  long b = 1;\n  long\
    \ tmp;\n  tmp = a;\n  while (n > 0) {\n    tmp = a + b;\n    a = b;\n    b = tmp;\n\
    \    n--;\n  }\n  return b;", "  if(n<0)\n    return 0;\n  if(n==0)\n    return\
    \ 1;\n  if(n==1)\n    return 2;\n  long p,p1,n1;\n  p1=fib(int(n-1));\n  n1=fib(int(n));\n\
    \  p=p1+n1;\n  return p;", "    if(n<2) return 1;\n    long previous=1;\n    long\
    \ next=1;\n    long sum=0;\n    while(next<n){\n        sum=next+previous+sum;\n\
    \        next=previous=sum;\n    }\n    return sum;", "    assert(n >= 0);\n \
    \   if(n < 2) {\n        return n;\n    } else {\n        return fib(n-1) + fib(n-2);\n\
    \    }", "   assert(n > 0);\n   long f[n + 1] = {0, 1};\n   for (long i = 1; i\
    \ < n; i++)\n      f[i] = f[i - 1] + f[i - 2];\n   return f[n];", "    if (n <=\
    \ 1) {\n        return 1;\n    }\n    long a = fib(n - 1);\n    long b = fib(n\
    \ - 2);\n    return a + b;", "    if(n<2)return 1;\n    else return fib(n-1) +\
    \ fib(n-2);", "    if(n<2)\n        return 1;\n    return fib(n-1) + fib(n-2);",
  "\tif (n < 3) {\n\t\treturn n;\n\t} else if (n == 2) {\n\t\treturn 1;\n\t} else\
    \ {\n\t\treturn fib(n - 1) + fib(n - 2);\n\t}", "    if (n < 2)\n        return\
    \ n;\n    return fib(n - 1) + fib(n - 2);", "    long cur = 1;\n    long prev\
    \ = 0;\n    for (long i = 1; n > i; ++i) {\n        cur = prev + cur;\n      \
    \  prev = cur;\n    }\n    return cur;", "  if (n <= 1) return 1;\n  return fib(n\
    \ - 2) + fib(n - 1);", "    if (n == 0 || n == 1) {\n        return n;\n    }\n\
    \    long fibonacci1 = fib(n - 1);\n    long fibonacci2 = fib(n - 2);\n    return\
    \ fibonacci1 + fibonacci2;", "    assert(n >= 0);\n    if (n == 0) {\n       \
    \ return 0;\n    }\n    if (n == 1) {\n        return 1;\n    }\n    return fib(n-2)\
    \ + fib(n-1);", "    assert(n >= 0);\n    if (n == 0 || n == 1)\n        return\
    \ n;\n    return fib(n-1) + fib(n-2);", "  assert(n > 0);\n  if (n <= 1) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);", "    long prev1=0, prev2=1;\n    long\
    \ ret = 1;\n    for(int i = 0; i < n; i++)\n    {\n        long temp = prev1 +\
    \ prev2; // compute next number\n        prev1 = prev2;\n        prev2 = temp;\n\
    \        ret = (ret + prev1);\n    }\n    return ret;", "    if (n <= 1)\n   \
    \     return n;\n    return fib(n - 1) + fib(n - 2);", "    assert(n >= 0);\n\
    \    if (n == 0 || n == 1)\n        return 1;\n    long previous = 0, current\
    \ = 1, next = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        next = previous\
    \ + current;\n        previous = current;\n        current = next;\n    }\n  \
    \  return current;", "  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return\
    \ fib(n - 1) + fib(n - 2);", "\tassert(n>=0);\n\tif(n<=2)\n\t\treturn 1;\n\treturn\
    \ fib(n - 1) + fib(n - 2);", "\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 1;\n\treturn fib(n-1) + fib(n-2);", "\tif (n <= 1) {\n\t\treturn n;\n\t\
    } else {\n\t\tlong f1 = fib(n-1);\n\t\tlong f2 = fib(n-2);\n\t\treturn f1 + f2;\n\
    \t}", "    assert(n >= 0L);\n    if (n == 0L) {\n        return 0;\n    }\n  \
    \  long ret = 1;\n    long tmp;\n    for (long i = 2; i <= n; i++) {\n       \
    \ ret = ret * i;\n    }\n    return ret;", "    if(n <= 1) return n;\n    return\
    \ fib(n - 1) + fib(n - 2);", "    assert(n>0);\n    if (n <= 1)\n        return\
    \ n;\n    return fib(n-2) + fib(n-1);", "  int a = 0;\n  int b = 1;\n  long sum\
    \ = 0;\n  while (n > 0) {\n    sum += b;\n    swap(a, b);\n    n -= 1;\n  }\n\
    \  return sum;", "    using namespace std;\n    assert(n >= 0);\n    if (n < 2)\n\
    \        return n;\n    long f1 = 0, f2 = 1, sum = 0;\n    long i = 0;\n    while\
    \ (i < n) {\n        sum += f1;\n        long c = f1 + f2;\n        f1 = f2;\n\
    \        f2 = c;\n        i += 1;\n    }\n    return sum;", "    assert(n >= 0\
    \ && n <= 2);\n    return n == 0 ? 0 : fib(n-1) + fib(n-2);", "\tif (n <= 1)\n\
    \t\treturn n;\n\treturn fib(n-1) + fib(n-2);", "    long f1;\n    long f2;\n \
    \   long ret;\n    if (n <= 1) {\n        return 1;\n    }\n    f1 = f2 = n;\n\
    \    while (f2 < f1 + 2) {\n        ret = (long) f1;\n        f1 = f2;\n     \
    \   f2 = ret;\n    }\n    return f2;", "  assert(n >= 0);\n  if (n == 0 || n ==\
    \ 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);", "    assert (n>0);\n\
    \    if (n==1 || n==2) return 1;\n    long ret=fib(n-1)+fib(n-2);\n    return\
    \ ret;", "  if (n == 0 || n == 1) return n;\n  return fib(n - 1) + fib(n - 2);",
  "  if (n <= 1) return n;\n  long ans = 0;\n  long prev_ans = 1;\n  long i = 1;\n\
    \  while (i < n) {\n    prev_ans = ans;\n    ans = prev_ans + i;\n    i++;\n \
    \ }\n  return ans;", "  if (n <= 1) return n;\n  long f1 = 1, f2 = 1;\n  for (int\
    \ i = 3; i <= n; i++) {\n    f1 = f2;\n    f2 = f1 + f1;\n  }\n  return f2;",
  "    if(n<2)\n        return 1;\n    long f=0, g=1;\n    for(long i=2; i<=n; i++)\
    \ {\n        long res = f + g;\n        f = g;\n        g = res;\n    }\n    return\
    \ f;", "    if (n == 0 || n == 1)\n        return n;\n    if (n >= 2)\n      \
    \  return fib(n - 2) + fib(n - 1);", "\treturn n < 2 ? n : fib(n-2) + fib(n-1);",
  "    assert(n >= 0 && n <= 100);\n    if (n <= 1) {\n        return n;\n    } else\
    \ {\n        return fib(n-1) + fib(n-2);\n    }", "    if (n <= 1) return n;\n\
    \    return fib(n - 1) + fib(n - 2);", "    if (n == 0) { return 0; }\n    if\
    \ (n == 1) { return 1; }\n    long a = fib(n - 1);\n    long b = fib(n - 2);\n\
    \    return a + b;", "    int f1 = 1;\n    int f2 = 1;\n    for (int i = 0; i\
    \ < n; i++) {\n        int res = f1 + f2;\n        f2 = f1;\n        f1 = res;\n\
    \    }\n    return f2;", "\tif (n <= 1) return n;\n\treturn fib(n-1) + fib(n-2);",
  "    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);", "    assert(n\
    \ >= 1);\n    if(n == 0 || n == 1)\n        return 1;\n    return fib(n - 1) +\
    \ fib(n - 2);", "    if (n<2) return 1;\n    return fib(n-2) + fib(n-1);", "\t\
    if (n == 1)\n\t\treturn 1;\n\tif (n == 2)\n\t\treturn 1;\n\tif (n == 3)\n\t\t\
    return 2;\n\tif (n > 3) {\n\t\tlong res = fib(n - 2) + fib(n - 1);\n\t\treturn\
    \ res;\n\t} else {\n\t\treturn 0;\n\t}", "  // Return fib(n-1) + fib(n-2) for\
    \ n > 2.\n  if (n <= 2)\n    return 1;\n  return fib(n-1) + fib(n-2);", "    int\
    \ a=0,b=1;\n    while(n>0){\n        long cur = n;\n        n = a*b+(n-cur)*a;\n\
    \        a = b;\n        b = cur;\n    }\n    return n;", "    assert(n >= 0);\n\
    \    if (n <= 2) {\n        return 1;\n    }\n    return fib(n - 2) + fib(n -\
    \ 1);", "  // Write your code here.\n  if(n<2)\n    return n;\n  else\n    return\
    \ fib(n-1)+fib(n-2);", "    \n    if(n >= 0 && n <= 1)\n        return n;\n  \
    \  \n    long res = fib(n - 2) + fib(n - 1);\n    \n    return res;\n    ", "\t\
    if (n == 0 || n == 1)\n\t\treturn 1;\n\tlong a = fib(n-1);\n\tlong b = fib(n-2);\n\
    \treturn a+b;", "\t// assert(n > 0);\n\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n\
    \ - 1) + fib(n - 2);", "\tif (n < 2) return 1;\n\treturn fib(n-2) + fib(n-1);",
  "\tif(n<0) return -1;\n\tif(n==0 || n==1) return n;\n\tif(n<3) return fib(n-2) +\
    \ fib(n-1);\n\treturn fib(n-2) + fib(n-1) + fib(n-3);", "    long ret = 1;\n \
    \   if (n < 2) {\n        return ret;\n    }\n    for (long i = 2; i <= n; i++)\
    \ {\n        ret = ret + ret;\n    }\n    return ret;", "    if (n < 2) {\n  \
    \      return n;\n    }\n    long a = 1;\n    long b = 1;\n    for (int i = 1;\
    \ i <= n; ++i) {\n        long tmp = a;\n        a = b;\n        b = tmp + b;\n\
    \    }\n    return a;", "    if (n <= 1) return n;\n    return fib(n - 1) + fib(n\
    \ - 2);", "    if (n<2) {\n        return 1;\n    }\n    else {\n        long\
    \ prev=fib(n-1);\n        long cur=prev;\n        for (int i=2;i<=n;i++) {\n \
    \           cur=cur+prev;\n            prev=cur;\n        }\n        return cur;\n\
    \    }", "    assert(n >= 0);\n    if (n == 0)\n        return 0;\n    if (n ==\
    \ 1)\n        return 1;\n    return fib(n-1) + fib(n-2);", "  if (n == 0) return\
    \ 0;\n  if (n == 1) return 1;\n  if (n >= 2 && n <= 9) return fib(n - 1) + fib(n\
    \ - 2);\n  long prev1 = 1;\n  long prev2 = 1;\n  long tmp;\n  long count = 1;\n\
    \  while (count < n) {\n    tmp = prev1 + prev2;\n    prev1 = prev2;\n    prev2\
    \ = tmp;\n    count += 1;\n  }\n  return prev2;", "\tlong fib[] = {0, 1, 1, 2,\
    \ 3, 5, 8, 13, 21, 34};\n\tassert(n >= 0 && n < sizeof(fib)/sizeof(long int));\n\
    \treturn fib[n];", "    long prev = 0;\n    long current = 1;\n    for (int i\
    \ = 0; i <= n; i++) {\n        prev = current;\n        current = current + prev;\n\
    \    }\n    return current;", "    if(n < 0) \n    {\n       std::cerr << \"Error:\
    \ Negative Number\" << std::endl;\n       assert(false);\n       return -1;\n\
    \    }\n    if(n == 0 || n == 1) \n    {\n       return n;\n    }\n    return\
    \ fib(n-2) + fib(n-1);", "    assert(n >= 1);\n    if(n == 0) return 0;\n    if(n\
    \ == 1) return 1;\n    long p = fib(n - 1) + fib(n - 2);\n    return p;", "  \
    \  assert(n > 0);\n    long ret = 1;\n    long sum = 0;\n    while(n > 0) {\n\
    \        sum += ret;\n        ret += ret;\n        --n;\n    }\n    return sum;",
  "  if (n <= 1) return n;\n  if (n == 2) return 1;\n  return fib(n - 1) + fib(n -\
    \ 2);", "    if (n < 0)\n        throw std::invalid_argument(\"fibonacci numbers\
    \ are only defined for n >= 0\");\n    if (n > 50000)\n        throw std::invalid_argument(\"\
    fibonacci numbers are only defined for n <= 50000\");\n    if (n <= 2)\n     \
    \   return 1;\n    return fib(n - 1) + fib(n - 2);", "    assert(n > 0);\n   \
    \ if (n == 0 || n == 1)\n        return n;\n    return fib(n-1) + fib(n-2);",
  "    long a = 0,\n        b = 1;\n    for (int i = 0; i < n; i++)\n        long\
    \ c = a + b;\n        a = b;\n        b = c;\n    return c;", "    if(n <= 1)\
    \ return n;\n    return fib(n-1) + fib(n-2);", "  if (n <= 0)\n    return 1;\n\
    \  if (n == 1)\n    return 1;\n  long a = 1;\n  long b = 1;\n  for (int i = 0;\
    \ i < n; i++) {\n    long c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;",
  "    if (n < 2)\n        return 1;\n    long first = fib(n-2);\n    long second\
    \ = fib(n-1);\n    return first + second;", "\tif (n<2) return 1;\n\tif(n%2==0)\
    \ return fib(n/2);\n\treturn fib(n-1)+fib(n-2);", "    assert(n > 0);\n    if\
    \ (n == 1) return 1;\n    if (n == 2) return 2;\n    long a = fib(n - 1);\n  \
    \  long b = fib(n - 2);\n    return a + b;", "    assert(n >= 0);\n    if (n <=\
    \ 1) return n;\n    return fib(n - 1) + fib(n - 2);", "\tif (n <= 1) return n;\n\
    \treturn fib(n - 1) + fib(n - 2);", "  if (n <= 1)\n    return n;\n\n  long x\
    \ = fib(n - 1);\n  long y = fib(n - 2);\n\n  return x + y;", "    assert(n >=\
    \ 0);\n    if (n < 2)\n        return 1;\n    return fib(n-2) + fib(n-1);", " \
    \   if(n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);", "  if (n == 0)\n\
    \    return 1;\n  if (n == 1)\n    return 1;\n  if (n <= 2)\n    return n;\n \
    \ return fib(n-1) + fib(n-2);", "\tif (n == 0) {\n\t\treturn 0;\n\t}\n\tlong fib1\
    \ = 0;\n\tlong fib2 = 1;\n\tlong fib3 = 1;\n\tfor (long i = 2; i < n; i++) {\n\
    \t\tfib3 = fib1 + fib2;\n\t\tfib1 = fib2;\n\t\tfib2 = fib3;\n\t}\n\treturn fib2;",
  "    if(n==1)\n        return 1;\n    if(n==2)\n        return 1;\n    if(!(n &\
    \ 1))\n        return fib(n >> 1) + fib(n >> 2);\n    return fib(n >> 1) + fib(n\
    \ - 1);", "    if (n <= 2) return 1;\n    return fib(n - 1) + fib(n - 2);", " \
    \   assert(n >= 0);\n    if (n <= 1) return n;\n    return fib(n-1) + fib(n-2);",
  "    if(n<2) return 1;\n    return fib(n - 1) + fib(n - 2);", "    if (n<=1)\n \
    \       return n;\n    return fib(n - 2) + fib(n - 1);", "  // Write your code\
    \ here\n  if(n<=1)\n    return n;\n  if(n<=2)\n    return 1;\n  return fib(n-2)+fib(n-1);",
  "    long fib1 = 0, fib2 = 1, result = 1;\n    for (long i = 3; i <= n; i++){\n\
    \        fib1 = fib2;\n        fib2 = result + fib1;\n        result = fib2;\n\
    \    }\n    return result;", "    assert (n>=0);\n    if (n==0) return 0;\n  \
    \  if (n==1) return 1;\n    return fib(n-1) + fib(n-2);", "    assert(n >= 0);\n\
    \    if (n == 0 || n == 1) return n;\n    if (n <= 3) return 1;\n    return fib(n\
    \ - 1) + fib(n - 2);", "  if (n < 3) return 1;\n  return fib(n - 1) + fib(n -\
    \ 2);", "\t// Return n-th Fibonacci number.\n\tif (n <= 2)\n\t\treturn 1;\n\t\
    return fib(n - 1) + fib(n - 2);", "    assert(n >= 0 && n <= 1000);\n    long\
    \ p = 1;\n    long q = n;\n    long r = 1;\n    long fib;\n    while (n > 0) {\n\
    \        fib = r + p;\n        p = q;\n        q = fib;\n        r = fib;\n  \
    \      --n;\n    }\n    return fib;", "    if (n <= 1)\n        return 1;\n  \
    \  if (n > 1)\n        return fib(n - 1) + fib(n - 2);", "    long f = 0;\n  \
    \  long g = 1;\n    long h = 2;\n    while (n>0) {\n        long t = f+g+h;\n\
    \        if (t>n) t = t-n;\n        f = g;\n        g = h;\n        h = t;\n \
    \       n--;\n    }\n    return f;", "  if (n <= 1)\n    return n;\n  return fib(n\
    \ - 1) + fib(n - 2);", "    if (n <= 1)\n        return 1;\n    else\n       \
    \ return fib(n - 1) + fib(n - 2);", "    int f[] = {1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987};\n    return f[n];", "\tif (n == 0) return\
    \ 0;\n\tif (n == 1) return 1;\n\treturn fib(n - 1) + fib(n - 2);", '    return
    n < 2 ? 1 : fib(n-2) + fib(n-1);', "    assert(n >= 0);\n    if (n == 0 || n ==\
    \ 1) {\n        return n;\n    }\n    long prev[100] = {0}, cur[100] = {0};\n\
    \    prev[0] = 1;\n    cur[0] = prev[0] + prev[1];\n    for (long i = 2; i <=\
    \ n; i++) {\n        prev[i] = cur[i - 1];\n        cur[i] = prev[i - 1] + prev[i];\n\
    \    }\n    return cur[n];", "\tif (n < 0 || n > 4000000) {\n\t\tcout << \"-1\"\
    ;\n\t\treturn -1;\n\t}\n\tvector<long int> v(n + 1, 1);\n\tlong int* fib = v.data();\n\
    \tfib[0] = 0;\n\tfib[1] = 1;\n\tlong int temp;\n\tlong int fibsum = 0;\n\tfor\
    \ (int i = 2; i <= n; i++) {\n\t\ttemp = fib[i] - fib[i - 1];\n\t\tfibsum += temp;\n\
    \t\tfib[i] = temp;\n\t\tfib[n] = fibsum;\n\t\tcout << fibsum << endl;\n\t}\n\t\
    return fibsum;", "    if (n <= 1) return n;\n    else return fib(n - 1) + fib(n\
    \ - 2);", "    assert(n >= 0);\n    if(n==0) return 0;\n    if(n==1) return 1;\n\
    \    long f1,f2,f3;\n    f1 = 1; f2 = 1;\n    for(f3=1;f3<n;f3++)\n    {\n   \
    \     f2 = f1 + f2;\n        f1 = f3;\n    }\n    return f1;", "\tif (n < 2) return\
    \ n;\n\tlong fibs[] = { 1,2 };\n\tfor (long i = 2; i <= n; ++i) fibs[i - 1] +=\
    \ fibs[i - 2];\n\treturn fibs[n-1];", "    assert(n >= 0);\n    if (n <= 1)\n\
    \        return n;\n    return fib(n - 1) + fib(n - 2);", "    // assert(n > 1);\n\
    \    // if (n == 0)\n    // \treturn 0;\n    // if (n == 1)\n    // \treturn 1;\n\
    \    // if (n == 2)\n    // \treturn 1;\n    // return fib(n - 1) + fib(n - 2);\n\
    \    long fibNum = 0, currentFibNum = 1, currentFib = 1;\n    for (int i = 0;\
    \ i <= n; i++)\n    {\n        fibNum = currentFibNum + currentFib;\n        std::cout\
    \ << \"fibNum = \" << fibNum << std::endl;\n        currentFibNum = currentFib;\n\
    \        currentFib = fibNum;\n    }\n    return fibNum;", "\tif (n == 1 || n\
    \ == 2) {\n\t\treturn 1;\n\t}\n\tif (n == 0) {\n\t\treturn 0;\n\t}\n\treturn fib(n\
    \ - 1) + fib(n - 2);", "  assert(n >= 0);\n  if (n < 3) {\n    return 1;\n  }\n\
    \  return fib(n - 1) + fib(n - 2);", "  long F[n];\n  F[0] = 0;\n  F[1] = 1;\n\
    \  for (long i = 2; i <= n; ++i)\n    F[i] = F[i - 1] + F[i - 2];\n  return F[n];",
  "    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) +\
    \ fib(n - 2);\n    }", "  if(n<=1){\n    return n;\n  }\n  return fib(n - 1) +\
    \ fib(n - 2);", "     long long int a,b,c;\n     cin>>n;\n     a=0;\n     b=1;\n\
    \     for(int i=2; i<=n; i++)\n         c=a+b;\n     cout<<c;", "  assert(n >\
    \ 0);\n  if (n==1) return 1;\n  long a = 1;\n  long b = 1;\n  for (long i=2; i<=n;\
    \ i++) {\n    long c = a+b;\n    a = b;\n    b = c;\n  }\n  return b;", "  if\
    \ (n < 2)\n    return n;\n  long long a = 1LL, b = 1LL;\n  for (int i = 0; i <\
    \ n; i++) {\n    long long c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;",
  "\tassert(n >= 0);\n\tlong ret = 1;\n\tfor (long i = 1; i <=n; ++i) {\n\t\tret +=\
    \ ret;\n\t}\n\treturn ret;", "    if (n <= 1)\n        return n;\n    return fib(n\
    \ - 1) + fib(n - 2);", "    if (n <= 1)\n        return n;\n    return fib(n -\
    \ 1) + fib(n - 2);", "    long a=0, b=1, c=0, i;\n    for(i=n-1; i>0; i--) {\n\
    \        c = (a+b)*(b+i);\n        a = b;\n        b = c;\n    }\n    return a;",
  "    assert(n>0);\n    if (n==1) return 1;\n    else return fib(n-1)+fib(n-2);",
  "\tif (n <= 1) return 1;\n\treturn fib(n - 1) + fib(n - 2);", "    long a = 0, b\
    \ = 1;\n    for (; n > 0; --n)\n        b = a + b;\n    return b;", "  assert((n\
    \ > 0) && (n <= 6));\n  if (n < 2)\n    return 1;\n  long ret = 1;\n  int i =\
    \ 4;\n  while (i <= n) {\n    ret = ret * i;\n    i += 4;\n  }\n  return ret;",
  "    if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);", "\tif(n<=0\
    \ || n==1)return 1;\n\tif(n==2)return 1;\n\treturn fib(--n)+fib(n);", "    long\
    \ long a, b;\n    cout << \"a\" << endl;\n    if (n<=0) \n        return 0;\n\
    \    if (n==1)\n        return 1;\n    if(n>1) {\n        a = 1;\n        b =\
    \ 1;\n        for (long long i = 0; i < n-1; i++)\n        {\n            long\
    \ long c = a + b;\n            a = b;\n            b = c;\n        }\n    }\n\
    \    return a;", "\tassert(n >= 0);\n\tlong fib1 = 0,\n\t\tfib2 = 0;\n\tif (n\
    \ == 1 || n == 2) {\n\t\treturn 1;\n\t}\n\twhile (n >= 2) {\n\t\tfib2 = fib1;\n\
    \t\tfib1 = fib1 + fib2;\n\t\tn = n - 1;\n\t}\n\treturn fib1;", "    long fib_values=0;\n\
    \    if(n<2) return 1;\n    long prev_val=1,prev_val_2=1,cur_val;\n    if(n>1){\n\
    \        for(long i=2;i<=n;i++){\n            cur_val=prev_val+prev_val_2;\n \
    \           prev_val=prev_val_2;\n            prev_val_2=cur_val;\n          \
    \  fib_values+=cur_val;\n        }\n    }\n    return fib_values;", "    if (n\
    \ <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);", "  if (n < 2)\
    \ {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }", '    return
    n < 2 ? n : fib(n-1) + fib(n-2);', "    assert(n >= 0L);\n    assert(n>=0L);\n\
    \    if(n<=2L) {\n        return n>1L?1L:n;\n    }\n    long fib_1[] = {1L,1L};\n\
    \    long fib_2[] = {1L,1L};\n    long fib_3[] = {1L,1L};\n    long fib_4[] =\
    \ {1L,1L};\n    long fib_5[] = {1L,1L};\n    long fib_6[] = {1L,1L};\n    long\
    \ fib_7[] = {1L,1L};\n    long fib_8[] = {1L,1L};\n    long fib_9[] = {1L,1L};\n\
    \    long fib_10[] = {1L,1L};\n    long fib_11[] = {1L,1L};\n    long fib_12[]\
    \ = {1L,1L};\n    long fib_13[] = {1L,1L};\n    long fib_14[] = {1L,1L};\n   \
    \ long fib_15[] = {1L,1L};\n    long fib_16[] = {1L,1L};\n    long fib_17[] =\
    \ {1L,1L};\n    long fib_18[] = {1L,1L};\n    long fib_19[] = {1L,1L};\n    long\
    \ fib_20[] = {1L,1L};\n    long fib_21[] = {1L,1L};\n    long fib_22[] = {1L,1L};\n\
    \    long fib_23[] = {1L,1L};\n    long fib_24[] = {1L,1L};\n    long fib_25[]\
    \ = {1L,1L};\n    long fib_26[] = {1L,1L};\n    long fib_27[] = {1L,1L};\n   \
    \ long fib_28[] = {1L,1L};\n    long fib_29[] = {1L,1L};\n    long fib_30[] =\
    \ {1L,1L};\n    long fib_31[] = {1L,1L};\n    long fib_32[] = {1L,1L};\n    long\
    \ fib_33[] = {1L,1L};\n    long fib_34[] = {1L,1L};\n    long fib_35[] = {1L,1L};\n\
    \    long fib_36[] = {1L,1L};\n    long fib_37[] = {1L,1L", "    if(n<=1){\n \
    \       return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "  if (n <= 2)\
    \ {\n    return n;\n  }\n  return fib(n-2) + fib(n-1);", "    if(n<=1)\n     \
    \   return n;\n    return fib(n-1)+fib(n-2);", "    assert(n >= 0 && n <= 20);\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 1;\n    return fib(n - 1) +\
    \ fib(n - 2);", "    long a = 2;\n    long b = 3;\n    if (n <= 2)\n        return\
    \ n;\n    else if (n <= 8)\n        return b;\n    else {\n        while (b <\
    \ n) {\n            long temp = a;\n            a = b;\n            b = temp +\
    \ b;\n        }\n        return a;\n    }", "    long a = 0;\n    long b = 1;\n\
    \    while (n) {\n        int c = n % 10;\n        n /= 10;\n        int d = (c\
    \ & 1) != 0;\n        c >>= 1;\n        long tmp = a;\n        a = b;\n      \
    \  b = c + (d ? tmp + tmp : tmp);\n    }\n    return a;", "    assert(n >= 0);\n\
    \    if (n==1)\n        return 1;\n    if (n==2)\n        return 2;\n    if (n==3)\n\
    \        return 3;\n    if (n==4)\n        return 5;\n    if (n==5)\n        return\
    \ 8;\n    if (n==6)\n        return 13; // 8^2+7^2 = 13\n    if (n==7)\n     \
    \   return 21; // 8^3+6^2+5^2 = 21\n    if (n==8)\n        return 34; // 8^4+6^3+5^2+4^2\
    \ = 34\n    if (n==9)\n        return 55; // 8^5+6^4+5^3+4^2+3^2 = 55\n    //\
    \ ... more ...", "    if (n <= 1)\n        return n;\n    return fib(n-1) + fib(n-2);",
  "\tif (n < 2)\n\t\treturn n;\n\treturn fib(n-2) + fib(n-1);", "  if (n < 2)\n  \
    \  return 1;\n  if (n == 2)\n    return 2;\n  return fib(n - 1) + fib(n - 2);",
  "    if (n == 0)\n        return 0;\n    else if (n == 1)\n        return 1;\n \
    \   else {\n        int next[] = {0,1};\n        for (long i = 2; i <= n; i++)\
    \ {\n            long sum = 0;\n            for (int j = 0; j < i; j++) {\n  \
    \              sum = sum + next[j];\n            }\n            next[1] = sum;\n\
    \        }\n        return next[1];\n    }", "  if (n <= 1) return n;\n  return\
    \ fib(n - 1) + fib(n - 2);", "    if(n<=1){\n        return 1;\n    }\n    return\
    \ fib(n-1)+fib(n-2);", "  if (n==0 || n==1 || n==2)\n    return 1;\n  long a =\
    \ fib(n / 2);\n  long b = fib(n - 1);\n  return a + b;", "  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);", "    long f1 = 1, f2 = 1, f = f1;\n\
    \    if (n > 1) {\n        // If n is odd, compute f(n-1)\n        f = f1;\n \
    \       f1 = f2;\n        f2 = f;\n    }\n    while(n > 0){\n        // If n is\
    \ even, compute f(n-1) + f(n-2)\n        f = f1 + f2;\n        f1 = f2;\n    \
    \    f2 = f;\n        n--;\n    }\n    return f;", "    assert(n >= 0);\n    //\
    \ if (n >= 11) return n;\n    if (n <= 1) return 1;\n    if (n == 2) return 2;\n\
    \    return fib(n - 1) + fib(n - 2);", "    assert(n >= 1);\n    if (n == 0 ||\
    \ n == 1)\n        return n;\n    long a = fib(n-1) + fib(n-2);\n    return a;",
  "    assert(n >= 0 && n <= 40);\n    long a = 0;\n    long b = 1;\n    for (long\
    \ i = 1; i < n; i++) {\n        long tmp = a;\n        a = b;\n        b = tmp\
    \ + b;\n    }\n    return b;", "  assert(n >= 1);\n  // Recursive formula for\
    \ Fibonacci numbers.\n  if(n == 1){\n    return 1;\n  }\n  if(n == 2){\n    return\
    \ 1;\n  }\n  return fib(n - 1) + fib(n - 2);", "    if(n == 0 || n == 1)\n   \
    \     return 1;\n    return fib(n - 1) + fib(n - 2);", "    if(n<=0)\n       \
    \ throw std::invalid_argument(\"Fibonacci not defined for negative number\");\n\
    \    if(n>1)\n        return fib(n-1)+fib(n-2);\n    return n;", "    long first\
    \ = 0, second = 1;\n    for (long i = 1; i <= n; i++) {\n        long res = first\
    \ + second;\n        first = second;\n        second = res;\n    }\n    return\
    \ res;", "  int first = 0;\n  int second = 1;\n  for (long i = 2; i <= n; i++)\
    \ {\n    long current = first;\n    first = second;\n    second = current;\n \
    \ }\n  return first;", "  if (n <= 1) return n;\n  long a = 1, b = 1;\n  for (long\
    \ i = 2; i <= n; i++) {\n    long c = a + b;\n    a = b;\n    b = c;\n  }\n  return\
    \ b;", "    long res = 0;\n    if (n == 1 || n == 2) {\n        res = 1;\n   \
    \ }\n    else {\n        long i, temp;\n        for (i = 3; i <= n; i = i + 2)\
    \ {\n            temp = (i - 1) / i;\n            res = res + temp;\n        }\n\
    \    }\n    return res;", "    if (n == 1 || n == 0) {\n        return 1;\n  \
    \  }\n    else {\n        return fib(n - 2) + fib(n - 1);\n    }", "    if (n\
    \ <= 0)\n        throw std::invalid_argument(\"n must be positive\");\n    if\
    \ (n == 1)\n        return 1;\n    return fib(n-1) + fib(n-2);", "    if(n<=2)return\
    \ 1;\n    return fib(n-1)+fib(n-2);", "    if (n == 1)\n        return 1;\n  \
    \  else if (n == 2)\n        return 1;\n    else\n        return fib(n - 1) +\
    \ fib(n - 2);", "    if (n == 0 || n == 1)\n        return n;\n    return fib(n\
    \ - 1) + fib(n - 2);", "    if(n<2)\n        return 1;\n    long a=1,b=2,i;\n\
    \    long temp;\n    for(i=3; i>=1;--i)\n    {\n        temp=b+a;\n        b=a;\n\
    \        a=temp;\n    }\n    temp=b;\n    b=a;\n    a=temp;\n    return b; ",
  "    if (n < 2) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);", '    return
    n < 2 ? n : fib(n-2) + fib(n-1);', "    if(n <= 1) return 1;\n    return fib(n-2)\
    \ + fib(n-1);", "    long a = 0;\n    long b = 1;\n    long c = 1;\n    long f\
    \ = 0;\n    // We have to use do while, because we can not use an infinite loop.\
    \ \n    do {\n        f = a + b;\n        a = b;\n        b = c;\n        c =\
    \ f;\n    } while(c < n);\n    return c;", "\tassert(n > 0 && n <= 9);\n\treturn\
    \ ((n <= 2) ? 1 : fib(n-1) + fib(n-2));", "    assert(n >= 0 && n < 100);\n  \
    \  if (n <= 1)\n        return n;\n    return fib(n-1) + fib(n-2);", "  assert(n\
    \ > 0 && \"Invalid argument: fibonacci number should be greater than 0.\");\n\
    \  if (n <= 2)\n    return 1;\n  else {\n    return fib(n - 1) + fib(n - 2);\n\
    \  }", "  if (n <= 1) return 1;\n  return fib(n - 2) + fib(n - 1);", "    long\
    \ sum = 0;\n    long num1 = 1;\n    long num2 = 1;\n    // First sum for n<2 is\
    \ 1.\n    if (n <= 1) return n;\n    else for (long i = 2; i <= n; i++) {\n  \
    \      sum = num1 + num2;\n        num1 = num2;\n        num2 = sum;\n    }\n\
    \    return sum;", "  long a = 0;\n  long b = 1;\n  for (long i = 0; i < n; i++)\
    \ {\n    long c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;", "  if (n\
    \ < 2) return n;\n  return fib(n-1) + fib(n-2);", '    return fib(n-2);', "  \
    \  long next = 0;\n    long prev = 1;\n\n    assert(n >= 2);\n\n    for(int i\
    \ = 3; i <= n; i++) {\n        next = prev + next;\n        prev = prev - next;\n\
    \    }\n    return next;", "  if (n <= 1) return n;\n  long a = 1;\n  long b =\
    \ 1;\n  for (long i = 1; i <= n; i++) {\n    long temp = a + b;\n    a = b;\n\
    \    b = temp;\n  }\n  return b;", "    // base case:\n    if (n == 0)\n     \
    \   return 0;\n    if (n == 1)\n        return 1;\n    // Recursion case:\n  \
    \  return fib(n - 1) + fib(n - 2);", "  assert(n >= 0 && n <= 2);\n  long a =\
    \ 1, b = 1;\n  for (long i = 3; i <= n; ++i) {\n    a = a + b;\n    b = a + b;\n\
    \  }\n  return a;", "\tif (n == 0) return 0;\n\telse if (n == 1) return 1;\n\t\
    return fib(n - 1) + fib(n - 2);", "  assert(n > 0);\n  if (n<=1) return n;\n \
    \ return fib(n-1) + fib(n-2);", "    long a = 0, b = 1;\n    for(long i = 2; i\
    \ <= n; i++) {\n        long c = a + b;\n        a = b;\n        b = c;\n    }\n\
    \    return b;", "  assert(n > 0);\n  if (n <= 2) {\n    return 1;\n  }\n  return\
    \ fib(n - 1) + fib(n - 2);", "    if (n<2){\n        return n;\n    }\n    long\
    \ a = 1;\n    long b = 1;\n    for (long i = 2; i <= n; i++) {\n        long c\
    \ = a + b;\n        a = b;\n        b = c;\n    }\n    return b;", "    long f1\
    \ = 1;\n    long f2 = 1;\n    long fib = 0;\n    while (n--){\n        fib = f1\
    \ + f2;\n        f1 = f2;\n        f2 = fib;\n    }\n    return fib;", "    assert(n\
    \ >= 0);\n    if (n < 2) {\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);",
  "\tif(n==1) return 1;\n\tif(n==2) return 1;\n\tif(n==3) return 1;\n\tif(n==4) return\
    \ 1;\n\tif(n==5) return 1;\n\tif(n==6) return 1;\n\tif(n==7) return 1;\n\tif(n==8)\
    \ return 1;\n\tif(n==9) return 1;\n\tif(n==10) return 1;\n\tlong ans=fib(n-1)*(n-2)+1;\n\
    \treturn ans;", "\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n - 1) + fib(n - 2);",
  "    if (n < 2) {\n        return 1;\n    }\n    return fib(n-1) + fib(n-2);", " \
    \   long f1=0, f2=1;\n    for (long i = 3; i <= n; i = i + 2) {\n        f1 =\
    \ f2;\n        f2 = f1 + f2;\n    }\n    return f1;", "\tif (n < 2) return 1;\n\
    \treturn fib(n - 1) + fib(n - 2);", "\tif (n < 2) {\n\t\treturn n;\n\t}\n\tlong\
    \ prev = 0;\n\tlong prev1 = 1;\n\tfor (long i = 2; i <= n; i++) {\n\t\tprev =\
    \ (prev + prev1) %10;\n\t\tprev1 = prev;\n\t}\n\treturn prev;", "\tassert(n>0);\n\
    \tif (n==1)\n\t\treturn 1;\n\tif (n==2)\n\t\treturn 1;\n\treturn fib(n - 1) +\
    \ fib(n - 2);", "    if (n < 1)\n        return 1;\n    long a[] = {0,1,1,2,3,5,8,13,21,34};\n\
    \    return a[(int)n];"]
stop_tokens:
- "\n}"
