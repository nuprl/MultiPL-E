language: cpp
name: HumanEval_34_unique
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // sort it\n    std::sort(l.begin(),\
    \ l.end());\n\n    // store it back and remove duplicates \n    std::vector<long>\
    \ result;\n    long uniqueCounter = 0;\n    for (auto iter = l.begin(); iter !=\
    \ l.end(); iter++) {\n        if (*iter == uniqueCounter) {\n            continue;\n\
    \        }\n        else {\n            uniqueCounter = *iter;\n            result.push_back(uniqueCounter);\n\
    \        }\n    }\n\n    return result;\n}\nint main() {\n    auto candidate =\
    \ unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123})))\
    \ == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpfs9xhamh: /tmp/tmpfs9xhamh.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n        if (!u.empty() && *it == *(u.pop_back()))\n\
    \            continue;\n        u.push_back(*it);\n    }\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptvqx7h50.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptvqx7h50.cpp:10:46: error: void value not ignored as it\
    \ ought to be\n   10 |         if (!u.empty() && *it == *(u.pop_back()))\n   \
    \   |                                   ~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660132793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::vector<long> ret;\n\tfor (long i = 0; i < l.size(); ++i) if\
    \ (!ret.insert(ret.begin()+i).second) ret.erase(ret.begin()+i);\n\treturn ret;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi2lrs25x.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpi2lrs25x.cpp:9:67: error: no matching function for call\
    \ to \u2018std::vector<long int>::insert(__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >)\u2019\n    9 |  for (long i = 0; i < l.size(); ++i)\
    \ if (!ret.insert(ret.begin()+i).second) ret.erase(ret.begin()+i);\n      |  \
    \                                                                 ^\nIn file included\
    \ from /usr/include/c++/9/vector:72,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi2lrs25x.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note:   candidate expects 2 arguments, 1 provided\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi2lrs25x.cpp:2:\n/usr/include/c++/9/bits/s"
  stdout: ''
  timestamp: 1660132793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    for (long i : l)\n        if (u.empty() || i == u[0])\n            u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmppsw_suju: /tmp/tmppsw_suju.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\tstd::vector<long> u;\n\
    \tstd::sort(l.begin(), l.end());\n\t\n\tstd::vector<long>::iterator it=l.begin();\n\
    \tstd::vector<long>::iterator it_end = l.end();\n\t\n\twhile( it != it_end ) {\n\
    \t\tif( std::find(u.begin(), u.end(), *it) != u.end() )\n\t\t\t++it;\n\t\telse\n\
    \t\t\tu.push_back(*it);\n\t}\n\treturn u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    assert(l.size() >\
    \ 0);\n    std::vector<long> ret(l.size());\n    std::size_t i = 0;\n    // sort\
    \ array\n    auto it = std::adjacent_find(l.begin(), l.end());\n    for (; it\
    \ != l.end(); ++it) {\n        ret[i++] = *it;\n    }\n    ret.erase(std::unique(ret.begin(),\
    \ ret.end()), ret.end());\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpd_kx_jie: /tmp/tmpd_kx_jie.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  for (long i : l)\n    if (std::find(u.begin(),\
    \ u.end(), i) == u.end())\n      u.push_back(i);\n  return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  sort(l.begin(), l.end());\n\
    \  l.erase(unique(l.begin(), l.end(), [](long x, long y) { return x == y; }),\
    \ l.end());\n  return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  std::set_difference(l.begin(), l.end(),\
    \ u.begin(), u.end(), std::less<>());\n  return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmptwn7rkdo.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = std::less<void>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:5435:46:\
    \   required from \u2018_OIter std::set_difference(_IIter1, _IIter1, _IIter2,\
    \ _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _OIter = std::less<void>]\u2019\n/tmp/tmptwn7rkdo.cpp:9:76:   required from\
    \ here\n/usr/include/c++/9/bits/stl_algo.h:5378:6: error: no match for \u2018\
    operator*\u2019 (operand type is \u2018std::less<void>\u2019)\n 5378 |      *__result\
    \ = *__first1;\n      |      ^~~~~~~~~\nIn file included from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptwn7rkdo.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptwn7rkdo.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<void>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ^~~~~~"
  stdout: ''
  timestamp: 1660132792
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  l.sort([](long a, long\
    \ b){return a<b;});\n  std::vector<long> ans;\n  std::vector<long>::iterator it;\n\
    \  it = std::unique( l.begin(), l.end(), [&ans](long a, long b) {return a<b; });\n\
    \  while(it != l.end()) ans.push_back(*it++);\n  return ans;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w459axp.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8w459axp.cpp:7:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |   l.sort([](long a,\
    \ long b){return a<b;});\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660132793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  sort(l.begin(), l.end());\n\
    \  std::vector<long> uniq(std::unique(l.begin(), l.end()) + l.begin(), l.end());\n\
    \  return uniq;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdx4dllxu.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdx4dllxu.cpp:8:58: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n    8 |   std::vector<long> uniq(std::unique(l.begin(),\
    \ l.end()) + l.begin(), l.end());\n      |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \ ^ ~~~~~~~~~\n      |                                     |                 \
    \            |\n      |                                     |                \
    \             __normal_iterator<[...],[...]>\n      |                        \
    \             __normal_iterator<[...],[...]>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpdx4dllxu.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  856 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::difference_type\u2019\
    \ {aka \u2018long int\u2019}\n  856 |       operator+(difference_type __n) const\
    \ _GLIBCXX_NOEXCEPT\n      |                 ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_iter"
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Copy vector\n\
    \    std::vector<long> unq(l);\n    // Sort vector\n    std::sort(unq.begin(),\
    \ unq.end());\n    // Return vector\n    return unq;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpcrmkweh6: /tmp/tmpcrmkweh6.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Create a map of\
    \ unique elements and iterate through the list\n    std::map<long, int> map;\n\
    \    for (long i : l) {\n        map[i] = 0;\n    }\n    for (long i : l) {\n\
    \        if (map[i] == 0) {\n            l.push_back(i);\n            map[i] =\
    \ 1;\n        }\n    }\n    std::vector<long> u;\n    u.reserve(l.size());\n \
    \   for (long i : l) {\n        u.push_back(i);\n    }\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmpj1riv1: /tmp/tmpmpj1riv1.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    assert(l.size() >=\
    \ 2); \n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (auto it = l.begin(); it != l.end(); ++it) {\n        auto find = std::find(u.begin(),\
    \ u.end(), *it);\n        if (find == u.end()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (auto it = l.begin(); it !=\
    \ l.end(); ++it) {\n        if (it != v.end() && *it == *v.begin()) {\n      \
    \      v.erase(it);\n        } else {\n            v.push_back(*it);\n       \
    \ }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n   \
    \ assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n  return l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ output;\n    output.push_back(l.front());\n    for (long i = 1; i < l.size();\
    \ i++) {\n        if (l.at(i) == l.at(i - 1)) {\n            long j = i;\n   \
    \         while (j < l.size() && l.at(j) == l.at(j + 1)) {\n                j++;\n\
    \            }\n            output.push_back(l.at(j));\n        }\n    }\n   \
    \ return output;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdonrnr8r: /tmp/tmpdonrnr8r.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ a;\n    for(long i : l)\n        std::find(a.begin(), a.end(), i) == a.end()\
    \ ? a.push_back(i) : ;\n    return a;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptr2lc58t.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptr2lc58t.cpp:9:72: error: expected primary-expression\
    \ before \u2018;\u2019 token\n    9 |         std::find(a.begin(), a.end(), i)\
    \ == a.end() ? a.push_back(i) : ;\n      |                                   \
    \                                     ^\n"
  stdout: ''
  timestamp: 1660132793
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\t// TODO: use std::unique\
    \ instead of this.\n\tstd::vector<long> u;\n\tstd::sort(l.begin(), l.end());\n\
    \tfor (long i : l) {\n\t\tif (u[i - 1] != i) u.push_back(i);\n\t}\n\treturn u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::vector<long> v;\n\
    \  std::set_difference(l.begin(), l.end(), std::begin(v), std::end(v),\n     \
    \ [] (long x, long y){ return x == y; });\n  return v;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp709qehwh.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = unique(std::vector<long int>)::<lambda(long int, long int)>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:5435:46:   required from \u2018_OIter std::set_difference(_IIter1,\
    \ _IIter1, _IIter2, _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _OIter = unique(std::vector<long int>)::<lambda(long\
    \ int, long int)>]\u2019\n/tmp/tmp709qehwh.cpp:9:44:   required from here\n/usr/include/c++/9/bits/stl_algo.h:5378:16:\
    \ error: assignment of read-only location \u2018* __result.unique(std::vector<long\
    \ int>)::<lambda(long int, long int)>::operator bool (*)(long int, long int)()\u2019\
    \n 5378 |      *__result = *__first1;\n      |      ~~~~~~~~~~^~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5380:6:\
    \ error: no match for \u2018operator++\u2019 (operand type is \u2018unique(std::vector<long\
    \ int>)::<lambda(long int, long int)>\u2019)\n 5380 |      ++__result;\n     \
    \ |      ^~~~~~~~~~\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp709qehwh.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:465:5:\
    \ error: \u2018_OI std::copy(_II, _II, _OI) [with _II = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _OI = unique(std::vector<long int>)::<lambda(long\
    \ int, long int)>]\u2019, declared usin"
  stdout: ''
  timestamp: 1660132793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    std::for_each(l.begin(), l.end(),\
    \ [&](long i) { if (res.empty() || res.get()[0] != i) { res.emplace_back(i); }\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7rw_s4f.cpp: In lambda function:\n/tmp/tmpi7rw_s4f.cpp:9:76: error:\
    \ \u2018class std::vector<long int>\u2019 has no member named \u2018get\u2019\n\
    \    9 |     std::for_each(l.begin(), l.end(), [&](long i) { if (res.empty() ||\
    \ res.get()[0] != i) { res.emplace_back(i); } });\n      |                   \
    \                                                         ^~~\n"
  stdout: ''
  timestamp: 1660132793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tl.erase(std::unique(l.begin(), l.end()), l.end());\n\treturn l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    auto it = std::unique(l.begin(),\
    \ l.end());\n    l.erase(it, l.end());\n    return l;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpr0wabpof: /tmp/tmpr0wabpof.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n   std::sort(l.begin(),\
    \ l.end());\n   auto end = std::unique(l.begin(), l.end());\n   l.erase(end, l.end());\n\
    \   return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // O(NlogN)\n   \
    \ std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    u.push_back(l.front());\n\
    \    for (int i = 1; i < l.size(); i++) {\n        if (l[i] != l[i - 1]) {\n \
    \           u.push_back(l[i]);\n        }\n    }\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long long i = 1; i < l.size();\
    \ i++) {\n        if(l[i-1] != l[i])\n            u.push_back(l[i]);\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp4ft8y7so: /tmp/tmp4ft8y7so.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  // create hash map\n\
    \  std::map<long, int> h;\n  for (int i = 0; i < l.size(); i++) {\n    h[l[i]]\
    \ += 1;\n  }\n  std::vector<long> v;\n  for (std::map<long, int>::iterator it\
    \ = h.begin(); it != h.end(); ++it) {\n    if (it->second == 1) {\n      v.push_back(it->first);\n\
    \    }\n  }\n  return v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpzpouhoc7: /tmp/tmpzpouhoc7.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  l.erase(std::unique(l.begin(), l.end()), l.end());\n  return l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::set<long> s;\n    for(auto x: l)\n        std::cout<<x<<\" \";\n\
    \    for(int i=0; i<l.size(); i++)\n        if(s.find(l[i]) == s.end())\n    \
    \        s.insert(l[i]);\n        else\n            u.push_back(l[i]);\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpoj1n98km: /tmp/tmpoj1n98km.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res = l;\n    std::sort(res.begin(), res.end());\n    std::unique_copy(res.begin(),\
    \ res.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpa3gajqw5: /tmp/tmpa3gajqw5.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    long i = 0;\n    for (long j = 1;\
    \ j < l.size(); j++) {\n        if (l[j] != l[i]) {\n            u.push_back(l[i]);\n\
    \            i = j;\n        }\n    }\n    u.push_back(l[i]);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::sort(l.begin(), l.end());\n    std::unique(l.begin(), l.end(),\
    \ [&](const long &a, const long &b)->bool {\n        return a == b;\n    });\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpki99516s: /tmp/tmpki99516s.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  // create an empty\
    \ vector to hold unique elements\n  std::vector<long> u;\n  // put first element\
    \ as last element\n  u.push_back(l.front());\n  // loop through remaining elements\
    \ \n  for (auto i = l.begin() + 1; i < l.end(); i++) {\n    // if element found\
    \ in vector 'u' then remove it from vector\n    if (u.find(*i) != u.end()) {\n\
    \      u.erase(u.find(*i));\n    }\n    // else add element to vector\n    else\
    \ {\n      u.push_back(*i);\n    }\n  }\n  // return unique elements\n  return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmipl_u2l.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmipl_u2l.cpp:14:11: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   14 |     if (u.find(*i)\
    \ != u.end()) {\n      |           ^~~~\n/tmp/tmpmipl_u2l.cpp:15:17: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find\u2019\n   15\
    \ |       u.erase(u.find(*i));\n      |                 ^~~~\n"
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::vector<long> u;\n\tfor (long i = 1; i < l.size(); i++) {\n\
    \t\tif (l[i] != l[i - 1]) {\n\t\t\tu.push_back(l[i]);\n\t\t}\n\t}\n\treturn u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmple2p_03i: /tmp/tmple2p_03i.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  // Sort the list\n\
    \  std::sort(l.begin(), l.end());\n  // Remove adjacent duplicates\n  auto it\
    \ = std::unique(l.begin(), l.end());\n  return std::vector<long>(l.begin(), it);\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    for(auto & elem: l)\n        std::find(u.begin(), u.end(), elem) ==\
    \ u.end() ? u.push_back(elem) : std::find(u.begin(), u.end(), elem);\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphxb3imtk.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphxb3imtk.cpp:9:87: error: second operand to the conditional\
    \ operator is of type \u2018void\u2019, but the third operand is neither a throw-expression\
    \ nor of type \u2018void\u2019\n    9 |         std::find(u.begin(), u.end(),\
    \ elem) == u.end() ? u.push_back(elem) : std::find(u.begin(), u.end(), elem);\n\
    \      |                                                                     \
    \         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> unique(std::unique(l.begin(), l.end()) - l.begin());\n\
    \    return unique;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpvqd3r40b: /tmp/tmpvqd3r40b.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Write your code\
    \ here\n    \n    long long result = 0;\n    for(long long i = 0; i < l.size();\
    \ i++) {\n        for(long long j = i + 1; j < l.size(); j++) {\n            if(l[i]\
    \ > l[j]) {\n                long long temp = l[i];\n                l[i] = l[j];\n\
    \                l[j] = temp;\n            }\n        }\n    }\n    \n    std::vector<long>\
    \ v;\n    \n    for(long long i = 0; i < l.size(); i++) {\n        if(l[i] ==\
    \ result) {\n            v.push_back(i);\n        }\n    }\n    \n    return v;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpqhyqabyq: /tmp/tmpqhyqabyq.cpp:32: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132793
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  // sort and unique\
    \ the elements\n  std::sort(l.begin(), l.end());\n  std::vector<long> u;\n  std::set_union(\
    \ l.begin(), l.end(), std::back_inserter(u) );\n  return u;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3x5qx_st.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3x5qx_st.cpp:10:61: error: no matching function for call\
    \ to \u2018set_union(std::vector<long int>::iterator, std::vector<long int>::iterator,\
    \ std::back_insert_iterator<std::vector<long int> >)\u2019\n   10 |   std::set_union(\
    \ l.begin(), l.end(), std::back_inserter(u) );\n      |                      \
    \                                       ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3x5qx_st.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5172:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter>\
    \ _OIter std::set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter)\u2019\n 5172\
    \ |     set_union(_InputIterator1 __first1, _InputIterator1 __last1,\n      |\
    \     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5172:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmp3x5qx_st.cpp:10:61: note:   candidate\
    \ expects 5 arguments, 3 provided\n   10 |   std::set_union( l.begin(), l.end(),\
    \ std::back_inserter(u) );\n      |                                          \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3x5qx_st.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5222:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter,\
    \ class _Compare> _OIter std::set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter,\
    \ _Compare)\u2019\n 5222 |     set_union(_InputIterator1 __first1, _InputIterator1\
    \ __last1,\n      |     ^~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp3x5qx_st.cpp:10:61:\
    \ note:   candidate expects 6 arguments, 3 provided\n   10 |   std::set_union(\
    \ l.begin(), l.end(), std::back_inserter(u) );\n      |                      \
    \                                       ^\nIn file included from /usr/include/"
  stdout: ''
  timestamp: 1660132793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Write your code\
    \ here\n    \n    sort(l.begin(), l.end());\n    std::vector<long> ans;\n    \n\
    \    std::set<long> s(l.begin(), l.end());\n    ans.reserve(s.size());\n    for\
    \ (long i : s) {\n        ans.push_back(i);\n    }\n    \n    return ans;\n}\n\
    int main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i = 1; i < l.size(); i++)\n\
    \        if (l[i] != l[i - 1])\n            u.push_back(l[i]);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmptlt364uk: /tmp/tmptlt364uk.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> tmp(l.begin(), l.begin() + std::unique(l.begin(),\
    \ l.end()) - l.begin());\n  std::sort(tmp.begin(), tmp.end());\n  return tmp;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpaotjwxwz.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpaotjwxwz.cpp:8:46: error: no match for \u2018operator+\u2019\
    \ (operand types are \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n    8 |   std::vector<long> tmp(l.begin(),\
    \ l.begin() + std::unique(l.begin(), l.end()) - l.begin());\n      |         \
    \                           ~~~~~~~~~ ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \
    \  |                                           |               |\n      |    \
    \                                       |               __normal_iterator<[...],[...]>\n\
    \      |                                           __normal_iterator<[...],[...]>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpaotjwxwz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:856:7:\
    \ note: candidate: \u2018__gnu_cxx::__normal_iterator<_Iterator, _Container> __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::operator+(__gnu_cxx::__normal_iterator<_Iterator, _Container>::difference_type)\
    \ const [with _Iterator = long int*; _Container = std::vector<long int>; __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>::difference_type = long int]\u2019\n  856 |       operator+(difference_type\
    \ __n) const _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:856:33:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type\u2019 {aka \u2018long int\u2019\
    }\n  856 |       operator+(difference_type __n) const _GLIBCXX_NOEXCEPT\n    \
    \  |                 ~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_iterator.h:993:5:\
    \ note: candidate: "
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    long prev_el = l[0];\n\
    \    long last_el = prev_el;\n    std::vector<long> ret;\n    for (auto &el :\
    \ l) {\n        if (el != prev_el) {\n            ret.push_back(last_el);\n  \
    \          last_el = el;\n        }\n    }\n    ret.push_back(last_el);\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3u0p0fl0: /tmp/tmp3u0p0fl0.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::unordered_set<long> uset;\n    for(auto i:l) {\n        if(!uset.count(i))\
    \ {\n            u.push_back(i);\n            uset.insert(i);\n        }\n   \
    \ }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpu3gv0srj: /tmp/tmpu3gv0srj.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::set<long> u;\n    for(long i : l) u.insert(i);\n    return\
    \ std::vector<long>(u.begin(), u.end());\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Create a vector\
    \ to store the sorted unique numbers\n    std::vector<long> result; // Sorted\
    \ unique elements will be stored here\n\n    // Add first item to the sorted unique\
    \ list\n    result.emplace_back(l.front());\n    l.erase(l.begin()); // Remove\
    \ the first item from the list\n\n    // Iterate over the remaining items\n  \
    \  for (long i : l) {\n        // If the current item is not equal to the first\
    \ item in the sorted unique list\n        if (result.back() != i) {\n        \
    \    // Add i to the sorted unique list\n            result.emplace_back(i);\n\
    \        }\n    }\n\n    return result;\n}\nint main() {\n    auto candidate =\
    \ unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123})))\
    \ == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpx6fm7bpq: /tmp/tmpx6fm7bpq.cpp:27: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132794
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (long i : l) {\n        if (v.empty()\
    \ || v[0] != i) {\n            v.push_back(i);\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5bp4ixsf: /tmp/tmp5bp4ixsf.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ {\n        return l;\n    }\n    std::vector<long> a;\n    std::vector<long>\
    \ b(a.begin(), l.begin());\n    std::vector<long> c(b.begin(), b.end());\n   \
    \ std::vector<long> d(c.begin(), c.end());\n    std::vector<long> f(a.size());\n\
    \    std::iota(f.begin(), f.end(), 0);\n    std::sort(f.begin(), f.end(), [&d](int\
    \ l, int r) {\n        return d[l] > d[r];\n    });\n    for (long l = 0; l <\
    \ a.size(); l++) {\n        int j = f[l];\n        a[j] = l; \n        b[j] =\
    \ l;\n    }\n    return a;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::bad_alloc'\n  what():\
    \  std::bad_alloc\n"
  stdout: ''
  timestamp: 1660132796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> u;\n    for(long i = 0; i < l.size(); i++)\n\
    \    {\n        if(l.at(i) == l.at(i + 1))\n        {\n            u.resize(u.size()\
    \ + 1);\n            u.push_back(l[i]);\n            u.push_back(l[i]);\n    \
    \    }\n        else\n            u.push_back(l[i]);\n    }\n    return u;\n}\n\
    int main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 9) >= this->size() (which is 9)\n"
  stdout: ''
  timestamp: 1660132796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::vector<long> u;\n\
    \  std::set<long> s;\n  for (long i : l) {\n    if (s.find(i) == s.end()) {\n\
    \      u.push_back(i);\n      s.insert(i);\n    }\n  }\n  return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpareqvhmu: /tmp/tmpareqvhmu.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto end = std::unique(l.begin(), l.end());\n    return std::vector<long>(l.begin(),\
    \ end);\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(),l.end());\n    std::set_difference(l.begin(),l.end(),u.begin(),u.end(),std::greater<long>());\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp0wf45lws.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = std::greater<long int>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:5435:46:   required from \u2018_OIter std::set_difference(_IIter1,\
    \ _IIter1, _IIter2, _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _OIter = std::greater<long int>]\u2019\n/tmp/tmp0wf45lws.cpp:9:81:\
    \   required from here\n/usr/include/c++/9/bits/stl_algo.h:5378:6: error: no match\
    \ for \u2018operator*\u2019 (operand type is \u2018std::greater<long int>\u2019\
    )\n 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp0wf45lws.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0wf45lws.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::greater<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n 5378 |      *__result = *_"
  stdout: ''
  timestamp: 1660132796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res(l);\n    std::sort(res.begin(), res.end());\n    std::sort(res.begin(),\
    \ res.end(), std::greater<long>());\n    return res;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpyy6e1uu6: /tmp/tmpyy6e1uu6.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  for (long i = 0; i < l.size(); ++i) {\n\
    \    if (i == 0) {\n      u.push_back(l.at(0));\n    } else {\n      if (l.at(i)\
    \ != l.at(i-1)) {\n        u.push_back(l.at(i));\n      }\n    }\n  }\n  return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\t// Create a vector\
    \ of indices corresponding to unique elements\n\tstd::vector<size_t> indices(l.size());\n\
    \tfor (size_t i = 0; i < l.size(); i++)\n\t\tindices[i] = i;\n\t// Sort the indices\
    \ based on values\n\tstd::sort(indices.begin(), indices.end(),\n\t\t[&l](size_t\
    \ i, size_t j) { return l[l[i]] > l[l[j]]; });\n\t// Get vector of unique elements\n\
    \tstd::vector<long> result(l.size());\n\tfor (size_t i = 0; i < l.size(); i++)\n\
    \t\tresult[i] = l[indices[i]];\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpfrtyxq51: /tmp/tmpfrtyxq51.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Create a set and\
    \ sort it\n    std::set<long> s2(l.begin(), l.end());\n    std::set<long> s(s2.begin(),\
    \ s2.end());\n    // Convert to a vector and return\n    return std::vector<long>(s.begin(),\
    \ s.end());\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    long last = 0;\n\
    \    std::vector<long> result;\n    for (auto it = l.begin(); it != l.end(); it++)\
    \ {\n        if (last == *it) {\n            continue;\n        }\n        result.push_back(*it);\n\
    \        last = *it;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp0cbqi3jl: /tmp/tmp0cbqi3jl.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::vector<long> u;\n\
    \  std::sort(l.begin(), l.end());\n  for (long elem : l) {\n    if (u.find(elem)\
    \ == u.end())\n      u.push_back(elem);\n  }\n  return u;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprw3wngfv.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprw3wngfv.cpp:10:11: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   10 |     if (u.find(elem)\
    \ == u.end())\n      |           ^~~~\n"
  stdout: ''
  timestamp: 1660132796
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    sort(l.begin(), l.end());\n\
    \    std::vector<long> res(l.size());\n    std::iota(std::begin(res), std::end(res),\
    \ 0);\n    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsxdichkf: /tmp/tmpsxdichkf.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(),l.end());\n    for(std::size_t i = 1; i != l.size();\
    \ ++i) {\n        if(l[i-1] == l[i])\n            continue;\n        u.push_back(l[i]);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpl6lnz_82: /tmp/tmpl6lnz_82.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Sort list using\
    \ bubble sort\n    for (int i = 0; i < l.size(); i++) {\n        for (int j =\
    \ 0; j < l.size() - i; j++) {\n            if (l[j] > l[j + 1]) {\n          \
    \      long tmp = l[j];\n                l[j] = l[j + 1];\n                l[j\
    \ + 1] = tmp;\n            }\n        }\n    }\n\n    // Scan for unique elements\
    \ and return them\n    std::vector<long> unique;\n    unique.reserve(l.size());\n\
    \    for (int i = 0; i < l.size(); i++) {\n        bool found = false;\n     \
    \   for (int j = 0; j < unique.size(); j++) {\n            if (l[i] == unique[j])\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n\n        // If it is not yet found, add it to our unique list\n   \
    \     if (!found) {\n            unique.push_back(l[i]);\n        }\n    }\n \
    \   return unique;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    for (auto it = l.begin(); it != l.end(); it++) {\n        auto pos =\
    \ u.find(*it);\n        if (pos == u.end()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc74yu4nh.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc74yu4nh.cpp:9:22: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n    9 |         auto pos =\
    \ u.find(*it);\n      |                      ^~~~\n"
  stdout: ''
  timestamp: 1660132796
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  l.sort();\n  l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n  return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiypclcja.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpiypclcja.cpp:7:5: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n    7 |   l.sort();\n     \
    \ |     ^~~~\n"
  stdout: ''
  timestamp: 1660132796
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    long x;\n    for (long i = 0; i < l.size(); i++) {\n        x =\
    \ l[i];\n        long pos = i;\n        while (pos && x != l[pos - 1])\n     \
    \       --pos;\n        if (pos < result.size())\n            result.resize(pos\
    \ + 1);\n        result[pos] = x;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    v.reserve(l.size());\n    std::transform(l.begin(), l.end(), std::back_inserter(v),\
    \ [] (long i) { return i; });\n    std::sort(v.begin(), v.end());\n    return\
    \ v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpmxbpbsvv: /tmp/tmpmxbpbsvv.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res(std::begin(l), std::end(l));\n    std::sort(res.begin(), res.end());\n \
    \   std::unique_copy(std::begin(l), std::end(l), std::back_inserter(res));\n \
    \   return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmprso_bkpg: /tmp/tmprso_bkpg.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\t// Create a vector\
    \ to store unique elements\n\tstd::vector<long> u;\n\t// Insert all unique elements\
    \ to vector\n\tfor (long &item : l)\n\t\tif (find(u.begin(), u.end(), item) ==\
    \ u.end())\n\t\t\tu.push_back(item);\n\t// Return vector\n\treturn u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpnzw3jst0: /tmp/tmpnzw3jst0.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::vector<long> r;\n\
    \  for (long i : l) {\n    if (r.size() <= r.size() - 1) {\n      r.push_back(i);\n\
    \    } else if (i == r[r.size() - 1]) {\n      r.back()++;\n    } else {\n   \
    \   long j = r.size() - 1;\n      while ((j >= 0) && (r[j] == i - 1)) {\n    \
    \    j--;\n      }\n      r.insert(r.begin() + j, i + 1);\n    }\n  }\n  return\
    \ r;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2lb62zbt: /tmp/tmp2lb62zbt.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ temp;\n    for(int i = 0; i < l.size(); i++) {\n        bool found = false;\n\
    \        for(int j = 0; j < temp.size(); j++) {\n            if(l[i] == temp[j])\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if(!found) {\n            temp.push_back(l[i]);\n        }\n\
    \    }\n    return temp;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmphtslav4d: /tmp/tmphtslav4d.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // return std::unique(l.begin(),\
    \ l.end()); // C++\n    std::sort(l.begin(), l.end());\n    std::vector<long>::iterator\
    \ it = l.begin();\n    for (; it != l.end(); ++it) {\n        if (it != l.begin()\
    \ && *(it-1) == *it)\n            l.erase(it);\n    }\n    return l;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmppnto5cca: /tmp/tmppnto5cca.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for (size_t i = 0; i < l.size();\
    \ i++) {\n        if (i == 0 || l[i] != l[i - 1]) {\n            v.push_back(l[i]);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    for (long i : l) {\n        bool exist = false;\n        for (long j\
    \ : u) {\n            if (i == j) {\n                exist = true;\n         \
    \   }\n        }\n        if (!exist) {\n            u.push_back(i);\n       \
    \ }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n   \
    \ assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp4_l2fa3y: /tmp/tmp4_l2fa3y.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> v;\n    for (auto it = l.begin(); it != l.end();\
    \ it++) {\n        v.push_back(*it);\n    }\n    return v;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpia24k876: /tmp/tmpia24k876.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    for( auto i : l) {\n        std::find(u.begin(), u.end(), i) == u.end()\
    \ ? u.push_back(i) : \"\";\n    }\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsjdzzuco.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpsjdzzuco.cpp:9:72: error: second operand to the conditional\
    \ operator is of type \u2018void\u2019, but the third operand is neither a throw-expression\
    \ nor of type \u2018void\u2019\n    9 |         std::find(u.begin(), u.end(),\
    \ i) == u.end() ? u.push_back(i) : \"\";\n      |                            \
    \                                            ^~\n"
  stdout: ''
  timestamp: 1660132796
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::set<long> s;\n    std::vector<long> ret;\n    for (long\
    \ i : l) {\n        if (s.find(i) == s.end()) {\n            ret.push_back(i);\n\
    \            s.insert(i);\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  auto it = std::unique(l.begin(), l.end());\n  return std::vector<long>(l.begin(),\
    \ it);\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    long s = 0;\n    long n = l.size();\n    for(long i = 0; i < n; i++){\n\
    \        long c = l[i];\n        if(c != s){\n            ret.push_back(c);\n\
    \            s = c;\n        }\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpuv7r3n73: /tmp/tmpuv7r3n73.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> u(std::unique(l.begin(), l.end()), l.end());\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp3v9z0zy5: /tmp/tmp3v9z0zy5.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> u;\n    std::unordered_set<long> s(l.begin(),\
    \ l.end());\n    for(long x : l)\n        u.push_back(x);\n    std::sort(u.begin(),\
    \ u.end());\n    return u;\n}\nint main() {\n    auto candidate = unique;\n  \
    \  assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpc47gsmuo: /tmp/tmpc47gsmuo.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    std::sort(v.begin(), v.end());\n\
    \    for (auto it = v.begin(); it != v.end(); ++it) {\n        auto pos = std::find(l.begin(),\
    \ l.end(), *it);\n        if (pos == l.end()) {\n            v.push_back(*it);\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmptvr08bvw: /tmp/tmptvr08bvw.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132798
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(), l.end());\n    for(auto i = l.begin(); i != l.end();\
    \ ++i) {\n        bool exists = false;\n        for(auto j = v.begin(); j != v.end();\
    \ ++j) {\n            if((*i) == (*j)) {\n                exists = true;\n   \
    \             break;\n            }\n        }\n        if(!exists) {\n      \
    \      v.push_back(*i);\n        }\n    }\n    return v;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132797
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> uniquel;\n    std::vector<bool> isUnique;\n\
    \    std::size_t uniqueCount = 0;\n    for(std::size_t i = 0; i != l.size(); i++)\
    \ {\n        if(!isUnique[i]) {\n            uniquel.push_back(l[i]);\n      \
    \      ++uniqueCount;\n            isUnique[i] = true;\n        }\n    }\n   \
    \ return uniquel;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  std::adjacent_find(l.begin(), l.end(),\n\
    \                     [&u](long i1, long i2){ return i1 == i2; });\n  std::copy(l.begin(),\
    \ l.end(), std::back_inserter(u));\n  return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpbsojgqm1: /tmp/tmpbsojgqm1.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::sort(l.begin(), l.end());\n  std::vector<long> u;\n  for (long\
    \ x : l) {\n    u.push_back(x);\n  }\n  return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmph748rnll: /tmp/tmph748rnll.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // We will store\
    \ the unique elements\n    std::vector<long> u;\n    bool visited[1 << 31] = {};\n\
    \    // Mark all the elements as unvisited\n    for (long i : l)\n        visited[i\
    \ >> 5] |= 1 << (i & 0x1F);\n    // Now mark the visited elements as visited\n\
    \    for (long i : l)\n        visited[i >> 5] &= ~(1 << (i & 0x1F));\n    //\
    \ Now repeatedly pick an element\n    for (long i : l) {\n        long next =\
    \ i ^ (visited[i >> 5] & (1 << (i & 0x1F)));\n        u.push_back(next);\n   \
    \     visited[next] = 1;\n    }\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp24zjk4_v.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp24zjk4_v.cpp:9:25: error: narrowing conversion of \u2018\
    -2147483648\u2019 from \u2018int\u2019 to \u2018long unsigned int\u2019 [-Wnarrowing]\n\
    \    9 |     bool visited[1 << 31] = {};\n      |                         ^\n\
    /tmp/tmp24zjk4_v.cpp:9:20: error: size \u2018-2147483648\u2019 of array \u2018\
    visited\u2019 is negative\n    9 |     bool visited[1 << 31] = {};\n      |  \
    \                ~~^~~~~\n"
  stdout: ''
  timestamp: 1660132797
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Create a set and\
    \ add all elements to it\n    std::set<long> s;\n    for (auto x : l) s.insert(x);\n\
    \    std::vector<long> ans;\n    ans.reserve(s.size());\n    for (auto x : s)\
    \ {\n        ans.push_back(x);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res(l.size());\n    std::unordered_set<long> s;\n    std::sort(l.begin(), l.end());\n\
    \    for(long i : l)\n    {\n        if(s.find(i) == s.end()) {\n            s.insert(i);\n\
    \            res.push_back(i);\n        }\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmptz5okkik: /tmp/tmptz5okkik.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Use set for unique\
    \ element\n    std::set<long> uniques;\n    for (auto& el : l)\n        uniques.insert(el);\n\
    \    // Copy back the unique elements\n    std::vector<long> v (uniques.size());\n\
    \    for (auto& el : uniques)\n        v.push_back(el);\n    return v;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpms0akafc: /tmp/tmpms0akafc.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132798
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // copy into a vector\
    \ with unique elements\n    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it){\n        if(std::find(u.begin(),\
    \ u.end(), *it) == u.end()){\n            u.push_back(*it);\n        }\n    }\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132797
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  u.assign(l.begin(), l.end() - 1);\n  return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp_kt6zlw: /tmp/tmpp_kt6zlw.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    v.reserve(l.size());\n    for(long i = 0; i < l.size(); ++i) {\n   \
    \     for(long j = i+1; j < l.size(); ++j) {\n            if(l[i] == l[j]) {\n\
    \                v.push_back(l[i]);\n                break;\n            }\n \
    \       }\n    }\n    std::sort(v.begin(), v.end());\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp89nbrls4: /tmp/tmp89nbrls4.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> uni;\n    uni.reserve(l.size());\n    for(long\
    \ i = 1; i < l.size(); i++){\n        if(l[i-1] != l[i])\n            uni.push_back(l[i]);\n\
    \    }\n    return uni;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp17o_k5e_: /tmp/tmp17o_k5e_.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132798
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    for (long i : l) {\n        std::find(u.begin(), u.end(), i) == u.end()\
    \ ? u.push_back(i) : std::find(u.begin(), u.end(), i) == u.begin() ? u.erase(std::find(u.begin(),\
    \ u.end(), i)) + 1 : ;\n    }\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdk8vwdmq.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdk8vwdmq.cpp:9:168: error: expected primary-expression\
    \ before \u2018;\u2019 token\n    9 |         std::find(u.begin(), u.end(), i)\
    \ == u.end() ? u.push_back(i) : std::find(u.begin(), u.end(), i) == u.begin()\
    \ ? u.erase(std::find(u.begin(), u.end(), i)) + 1 : ;\n      |               \
    \                                                                            \
    \                                                                            \
    \ ^\n"
  stdout: ''
  timestamp: 1660132798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto i : l) {\n        u.push_back(i);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpd4so8qd8: /tmp/tmpd4so8qd8.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132799
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> u;\n    u.push_back(l.at(0));\n    for(size_t\
    \ i = 1; i < l.size(); i++) {\n        if(l.at(i) != l.at(i-1)) {\n          \
    \  u.push_back(l.at(i));\n        }\n    }\n    return u;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132799
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ unique_list;\n    std::set<long> set;\n    for (long i : l) {\n        set.insert(i);\n\
    \    }\n\n    for (long i : set) {\n        unique_list.push_back(i);\n    }\n\
    \n    return unique_list;\n}\nint main() {\n    auto candidate = unique;\n   \
    \ assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132798
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::unique_copy(l.begin(), l.end(), std::back_inserter(l));\n\t\
    l.erase(std::unique(l.begin(), l.end()), l.end());\n\treturn l;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgyvfdazg: /tmp/tmpgyvfdazg.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132799
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::set<long> s;\n    for (auto i : l)\n        s.insert(i);\n\
    \    return std::vector<long>(s.begin(), s.end());\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132799
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n   std::sort(l.begin(),l.end());\n\
    \   std::vector<long> ret;\n   ret.push_back(l.at(0));\n   for(auto i=1;i<l.size();i++){\n\
    \        if(l.at(i)==l.at(i - 1))\n           continue;\n        ret.push_back(l.at(i));\n\
    \   }\n   return ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for(auto i=l.begin();i!=l.end();++i)\n        for(auto j=v.begin();j!=v.end();++j)\n\
    \            if((*i) == (*j)) v.erase(j);\n            else\n                if((*i)\
    \ < (*j)) std::swap(*i,*j);\n                v.push_back(*i);\n    return v;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd3sqx27g.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd3sqx27g.cpp:13:30: error: \u2018i\u2019 was not declared\
    \ in this scope\n   13 |                 v.push_back(*i);\n      |           \
    \                   ^\n"
  stdout: ''
  timestamp: 1660132799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> result(l);\n    std::sort(result.begin(), result.end());\n\
    \    return std::unique(result);\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpquq1cmja.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpquq1cmja.cpp:10:30: error: no matching function for call\
    \ to \u2018unique(std::vector<long int>&)\u2019\n   10 |     return std::unique(result);\n\
    \      |                              ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpquq1cmja.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1001:5:\
    \ note: candidate: \u2018template<class _FIter> _FIter std::unique(_FIter, _FIter)\u2019\
    \n 1001 |     unique(_ForwardIterator __first, _ForwardIterator __last)\n    \
    \  |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1001:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpquq1cmja.cpp:10:30: note:   candidate\
    \ expects 2 arguments, 1 provided\n   10 |     return std::unique(result);\n \
    \     |                              ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpquq1cmja.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1031:5:\
    \ note: candidate: \u2018template<class _FIter, class _BinaryPredicate> _FIter\
    \ std::unique(_FIter, _FIter, _BinaryPredicate)\u2019\n 1031 |     unique(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1031:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpquq1cmja.cpp:10:30:\
    \ note:   candidate expects 3 arguments, 1 provided\n   10 |     return std::unique(result);\n\
    \      |                              ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpquq1cmja.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:230:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _BinaryPredicate> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ _ForwardIterator> std::unique(_Execut"
  stdout: ''
  timestamp: 1660132799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for (auto x : l) {\n        auto it = std::find(v.begin(), v.end(),\
    \ x); \n        if (it == v.end()) v.push_back(x);\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp5k9enh9b: /tmp/tmp5k9enh9b.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for(long i = 0; i < l.size(); ++i)\n        v.insert(v.end(), l[i]);\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpkz7j_wmu: /tmp/tmpkz7j_wmu.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    ret.push_back(l[0]);\n    for\
    \ (long i : l) ret.push_back(i);\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpyvcouxgf: /tmp/tmpyvcouxgf.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    if (l.size() == 0)\
    \ return std::vector<long>();\n    std::vector<long> res = l;\n    std::sort(res.begin(),\
    \ res.end());\n    std::unique_copy(res.begin(), res.end(), std::back_inserter(res));\n\
    \    return res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpgwj5n4lc: /tmp/tmpgwj5n4lc.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132800
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    u.insert(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_xw_70k.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4_xw_70k.cpp:9:54: error: no matching function for call\
    \ to \u2018std::vector<long int>::insert(__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >, std::vector<long int>::iterator)\u2019\n    9 |   \
    \  u.insert(std::unique(l.begin(), l.end()), l.end());\n      |              \
    \                                        ^\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4_xw_70k.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:130:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::insert(std::vector<_Tp,\
    \ _Alloc>::const_iterator, const value_type&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*; std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n  130 |     vector<_Tp,\
    \ _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/vector.tcc:132:57:\
    \ note:   no known conversion for argument 2 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n  132 |\
    \     insert(const_iterator __position, const value_type& __x)\n      |      \
    \                                 ~~~~~~~~~~~~~~~~~~^~~\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional"
  stdout: ''
  timestamp: 1660132799
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    if (l.size() == 0)\
    \ {\n        return l;\n    }\n    std::sort(l.begin(), l.end());\n    std::vector<long>\
    \ r;\n    for (std::size_t i = 0; i < l.size() - 1; ++i) {\n        if (l[i] ==\
    \ l[i + 1]) {\n            continue;\n        }\n        r.push_back(l[i]);\n\
    \    }\n    r.push_back(l.back());\n    return r;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132799
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  auto it = std::unique(l.begin(), l.end());\n  auto end = l.end();\n\
    \  l.erase(it, end);\n  return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132799
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    long count[100];\n\
    \    std::iota(count, count + 100, 0);\n    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto i : l)\n        if(!find(count, i)) {\n            u.push_back(i);\n\
    \            count[i]++;\n        }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5i3syvt.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpu5i3syvt.cpp:12:13: error: \u2018find\u2019 was not declared\
    \ in this scope; did you mean \u2018std::find\u2019?\n   12 |         if(!find(count,\
    \ i)) {\n      |             ^~~~\n      |             std::find\nIn file included\
    \ from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu5i3syvt.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:60:1:\
    \ note: \u2018std::find\u2019 declared here\n   60 | find(_ExecutionPolicy&& __exec,\
    \ _ForwardIterator __first, _ForwardIterator __last, const _Tp& __value);\n  \
    \    | ^~~~\n"
  stdout: ''
  timestamp: 1660132799
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v; v.insert(v.begin(), 0); // inserting 0 as first element of vector\n    v.erase(std::unique(v.begin(),\
    \ v.end()), v.end()); // erasing duplicates in v\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpk0t4u60k: /tmp/tmpk0t4u60k.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    int n = l.size();\n\
    \    std::vector<long> ret(n);\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < n; i++) {\n        long x = l[i];\n        for (int j = i; j < n;\
    \ j++) {\n            if (l[j] == x)\n                break;\n            ret[j]\
    \ = l[j];\n        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpukk_1_1b: /tmp/tmpukk_1_1b.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    int n = l.size();\n\
    \    std::vector<long> u(n, 0);\n    std::sort(l.begin(), l.end());\n    for (int\
    \ i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++)\n            if\
    \ (l[j] != l[i]) {\n                u[l[i]++] = l[j];\n                break;\n\
    \            }\n    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpxqc0y2js: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660132800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Write your code\
    \ here\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp2t0bh6ez: /tmp/tmp2t0bh6ez.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    int n = l.size();\n\
    \    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    for (int i\
    \ = 0; i < n; i++) {\n        if (l[i] != l[n - i - 1]) u.push_back(l[i]);\n \
    \   }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpidc549y2: /tmp/tmpidc549y2.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132800
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  // Use set to remove\
    \ duplicates\n  std::set<long> s(l.begin(), l.end());\n  // Copy return vector\n\
    \  std::vector<long> r(s.size());\n  std::copy(s.begin(), s.end(), r.begin());\n\
    \  return r;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132800
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ tmp;\n    tmp.assign( std::begin(l), std::end(l) );\n    std::sort(std::begin(tmp),\
    \ std::end(tmp));\n    tmp.erase( std::unique( std::begin(tmp), std::end(tmp)),\
    \ std::end(tmp) );\n    return tmp;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\tstd::vector<long> uni;\n\
    \tstd::sort(l.begin(), l.end());\n\tfor (long & i : l)\n\t\tif (i != i)\n\t\t\t\
    uni.push_back(i);\n\treturn uni;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpt4n419ol: /tmp/tmpt4n419ol.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  for(long i=0; i<l.size(); ++i)\n    if(l[i]\
    \ == i)\n      u.push_back(l[i]);\n  return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp5lc27bd7: /tmp/tmp5lc27bd7.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end()); // sort first\n    std::vector<long> res;\n    long curr = 0, last\
    \ = l[0]; // set first element as current and the rest as last\n    for (auto\
    \ i : l) {\n        if (i != last) {\n            res.emplace_back(last);\n  \
    \          last = i;\n        }\n    }\n    res.emplace_back(last);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    l.erase(std::unique(l.begin(),\
    \ l.end()), l.end());\n    return l;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpxrhd2onu: /tmp/tmpxrhd2onu.cpp:12: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    auto it = std::unique(l.begin(),\
    \ l.end());\n    return std::vector<long>(std::next(it), l.end());\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp9o57wj8h: /tmp/tmp9o57wj8h.cpp:12: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> u;\n    long s = 0;\n    for (int i = 0; i\
    \ < l.size(); ++i) {\n        if (l[i] != s) {\n            u.push_back(s);\n\
    \            s = l[i];\n        }\n    }\n    u.push_back(s);\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132800
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n   sort(l.begin(), l.end());\n\
    \   auto current = l.begin(), end = l.end();\n   std::set<long> s;\n   while(current\
    \ != end) {\n       s.insert(*current);\n       current++;\n   }\n   l.assign(s.begin(),\
    \ s.end());\n   return l;\n}\nint main() {\n    auto candidate = unique;\n   \
    \ assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Sort array in\
    \ increasing order \n    std::sort(l.begin(),l.end());\n    \n    // Remove duplicates\
    \ from array\n    std::vector<long> temp(l.size());\n    std::set_difference(l.begin(),l.end(),temp.begin(),temp.end(),std::back_inserter(temp));\n\
    \    \n    // return new vector\n    return temp;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpl4jfja8h: /tmp/tmpl4jfja8h.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // return l;\n  \
    \  std::vector<long> res;\n    std::set<long> seen;\n    // for(long &x: l){\n\
    \    for(long x : l){\n        if(!seen.insert(x).second){\n            res.push_back(x);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp863q48m7: /tmp/tmp863q48m7.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    long a = l[0];\n\
    \    std::vector<long> r;\n    for (size_t i = 0; i < l.size(); ++i) {\n     \
    \   if (l[i] == a) {\n            continue;\n        } else {\n            r.push_back(l[i]);\n\
    \        }\n        a = l[i];\n    }\n    return r;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmphyx9cte3: /tmp/tmphyx9cte3.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(long i=0; i<l.size(); i++)\n\
    \        if(l[i] != i)\n            u.push_back(l[i]);\n    return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpsfvzvshr: /tmp/tmpsfvzvshr.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::set<long> s;\n\
    \    for (long l : l)\n        s.insert(l);\n    return std::vector<long>(s.begin(),\
    \ s.end());\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    u.assign(std::begin(l), std::end(l));\n    std::sort(std::begin(u),\
    \ std::end(u));\n    return u;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpqmhk9qen: /tmp/tmpqmhk9qen.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Create auxiliary\
    \ array to store unique elements\n    std::vector<long> uni(std::begin(l), std::end(l));\n\
    \    \n    // Sort array\n    std::sort(uni.begin(), uni.end());\n\n    // Remove\
    \ duplicates\n    std::set<long> u;\n    u.insert(uni.begin(), uni.end());\n \
    \   uni.clear();\n\n    // Return unique elements\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqhqaz4tm.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqhqaz4tm.cpp:19:12: error: could not convert \u2018u\u2019\
    \ from \u2018std::set<long int>\u2019 to \u2018std::vector<long int>\u2019\n \
    \  19 |     return u;\n      |            ^\n      |            |\n      |   \
    \         std::set<long int>\n"
  stdout: ''
  timestamp: 1660132800
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    std::sort(l.begin(),l.end());\n    for(long i=0;i<l.size()-1;i++){\n\
    \        if(l[i]==l[i+1]){\n            continue;\n        }\n        else{\n\
    \            v.push_back(l[i]);\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpfqrk3fud: /tmp/tmpfqrk3fud.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    long t;\n    std::vector<long>\
    \ v;\n    for (auto &e: l)\n        if (find(v.begin(), v.end(), e)==v.end())\n\
    \            v.push_back(e);\n    t = *std::max_element(v.begin(), v.end());\n\
    \    v.erase(std::remove(v.begin(), v.end(), t), v.end());\n    return v;\n}\n\
    int main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpdrctpz5x: /tmp/tmpdrctpz5x.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132802
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  for (long i : l) {\n    if (i == u[u.size()\
    \ - 1])\n      continue;\n    else\n      u.push_back(i);\n  }\n  return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // use std::map to\
    \ sort list\n    // std::map<long, bool> map;\n    std::vector<long> u;\n    std::map<long,\
    \ bool> m;\n    for (long v : l) {\n        // insert if not already exists\n\
    \        // map.insert({v, true});\n        if (!m.insert({v, false}).second)\n\
    \            u.push_back(v);\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp3qzjm_sn: /tmp/tmp3qzjm_sn.cpp:21: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132802
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    int size = 0;\n \
    \   for (long i : l) {\n        ++size;\n    }\n    std::vector<long> v(size);\
    \ // Create space for unique elements\n    std::iota(v.begin(), v.end(), 0);\n\
    \    std::sort(v.begin(), v.end()); // Sort array in increasing order\n    int\
    \ j = 0;\n    for (long i : l) {\n        while (!std::binary_search(v.begin(),\
    \ v.end(), i) && j++ != size - 1) {\n            std::iter_swap(v.begin() + j,\
    \ v.begin() + j + 1);\n        }\n        v[j] = i;\n    }\n    return v;\n}\n\
    int main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::set<long> seen;\n    for(long i : l) \n        if(!seen.insert(i).second)\
    \ \n            u.push_back(i);\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpp6ezsu3w: /tmp/tmpp6ezsu3w.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132801
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Sort the list\n\
    \    std::sort(l.begin(), l.end());\n    // Return unique elements from the sorted\
    \ list\n    std::set<long> s;\n    for(auto &i : l)\n        if(s.find(i) == s.end())\n\
    \            s.insert(i);\n    return std::vector<long>(s.begin(), s.end());\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132801
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  sort(l.begin(), l.end());\n\
    \  std::vector<long> ret;\n  ret.reserve(l.size());\n  for (int i = 0; i < l.size();\
    \ ++i) {\n    while (i != 0 && l[i] == l[i-1]) {\n      ret.push_back(l[i-1]);\n\
    \      --i;\n    }\n    ret.push_back(l[i]);\n  }\n  return ret;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132806
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    result.reserve(l.size());\n    std::vector<std::pair<long, long>>\
    \ tmp;\n    for (auto e : l)\n        if (!tmp.empty() &&\n            tmp.back().first\
    \ == e)\n            tmp.back().second++;\n        else\n            tmp.push_back(std::make_pair(e,\
    \ 1));\n    for (auto e : tmp)\n        if (e.second > 1)\n            result.push_back(e.first);\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpudojvtyu: /tmp/tmpudojvtyu.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    std::vector<long>::iterator it;\n    ans.reserve(l.size());\n    for\
    \ (it = l.begin(); it != l.end(); ++it) {\n        bool present = false;\n   \
    \     for (ans.begin(); ans.end() != ans.end(); ++ans) {\n            if (*it\
    \ == *ans) {\n                present = true;\n                break;\n      \
    \      }\n        }\n        if (!present) {\n            ans.push_back(*it);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplwaabp6t.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplwaabp6t.cpp:12:51: error: no match for \u2018operator++\u2019\
    \ (operand type is \u2018std::vector<long int>\u2019)\n   12 |         for (ans.begin();\
    \ ans.end() != ans.end(); ++ans) {\n      |                                  \
    \                 ^~~~~\n/tmp/tmplwaabp6t.cpp:13:24: error: no match for \u2018\
    operator*\u2019 (operand type is \u2018std::vector<long int>\u2019)\n   13 | \
    \            if (*it == *ans) {\n      |                        ^~~~\nIn file\
    \ included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplwaabp6t.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmplwaabp6t.cpp:13:25:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   13 |             if (*it == *ans) {\n      |                         ^~~\n\
    In file included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmplwaabp6t.cpp:2:\n/usr/include/c++/9/complex:400:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const _Tp&)\u2019\n  400 |     operator*(const complex<_Tp>&\
    \ __x, const _Tp& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:400:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmplwaabp6t.cpp:13:25:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n   13 |             if (*it == *ans) {\n      |                         ^~~\n\
    In file included from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,"
  stdout: ''
  timestamp: 1660132801
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ans;\n    std::sort(l.begin(), l.end());\n    std::size_t i = 0;\n    for (std::size_t\
    \ j = (std::size_t)l.size(); j > i; j--) {\n        if (l[j] == l[j-1]) ans.push_back(l[j]);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpne8e00wy: /tmp/tmpne8e00wy.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    assert(!l.empty());\n\
    \    std::vector<long> vec;\n    long u,d;\n    bool found;\n    vec.push_back(0);\n\
    \    for(long i=1;i<l.size();i++) {\n        found = false;\n        u = l[i-1];\n\
    \        d = l[i];\n        for(long j=i+1;j<vec.size();j++) {\n            if(vec[j]\
    \ == u && abs(d-vec[j]) <= 1) {\n                found = true;\n             \
    \   break;\n            }\n        }\n        if(!found) vec.push_back(d);\n \
    \   }\n    return vec;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpye0qbc_4: /tmp/tmpye0qbc_4.cpp:28: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  for (long i : l) {\n    if (u.empty() ||\
    \ u[u.size()-1] != i) {\n      u.push_back(i);\n    }\n  }\n  return u;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    std::vector<long>\
    \ result(it - l.begin());\n    std::copy(l.begin(), it, result.begin());\n   \
    \ return result;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::unique(l.begin(), l.end());\n  return l;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpj_kpl22j: /tmp/tmpj_kpl22j.cpp:13: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ uniq_l;\n    uniq_l.reserve(l.size());\n    for (long i : l) {\n        if (uniq_l.find(i)\
    \ == uniq_l.end())\n            uniq_l.push_back(i);\n    }\n    return uniq_l;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_5r4iio.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1_5r4iio.cpp:10:20: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   10 |         if (uniq_l.find(i)\
    \ == uniq_l.end())\n      |                    ^~~~\n"
  stdout: ''
  timestamp: 1660132802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    sort(l.begin(), l.end());\n\
    \    std::vector<long> u;\n    for(long i : l) {\n        for(long j=i+1;j<l.size();j++)\
    \ {\n            if(l[i]==l[j])\n                break;\n        }\n        if(j-i>1)\n\
    \            u.push_back(l[i]);\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg7rrd1mu.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg7rrd1mu.cpp:14:12: error: \u2018j\u2019 was not declared\
    \ in this scope\n   14 |         if(j-i>1)\n      |            ^\n"
  stdout: ''
  timestamp: 1660132802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ temp;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size();\
    \ i++)\n        if (i != std::find(l.begin(), l.end(), l[i]))\n            temp.push_back(l[i]);\n\
    \    return temp;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ae_yx47.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3ae_yx47.cpp:10:15: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   10 |         if (i != std::find(l.begin(),\
    \ l.end(), l[i]))\n      |             ~ ^~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |             |             |\n      |             long int      __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3ae_yx47.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp3ae_yx47.cpp:10:52: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long int\u2019\n   10 |         if (i != std::find(l.begin(), l.end(),\
    \ l[i]))\n      |                                                    ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3ae_yx47.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:904:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator!=(const\
    \ __gnu_cxx::__normal_iterator<_Iterato"
  stdout: ''
  timestamp: 1660132802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // sort the array\
    \ in ascending order\n    sort(l.begin(), l.end());\n    // return unique values\n\
    \    std::vector<long> u;\n    for(long i: l)\n        if(!u.empty() && i == u[u.size()\
    \ - 1])\n            u.pop_back();\n        else\n            u.push_back(i);\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpp0273m7a: /tmp/tmpp0273m7a.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132803
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Use a set and\
    \ sort\n    std::set<long> s(l);\n    return std::vector<long>(s.begin(), s.end());\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp18cb0tk5.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp18cb0tk5.cpp:8:23: error: no matching function for call\
    \ to \u2018std::set<long int>::set(std::vector<long int>&)\u2019\n    8 |    \
    \ std::set<long> s(l);\n      |                       ^\nIn file included from\
    \ /usr/include/c++/9/set:61,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp18cb0tk5.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:271:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::set<_Key, _Compare,\
    \ _Alloc>::set(_InputIterator, _InputIterator, const allocator_type&)\u2019\n\
    \  271 |  set(_InputIterator __first, _InputIterator __last,\n      |  ^~~\n/usr/include/c++/9/bits/stl_set.h:271:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp18cb0tk5.cpp:8:23:\
    \ note:   candidate expects 3 arguments, 1 provided\n    8 |     std::set<long>\
    \ s(l);\n      |                       ^\nIn file included from /usr/include/c++/9/set:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:87,\n\
    \                 from /tmp/tmp18cb0tk5.cpp:2:\n/usr/include/c++/9/bits/stl_set.h:265:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::set(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Key = long int; _Compare = std::less<long int>;\
    \ _Alloc = std::allocator<long int>; std::set<_Key, _Compare, _Alloc>::allocator_type\
    \ = std::allocator<long int>]\u2019\n  265 |       set(initializer_list<value_type>\
    \ __l, const allocator_type& __a)\n      |       ^~~\n/usr/include/c++/9/bits/stl_set.h:265:7:\
    \ note:   candidate expects 2 arguments, 1 provided\n/usr/include/c++/9/bits/stl_set.h:259:7:\
    \ note: candidate: \u2018std::set<_Key, _Compare, _Alloc>::set(std::set<_Key,\
    \ _Compare, _Alloc>&&, const allocator_type&) [with _Key = long int; _Compare\
    \ = std::less<long int>; _Alloc = std::allocator<long int>; std::set<_Key, _Compare,\
    \ _Alloc>::allocator_type = std::allocator<long int>]\u2019\n  259 |       set(set&&\
    \ __x, const allocator_type& __a)\n      |       ^~~\n/usr/include/c++"
  stdout: ''
  timestamp: 1660132802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    long x = 0;\n   \
    \ std::vector<long> v;\n    for(long &it : l)\n        v.push_back(it);\n    std::sort(v.begin(),\
    \ v.end());\n    for(long &it : v)\n        if(it != x)\n            x.push_back(it);\n\
    \    return v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdmbt4qf0.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdmbt4qf0.cpp:14:15: error: request for member \u2018push_back\u2019\
    \ in \u2018x\u2019, which is of non-class type \u2018long int\u2019\n   14 | \
    \            x.push_back(it);\n      |               ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132802
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::vector<long> uniques;\n\
    \  long i = 0;\n  for (long j : l) {\n    if (i == j) {\n      i++;\n      continue;\n\
    \    }\n    uniques.push_back(j);\n  }\n  return uniques;\n}\nint main() {\n \
    \   auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp3ytpu6mv: /tmp/tmp3ytpu6mv.cpp:20: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    if (l.size() < 2)\
    \ return l;\n    std::vector<long> res = l;\n    std::sort(res.begin(), res.end());\n\
    \    std::sort(res.rbegin(), res.rend());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    return res;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpxunnspbu: /tmp/tmpxunnspbu.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result;\n    std::set<long> s;\n    for (long x: l)\n        s.insert(x);\n\
    \    for (long x: l)\n        if (s.find(x) == s.end())\n            result.push_back(x);\n\
    \    return result;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpslatf71k: /tmp/tmpslatf71k.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132803
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ res;\n    std::set<long> set(l.begin(), l.end());\n    std::copy(set.begin(),\
    \ set.end(), std::back_inserter(res));\n    return res;\n}\nint main() {\n   \
    \ auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132803
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ result(l);\n    std::sort(result.begin(), result.end());\n    auto it = std::unique(result.begin(),\
    \ result.end());\n    result.erase(it, result.end());\n    return result;\n}\n\
    int main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ new_list;\n    \n    std::sort(l.begin(), l.end());\n    \n    for (long i :\
    \ l) {\n        if (i == l[-1]) new_list.push_back(i);\n    }\n    \n    return\
    \ new_list;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp0w2ozdy5: /tmp/tmp0w2ozdy5.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  for (long x : l)\n    if (u.find(x) ==\
    \ u.end())\n      u.push_back(x);\n  return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmparisiim0.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmparisiim0.cpp:10:11: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   10 |     if (u.find(x) ==\
    \ u.end())\n      |           ^~~~\n"
  stdout: ''
  timestamp: 1660132802
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::vector<long>::iterator it;\n    std::sort(l.begin(), l.end());\n\
    \    for (it = l.begin(); it != l.end(); it++) {\n        if (u.find(*it) == u.end())\n\
    \            u.push_back(*it);\n    }\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx6xhlmo7.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx6xhlmo7.cpp:11:15: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018find\u2019\n   11 |         if (u.find(*it)\
    \ == u.end())\n      |               ^~~~\n"
  stdout: ''
  timestamp: 1660132802
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::set<long> s;\n\
    \    for (long i : l) s.insert(i);\n    return std::vector<long>(s.begin(), s.end());\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132803
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  return std::unique(l.begin(), l.end());\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ts0g1bt.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8ts0g1bt.cpp:8:21: error: could not convert \u2018std::unique<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(l.std::vector<long int>::begin(), l.std::vector<long\
    \ int>::end())\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n    8 |   return std::unique(l.begin(),\
    \ l.end());\n      |          ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |       \
    \              |\n      |                     __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660132803
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    sort(l.begin(), l.end());\n\
    \    std::vector<long> v;\n    v.push_back(l.front());\n    for (long i : l)\n\
    \        if (i != l.front() && v.back() != i) {\n            v.push_back(i);\n\
    \        }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n   \
    \ assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132803
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\t// sort the list and\
    \ then remove the duplicates\n\tstd::sort(l.begin(), l.end());\n\tstd::vector<long>\
    \ rev(l.size());\n\tstd::iota(rev.begin(), rev.end(), 0);\n\tstd::unique_copy(l.begin(),\
    \ l.end(), std::back_inserter(rev));\n\treturn rev;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpbpy11wrw: /tmp/tmpbpy11wrw.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end()); // Sort ascending\n\tstd::set<long> uniqueItems;\n\tfor (long i :\
    \ l) { uniqueItems.insert(i); }\n\tstd::vector<long> res(uniqueItems.begin(),\
    \ uniqueItems.end());\n\treturn res;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132804
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long i = 0; i < l.size(); ++i)\
    \ if (u[i] != l[i]) u.push_back(l[i]);\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132804
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    l.erase(std::unique(l.begin(), l.end()), l.end());\n    return\
    \ l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132793
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(std::vector<long>::iterator\
    \ it = l.begin(); it != l.end(); ++it) {\n        if(std::find(u.begin(), u.end(),\
    \ *it) == u.end()) {\n            u.push_back(*it);\n        }\n    }\n    return\
    \ u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132803
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    auto result = std::set<long>();\n\
    \    for (auto& el : l)\n        ++result[el];\n    std::vector<long> res;\n \
    \   res.reserve(l.size());\n    for (auto& el : l)\n        if (res.find(el) ==\
    \ res.end())\n            res.push_back(el);\n    return res;\n}\nint main() {\n\
    \    auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjyghtht_.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjyghtht_.cpp:9:17: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::set<long int>\u2019 and \u2018long int\u2019)\n\
    \    9 |         ++result[el];\n      |                 ^\n/tmp/tmpjyghtht_.cpp:13:17:\
    \ error: \u2018class std::vector<long int>\u2019 has no member named \u2018find\u2019\
    \n   13 |         if (res.find(el) == res.end())\n      |                 ^~~~\n"
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n   std::vector<long>\
    \ u;\n   std::sort(l.begin(),l.end());\n   std::set_difference(l.begin(),l.end(),u.begin(),u.end(),std::less<long>());\n\
    \   return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpiiq1ii15.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_difference(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = std::less<long int>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019:\n\
    /usr/include/c++/9/bits/stl_algo.h:5435:46:   required from \u2018_OIter std::set_difference(_IIter1,\
    \ _IIter1, _IIter2, _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _OIter = std::less<long int>]\u2019\n/tmp/tmpiiq1ii15.cpp:9:77:\
    \   required from here\n/usr/include/c++/9/bits/stl_algo.h:5378:6: error: no match\
    \ for \u2018operator*\u2019 (operand type is \u2018std::less<long int>\u2019)\n\
    \ 5378 |      *__result = *__first1;\n      |      ^~~~~~~~~\nIn file included\
    \ from /usr/include/c++/9/ccomplex:39,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpiiq1ii15.cpp:2:\n/usr/include/c++/9/complex:391:5:\
    \ note: candidate: \u2018template<class _Tp> std::complex<_Tp> std::operator*(const\
    \ std::complex<_Tp>&, const std::complex<_Tp>&)\u2019\n  391 |     operator*(const\
    \ complex<_Tp>& __x, const complex<_Tp>& __y)\n      |     ^~~~~~~~\n/usr/include/c++/9/complex:391:5:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiiq1ii15.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5378:6:\
    \ note:   \u2018std::less<long int>\u2019 is not derived from \u2018const std::complex<_Tp>\u2019\
    \n 5378 |      *__result = *__first1;\n   "
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    if (l.size() <= 1)\
    \ return l;\n    std::vector<long> ret(l.size());\n    long last = l[0], i = 1;\n\
    \    for (; i < l.size(); i++) {\n        if (l[i] != last) ret[i - 1]++, last\
    \ = l[i];\n    }\n    return ret;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp7oae10vo: /tmp/tmp7oae10vo.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n\t// Sort\n\tstd::sort(l.begin(),\
    \ l.end());\n\n\t// Unique values\n\tstd::vector<long> u;\n\tfor (long i: l) {\n\
    \t\tstd::find(u.begin(), u.end(), i) == u.end() ? u.push_back(i) : i++;\n\t}\n\
    \treturn u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpulyvisgm.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpulyvisgm.cpp:13:67: error: second operand to the conditional\
    \ operator is of type \u2018void\u2019, but the third operand is neither a throw-expression\
    \ nor of type \u2018void\u2019\n   13 |   std::find(u.begin(), u.end(), i) ==\
    \ u.end() ? u.push_back(i) : i++;\n      |                                   \
    \                               ~^~\n"
  stdout: ''
  timestamp: 1660132803
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> u;\n  for (int i = 0; i < l.size(); ++i) {\n\
    \    if (l[i] != l[i - 1]) {\n      u.push_back(l[i]);\n    }\n  }\n  return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n   std::sort(l.begin(),l.end());\n\
    \   auto iter = l.begin();\n   std::vector<long> v;\n   while(iter != l.end())\
    \ {\n      if (iter == l.begin()) v.push_back(*iter);\n      else if((*iter) ==\
    \ (*(iter-1))) v.push_back(*iter);\n      ++iter;\n   }\n   return v;\n}\nint\
    \ main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwslvly0j: /tmp/tmpwslvly0j.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    return std::vector<long>(l.begin(),\
    \ it);\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132804
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    // Check for empty list\n    if (l.empty()) std::cout << \"Empty list.\"\
    ;\n    else {\n        // Remove duplicate elements\n        std::sort(l.begin(),\
    \ l.end());\n        std::unique_copy(l.begin(), l.end(), std::back_inserter(v));\n\
    \    }\n    return v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ out;\n    for (long &x: l) {\n        std::unordered_map<long, bool> m;\n  \
    \      for (long &y: l) {\n            if (y == x) {\n                continue;\n\
    \            }\n            if (m.count(y)) {\n                continue;\n   \
    \         }\n            m[y] = true;\n        }\n        out.push_back(x);\n\
    \    }\n    return out;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpapvq98uq: /tmp/tmpapvq98uq.cpp:25: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    int n = l.size();\n\
    \    std::vector<long> u;\n    std::vector<long> v(std::begin(l), std::end(l));\n\
    \    std::sort(std::begin(v), std::end(v));\n    for (long i = 0; i < n; i++)\
    \ {\n        if (v[i] == v[i - 1]) {\n            continue;\n        }\n     \
    \   u.push_back(v[i]);\n    }\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Use bitset and\
    \ set to zero\n    std::vector<long> u;\n    std::bitset<long> seen;\n    for\
    \ (long i : l)\n        if (seen.to_ulong() & 1LL)\n            u.push_back(i);\n\
    \        seen.to_ulong() |= 1LL;\n    return u;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplxf8aba6.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplxf8aba6.cpp:9:21: error: type/value mismatch at argument\
    \ 1 in template parameter list for \u2018template<long unsigned int _Nb> class\
    \ std::bitset\u2019\n    9 |     std::bitset<long> seen;\n      |            \
    \         ^\n/tmp/tmplxf8aba6.cpp:9:21: note:   expected a constant of type \u2018\
    long unsigned int\u2019, got \u2018long int\u2019\n/tmp/tmplxf8aba6.cpp:11:18:\
    \ error: request for member \u2018to_ulong\u2019 in \u2018seen\u2019, which is\
    \ of non-class type \u2018int\u2019\n   11 |         if (seen.to_ulong() & 1LL)\n\
    \      |                  ^~~~~~~~\n/tmp/tmplxf8aba6.cpp:13:14: error: request\
    \ for member \u2018to_ulong\u2019 in \u2018seen\u2019, which is of non-class type\
    \ \u2018int\u2019\n   13 |         seen.to_ulong() |= 1LL;\n      |          \
    \    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ ret;\n    std::sort(l.begin(), l.end());\n    std::set_difference(l.begin(),\
    \ l.end(), std::back_inserter(ret), [] (long a, long b) { return a < b; });\n\
    \    return ret;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmps8v_wjle.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmps8v_wjle.cpp:9:107: error: no matching function for call\
    \ to \u2018set_difference(std::vector<long int>::iterator, std::vector<long int>::iterator,\
    \ std::back_insert_iterator<std::vector<long int> >, unique(std::vector<long int>)::<lambda(long\
    \ int, long int)>)\u2019\n    9 |     std::set_difference(l.begin(), l.end(),\
    \ std::back_inserter(ret), [] (long a, long b) { return a < b; });\n      |  \
    \                                                                            \
    \                             ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps8v_wjle.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5415:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter>\
    \ _OIter std::set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter)\u2019\
    \n 5415 |     set_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n\
    \      |     ^~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5415:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmps8v_wjle.cpp:9:107:\
    \ note:   deduced conflicting types for parameter \u2018_IIter2\u2019 (\u2018\
    std::back_insert_iterator<std::vector<long int> >\u2019 and \u2018unique(std::vector<long\
    \ int>)::<lambda(long int, long int)>\u2019)\n    9 |     std::set_difference(l.begin(),\
    \ l.end(), std::back_inserter(ret), [] (long a, long b) { return a < b; });\n\
    \      |                                                                     \
    \                                      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps8v_wjle.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5466:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter,\
    \ class _Compare> _OIter std::set_difference(_IIter1, _IIter1, _IIter2, _IIter2,\
    \ _OIter, _Compare)\u2019\n 5466 |     set_difference(_InputIterat"
  stdout: ''
  timestamp: 1660132803
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto it = std::unique(l.begin(), l.end());\n    l.erase(it, l.end());\n\
    \    return l;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  assert(l.size() > 0);\n\
    \  std::vector<long> u;\n  std::unordered_set<long> s(l.begin(), l.end());\n \
    \ for (long i : l) {\n    if (s.find(i) == s.end()) {\n      u.push_back(i);\n\
    \    }\n  }\n  return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp7gvk6e_q: /tmp/tmp7gvk6e_q.cpp:19: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (long e : l) {\n        u.push_back(e);\n\
    \    }\n    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmph7e55z2x: /tmp/tmph7e55z2x.cpp:16: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::vector<long> result(l.size());\n  std::unique(l.begin(), l.end(),\
    \ result.begin());\n  return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpta3m2cbd.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Iterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Compare = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:980:20:   required from \u2018\
    _ForwardIterator std::__unique(_ForwardIterator, _ForwardIterator, _BinaryPredicate)\
    \ [with _ForwardIterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _BinaryPredicate = __gnu_cxx::__ops::_Iter_comp_iter<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1042:27:\
    \   required from \u2018_FIter std::unique(_FIter, _FIter, _BinaryPredicate) [with\
    \ _FIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _BinaryPredicate\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >]\u2019\n/tmp/tmpta3m2cbd.cpp:9:49:\
    \   required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18: error:\
    \ no match for call to \u2018(__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >) (long int&, long int&)\u2019\n  143 |         { return bool(_M_comp(*__it1,\
    \ *__it2)); }\n      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::set<long> s;\n    std::transform(l.begin(), l.end(), std::inserter(u,\
    \ u.end()), [&s] (long i) { return s.insert(i); });\n    return u;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp9wd_dsec.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OIter std::transform(_IIter, _IIter, _OIter, _UnaryOperation) [with\
    \ _IIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OIter\
    \ = std::insert_iterator<std::vector<long int> >; _UnaryOperation = unique(std::vector<long\
    \ int>)::<lambda(long int)>]\u2019:\n/tmp/tmp9wd_dsec.cpp:9:104:   required from\
    \ here\n/usr/include/c++/9/bits/stl_algo.h:4343:12: error: no match for \u2018\
    operator=\u2019 (operand types are \u2018std::insert_iterator<std::vector<long\
    \ int> >\u2019 and \u2018std::pair<std::_Rb_tree_const_iterator<long int>, bool>\u2019\
    )\n 4343 |  *__result = __unary_op(*__first);\n      |  ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp9wd_dsec.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:716:7:\
    \ note: candidate: \u2018std::insert_iterator<_Container>& std::insert_iterator<_Container>::operator=(const\
    \ typename _Container::value_type&) [with _Container = std::vector<long int>;\
    \ typename _Container::value_type = long int]\u2019\n  716 |       operator=(const\
    \ typename _Container::value_type& __value)\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:716:56:\
    \ note:   no known conversion for argument 1 from \u2018std::pair<std::_Rb_tree_const_iterator<long\
    \ int>, bool>\u2019 to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019\
    }\n  716 |       operator=(const typename _Container::value_type& __value)\n \
    \     |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:724:7:\
    \ note: candidate: \u2018std::insert_iterator<_Container>& std::insert_iterator<_Container>::operator=(typename\
    \ _Container::va"
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    assert(l.size() >\
    \ 0);\n    std::sort(l.begin(), l.end());\n    std::vector<long> u;\n    for (long\
    \ i: l) {\n        u.push_back(i);\n    }\n    return u;\n}\nint main() {\n  \
    \  auto candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp5bivi4di: /tmp/tmp5bivi4di.cpp:17: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    auto it = std::begin(l);\n\
    \    auto last = std::end(l);\n    it--;\n    std::vector<long> u;\n    while(it\
    \ != last) {\n        if(*it != *it){\n            u.push_back(*it);\n       \
    \     it--;\n        }else{\n            it++;\n        }\n    }\n    return u;\n\
    }\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmpwled2xvy: /tmp/tmpwled2xvy.cpp:23: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ v;\n    for(long &i : l) {\n        if(!find(v.begin(), v.end(), i))\n     \
    \       v.push_back(i);\n    }\n    return v;\n}\nint main() {\n    auto candidate\
    \ = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp54iwwci4.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp54iwwci4.cpp:9:12: error: no match for \u2018operator!\u2019\
    \ (operand type is \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n    9 |         if(!find(v.begin(), v.end(), i))\n      |   \
    \         ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp54iwwci4.cpp:9:12: note: candidate:\
    \ \u2018operator!(bool)\u2019 <built-in>\n/tmp/tmp54iwwci4.cpp:9:12: note:   no\
    \ known conversion for argument 1 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018bool\u2019\n"
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    std::copy(l.begin(), l.end(), std::back_inserter(u));\n\
    \    return u;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6a4adu17: /tmp/tmp6a4adu17.cpp:14: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ nums;\n    std::vector<long> out;\n\n    for (long i : l)\n        nums.push_back(i);\n\
    \n    nums.erase(std::unique(nums.begin(), nums.end()), nums.end());\n\n    for\
    \ (long i : nums)\n        out.push_back(i);\n\n    return out;\n}\nint main()\
    \ {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmp6itt0y_r: /tmp/tmp6itt0y_r.cpp:22: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132805
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    // Create new vector\
    \ with unique elements\n    std::vector<long> result;\n    std::set_difference(l.begin(),\
    \ l.end(), std::back_inserter(result), [](const long &a, const long &b) -> bool\
    \ {\n        return a == b || a < b;\n    });\n    // Sort unique elements\n \
    \   std::sort(result.begin(), result.end());\n    // Return unique elements as\
    \ return value\n    return result;\n}\nint main() {\n    auto candidate = unique;\n\
    \    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmq4pq2rb.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmq4pq2rb.cpp:11:6: error: no matching function for call\
    \ to \u2018set_difference(std::vector<long int>::iterator, std::vector<long int>::iterator,\
    \ std::back_insert_iterator<std::vector<long int> >, unique(std::vector<long int>)::<lambda(const\
    \ long int&, const long int&)>)\u2019\n   11 |     });\n      |      ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmq4pq2rb.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5415:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter>\
    \ _OIter std::set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter)\u2019\
    \n 5415 |     set_difference(_InputIterator1 __first1, _InputIterator1 __last1,\n\
    \      |     ^~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5415:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpmq4pq2rb.cpp:11:6:\
    \ note:   deduced conflicting types for parameter \u2018_IIter2\u2019 (\u2018\
    std::back_insert_iterator<std::vector<long int> >\u2019 and \u2018unique(std::vector<long\
    \ int>)::<lambda(const long int&, const long int&)>\u2019)\n   11 |     });\n\
    \      |      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n   \
    \              from /tmp/tmpmq4pq2rb.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5466:5:\
    \ note: candidate: \u2018template<class _IIter1, class _IIter2, class _OIter,\
    \ class _Compare> _OIter std::set_difference(_IIter1, _IIter1, _IIter2, _IIter2,\
    \ _OIter, _Compare)\u2019\n 5466 |     set_difference(_InputIterator1 __first1,\
    \ _InputIterator1 __last1,\n      |     ^~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5466:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpmq4pq2rb.cpp:11:6:\
    \ note:   deduced conflicting types for parameter \u2018_IIter2\u2019 (\u2018\
    std::back_insert_iterator<std::vector<long int> >\u2019 and \u2018unique(std::vector<long\
    \ int>)::<lambda(const long int&, con"
  stdout: ''
  timestamp: 1660132804
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    auto it = std::begin(l);\n\
    \    auto end = std::end(l);\n    auto last = std::find(it, end, 0);\n    std::vector<long>\
    \ v(std::begin(last), std::end(last));\n    std::sort(v.begin(), v.end());\n \
    \   return v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk4wjqxzp.cpp: In function \u2018std::vector<long int> unique(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpk4wjqxzp.cpp:10:40: error: no matching function for call\
    \ to \u2018begin(__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >&)\u2019\n   10 |     std::vector<long> v(std::begin(last), std::end(last));\n\
    \      |                                        ^\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk4wjqxzp.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpk4wjqxzp.cpp:10:40: note:   \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   10 |     std::vector<long> v(std::begin(last), std::end(last));\n      |\
    \                                        ^\nIn file included from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/in"
  stdout: ''
  timestamp: 1660132804
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ u;\n    std::sort(std::begin(l), std::end(l));\n    std::unique_copy(std::begin(l),\
    \ std::end(l), std::back_inserter(u));\n    return u;\n}\nint main() {\n    auto\
    \ candidate = unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::vector<long>\
    \ out;\n    for (long x : l) {\n        bool flag = true;\n        for (long i\
    \ = out.size(); i > 0 && flag; i--) {\n            if (out[i] == x) {\n      \
    \          flag = false;\n                break;\n            }\n        }\n \
    \       if (flag) {\n            out.push_back(x);\n        }\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: Exception
  stderr: 'tmppfrofbbc: /tmp/tmppfrofbbc.cpp:24: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132804
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    sort(l.begin(), l.end());\n\
    \    std::vector<long> results;\n    results = l;\n    std::sort(results.begin(),\
    \ results.end());\n    return results;\n}\nint main() {\n    auto candidate =\
    \ unique;\n    assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123})))\
    \ == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmpiq9smpm2: /tmp/tmpiq9smpm2.cpp:15: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132805
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> res;\n    long k = 0;\n    for (long j=0; j<l.size();\
    \ j++)\n        if (j==0 || l[j-1] != l[j]) {\n            res.push_back(l[k++]);\n\
    \        }\n    return res;\n}\nint main() {\n    auto candidate = unique;\n \
    \   assert(candidate((std::vector<long>({5, 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0,\
    \ 2, 3, 5, 9, 123})));\n}\n"
  status: Exception
  stderr: 'tmp8zro_ew3: /tmp/tmp8zro_ew3.cpp:18: int main(): Assertion `candidate((std::vector<long>({5,
    3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123}))'' failed.

    '
  stdout: ''
  timestamp: 1660132805
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
    \ in a list\n// >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [0, 2, 3, 5, 9,\
    \ 123]\nstd::vector<long> unique(std::vector<long> l) {\n  std::vector<long> v;\n\
    \  std::sort(l.begin(), l.end());\n  for (size_t i = 0; i < l.size(); i++) {\n\
    \    if (i == 0 || l[i] != l[i - 1]) {\n      v.push_back(l[i]);\n    }\n  }\n\
    \  return v;\n}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}))) == (std::vector<long>({0, 2, 3, 5, 9, 123})));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132804
