name: HumanEval_31_is_prime
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  long test = 2;\n    while (test <= sqrt(n))\n        if (n % test == 0)\n \
    \           return false;\n        test++;\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long div\
    \ = sqrt(n) - 1;\n    if (div == 0) return true;\n    for (long i = 2; i * i <=\
    \ n; ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    // n is odd\n    if (n % 2 == 0) {\n        return false;\n    }\n\
    \    long m = 3;\n    long p = 3;\n    while (p <= n) {\n        if (n % p ==\
    \ 0) {\n            return false;\n        }\n        p += m;\n        m += 2;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwl4zgvmv: /tmp/tmpwl4zgvmv.cpp:41: int main(): Assertion `candidate((11))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2 || n == 3)\n        return true;\n\
    \    if (n == 1)\n        return false;\n    if (n % 2 == 0 || n % 3 == 0)\n \
    \       return false;\n    long num_four = (n * 6) % 4;\n    for (int i = 1; i\
    \ <= num_four; i += 4)\n        if (n % i == 0 || n % (i + 2) == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfu4ce_ix: /tmp/tmpfu4ce_ix.cpp:34: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Corner case\n    if (n==1 || n==0)\n\
    \        return true;\n    \n    // Get all the factors of 'n'\n    vector<long>\
    \ v(n+1);\n    for (long i=2; i<=n; i++)\n        if (n%i == 0)\n            v.push_back(i);\n\
    \    \n    // If all the factors are '1', return 'false'\n    if (v.size()==1)\n\
    \        return false;\n    \n    // If 'n' is greater than or equal to 3, return\
    \ 'false'\n    if (n > 3)\n        return false;\n    \n    // All the factors\
    \ of 'n' are '2' or greater, so the\n    // number is prime if the size of the\
    \ vector is greater than\n    // or equal to two\n    return (v.size()>= 2);\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_vys9d25.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp_vys9d25.cpp:24:5: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   24 |     vector<long> v(n+1);\n\
    \      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp_vys9d25.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmp_vys9d25.cpp:24:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   24 |     vector<long>\
    \ v(n+1);\n      |            ^~~~\n/tmp/tmp_vys9d25.cpp:27:13: error: \u2018\
    v\u2019 was not declared in this scope\n   27 |             v.push_back(i);\n\
    \      |             ^\n/tmp/tmp_vys9d25.cpp:30:9: error: \u2018v\u2019 was not\
    \ declared in this scope\n   30 |     if (v.size()==1)\n      |         ^\n/tmp/tmp_vys9d25.cpp:40:13:\
    \ error: \u2018v\u2019 was not declared in this scope\n   40 |     return (v.size()>=\
    \ 2);\n      |             ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return true;\n \
    \   }\n    for (int i = 2; i <= sqrt(n); i++) {\n        if (n % i == 0) {\n \
    \           return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmwxf_njv: /tmp/tmpmwxf_njv.cpp:37: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 2) return true;\n  if (n == 1) return\
    \ false;\n  if (n <= 1) return false;\n  int i;\n  if (n % 2 == 0) return false;\n\
    \  for(i = 3; i*i <= n; i += 2)\n    if(n % i == 0) return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your solution here\n    if(n==1)return\
    \ false;\n    if(n==2)return true;\n    if(n==3)return true;\n    if(n%2==0 ||\
    \ n%3==0 || n%5==0 || n%7==0)return false;\n    for(long i=5;i*i<=n;i+=2){\n \
    \       if(n%i==0 || n%(i+2)==0)return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprbeswoq9: /tmp/tmprbeswoq9.cpp:38: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Write your code here.\n  // n = 0, 1 or\
    \ 2\n  if ((n == 2 || n == 1) && n > 1)\n    return true;\n  if (n > 3)\n    return\
    \ false;\n  for (long i = 5; i * i <= n; i += 6)\n    if (n % i == 0)\n      return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuqirrtld: /tmp/tmpuqirrtld.cpp:33: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  else if (n <= 3)\n        return true;\n    else if (n % 2 == 0 || n % 3 ==\
    \ 0)\n        return false;\n    else if (n % 5 == 0 || n % 7 == 0)\n        return\
    \ false;\n    else if (n % 11 == 0)\n        return false;\n    else\n       \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmptvg5q_50: /tmp/tmptvg5q_50.cpp:36: int main(): Assertion `candidate((11))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 0) return false;\n    // Use a\
    \ sieve of Eratosthenes for primes.\n    const int N = (int) (sqrt(sqrt(n)));\n\
    \    vector<bool> sieve(N + 1);\n    for (int p = 2; p <= N; p++) {\n        //\
    \ Ignore 0 and 1.\n        if (sieve[p])\n            continue;\n        // Skip\
    \ over multiples of smaller primes.\n        for (int i = 3; i * i <= p; i +=\
    \ 2)\n            if (p % i == 0)\n                break;\n        // If i is\
    \ larger than sqrt(n), then n is not a prime.\n        if (i > sqrt(n))\n    \
    \        return false;\n        // Mark the multiples of i as not prime.\n   \
    \     for (int j = i * i; j < N; j += i)\n            sieve[j] = false;\n    }\n\
    \    // All numbers in the range [3,n] are prime.\n    return (n == 3);\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpwhdqo8bs.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpwhdqo8bs.cpp:22:5: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   22 |     vector<bool> sieve(N\
    \ + 1);\n      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpwhdqo8bs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpwhdqo8bs.cpp:22:12:\
    \ error: expected primary-expression before \u2018bool\u2019\n   22 |     vector<bool>\
    \ sieve(N + 1);\n      |            ^~~~\n/tmp/tmpwhdqo8bs.cpp:25:13: error: \u2018\
    sieve\u2019 was not declared in this scope; did you mean \u2018sigvec\u2019?\n\
    \   25 |         if (sieve[p])\n      |             ^~~~~\n      |           \
    \  sigvec\n/tmp/tmpwhdqo8bs.cpp:32:13: error: \u2018i\u2019 was not declared in\
    \ this scope\n   32 |         if (i > sqrt(n))\n      |             ^\n/tmp/tmpwhdqo8bs.cpp:35:22:\
    \ error: \u2018i\u2019 was not declared in this scope\n   35 |         for (int\
    \ j = i * i; j < N; j += i)\n      |                      ^\n/tmp/tmpwhdqo8bs.cpp:36:13:\
    \ error: \u2018sieve\u2019 was not declared in this scope; did you mean \u2018\
    sigvec\u2019?\n   36 |             sieve[j] = false;\n      |             ^~~~~\n\
    \      |             sigvec\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Only need to test for 1 and itself to\
    \ take care of the odd numbers,\n  // which do not have an easy Miller-Rabin test\
    \ for primality\n  if (n == 1) return false;\n  if (n == 2 || n == 3) return true;\n\
    \  // If we got here, we're not prime\n  // Test for divisibility by all primes\
    \ less than or equal to sqrt(n)\n  // inclusive\n  for (long i = 4; i <= n / i;\
    \ i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptr077lqi: /tmp/tmptr077lqi.cpp:33: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Return false if n is less than 1.\n\
    \    if (n <= 1) return false;\n    // All even numbers are composites.\n    if\
    \ (n % 2 == 0) return false;\n    // Try dividing by primes up to sqrt(n).\n \
    \   long a = 2, b = 3, n2;\n    while (1) {\n        if ((n % b) == 0) return\
    \ false;\n        n2 = b - a;\n        if (n2 >= n) break;\n        b += a;\n\
    \        a += 2;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn02zn1s8: /tmp/tmpn02zn1s8.cpp:43: int main(): Assertion `candidate((5))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    // Your code\
    \ here\n    long max = (std::sqrt(n)+1)/2;\n    for(int i = 2; i<= max; i++) {\n\
    \        if(n%i==0)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqk86ig9g: /tmp/tmpqk86ig9g.cpp:30: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1) return false;\n  if (n <= 2)\
    \ return true;\n  for (long i = 3; i <= n / i; i += i)\n    if (n % i == 0) return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpc64migag: /tmp/tmpc64migag.cpp:27: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    long d =\
    \ sqrt(n);\n    long r = 2;\n    while (r < d) {\n        if (n % r == 0) {\n\
    \            return false;\n        }\n        r <<= 1;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp09lx3f28: /tmp/tmp09lx3f28.cpp:32: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Use only odd numbers for primality test\n\
    \  if (n % 2 == 0)\n    return false;\n  // All even numbers are composite\n \
    \ if (n <= 3)\n    return true;\n  // Test for divisibility by 2 and 3\n  // If\
    \ remainder is 0 then n is composite\n  // If remainder is 1 then n is not prime\n\
    \  int rem = n % 6;\n  if (rem == 0)\n    return false;\n  rem = n % 7;\n  if\
    \ (rem == 0)\n    return false;\n  // All odd numbers are composite\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpgn5tve8h: /tmp/tmpgn5tve8h.cpp:45: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    // Skip even numbers.\n    for (long i = 2; i <= n / i;\
    \ ++i) {\n        if (n % i == 0) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n          \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2)\n    return false;\n  if (n ==\
    \ 2 || n == 3) {\n    return true;\n  }\n  for (long i = 5; i <= n / i; i++) {\n\
    \    if (n % i == 0)\n      return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpntgqddkd: /tmp/tmpntgqddkd.cpp:32: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    for (long m =\
    \ 2; m <= sqrt(n); m += 2) {\n        if (n % m == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe757d4de: /tmp/tmpe757d4de.cpp:44: int main(): Assertion `candidate((85))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long limit = sqrt(n);\n    for (long i\
    \ = 2; i <= limit; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1tk6izs5: /tmp/tmp1tk6izs5.cpp:35: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  for (int i =\
    \ 2; i <= n / i; ++i) {\n    if (n % i == 0) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Write your code here\n  assert(!(n==0));\n\
    \  if(n <= 1) return false;\n  long sq = sqrt(n);\n  if(sq == 1) return false;\n\
    \  long nm = n/sq;\n  for(long i = 2; i <= sq; ++i)\n    if(n % i == 0) return\
    \ false;\n  if(nm == n) return true;\n  return false;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp2i02k3g: /tmp/tmpp2i02k3g.cpp:33: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\t// Check for trivial cases\n\tif (n < 2)\
    \ return false;\n\tif (n == 2) return true;\n\t// Check if n is prime\n\tlong\
    \ s = sqrt(n) + 1;\n\tfor (int i = 3; i <= s; i += 2)\n\t\tif (n % i == 0) return\
    \ false;\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpriywfkdi: /tmp/tmpriywfkdi.cpp:35: int main(): Assertion `candidate((4))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  int count;\n  if (n <= 1)\n    return false;\n\
    \  for (count = 2; count < n; count++) {\n    if (n % count == 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if(n <= 1)\n        return false;\n   \
    \ if(n <= 3)\n        return true;\n    // Check only odd numbers.\n    for(long\
    \ i = 2; i < n/2; ++i) {\n        if(n%i == 0)\n            return false;\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpo9nedn7q: /tmp/tmpo9nedn7q.cpp:37: int main(): Assertion `candidate((4))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\t// Write your code here.\n\tassert(n < LONG_MAX\
    \ && n >= 1);\n\tlong m = n;\n\tfor (long i = 2; i <= m / i; i++) {\n\t\tif (n\
    \ % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptzowpg53: /tmp/tmptzowpg53.cpp:37: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2)\n        return true;\n   \
    \ if (n % 2 == 0)\n        return false;\n    int k = 3;\n    for (int i = 3;\
    \ i * k <= n; i += 2)\n        if (n % i == 0)\n            return false;\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp_i3_eox3: /tmp/tmp_i3_eox3.cpp:37: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  if (n % 2 == 0)\n    return false;\n  int sqrt_n = sqrt(n);\n\
    \  long limit = sqrt_n * 2;\n  long max_check = sqrt_n;\n  for (long check = 2;\
    \ check < limit; check += 2)\n    if (n % check == 0)\n      return false;\n \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpjh977jqz: /tmp/tmpjh977jqz.cpp:45: int main(): Assertion `candidate((85))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tvector<bool> v(n+1, true);\n\tlong a = 2,\
    \ b = 3;\n\twhile (a < n) {\n\t\tfor (long i = 0; i <= n; i+=b) {\n\t\t\tif (a%b\
    \ == 0) {\n\t\t\t\tv[i] = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlong m = (a*b)\
    \ / b;\n\t\t\t\tv[i] = true;\n\t\t\t\tfor (long j = m+1; j<=n; j+=b)\n\t\t\t\t\
    \tif (j%b == 0) {\n\t\t\t\t\t\tv[j] = false;\n\t\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t\tb += a;\n\t\ta += 1;\n\t}\n\treturn v[n];\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw6rrjkg9.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpw6rrjkg9.cpp:19:2: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   19 |  vector<bool> v(n+1, true);\n\
    \      |  ^~~~~~\n      |  std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpw6rrjkg9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpw6rrjkg9.cpp:19:9:\
    \ error: expected primary-expression before \u2018bool\u2019\n   19 |  vector<bool>\
    \ v(n+1, true);\n      |         ^~~~\n/tmp/tmpw6rrjkg9.cpp:24:5: error: \u2018\
    v\u2019 was not declared in this scope\n   24 |     v[i] = false;\n      |   \
    \  ^\n/tmp/tmpw6rrjkg9.cpp:28:5: error: \u2018v\u2019 was not declared in this\
    \ scope\n   28 |     v[i] = true;\n      |     ^\n/tmp/tmpw6rrjkg9.cpp:39:9: error:\
    \ \u2018v\u2019 was not declared in this scope\n   39 |  return v[n];\n      |\
    \         ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    // Set is_prime\
    \ to false for numbers that are less than two.\n    bool is_prime = false;\n \
    \   // Test only the even numbers up to sqrt(n).\n    for (int i = 2; i < sqrt(n);\
    \ i += 2)\n        if (n % i == 0)\n            is_prime = false;\n    // Test\
    \ all odd numbers up to sqrt(n).\n    for (int i = 3; i * i <= n; i += 2)\n  \
    \      if (n % i == 0)\n            is_prime = true;\n    return is_prime;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2z9kapjx: /tmp/tmp2z9kapjx.cpp:35: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 2) return false;\n    if (n %\
    \ 2 == 0 || n == 2) return false;\n    for (int i = 3; i * i <= n; i += 2)\n \
    \       if (n % i == 0 || n == i) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ // We check only odd numbers here.\n    // The number 2 is the only even prime.\n\
    \    if (n % 2 == 0)\n        return false;\n    // All other numbers are either\
    \ 1 or 3.\n    for (long i = 5; i <= n; i += 2)\n        if (n % i == 0)\n   \
    \         return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzt8ch4sj: /tmp/tmpzt8ch4sj.cpp:34: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n <= 3 && n != 2)\n        return true;\n    long counter = 2;\n    while\
    \ (counter < n) {\n        if (n % counter == 0)\n            return false;\n\
    \        counter++;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n    long sqr = sqrt(n);\n\
    \    for (int i = 3; i <= sqr; i += 2) {\n        if (n % i == 0) {\n        \
    \    return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    int i = 2;\n    while (i <= sqrt(n)) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n        i++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdfgl94w8: /tmp/tmpdfgl94w8.cpp:36: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n <= 1)\n\t\treturn false;\n\tlong m\
    \ = sqrt(n);\n\tlong limit = 1;\n\tfor (long i = 2; i <= m; i++) {\n\t\tlong flag\
    \ = 0;\n\t\tfor (long j = 2; j <= i; j++) {\n\t\t\tif (i % j == 0) {\n\t\t\t\t\
    flag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (flag == 1)\n\t\t\tlimit++;\n\
    \t}\n\tif (n < limit * limit)\n\t\treturn false;\n\telse\n\t\treturn true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp002_05hl: /tmp/tmp002_05hl.cpp:41: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tlong i = 2;\n\t// If n is 2, then only return\
    \ true if the number is not prime.\n\tif (n == 2)\n\t\treturn !((n % 2) == 0);\n\
    \t\n\t// If n is 1, then only return true if n is not prime.\n\tif (n == 1)\n\t\
    \treturn ((n%2)==0);\n\t\n\twhile(i <= sqrt(n))\n\t{\n\t\tif((n % i) == 0)\n\t\
    \t\treturn false;\n\t\ti++;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\t// if n is prime then return true, otherwise\
    \ return false\n\tif (n == 1 || n == 2)\n\t\treturn true;\n\tfor (int i = 3; i\
    \ <= sqrt(n); i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp4m1cukiu: /tmp/tmp4m1cukiu.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2 || n%2 == 0) return false;\n\
    \    int i = 3;\n    while (i <= sqrt(n)) {\n        if (n%i == 0) return false;\n\
    \        i += 2;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  long d\
    \ = 3;\n  long q = n - 1;\n  while (q > 0) {\n    long r = n%d;\n    if (r ==\
    \ 0)\n      return false;\n    d += 2;\n    q--;\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpgs1kjnc4: /tmp/tmpgs1kjnc4.cpp:35: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long i=2;\n    while(i<=sqrt(n))\n    \
    \    if(n%i==0)\n            return false;\n        i++;\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2) return false;\n    if (n ==\
    \ 2) return true;\n    // Sieve of Eratosthenes -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    long i = 2;\n    // We need to check only up to the sqrt(n) number\n    for\
    \ (long x = sqrt(n), xx = 2; x * x <= n; xx = xx + x, x = x / 2) {\n        if\
    \ (n % x == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcxvrdaxs: /tmp/tmpcxvrdaxs.cpp:32: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 2) return true;\n\tif (n % 2 ==\
    \ 0) return false;\n\tfor (int i = 3; i < n; i+=2) {\n\t\tif (n % i == 0) {\n\t\
    \t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmph4svp91y: /tmp/tmph4svp91y.cpp:36: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n<2)return false;\n    long m = (long)\
    \ sqrt(n);\n    if (m>2)return false;\n    if (n%2==0)return false;\n    for (long\
    \ i=3; i<=m; i+=2){\n        if (n%i==0)return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpdw21cc4s: /tmp/tmpdw21cc4s.cpp:31: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert(n >= 2 && n <= 2);\n    int a =\
    \ 3, b = 2, c = 2;\n    long p = n;\n    while ((p & 1) == 0) {\n        p >>=\
    \ 1;\n        ++a;\n    }\n    while (a < n / 2) {\n        if (p % a == 0) {\n\
    \            p /= a;\n            ++b;\n        }\n        ++a;\n    }\n    while\
    \ (p > 1) {\n        if (p % b == 0) {\n            p /= b;\n            ++c;\n\
    \        }\n        --b;\n    }\n    return (c == 1);\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyzejemw_: /tmp/tmpyzejemw_.cpp:19: bool is_prime(long int): Assertion\
    \ `n >= 2 && n <= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    int i =\
    \ 4;\n    while (i < n) i = i * 3 + 1;\n    if (n <= 3) return true;\n    for\
    \ (long i = 1; i <= n; i++) {\n        if (n % i == 0) return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp6envn2sd: /tmp/tmp6envn2sd.cpp:31: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1)\n    return false;\n  if (n ==\
    \ 2)\n    return true;\n  int count = 0;\n  long square = sqrt(n);\n  for (int\
    \ i = 2; i <= square; i++)\n    if (n % i == 0) {\n      count++;\n      if (count\
    \ == 2)\n        return true;\n    }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp4k94pyoj: /tmp/tmp4k94pyoj.cpp:36: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1)\n    return false;\n  // check\
    \ if n is divisible by 2 or 3\n  if (n & 1)\n    return false;\n  int counter\
    \ = 2;\n  while (counter < n / 3) {\n    if (n % counter == 0)\n      return false;\n\
    \    counter += 2;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdbopypdu: /tmp/tmpdbopypdu.cpp:34: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long sqr\
    \ = sqrt(n);\n    for (long i = 1; i <= sqr; i++) {\n        if (n % i == 0) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxantkrtn: /tmp/tmpxantkrtn.cpp:29: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) {\n        return false;\n\
    \    }\n    long max = (long) sqrt(n);\n    long i;\n    for (i = 2; i <= max;\
    \ ++i) {\n        if (n % i == 0) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  int i = 2;\n  for (; i <= n/i; i++)\n   \
    \ if ((n % i) == 0)\n      return false;\n  return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqb6mahoo: /tmp/tmpqb6mahoo.cpp:33: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Check if n is prime\n  if (n == 2) return\
    \ true;\n  // Check if n is divisible by 2, 3 or 5\n  if (n % 2 == 0) return (n\
    \ % 3 == 0 || n % 5 == 0);\n  // Check if the number is divisible by 3\n  if (n\
    \ % 3 == 0) return true;\n  // Check if n is divisible by 5\n  if (n % 5 == 0)\
    \ return true;\n\n  // If n is divisible by 2, 3 or 5, then it is not prime\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpjh8l04e3: /tmp/tmpjh8l04e3.cpp:33: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 0 || n == 1)\n        return true;\n\
    \    if (n % 2 == 0) {\n        return false;\n    }\n    long m = n / 2;\n  \
    \  long b = 1;\n    long r = 2;\n    while (r < m) {\n        if (n % r == 0)\
    \ {\n            b = 1;\n            break;\n        }\n        r += b;\n    \
    \    b++;\n    }\n    if (r != m) {\n        return false;\n    }\n    while (b\
    \ < 64) {\n        if (n % b == 0) {\n            b = 2;\n            break;\n\
    \        }\n        b += 2;\n    }\n    if (b > 64)\n        return false;\n \
    \   return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp7wao8o6x: /tmp/tmp7wao8o6x.cpp:52: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long max = (long long) sqrt(n);\n    for(long\
    \ i = 2; i < max; i++) {\n        if(n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbxnzned7: /tmp/tmpbxnzned7.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert(n >= 2);\n    long i, limit = sqrt(n);\n\
    \    if (limit < 2) return false;\n    if (n <= 1) return false;\n    for (i =\
    \ 2; i <= limit; ++i)\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpfzljq794: /tmp/tmpfzljq794.cpp:19: bool is_prime(long int): Assertion\
    \ `n >= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Base case 1: If n is 1, return True.\n\
    \    if (n <= 1)\n        return true;\n\n    // Base case 2: If n is  prime,\
    \ return True.\n    if (n <= 3)\n        return false;\n\n    // Test each number\
    \ from 3 to sqrt(n).\n    // If n is divisible by any number between 3 and sqrt(n),\n\
    \    // then n is prime.\n    for (int i = 3; i * i <= n; i += 2) {\n        if\
    \ (n % i == 0)\n            return false;\n    }\n\n    // If n is divisible by\
    \ 2, then n is prime.\n    if (n % 2 == 0)\n        return true;\n\n    // If\
    \ n is divisible by 3, then n is prime.\n    if (n % 3 == 0)\n        return true;\n\
    \n    // If n is divisible by 5, then n is prime.\n    if (n % 5 == 0)\n     \
    \   return true;\n\n    // If n is divisible by 7, then n is prime.\n    if (n\
    \ % 7 == 0)\n        return true;\n\n    // If n is divisible by 11, then n is\
    \ prime.\n    if (n % 11 == 0)\n        return true;\n\n    // If n is divisible\
    \ by 13, then n is prime.\n    if (n % 13 == 0)\n        return true;\n\n    //\
    \ If n is divisible by 17, then n is prime.\n    if (n % 17 == 0)\n        return\
    \ true;\n\n    // If n is divisible by 19, then n is prime.\n    if (n % 19 ==\
    \ 0)\n        return true;\n\n    // If n is divisible by by 111, then n is prime.\n\
    \    if (n % 111 == 0)\n        return true;\n\n    // If n is divisible by 131,\
    \ then n is prime.\n    if (n % 131 == 0)\n        return true;\n\n    // If n\
    \ is divisible by 137, then n is prime.\n    if (n % 137 == 0)\n        return\
    \ true;\n\n    // If n is divisible by 139, then n is prime.\n    if (n % 139\
    \ == 0)\n        return true;\n\n    // If n is divisible by 149, then n is prime.\n\
    \    if (n % 149 == 0)\n        return true;\n\n    // If n is divisible by 151,\
    \ then n is prime.\n    if (n % 151 == 0)\n        return true;\n\n    // If n\
    \ is divisible by 157, then n is prime.\n    if (n % 157 == 0)\n        return\
    \ true;\n\n    // If n is divisible by 163, then n is prime.\n    if (n % 163\
    \ == 0)\n        return true;\n\n    // If n is divisible by 171, then n is prime.\n\
    \    if (n % 171 == 0)\n        return true;\n\n    // If n is divisible by 177,\
    \ then n is prime.\n    if (n % 177 == 0)\n        return true;\n\n    // If n\
    \ is divisible by 183, then n is prime.\n\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprim_gowg: /tmp/tmprim_gowg.cpp:112: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Only check the factors of 2, 3, 5, and\
    \ 7.\n  if (n < 3) return n < 5;\n  if (n < 7) return n % 2 == 0 || n % 3 == 0;\n\
    \  // Check all the odd composites up to and including n.\n  for (long i = 5;\
    \ i * i <= n; i += 6) {\n    if (n % i == 0) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpsfyrb42y: /tmp/tmpsfyrb42y.cpp:30: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n < 2)\n\t\treturn false;\n\tif (n ==\
    \ 2)\n\t\treturn true;\n\t// If n = 3 or 5, then it can't be prime.\n\tbool isDivisible\
    \ = false;\n\tlong limit = sqrt(n);\n\tfor (int i = 2; i <= limit; i++)\n\t\t\
    if (n % i == 0)\n\t\t\tisDivisible = true;\n\treturn !isDivisible;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // base cases\n    if (n <= 1) return false;\n\
    \    if (n == 2) return true;\n\n    // Check if n is divisible by 3\n    if (n\
    \ % 3 == 0) return false;\n\n    // Check if n is divisible by 2\n    if (n %\
    \ 2 == 0) return true;\n\n    // Find the highest factor of n\n    // Start by\
    \ seeing if the number is divisible by any numbers up to 10\n    // We can say\
    \ this a prime because any number up to 10 will divide n\n    // If we find any\
    \ number greater than 10 then we know it's not prime\n    for (int i = 4; i <=\
    \ 9; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n\
    \    }\n\n    // If we get here, then n is not prime\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpt963gp54: /tmp/tmpt963gp54.cpp:49: int main(): Assertion `candidate((4))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\t// Base Case\n\tif (n < 2) return false;\n\
    \t// One is not a prime\n\tif (n == 1) return false;\n\t// If even, no primes\n\
    \tif (n % 2 == 0) return false;\n\t// Find number of odd divisors up to n\n\t\
    long m = ((long) sqrt(n) + 1);\n\tfor (int i = 3; i <= m; i += 2) {\n\t\tif (n\
    \ % i == 0) {\n\t\t\treturn false; // Not prime\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ for (int i = 2; i <= n; ++i) {\n        if (n % i == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpve1ob0rc: /tmp/tmpve1ob0rc.cpp:30: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  else if (n <= 3)\n        return true;\n    else {\n        long d = 2;\n \
    \       long r = n - 1;\n        while (r > 0) {\n            if (n % d == 0)\n\
    \                return false;\n            d = d << 1;\n            r = r - 1;\n\
    \        }\n        return true;\n    }\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert(n > 1);\n    // The number must\
    \ be odd.\n    // return n & 1 ==0;\n    // return n > 3 && n & 3==0;\n    return\
    \ ((n & 1) != 0);\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp8_jqlpc4: /tmp/tmp8_jqlpc4.cpp:19: bool is_prime(long int): Assertion\
    \ `n > 1' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 1) return false;\n\tif (n < 2 ||\
    \ n > 61) return false;\n\t// Use sieve of Eratosthenes.\n\tbool prime[1000] =\
    \ {};\n\tprime[0] = true;\n\tfor (long i = 1; i <= n; i++)\n\t\tif (prime[i])\n\
    \t\t\tfor (long j = i * i; j <= n; j += i)\n\t\t\t\tprime[j] = false;\n\treturn\
    \ prime[n];\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp1ho_tybz: /tmp/tmp1ho_tybz.cpp:33: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // First we check if the number is prime\n\
    \    if (n == 2) return true;\n    if (n%2 == 0) return false;\n    // Now we\
    \ try to find any factor of p * p > n\n    for (long d = 2*n; d*d <= n; d += 2)\n\
    \        if (n%d == 0) return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsuypjayh: /tmp/tmpsuypjayh.cpp:35: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Return false if n is 0 (not a prime\
    \ number)\n    if (n == 0)\n        return false;\n\n    // Write the body of\
    \ the function.\n    // Use a sieve of Eratosthenes to determine if a number n\
    \ is prime.\n    // The sieve will be an array of bools that is one bit per number.\n\
    \    // If i is divisible by 2, then the corresponding bit in the array will be\
    \ false.\n    // If i is divisible by 3, then the corresponding bit in the array\
    \ will be false.\n    // If i is divisible by 5, then the corresponding bit in\
    \ the array will be false.\n    // ...\n    // If i is divisible by i, then the\
    \ corresponding bit in the array will be false.\n    // When we have determined\
    \ that the number n is prime, we can safely return true;\n    // Otherwise, we\
    \ will need to check divisibility by all numbers from 2 to the square root of\
    \ n.\n    bool primes[] = { 0 };\n    long n = n;\n    for (int i = 1; i <= sqrt(n);\
    \ i++) {\n        primes[n / i] = true;\n    }\n    // If n is prime, then its\
    \ primeness is already known.\n    // So we don't need to check any numbers.\n\
    \    if (primes[0])\n        return true;\n\n    // We now need to check if n\
    \ is divisible by any number from 2 to the square root of n.\n    // If we find\
    \ any such number, then n is prime and we can return true;\n    for (int i = 1;\
    \ i <= sqrt(n); i++) {\n        if (primes[i])\n            return true;\n   \
    \ }\n    // If we get here, then we couldn't find any divisor greater than the\
    \ square root of n.\n    // We know that n is not prime, so the return value is\
    \ false.\n    return false;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0udybcun.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp0udybcun.cpp:34:10: error: declaration of \u2018long int n\u2019 shadows\
    \ a parameter\n   34 |     long n = n;\n      |          ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // write your code here\n    long int primes\
    \ = 0;\n    for(int i=1; i<n; i++){\n        if(n%i == 0){\n            primes++;\n\
    \        }\n    }\n    return (primes==0);\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk21mw6w2: /tmp/tmpk21mw6w2.cpp:31: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tint j;\n\tassert(n != 0);\n\tif (n < 2)\n\
    \t\treturn false;\n\tfor (j = 2;  j <= n / 2;  j++) {\n\t\tif (n % j == 0)\n\t\
    \t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tlong i = 2;\n\tbool prime = true;\n\tif (n\
    \ <= 1) {\n\t\treturn false;\n\t}\n\twhile (i <= sqrt(n)) {\n\t\tif (n % i ==\
    \ 0) {\n\t\t\tprime = false;\n\t\t}\n\t\ti++;\n\t}\n\treturn prime;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Assume that the number is divisible by\
    \ 2 or 3.\n  int a = is_prime(n / 2);\n  int b = is_prime(n / 3);\n  if (a &&\
    \ b) return true;\n  if (a || b) return false;\n  // If n is equal to 2 or 3,\
    \ we would like to find any odd factor\n  // that is less or equal to n. Since\
    \ any odd factor will have\n  // a smaller or equal than n, we only need to find\
    \ factors that\n  // are less than or equal to n.\n  long limit = 1;\n  while\
    \ (limit < n) {\n    if (n % limit == 0) return false;\n    limit++;\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Return true if n is prime and false\
    \ otherwise.\n    if (n <= 1) return false;\n    // Check if n is even or odd.\n\
    \    if (n % 2 == 0 || n == 2) return false;\n    // Check factors up to sqrt(n).\n\
    \    long limit = (long)sqrt(n);\n    for (long i = 3; i <= limit; i += 2) {\n\
    \        if (n % i == 0) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    long i =\
    \ 2;\n    while (i <= sqrt(n)) {\n        if (n % i == 0) return false;\n    \
    \    ++i;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n <= 3)\n        return true;\n    if (n % 2 == 0 || n % 3 == 0)\n    \
    \    return false;\n\n    long m = (n + 1) >> 1;\n    for (int i = 3; i * i <=\
    \ n; i += 2)\n        if (m % i == 0 || n % (i + 2) == 0)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpas7k3h71: /tmp/tmpas7k3h71.cpp:35: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if(n == 2)\n    return true;\n  if (n%2 ==\
    \ 0 || n%3 == 0)\n    return false;\n  // If n is smaller than 3 then only need\
    \ to check odd numbers\n  for(int i=5; i*i <= n; i += 6) {\n    if(n % i == 0\
    \ || n/i == i)\n      return false;\n  }\n  return true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpadirhffu: /tmp/tmpadirhffu.cpp:38: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    int sqrtN = sqrt(n);\n    for (int i =\
    \ 2; i < sqrtN; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp696xxnlt: /tmp/tmp696xxnlt.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here\n    for(int i=2;i*i<=n;i++)\n\
    \    {\n        if(n%i==0)\n        {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsyk4kgfn: /tmp/tmpsyk4kgfn.cpp:37: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n   if (n <= 1) return false;\n   long n_sqr\
    \ = n*n; // n^2\n   for (int i = 0; i*i < n_sqr; i++) {\n      if (n%i == 0)\n\
    \         return false;\n   }\n   return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n\n \
    \   // All even numbers have an obvious divisor, so only check the odd numbers\
    \ for primality\n    for (long k = 1; k <= (n >> 1); k++) {\n        if (n % k\
    \ == 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmaicllgc: /tmp/tmpmaicllgc.cpp:33: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n   if (n == 1)\n      return false;\n   //\
    \ Use Sieve of Eratosthenes method to compute prime numbers. \n   // It can guarantee\
    \ O(sqrt(n)) \n   long m = sqrt(n+1);\n   std::vector<long> primes(m+1, 0);\n\
    \   primes[0] = 1;\n   for (int i = 2; i <= m; ++i) {\n      if (primes[i] !=\
    \ 0)\n         continue;\n      for (int j = i*i; j <= n; j += i) {\n        \
    \ primes[j] = 1;\n      }\n   }\n   for (int i = 2; i <= n; ++i) {\n      if (primes[i]\
    \ == 0)\n         return false;\n   }\n   return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpyra7ap6n: /tmp/tmpyra7ap6n.cpp:42: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // We want to start our search at sqrt(n).\n\
    \  // Primality testing relies on the fact that we\n  // know that we are at least\
    \ as big as sqrt(n).\n  // So we only have to test up to sqrt(n) candidates.\n\
    \  // As soon as we find a factor > sqrt(n) we know it's prime.\n  // If we found\
    \ a factor less than sqrt(n), then it probably\n  // isn't prime and we can immediately\
    \ return false.\n  long factor = 1;\n  long test = sqrt(n);\n  while (test <=\
    \ n) {\n    // Check if the current number is divisible by any number\n    //\
    \ from 2 to sqrt(n), inclusive.\n    if (n % test == 0) {\n      return false;\n\
    \    }\n    // If n is not divisible by any number from\n    // 2 to sqrt(n),\
    \ then n is prime.\n    factor++;\n    test = sqrt(n);\n  }\n  // If we reached\
    \ here, then we checked out every candidate,\n  // and found that the number is\
    \ not prime.\n  // Therefore, it is prime.\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  long count = 2;\n    for (long i = 2; i <= sqrt(n); ++i) {\n        while (n\
    \ % i == 0)\n            ++count;\n        if (count == 2)\n            return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // check for factors of 2 or less\n   \
    \ if (n < 2) return false;\n    long f = 2;\n    while (f * f <= n) f += 2;\n\
    \    // if we've found a factor of 2 by now then the number is prime\n    if (f\
    \ == 2) return true;\n    // check if we've reached the upper limit of sqrt(n)\n\
    \    long sqrt_n = sqrt(n);\n    if (f > sqrt_n) {\n        // check whether n\
    \ is prime\n        for (long i = f; i <= sqrt_n; i++) if (n % i == 0) return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl1p5hzo3: /tmp/tmpl1p5hzo3.cpp:35: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long a = sqrt(n);\n    for(long b = 2;\
    \ b < a; b++) {\n        if(n%b == 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5egsv41p: /tmp/tmp5egsv41p.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  for (long i = 2; i < n; i++) {\n    // If\
    \ a number is evenly divided by another number, it is not prime.\n    // >>> is_prime(5)\n\
    \    // False\n    // >>> is_prime(17)\n    // True\n    if (n % i == 0)\n   \
    \   return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp_bt66f_1: /tmp/tmp_bt66f_1.cpp:38: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\t// Only need to consider odd numbers.\n\t\
    if (n % 2 == 0)\n\t\treturn false;\n\n\t// Trial division yields no useful result,\
    \ so we try all possible\n\t// divisors except two.\n\tfor (int i = 3; i <= sqrt(n);\
    \ i += 2)\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\n\t// If we get here, we've\
    \ found a prime number.\n\treturn true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp_e4u0s8: /tmp/tmpp_e4u0s8.cpp:40: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  int i = 2;\n  while (i < n / i) {\n    if\
    \ (n % i == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpikh_bkyu: /tmp/tmpikh_bkyu.cpp:35: int main(): Assertion `candidate((4))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n <= 1) return false;\n\tlong m = sqrt(n),\
    \ f;\n\tif (m == 1) return false;\n\tif (n % 2 == 0) return n == 2;\n\tif (n %\
    \ 3 == 0) return n == 3;\n\tf = 5;\n\twhile (f <= m) f *= 5;\n\tfor (int i = 3;\
    \ f <= n; i += 2) {\n\t\tif (n % i == 0) return false;\n\t\tif (n % (i + 2) ==\
    \ 0) return false;\n\t\tint s = n / i;\n\t\tif (s == i || s * (i + 2) == n) return\
    \ true;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiuzbe1c1: /tmp/tmpiuzbe1c1.cpp:37: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Use Sieve of Eratosthenes to check for\
    \ divisibility by 2, 3, 5, 7, 11, 13...\n  // Use a set so we don't have to check\
    \ even numbers.\n  // Use a vector so we don't have to resize or reallocate the\
    \ array.\n  const int N = 1000;\n  vector<int> v(N, 2);\n  for (int i = 2; i <=\
    \ sqrt(n); i += 2) {\n    // If i is prime, then all numbers from 2 to sqrt(n)\
    \ must be divisible by i.\n    if (v[i] == 1) {\n      for (long j = i*i; j <=\
    \ n; j += i) {\n        v[j] = 1;\n      }\n    }\n  }\n  // Reverse the array,\
    \ since we checked the odd numbers first above.\n  for (int i = v.size() - 1;\
    \ i >= 0; --i) {\n    if (v[i] == 1) {\n      // Sieve of Eratosthenes returns\
    \ true if all numbers in the array are factors of n.\n      return true;\n   \
    \ }\n  }\n  return false;\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb1ntuqkq.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpb1ntuqkq.cpp:23:3: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   23 |   vector<int> v(N, 2);\n\
    \      |   ^~~~~~\n      |   std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpb1ntuqkq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpb1ntuqkq.cpp:23:10:\
    \ error: expected primary-expression before \u2018int\u2019\n   23 |   vector<int>\
    \ v(N, 2);\n      |          ^~~\n/tmp/tmpb1ntuqkq.cpp:26:9: error: \u2018v\u2019\
    \ was not declared in this scope\n   26 |     if (v[i] == 1) {\n      |      \
    \   ^\n/tmp/tmpb1ntuqkq.cpp:33:16: error: \u2018v\u2019 was not declared in this\
    \ scope\n   33 |   for (int i = v.size() - 1; i >= 0; --i) {\n      |        \
    \        ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if(n <= 2)\n        return false;\n   \
    \ if(n % 2 == 0)\n        return false;\n    if(n%3 == 0)\n        return false;\n\
    \    long a = sqrt(n);\n    long b = a+1;\n    long c = 2; long d = 2; long e\
    \ = 1;\n    while(b <= a) {\n        long m = (b+e)*((b+e)*((b+e)-1)/(b-d));\n\
    \        if(m == n && (m>n))\n            return true;\n        if(m > n)\n  \
    \          e = d-c;\n        else\n            d = c;\n        c++;\n    }\n \
    \   return false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpmhgx5ha9: /tmp/tmpmhgx5ha9.cpp:43: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n <= 1)\n\t\treturn false;\n\n\tlong\
    \ count = 0;\n\tlong max_val = sqrt(n);\n\n\twhile (max_val > 1) {\n\t\tlong i\
    \ = max_val;\n\t\twhile (i * i <= n)\n\t\t\ti++;\n\n\t\tif (count < i - 1)\n\t\
    \t\tcount++;\n\n\t\tif (count >= i)\n\t\t\tbreak;\n\n\t\tmax_val = i;\n\t}\n\n\
    \tif (count <= 1)\n\t\treturn true;\n\n\tfor (long i = 2; i * i <= n; i++)\n\t\
    \tif (n % i == 0)\n\t\t\treturn false;\n\n\treturn true;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n <=\
    \ 3) return true;\n    if (n % 2 == 0) return false;\n    for (long i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert(n >= 2);\n    int f = 0;\n    int\
    \ x = 3;\n    while ((f < n) && (x < (int) sqrt(n))) {\n        if (n % x == 0)\
    \ {\n            f = f + 1;\n        }\n        x = x + 1;\n    }\n    return\
    \ ((f == n) && (n != 1));\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk9141tvm: /tmp/tmpk9141tvm.cpp:33: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // base case\n    if (n < 2) return false;\n\
    \    // check if number is even\n    if (n % 2 == 0) return false;\n    // check\
    \ if number is odd\n    if (n & 1) return false;\n    \n    // check if number\
    \ is divisible by any prime less than or equal to n\n    for (long m = 2; m *\
    \ m <= n; m++)\n        if (n % m == 0) return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzdn4cwf4: /tmp/tmpzdn4cwf4.cpp:34: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert (n>0);\n    if (n==1 || n==3) {\n\
    \        return true;\n    }\n    for (long i=2;i<=sqrt(n);i+=2) {\n        if\
    \ (n%i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmprlczupca: /tmp/tmprlczupca.cpp:38: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 2) {\n    return true;\n  } else\
    \ if (n % 2 == 0) {\n    return false;\n  } else {\n    long i = 3, t;\n    while\
    \ (i * i <= n) {\n      t = i * i;\n      if (t > n) {\n        return true;\n\
    \      } else if (t % n == 0) {\n        return false;\n      }\n      i += 1;\n\
    \    }\n    return true;\n  }\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmponx96_7g: /tmp/tmponx96_7g.cpp:45: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    int count = 0;\n    bool found = false;\n\
    \    for (long i = 0; i <= n; i += 2) {\n        if ((n % i) == 0) {\n       \
    \     found = true;\n            break;\n        }\n        count++;\n    }\n\
    \    return count == 2;\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  assert(n > 1);\n  if (n == 2) return true;\n\
    \  if (n % 2 == 0) return false;\n  long x = 3;\n  while (x < n/2) {\n    if (n\
    \ % x == 0) return false;\n    x += 2;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpv205igrs: /tmp/tmpv205igrs.cpp:19: bool is_prime(long int): Assertion\
    \ `n > 1' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    for (int i = 2; i * i <= n; i++) {\n  \
    \      if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp77shqj8v: /tmp/tmp77shqj8v.cpp:34: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n == 2)\
    \ return true;\n  if (n % 2 == 0 || n <= 3) return false;\n  long m = (long) sqrt(n);\n\
    \  for (long i = 3; i <= m; i += 2) {\n    if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long d =\
    \ n - 1;\n    for (long i = 2; i * i <= n; ++i)\n        if (n % i == 0)\n   \
    \         return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1 || n == 2) return false;\n \
    \   if (n % 2 == 0) return n == 2; \n    long square = n;\n    for (long i = 4;\
    \ i <= sqrt(n); i += 2) {\n        if (n % i == 0) return false;\n        square\
    \ /= i;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpgemutqyx: /tmp/tmpgemutqyx.cpp:40: int main(): Assertion `candidate((85))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Initialization\n    if (n <= 1) return\
    \ false;\n    // Find number of factors.\n    // If n has only 1 factor, then\
    \ n is not prime.\n    if (n == 2) return false;\n    long f = sqrt(n);\n    long\
    \ s = 0;\n    long p = 0;\n    while ((f * f < n) && (n % f == 0)) {\n       \
    \ ++s;\n        p = f;\n        f *= f;\n    }\n    // Return true if n is prime.\n\
    \    return ((n == p) && (s > 1));\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp592j9psd: /tmp/tmp592j9psd.cpp:38: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) {\n    return false;\n  }\n \
    \ if (n % 2 == 0) {\n    return false;\n  }\n  for (long i = 3; i <= n / i; i\
    \ += 2) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Initialize all the numbers in the interval\
    \ [2, sqrt(n)]\n  // using the prime numbers algorithm.\n  std::vector< int >\
    \ primes;\n  for (long i = 2; i <= std::sqrt(n); i++) {\n    if (n % i == 0) {\n\
    \      return false;\n    }\n  }\n\n  std::vector< int >::iterator it = primes.begin();\n\
    \  for (long i = 2; i <= n; i++) {\n    if (n % i == 0) {\n      if (it == primes.end())\
    \ {\n        primes.push_back(i);\n      } else {\n        return false;\n   \
    \   }\n    }\n  }\n\n  // If n is composite, return false.\n  return it == primes.end();\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpgybpyr2l: /tmp/tmpgybpyr2l.cpp:45: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  int sqrt_n = sqrt(n);\n  for (int i = 2;\
    \ i <= sqrt_n; ++i)\n  {\n    if (n % i == 0)\n    {\n      return false;\n  \
    \  }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpaktgkwta: /tmp/tmpaktgkwta.cpp:37: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1)\n        return false;\n  \
    \  if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    long d = sqrt(n);\n    for (long i = 3; i <= d; i += 2)\n        if (n %\
    \ i == 0)\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long j = 0;\n    long k = 2;\n    while\
    \ (k < n){\n        if (n % k == 0) {\n            return false;\n        }\n\
    \        j = k;\n        k = k+2;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwtmieru5: /tmp/tmpwtmieru5.cpp:38: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Your code here!\n    if (n == 1)\n \
    \       return false;\n    if (n == 2)\n        return true;\n    if (n % 2 ==\
    \ 0)\n        return false;\n    long m = sqrt(n);\n    for (long i = 2; i <=\
    \ m; i++) {\n        if (n % i == 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  int flag = 0, i=2, m=3;\n  while (i<n) {\n\
    \    flag = flag*m;\n    m+=i;\n    i=i*3+2;\n  }\n  if (flag == 1) return true;\n\
    \  return false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpwyrrnmzi: /tmp/tmpwyrrnmzi.cpp:31: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Start off as False.\n    bool prime\
    \ = false;\n\n    // If n is 2 or less, it is prime.\n    if (n <= 2) {\n    \
    \    prime = true;\n    }\n    // If n divides evenly into 3, n is prime.\n  \
    \  else if (n % 2 == 0 || n % 3 == 0) {\n        prime = true;\n    }\n    //\
    \ If n is odd, n divides evenly into two and n is prime.\n    else if (n % 2 ==\
    \ 1) {\n        prime = true;\n    }\n    // Otherwise, loop over all odd divisors\
    \ of n.\n    else {\n        // While n is odd.\n        while (n % 2 == 1) {\n\
    \            n = n / 2;\n            // If n is odd and does not divide evenly\
    \ into three, n is prime.\n            if (n % 3 == 0) {\n                prime\
    \ = true;\n                break;\n            }\n        }\n    }\n\n    // Return\
    \ true if prime, and false otherwise.\n    return prime;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjccluwb4: /tmp/tmpjccluwb4.cpp:52: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n < 2L || n % 2 == 0) {\n\t\treturn false;\n\
    \t}\n\tlong s = 3L;\n\twhile (s < n) s += 2L;\n\tfor (long m = 3L; m < n; m +=\
    \ 2L) {\n\t\tif (n % m == 0L) return false;\n\t\tlong long i = 3L;\n\t\twhile\
    \ (i * i <= m) i += 2L;\n\t\tif (i == m) return true;\n\t}\n\treturn false;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp91zntzhi: /tmp/tmp91zntzhi.cpp:44: int main(): Assertion `candidate((85))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 1)\n    return false;\n  for (long\
    \ d = 2; d * d <= n; d++) {\n    if (n % d == 0)\n      return false;\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) {\n        return false;\n\
    \    }\n\n    for (int i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpp0bhchpa: /tmp/tmpp0bhchpa.cpp:33: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert(n > 2);\n    bool prime = false;\n\
    \    for (int i = 3; !prime && (i * i <= n); ++i) {\n        if (n % i == 0) {\n\
    \            prime = true;\n        }\n    }\n    return prime;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp066fw30z: /tmp/tmp066fw30z.cpp:31: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    for (int i = 2; i * i <= n; i++) {\n  \
    \      if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpr68a0b4z: /tmp/tmpr68a0b4z.cpp:34: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    long k =\
    \ 2;\n    while (!is_prime(k) && k <= n) k++;\n    return k > n;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if(n == 2) return false;\n    if(n == 3)\
    \ return true;\n    long m = n;\n    while(m > 2) {\n        if(n % m == 0) {\n\
    \            return false;\n        }\n        m--;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpuyjyksfr: /tmp/tmpuyjyksfr.cpp:33: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    // if n\
    \ <= 1, then n is prime.\n    if (n <= 2) return true;\n    // if n = 2, then\
    \ n is not prime.\n    if (n == 2) return false;\n    // if n = 2, then n is prime.\n\
    \    if (n == 2) return true;\n    // n is not prime.\n    // if n \u2212 1 divides\
    \ evenly into 3, then n is not prime.\n    bool not_prime = true;\n    for (long\
    \ d = 2; d * d <= n; d++){\n        if (n % d == 0){\n            not_prime =\
    \ false;\n            break;\n        }\n    }\n    return not_prime;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Base case 1: if n is even and greater\
    \ than 2, then it can\n  // never be prime, thus return false.\n  if (n <= 1)\
    \ {\n    return false;\n  }\n\n  // Base case 2: if n is even, then it can only\
    \ be prime\n  // if its divider is greater than 2.\n  if (n % 2 == 0) {\n    return\
    \ false;\n  }\n\n  // Loop through the numbers up to the square root of the number.\n\
    \  // If n is prime, then any even number can be tested as divisibly\n  // by\
    \ any odd number. For example, if n is 20, then 10 (the square\n  // root of 20)\
    \ is an odd number, since it is the only even number less\n  // than 20.\n  for\
    \ (int i = 3; i <= sqrt(n); i += 2) {\n    if (n % i == 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 1) return false;\n\tif (n == 2 ||\
    \ n == 3) return true;\n\tif (n % 2 == 0 || n % 3 == 0) return false;\n\tlong\
    \ n_sqr = sqrt(n);\n\tfor (long i = 3; i <= n_sqr; i+=2) {\n\t\tif (n % i == 0\
    \ || n % (i+2) == 0) return false;\n\t}\n\treturn true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n <= 3)\n        return true;\n    long sq = sqrt(n);\n    for (long i\
    \ = 1; i <= sq; i++)\n        if (n % i == 0)\n            return false;\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpkk0ny3bf: /tmp/tmpkk0ny3bf.cpp:32: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // If n is 1 or more, then it is prime.\n\
    \    if (n <= 1) return false;\n    \n    // Sieve of Eratosthenes is enough for\
    \ finding a prime number.\n    std::vector<bool> isPrime(n + 1, true);\n    for\
    \ (int i = 2; i <= n; i++) {\n        if (isPrime[i]) {\n            for (int\
    \ j = i * i; j < n; j += i)\n                isPrime[j] = false;\n        }\n\
    \    }\n    \n    return isPrime[n];\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn4y7q27d: /tmp/tmpn4y7q27d.cpp:35: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Check that the number is a positive\
    \ integer.\n    if (n <= 0)\n        return false;\n\n    // Check if n is prime\
    \ by sieving through all odd numbers up to n.\n    long num_factors = 0;\n   \
    \ for (long x = 2; x <= n; x++)\n        if (n % x == 0)\n            num_factors\
    \ += 1;\n\n    if (num_factors == 2)\n        return true;\n    else\n       \
    \ return false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpu2mwes54: /tmp/tmpu2mwes54.cpp:37: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // A prime number (p \u2261 2) is called\
    \ a composite number, and the\n  // only prime number (2 \u2261 1) is called a\
    \ prime number.\n  if (n == 2) {\n    return true;\n  }\n  // If we already found\
    \ a prime number\n  if (n % 2 == 0) {\n    return false;\n  }\n  // Check only\
    \ odd numbers except 2\n  for (long i = 3; i <= sqrt(n); i += 2) {\n    if (n\
    \ % i == 0) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmuzdaq1c: /tmp/tmpmuzdaq1c.cpp:44: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    for (long\
    \ i = 2; i <= n; i++) if (n % i == 0) return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp8ypmvt4v: /tmp/tmp8ypmvt4v.cpp:26: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 2) return false;\n  // We only need\
    \ to check up to sqrt(n).\n  for (long i = 2; i <= n / i; i++) {\n    if (n %\
    \ i == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long sqrt_n = (long)sqrt((double)n);\n\
    \    long max_check = (long)sqrt(sqrt_n + 1);\n    // return false if n is greater\
    \ than sqrt(n+1)\n    if (n <= max_check) {\n        return false;\n    }\n  \
    \  // return true if n is prime\n    for (long i = 3; i < max_check; i += 2) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp9st8ucdj: /tmp/tmp9st8ucdj.cpp:35: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    if (n < 3 || n % 3 == 0) return false;\n\n    long\
    \ limit = sqrt(n);\n    for (long i = 5; i <= limit; i += 6) {\n        if (n\
    \ % i == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeoirew6o: /tmp/tmpeoirew6o.cpp:42: int main(): Assertion `candidate((77))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (int i = 3; i <= sqrt(n); i += 2)\n        if (n % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  // Initializing the flag\n  bool flag = true;\n\
    \  // Finding out if n is prime\n  if (n==2) return true;\n  // Checking if n\
    \ is odd\n  if (n % 2 == 0) return false;\n  // Finding the mid value\n  long\
    \ m = (n+1)/2;\n  // Checking if mid value is prime\n  for (long i=3; i<=m; i++){\n\
    \    if (n % i == 0){\n      flag = false;\n    }\n  }\n  return flag;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp20sok4z3: /tmp/tmp20sok4z3.cpp:43: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  long i, flag = 2;\n  // Check base cases:\
    \ even and prime number.\n  if (n <= 1)\n    return false;\n  if (n == 2)\n  \
    \  return true;\n  // Check all the numbers in the range.\n  for (i = 2; i <=\
    \ n / 2; ++i)\n    if (n % i == 0)\n      return false;\n  return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long count\
    \ = (long) sqrt(n);\n    long factor = 2;\n    long limit = n - 1;\n    for (long\
    \ i = 2; i <= limit; i++) {\n        if (n % i == 0) {\n            count--;\n\
    \            if (count == 0) return false;\n        }\n        if (count == 0\
    \ && i == factor) factor++;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp47ywvpcf: /tmp/tmp47ywvpcf.cpp:39: int main(): Assertion `candidate((4))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 1) return false;\n\tfor (long i\
    \ = 2; i * i <= n; i++)\n\t\tif (n % i == 0) return false;\n\treturn true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    for (int\
    \ i = 2; i*i <= n; i++) {\n        if (n%i==0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n == 0) return false;\n  // Only odd\
    \ numbers have an efficient primality test.\n  // For a number to be prime it\
    \ must have a smaller factor.\n  // We can quickly tell if an n is prime by checking\
    \ if n is a factor of\n  // the square root of its (only even) factors.\n  assert(n\
    \ > 1);\n  int limit = (int) sqrt(n);\n  for (int i = 3; i <= limit; i += 2) {\n\
    \    if (n % i == 0) return false;\n  }\n  return true;\n}\nint main() {\n   \
    \ auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwz_qddep: /tmp/tmpwz_qddep.cpp:33: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long div = 2;\n    long limit = (long)sqrt((double)n)\
    \ + 1;\n\n    for (int i = 2; i <= limit; i++) {\n        long check = (long)sqrt(n)\
    \ / i;\n        long div2 = check / 2;\n        if (n == check) {\n          \
    \  return true;\n        }\n        if (n < check) {\n            div = div2;\n\
    \        }\n        else if (div * div > n) {\n            break;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuzkjwbt9: /tmp/tmpuzkjwbt9.cpp:40: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Check whether n is prime using a sieve.\n\
    \    long sieve[static_cast<long>(LARGE_MAX)];\n    for(long i = 0; i <= LARGE_MAX;\
    \ sieve[i] = static_cast<long>(i))\n        for(long j = 2; i * j <= n; j++) sieve[i\
    \ * j] = 1;\n    for(long i = 1; i <= n; i++)\n        if(sieve[i]) return 0;\n\
    \    return 1;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp71rvghh9.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp71rvghh9.cpp:20:34: error: \u2018LARGE_MAX\u2019 was not declared in this\
    \ scope; did you mean \u2018NAME_MAX\u2019?\n   20 |     long sieve[static_cast<long>(LARGE_MAX)];\n\
    \      |                                  ^~~~~~~~~\n      |                 \
    \                 NAME_MAX\n/tmp/tmp71rvghh9.cpp:21:37: error: \u2018sieve\u2019\
    \ was not declared in this scope; did you mean \u2018sigvec\u2019?\n   21 |  \
    \   for(long i = 0; i <= LARGE_MAX; sieve[i] = static_cast<long>(i))\n      |\
    \                                     ^~~~~\n      |                         \
    \            sigvec\n/tmp/tmp71rvghh9.cpp:24:12: error: \u2018sieve\u2019 was\
    \ not declared in this scope; did you mean \u2018sigvec\u2019?\n   24 |      \
    \   if(sieve[i]) return 0;\n      |            ^~~~~\n      |            sigvec\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n <= 1) return false;\n\tlong sqt = sqrt(n);\n\
    \tfor (long i = 3; i <= sqt; ++i)\n\t{\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp4pm71ge9: /tmp/tmp4pm71ge9.cpp:30: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif(n == 1) return false;\n\tfor(long i =\
    \ 2; i <= n / 2; i++) {\n\t\tif(n%i == 0) return false;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if(n <= 1)\n        return false;\n   \
    \ long s = sqrt(n) + 1;\n    for(long d = 2; d <= s; d++)\n        if((n % d)\
    \ == 0)\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long x = sqrt(n);\n    long y = n / x;\n\
    \n    if(n == 2)\n        return true;\n    if(n == 3)\n        return true;\n\
    \    if(n == 1)\n        return false;\n\n    if(x == 1)\n        return false;\n\
    \n    if(y % 2 == 0)\n        return false;\n\n    long m = (x + 1) >> 1;\n  \
    \  for(int i = 3; i <= m; i += 2)\n        if(n % i == 0)\n            return\
    \ false;\n\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1v6uen2z: /tmp/tmp1v6uen2z.cpp:44: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long k = 2;\n    while (k * k <= n && n\
    \ % k == 0) {\n        ++k;\n    }\n    return k * k <= n;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp7mcpmqg: /tmp/tmpp7mcpmqg.cpp:37: int main(): Assertion `candidate((85))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  long limit = sqrt(n);\n    long d = 2;\n    for (long i = 2; i < limit; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n       \
    \ while (d % 2 == 0) {\n            d += 2;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpzsb3pwio: /tmp/tmpzsb3pwio.cpp:35: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert(n >= 2 && n <= 30);\n    if (n <\
    \ 3) return n == 2;\n    if (n < 5) return n == 3;\n    if (n % 2 == 0) return\
    \ n == 5 || n == 7;\n    if (n % 3 == 0) return n == 6  || n == 8  || n == 9 \
    \ || n == 11;\n    if (n % 5 == 0) return n == 12 || n == 15;\n    int sqrt_n\
    \ = sqrt(n);\n    if (n % 7 == 0) return n == sqrt_n || n == sqrt_n + 4 || n ==\
    \ sqrt_n - 4;\n    if (n % 3 == 0) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjz87qk8r: /tmp/tmpjz87qk8r.cpp:19: bool is_prime(long int): Assertion\
    \ `n >= 2 && n <= 30' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    long m =\
    \ n;\n    for (int i = 2; i * i <= m; i++)\n        if (m % i == 0)\n        \
    \    return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  long i = 2;\
    \ \n  while (i < n && n % i == 0) ++i;\n  return i % 2 == 0;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp3c45yu10: /tmp/tmp3c45yu10.cpp:26: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1)\n        return false;\n  \
    \  if (n <= 3 && prime_table.find(n) != prime_table.end())\n        return true;\n\
    \    for (long i = 3; i < n; i += 2)\n        if (n % i == 0)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpluv1v_n8.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpluv1v_n8.cpp:21:19: error: \u2018prime_table\u2019 was not declared in\
    \ this scope\n   21 |     if (n <= 3 && prime_table.find(n) != prime_table.end())\n\
    \      |                   ^~~~~~~~~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n<=1)\n    return false;\n  for (int\
    \ i=2; i<=sqrt(n); i++)\n    if ((n%i)==0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n   if ( n <= 1) {\n      return false;\n  \
    \ }\n   if ( n == 2) {\n      return true;\n   }\n   if ( n % 2 == 0) {\n    \
    \  return false;\n   }\n   long i = 3;\n   while (i <= sqrt(n)) {\n      if (n\
    \ % i == 0) {\n         return false;\n      }\n      i += 2;\n   }\n   return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // First we must find out if it's prime\n\
    \    if (n <= 1) return false;\n    long d = sqrt(n) + 1;\n    bool f = false;\n\
    \    for (long x = 2; x < d; ++x) {\n        if (n % x == 0) {\n            f\
    \ = true;\n            break;\n        }\n    }\n    return f;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp48h12ls2: /tmp/tmp48h12ls2.cpp:33: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 1)\n\t\treturn false;\n\telse if\
    \ (n == 2)\n\t\treturn true;\n\telse {\n\t\tlong m = sqrt(n);\n\t\tif (m == 1)\n\
    \t\t\treturn true;\n\t\telse {\n\t\t\tlong i;\n\t\t\tint count = 2;\n\t\t\tfor\
    \ (i = 2; i <= m; i++) {\n\t\t\t\tif (n % i == 0)\n\t\t\t\t\tbreak;\n\t\t\t\t\
    count++;\n\t\t\t}\n\t\t\tif (i == m)\n\t\t\t\treturn false;\n\t\t\telse\n\t\t\t\
    \treturn (count < 5);\n\t\t}\n\t}\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpkp34t62j: /tmp/tmpkp34t62j.cpp:45: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Base case.\n    if (n == 2) return false;\n\
    \    if (n <= 1) return false;\n\n    // Check factors up to sqrt(n).\n    for\
    \ (long i = 2; i < sqrt(n); ++i) {\n        if (n % i == 0) return false;\n  \
    \  }\n\n    // Check factors up to sqrt(n).\n    for (long i = sqrt(n); i * i\
    \ <= n; i = i * i) {\n        if (n % i == 0) return false;\n    }\n\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long i=2,m; \n    while(i<n) \n    {\n\
    \        while(!((m%i)==0))\n        {\n            m+=i;\n        }\n       \
    \ if((m%i)==0)\n        {\n            return false;\n        }\n        i++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpiad4fnd7: /tmp/tmpiad4fnd7.cpp:37: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if(n==1) return false;\n    long i = 2;\n\
    \    while(i <= n/i)\n    {\n        if(n%i==0) return false;\n        i++;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if(n<2)\n        return false;\n    if(n%2==0)\n\
    \        return false;\n    long i=3;\n    while(i*i<=n)\n    {\n        if(n%i==0)\n\
    \            return false;\n        ++i;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    if (n % 2\
    \ == 0) return false;\n    if (n == 0 || n % 3 == 0) return false;\n    if (n\
    \ <= 1) return false;\n    for (int i = 3; i <= (long)sqrt(n); i += 2)\n     \
    \   if (n % i == 0) return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) {\n        return true;\n \
    \   }\n    else if (n == 1 || n % 2 == 0) {\n        return false;\n    }\n\n\
    \    for (long i = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n<2)\n    return false;\n  for (long\
    \ i=2;i<=n/2;i++)\n    if (n%i==0)\n      return false;\n  return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n <= 1)\n\t\treturn false;\n\tlong limit\
    \ = (long)sqrt(n);\n\tfor (long i = 0; i*i <= limit; ++i) {\n\t\tif (n % i ==\
    \ 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    // Check\
    \ all odd numbers up to the square root of n.\n    long max = (long)sqrt(n);\n\
    \    for (long m = 2; m <= max; ++m) {\n        if (n % m == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Trial division with sieve.\n    static\
    \ const long primes[] = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997};\n    int i;\n    for (i = 2; i <= n / i;\
    \ i++) {\n        if (n % i == 0) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp0oh8riqu: /tmp/tmp0oh8riqu.cpp:37: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long sqrt_n = sqrt(n);\n    for (int i\
    \ = 2; i <= sqrt_n; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1gd0prxi: /tmp/tmp1gd0prxi.cpp:35: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 1) return false;\n\tbool isPrime\
    \ = true;\n\t// Check odd numbers starting from 2.\n\tif (n & 1)\n\t\tisPrime\
    \ = false;\n\t// Check even numbers starting from 3.\n\tfor (long x = 2; x * x\
    \ <= n; x++) {\n\t\tif ((n % x) == 0) {\n\t\t\tisPrime = false;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\t// Return true if n is prime or false otherwise.\n\treturn isPrime;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpbmlvozrl: /tmp/tmpbmlvozrl.cpp:37: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif (n == 1)\n\t\treturn false;\n\tif (n %\
    \ 2 == 0)\n\t\treturn true;\n\tint k = 3;\n\twhile (k <= n / 2) {\n\t\tif (n %\
    \ k == 0)\n\t\t\treturn false;\n\t\tk+=2;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpat7ubma4: /tmp/tmpat7ubma4.cpp:33: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2) return false;\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  long\
    \ limit = (long long)(sqrt(n) + 1);\n  for (long i = 4; i <= limit; i++) {\n \
    \   if (n % i == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    if (n ==\
    \ 2 || n == 3) return true;\n    if (n % 2 == 0 || n % 3 == 0) return false;\n\
    \    long f = 5; // 5 is a prime\n    // Fermat's little theorem\n    long a =\
    \ 6; // 6 is the prime\n    while (a < n) {\n        if (n % a == 0) return false;\n\
    \        a = a + 6;\n    }\n    while (n > a) {\n        if (n % a == 0) return\
    \ false;\n        a = a + 6;\n        n = n / 6;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpmqx_h3oi: /tmp/tmpmqx_h3oi.cpp:48: int main(): Assertion `candidate((85))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    long limit\
    \ = sqrt(n) - 1;\n    for (int i = 2; i <= limit; i++)\n        if (n % i == 0)\n\
    \            return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpqxfiv5_9: /tmp/tmpqxfiv5_9.cpp:28: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long r = n;\n    while (r % 2 == 0) {\n\
    \        r /= 2;\n    }\n\n    for (long i = 3; i * i <= n; i += 2) {\n      \
    \  if (r % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp11i66924: /tmp/tmp11i66924.cpp:33: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  long s = sqrt(n);\n\
    \  for (long i = 2; i <= s; i++) {\n    if (n % i == 0) return false;\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    for(long i = 2; i * i <= n; ++i) {\n  \
    \      if(n % i == 0)\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_z7lk474: /tmp/tmp_z7lk474.cpp:33: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    for(int i = 2; i*i <= n; i++)\n    {\n\
    \        long long int mod = (long long) sqrt(n);\n        int rem = n % mod;\n\
    \        if(rem == 0)\n        {\n            return false;\n        }\n     \
    \   if(rem != 1)\n        {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpgv_9j8k6: /tmp/tmpgv_9j8k6.cpp:37: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 3) {\n        return true;\n \
    \   }\n    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n\
    \        return false;\n    }\n    long sqr_div = 3;\n    while (sqr_div <= n)\
    \ {\n        if (n % sqr_div == 0) {\n            return false;\n        }\n \
    \       sqr_div += 2;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmplvoch_to: /tmp/tmplvoch_to.cpp:40: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if(n<2) return false;\n    long r = n;\n\
    \    long d;\n    while ((d = r / 2) != 1) {\n        if(r % (2 * d) == 0) return\
    \ false;\n        r = d;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5r4pw2nv: /tmp/tmp5r4pw2nv.cpp:31: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    int flag=1;\n    for(int i=2;i<n;i++) {\n\
    \        if( ((n/i)%1)==0) {\n            flag=0;\n            break;\n      \
    \  }\n    }\n    if(flag==1) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmphvavtna0: /tmp/tmphvavtna0.cpp:35: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // Write your code here.\n    if (n==1)return\
    \ false;\n    if (n%2==0)return false;\n    long i=3;\n    while(i*i<=n){\n  \
    \      if(n%i==0)return false;\n        i=i*3+1;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpewxp04yp: /tmp/tmpewxp04yp.cpp:41: int main(): Assertion `candidate((85))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n < 2)\n        return false;\n   \
    \ if (n == 2)\n        return true;\n    if (n % 2 == 0)\n        return false;\n\
    \    for (long i = 3; i * i <= n; i += 2) {\n        if (n % i == 0)\n       \
    \     return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n==1)\n    return false;\n  if (n<2)\n\
    \    return true;\n  long i = n;\n  bool flag=true;\n  while(i%2==0){\n    i=i/2;\n\
    \    flag=false;\n  }\n  while(i>1){\n    if(n%i==0){\n      n=n/i;\n      flag=false;\n\
    \    }\n    i=i/2;\n  }\n  return flag;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnou421jo: /tmp/tmpnou421jo.cpp:41: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n < 2)\n    return false;\n  long r =\
    \ sqrt(n);\n  for (long i = 2; i * i <= n; i++)\n    if (n % i == 0)\n      return\
    \ false;\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 2) return true;\n    else if (n\
    \ % 2 == 0) return false;\n    else return is_prime(3 * n + 1) / 3 == 1;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprgfx9tju: /tmp/tmprgfx9tju.cpp:26: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    int i;\n    for (i = 2; i <= n / i; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmph79_i8ic: /tmp/tmph79_i8ic.cpp:35: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    for (long\
    \ i = 2; i <= n / 2; i++) {\n        if (n % i == 0) return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    for (int\
    \ i = 2; i * i <= n; ++i)\n        if (n % i == 0) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\t// Use Euler Totient Theorem to find primes\
    \ less than n <= 2^31.\n\tlong n_mod_2 = n % 2;\n\tlong n_mod_3 = n % 3;\n\tlong\
    \ n_mod_5 = n % 5;\n\tlong n_mod_7 = n % 7;\n\tlong n_mod_11 = n % 11;\n\tlong\
    \ n_mod_13 = n % 13;\n\n\t// Check if n is prime. Check if n is divisible by 2\
    \ or 3.\n\tif ((n == 2 || n == 3) && n_mod_2 == 0) {\n\t\treturn true;\n\t}\n\n\
    \t// Check if n is prime. Check if n is divisible by 3, 5.\n\tif ((n == 3 || n\
    \ == 5 || n == 7 || n == 11) && n_mod_3 == 0 && n_mod_5 == 0) {\n\t\treturn true;\n\
    \t}\n\n\t// Check if n is prime. Check if n is divisible by 5, 7.\n\tif ((n ==\
    \ 5 || n == 7 || n == 11) && n_mod_5 == 0 && n_mod_7 == 0) {\n\t\treturn true;\n\
    \t}\n\n\t// Check if n is prime. Check if n is divisible by 7, 11.\n\tif ((n ==\
    \ 7 || n == 11) && n_mod_7 == 0 && n_mod_11 == 0) {\n\t\treturn true;\n\t}\n\n\
    \t// Check if n is prime. Check if n is divisible by 11, 13.\n\tif ((n == 11 ||\
    \ n == 13) && n_mod_11 == 0 && n_mod_13 == 0) {\n\t\treturn true;\n\t}\n\n\t//\
    \ If n is not prime, return false.\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5wcmgx8j: /tmp/tmp5wcmgx8j.cpp:58: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  long i;\n  // Check for non-prime numbers\
    \ (even numbers only).\n  if (n <= 1)\n    return false;\n  // Check if n is prime.\n\
    \  for (i = 2; i <= (n / 2); ++i)\n    if (n % i == 0)\n      return false;\n\
    \  // Check if n is perfect square (i.e., no prime factors other than 2 are possible).\n\
    \  if (n == n / 2)\n    return true;\n  // If not, then it's not a prime.\n  return\
    \ false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpt0timfh3: /tmp/tmpt0timfh3.cpp:36: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long i,j;\n    assert(n > 1);\n    if (n\
    \ == 2) {\n        return true;\n    }\n    if (n == 1) {\n        return false;\n\
    \    }\n    i = 2;\n    j = (long) sqrt(n);\n    while (i*i <= j) {\n        if\
    \ (n % i == 0) {\n            return false;\n        }\n        i += 1;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp1_ea26tg: /tmp/tmp1_ea26tg.cpp:39: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    // base case\n    if (n <= 1)\n       \
    \ return false;\n    // Check odd and even\n    if (n % 2 == 1 || n % 3 == 0)\n\
    \        return false;\n    // Check primes other than 2 and 3\n    for (long\
    \ i = 5; i * i <= n; i += 6)\n        if (n % i == 0 || n % (i + 2) == 0)\n  \
    \          return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnj6trd6w: /tmp/tmpnj6trd6w.cpp:34: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert(n > 1 && n < 1000);\n    long k\
    \ = 3;\n    long q = n - 1;\n\n    for (; q & 1; ++k) {\n        q = q / 2;\n\
    \    }\n\n    for (; q >= 2; --k) {\n        if (n % q == 0) {\n            return\
    \ false;\n        }\n        q = q / 2;\n    }\n\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpv15d2cc4: /tmp/tmpv15d2cc4.cpp:19: bool is_prime(long int): Assertion\
    \ `n > 1 && n < 1000' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n\tif(n<2)\n\t\treturn false;\n\tif( (n&(n-1)\
    \ )==0)\n\t\treturn n>=2;\n\t\n\tlong m = sqrt(n);\n\t\n\tlong a = 6; \n\tlong\
    \ b = ((2*m+2) << 1) + 1;\n\t\n\twhile( ((b+1)>>1)>m )\n\t{\n\t\tlong c = (((b+2)<<1)\
    \ + 1);\n\t\tlong m = ((b+2)<<1) + 2;\n\t\t\n\t\twhile(m<=b)\n\t\t{\n\t\t\tif((m*m)==n)\n\
    \t\t\t\treturn true;\n\t\t\tm+=2;\n\t\t}\n\t\ta = b;\n\t\tb = c;\n\t}\n\t\n\t\
    if( n>m )\n\t\treturn false;\n\t\n\ta = 6; \n\tb = ((2*m+2) << 1) + 1;\n\t\n\t\
    while( ((b+1)>>1)>m )\n\t{\n\t\tlong c = (((b+2)<<1) + 1);\n\t\tlong m = ((b+2)<<1)\
    \ + 2;\n\t\t\n\t\twhile(m<=b)\n\t\t{\n\t\t\tif((m*m)==n)\n\t\t\t\treturn false;\n\
    \t\t\tm+=2;\n\t\t}\n\t\ta = b;\n\t\tb = c;\n\t}\n\t\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  if (n % 2 ==\
    \ 0) return false;\n  if (n % 3 == 0) return false;\n  if (n % 5 == 0) return\
    \ false;\n  for (int i = 5; ; i += 6) {\n    if (n % i == 0) return false;\n \
    \   if (n % (i + 2) == 0) return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6o8nedvq: /tmp/tmp6o8nedvq.cpp:32: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    long x = sqrt(n);\n    for (int i = 2;\
    \ i < x; ++i)\n    {\n        if (n % i == 0)\n            return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmprms14wog: /tmp/tmprms14wog.cpp:29: int main(): Assertion `candidate((6))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n == 1) return false;\n    if (n ==\
    \ 2) return true;\n    if (n % 2 == 0) return false;\n\n    for (int i = 3; i\
    \ < n; i += 2)\n        if (n % i == 0) return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if(n==2) return true;\n    \n    long sq\
    \ = n/2;\n    \n    for(long i=3; i<=sq; i+=2) if(n % i == 0) return false;\n\
    \    \n    return n != 1;\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprkp20k_5: /tmp/tmprkp20k_5.cpp:34: int main(): Assertion `candidate((4))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    int k;\n    if(n==1)\n        return false;\n\
    \    for(int i=2;i*i<n;i++)\n        if(n%i==0)\n            return false;\n \
    \   for(int i=3;i*i<=n;i+=2)\n        if(n%i==0)\n            return false;\n\
    \    for(k=n/2;k>=2;k--)\n        if(n%k==0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    for (int i = 2; i <= sqrt(n); i++) {\n\
    \        if (n % i == 0)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp_q1jotp9: /tmp/tmp_q1jotp9.cpp:33: int main(): Assertion `candidate((1))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  if (n <= 1) return false;\n  long root =\
    \ (long) sqrt((double) n);\n  for (long i = 2; i <= root; i++) {\n    if (n %\
    \ i == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    assert(n >= 2);\n    // if n is prime,\
    \ then only factors less than n are prime.\n    // if n is not prime, then no\
    \ other factor is prime.\n    if (n <= 1) return false;\n    // only odd numbers\
    \ greater than 1 are prime.\n    if (n % 2 == 0) return false;\n    // if n is\
    \ prime (evenly), then each even number greater than 2\n    // is also prime.\n\
    \    if (n <= 3) return true;\n    // if n is prime (evenly), then each odd number\
    \ greater than 1\n    // is also prime.\n    for (long k = 3; k <= (long int)\
    \ sqrt(n); k+=2) {\n        if (n % k == 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp3u1vuhco: /tmp/tmp3u1vuhco.cpp:19: bool is_prime(long int): Assertion\
    \ `n >= 2' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n  int k = 3;\n  int j = (n-1)/k;\n  int f =\
    \ false;\n  for (int i = 2; i <= j; ++i) {\n    if (n % i == 0) {\n      f = true;\n\
    \      break;\n    }\n  }\n  return f;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprd15ckaf: /tmp/tmprd15ckaf.cpp:33: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime(6)\n// False\n// >>>\
    \ is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
    // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
    // False\nbool is_prime(long n) {\n    if (n <= 1) return false;\n    // If n\
    \ is even, then (n-1)/2 is odd and even\n    // and so forth.\n    // If n is\
    \ odd, then (n-1)/2 is even and so forth.\n    // If n is 0 or 1, then n is not\
    \ prime\n    if (n <= 2) return true;\n    // Loop until n <= sqrt(n)\n    for\
    \ (long i = 2; i <= n; ++i)\n        if (n % i == 0) return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp7yrx1aib: /tmp/tmp7yrx1aib.cpp:33: int main(): Assertion `candidate((101))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
