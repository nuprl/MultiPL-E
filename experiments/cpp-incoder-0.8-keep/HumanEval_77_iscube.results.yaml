name: HumanEval_77_iscube
language: cpp
results:
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long cube = a * a * a * a;\n    long long cubed = a * a * a *\
    \ a;\n    long long cubers = a * a * a * a;\n    long long cubeseven = a * a *\
    \ a * a * a;\n    long long cubethirtythree = a * a * a * a * a * a;\n    long\
    \ long cubesixtyseven = a * a * a * a * a * a * a * a;\n    long long cubesixtyfour\
    \ = a * a * a * a * a * a * a * a * a;\n    long long cubesixtynine = a * a *\
    \ a * a * a * a * a * a * a * a * a;\n    long long cubesixtytwo = a * a * a *\
    \ a * a * a * a * a * a * a * a * a;\n    long long cubesixtyfourteen = a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long cubesixtyfive\
    \ = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long\
    \ cubesixtyfour = a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n   \
    \ long long cubesixtyeightytwo = a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a;\n    long long cubesixtyninetyfour = a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a;\n    long long cubesixtyninetyfive\
    \ = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n\
    \    long long cubesixtyninetyeightytwo = a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a;\n    long long cubesixtyninetyseven =\
    \ a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *\
    \ a;\n    long long cubesixtyninetythree = a * a * a * a * a * a * a * a * a *\
    \ a * a * a * a * a * a * a * a * a * a;\n    long long cubesixtyninetysixtyseven\
    \ = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a\
    \ * a * a;\n    long long cubesixtyninetysixtyfour = a * a * a * a * a * a * a\
    \ * a * a * a * a * a * a * a * a * a * a * a * a;\n    long long cubesixtyninetysixtynine\
    \ = a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a;\n\
    \    long long cubesixtyninetysixty\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpsmezk6tq.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpsmezk6tq.cpp:25:15: error: redeclaration of \u2018long long int cubesixtyfour\u2019\
    \n   25 |     long long cubesixtyfour = a * a * a * a * a * a * a * a * a * a\
    \ * a * a * a * a;\n      |               ^~~~~~~~~~~~~\n/tmp/tmpsmezk6tq.cpp:20:15:\
    \ note: \u2018long long int cubesixtyfour\u2019 previously declared here\n   20\
    \ |     long long cubesixtyfour = a * a * a * a * a * a * a * a * a;\n      |\
    \               ^~~~~~~~~~~~~\n/tmp/tmpsmezk6tq.cpp:36:1: error: expected initializer\
    \ before \u2018}\u2019 token\n   36 | }\n      | ^\n/tmp/tmpsmezk6tq.cpp:36:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a<=1) {\n        return true;\n    }\n    if (a==0) {\n      \
    \  return true;\n    }\n    if (a==3) {\n        return true;\n    }\n    if (a==6)\
    \ {\n        return true;\n    }\n    if (a==9) {\n        return true;\n    }\n\
    \    if (a==12) {\n        return true;\n    }\n    if (a==15) {\n        return\
    \ true;\n    }\n    if (a==18) {\n        return true;\n    }\n    if (a==24)\
    \ {\n        return true;\n    }\n    if (a==27) {\n        return true;\n   \
    \ }\n    if (a==30) {\n        return true;\n    }\n    if (a==33) {\n       \
    \ return true;\n    }\n    if (a==36) {\n        return true;\n    }\n    if (a==39)\
    \ {\n        return true;\n    }\n    if (a==42) {\n        return true;\n   \
    \ }\n    if (a==45) {\n        return true;\n    }\n    if (a==48) {\n       \
    \ return true;\n    }\n    if (a==51) {\n        return true;\n    }\n    if (a==54)\
    \ {\n        return true;\n    }\n    if (a==57) {\n        return true;\n   \
    \ }\n    if (a==60) {\n        return true;\n    }\n    if (a==63) {\n       \
    \ return true;\n    }\n    if (a==66) {\n        return true;\n    }\n    if (a==69)\
    \ {\n        return true;\n    }\n    if (a==72) {\n        return true;\n   \
    \ }\n    if (a==75) {\n        return true;\n    }\n    if (a==78) {\n       \
    \ return true;\n    }\n    if (a==81) {\n        return true;\n    }\n    if (a==84)\
    \ {\n        return true;\n    }\n    if (a==87) {\n        return true;\n   \
    \ }\n    if (a==90) {\n        return true;\n    }\n    if (a==93) {\n       \
    \ return true;\n    }\n    if (a==96) {\n        return true;\n    }\n    if (a==99)\
    \ {\n        return true;\n    }\n    if (a==102) {\n        return true;\n  \
    \  }\n    if (a==105) {\n        return true;\n    }\n    if (a==108) {\n    \
    \    return true;\n    }\n    if (a==111) {\n        return true;\n    }\n   \
    \ if (a==114) {\n        return true;\n    }\n    if (a==117) {\n        return\
    \ true;\n    }\n    if (a==120) {\n        return true;\n    }\n    if (a==123)\
    \ {\n        return true;\n    }\n    if (a==126) {\n        return true;\n  \
    \  }\n    if (a==129) {\n        return true;\n    }\n    if (a==132) {\n    \
    \    return true;\n    }\n    if (a==135) {\n        return true;\n    }\n   \
    \ if (a==138) {\n        return true;\n    }\n    if (a==141) {\n        return\
    \ true;\n    }\n    if (a==144) {\n        return true;\n    }\n    if (a==147)\
    \ {\n        return true;\n    }\n    if (a==150) {\n        return true;\n  \
    \  }\n    if (a==15\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy748yc0b.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpy748yc0b.cpp:167:14: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  167 |     if (a==15\n      |        ~     ^\n      |              )\n\
    \  168 | }\n      | ~             \n/tmp/tmpy748yc0b.cpp:168:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n  168 | }\n      | ^\n/tmp/tmpy748yc0b.cpp:168:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  168 | }\n\
    \      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a % 3 == 0){\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpovzqlqt7: /tmp/tmpovzqlqt7.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    bool cube = 1;\n    if (a>=0) cube = a%2==0 && a%3==0 && a%5==0;\n\
    \    return cube;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpwgq3k2zw: /tmp/tmpwgq3k2zw.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = a;\n    while (b <= 0) {\n        b *= a;\n    }\n    return\
    \ (a % b == 0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpifb_f719: /tmp/tmpifb_f719.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 1) {\n        return true;\n    } else if (a < 0) {\n   \
    \     return false;\n    } else {\n        int a2 = a;\n        while (a2 > 0)\
    \ {\n            if (a2 % 2 == 0) {\n                return false;\n         \
    \   }\n            a2 /= 2;\n        }\n        return true;\n    }\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpozofcyxb: /tmp/tmpozofcyxb.cpp:33: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a == 0)\n        return true;\n    if(a % a == 0)\n        return\
    \ true;\n    if(a % a == 1)\n        return false;\n    if(a % a == 2)\n     \
    \   return false;\n    if(a % a == 3)\n        return false;\n    if(a % a ==\
    \ 4)\n        return false;\n    if(a % a == 5)\n        return false;\n    if(a\
    \ % a == 6)\n        return false;\n    if(a % a == 7)\n        return false;\n\
    \    if(a % a == 8)\n        return false;\n    if(a % a == 9)\n        return\
    \ false;\n    if(a % a == 10)\n        return false;\n    if(a % a == 11)\n  \
    \      return false;\n    if(a % a == 12)\n        return false;\n    if(a % a\
    \ == 13)\n        return false;\n    if(a % a == 14)\n        return false;\n\
    \    if(a % a == 15)\n        return false;\n    if(a % a == 16)\n        return\
    \ false;\n    if(a % a == 17)\n        return false;\n    if(a % a == 18)\n  \
    \      return false;\n    if(a % a == 19)\n        return false;\n    if(a % a\
    \ == 20)\n        return false;\n    if(a % a == 21)\n        return false;\n\
    \    if(a % a == 22)\n        return false;\n    if(a % a == 23)\n        return\
    \ false;\n    if(a % a == 24)\n        return false;\n    if(a % a == 25)\n  \
    \      return false;\n    if(a % a == 26)\n        return false;\n    if(a % a\
    \ == 27)\n        return false;\n    if(a % a == 28)\n        return false;\n\
    \    if(a % a == 29)\n        return false;\n    if(a % a == 30)\n        return\
    \ false;\n    if(a % a == 31)\n        return false;\n    if(a % a == 32)\n  \
    \      return false;\n    if(a % a == 33)\n        return false;\n    if(a % a\
    \ == 34)\n        return false;\n    if(a % a == 35)\n        return false;\n\
    \    if(a % a == 36)\n        return false;\n    if(a % a == 37)\n        return\
    \ false;\n    if(a % a == 38)\n        return false;\n    if(a % a == 39)\n  \
    \      return false;\n    if(a % a == 40)\n        return false;\n    if(a % a\
    \ == 41)\n        return false;\n    if(a % a == 42)\n        return false;\n\
    \    if(a % a == 43)\n        return false;\n    if(a % a == 44)\n        return\
    \ false;\n    if(a % a == 45)\n        return false;\n    if(a % a == 46)\n  \
    \      return false;\n    if(a % a == 47)\n        return false;\n    if(a % a\
    \ == 48)\n        return false;\n    if(a % a == 49)\n        return false;\n\
    \    if(a % a == 50)\n        return false;\n    if(a % a == 51)\n        return\
    \ false;\n    if(a % a == 52)\n        return false;\n    if(a % a == 53)\n  \
    \      return false;\n    if(a % a == 54)\n        return false;\n    if(a % a\
    \ == 55)\n        return false;\n    if(a % a == 56)\n        return false;\n\
    \    if(a % a == 57)\n        return false;\n    if(a % a == 58)\n        return\
    \ false;\n    if(a % a == \n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpvga9n9ar.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpvga9n9ar.cpp:135:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  135 | }\n      | ^\n/tmp/tmpvga9n9ar.cpp:134:16: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  134 |     if(a % a ==\n      |       ~ \
    \       ^\n      |                )\n  135 | }\n      | ~               \n/tmp/tmpvga9n9ar.cpp:135:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  135 | }\n \
    \     | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0)\n\t\treturn true;\n\tif (a % 3 == 0)\n\t\treturn iscube(a/3)\
    \ == true;\n\tif (a % 5 == 0)\n\t\treturn iscube(a/5) == true;\n\tif (a % 7 ==\
    \ 0)\n\t\treturn iscube(a/7) == true;\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmponjcnzwx: /tmp/tmponjcnzwx.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a%2 == 0) {\n\t\tif (a%3 == 0)\n\t\t\tif (a%5 == 0)\n\t\t\t\treturn\
    \ true;\n\t\t\telse\n\t\t\t\treturn false;\n\t\telse\n\t\t\treturn true;\n\t}\
    \ else {\n\t\treturn false;\n\t}\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmph1iqhynu: /tmp/tmph1iqhynu.cpp:28: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a>0 && a<1)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx5k8bfxm: /tmp/tmpx5k8bfxm.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\t\n\treturn (a == 1LL*1LL*1LL*1LL);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpouaknd63: /tmp/tmpouaknd63.cpp:21: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert(a >= 1);\n    assert(a <= 64);\n    long long s = 1;\n    int\
    \ t = 1;\n    while (s <= a) {\n        s = (2 * s) + t;\n        t = (t + 1)\
    \ / 2;\n    }\n    return s == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpyw32t1ej: /tmp/tmpyw32t1ej.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // write your code in C++14\n    // or C++17 (for std::ranges::range)\n\
    \    return ((a * a * a) <= 1);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqhl_r8zb: /tmp/tmpqhl_r8zb.cpp:23: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // code here\n    \n    return isCube(a);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmr04gtzq.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpmr04gtzq.cpp:16:12: error: \u2018isCube\u2019 was not declared in this\
    \ scope; did you mean \u2018iscube\u2019?\n   16 |     return isCube(a);\n   \
    \   |            ^~~~~~\n      |            iscube\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif(a==1)\n\treturn true;\n\tif(a==-1)\n\treturn true;\n\tlong b = a%a;\n\
    \tif(b==1)\n\treturn true;\n\tif(b==0)\n\treturn false;\n\tlong c = a/b;\n\tif(c==1)\n\
    \treturn true;\n\tif(c==0)\n\treturn false;\n\treturn iscube(c);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpxm_h9i0n: /tmp/tmpxm_h9i0n.cpp:35: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    if(a==1)\n        return true;\n\
    \    \n    int i,j;\n    long long int sum=0;\n    for(i=a;i>0;i=i/3)\n      \
    \  for(j=i;j>=3;j-=3)\n            sum+=j*j*j;\n    if(sum==a*a*a)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpb9xlngju: /tmp/tmpb9xlngju.cpp:33: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (a >= 0) && (a <= 81);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpp773gzdm: /tmp/tmpp773gzdm.cpp:19: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a>0 && a%6==0) return true;\n    if (a==0) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpuw_mmiev: /tmp/tmpuw_mmiev.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a%1 == 0)\n    return true;\n  else\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpp5_a6zb5: /tmp/tmpp5_a6zb5.cpp:22: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int temp = a;\n    while (temp > 1) {\n        if ((temp % 3 != 0)\
    \ || (temp % 5 != 0) || (temp % 7 !=0)) {\n            return false;\n       \
    \ }\n        temp /= 3;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpbbboucf0: /tmp/tmpbbboucf0.cpp:28: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a == 1)\n    return true;\n  else if (a == 0)\n    return true;\n\
    \  else if (a == -1)\n    return true;\n  else \n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpldc82oe4: /tmp/tmpldc82oe4.cpp:28: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n     if(a % cube == 0)\n      return true;\n     else\n      return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd5nwds1p.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpd5nwds1p.cpp:14:13: error: \u2018cube\u2019 was not declared in this scope;\
    \ did you mean \u2018iscube\u2019?\n   14 |      if(a % cube == 0)\n      |  \
    \           ^~~~\n      |             iscube\n/tmp/tmpd5nwds1p.cpp:18:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   18 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a<=0)\n        return false;\n    long d=a%9;\n    long r=a/9;\n\
    \    return (d==3 || d==5 || d==7 || d==1 || d==2 || r==3 || r==5 || r==7 || r==1\
    \ || r==2 );\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn6v40tjc: /tmp/tmpn6v40tjc.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int i, temp;\n    temp = a;\n    if (a % a == 0)\n        return true;\n\
    \    for (i = 3; i <= temp; i = i * 3)\n        if (temp % i == 0)\n         \
    \   return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpc2rxstmy: /tmp/tmpc2rxstmy.cpp:26: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert(a >=0);\n    assert(a<=9);\n    int b = a/3*3*3 + a/3*3*3 +\
    \ a/3*3*3 + a;\n    while(a != 0){\n        if(b==0) return true;\n        b--;\n\
    \        a /= 3;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpmlo5_2ib: /tmp/tmpmlo5_2ib.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = a;\n    int cube = 0;\n    for (int i = 1; i <= n; i++)\n\
    \    {\n        if (n % i == 0)\n        {\n            cube++;\n        }\n \
    \   }\n    cout << n << \" \" << cube << endl;\n    return (cube == 3);\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdutu_buf.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpdutu_buf.cpp:23:5: error: \u2018cout\u2019 was not declared in this scope;\
    \ did you mean \u2018std::cout\u2019?\n   23 |     cout << n << \" \" << cube\
    \ << endl;\n      |     ^~~~\n      |     std::cout\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpdutu_buf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpdutu_buf.cpp:23:33:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   23 |     cout << n << \" \" << cube << endl;\n      |   \
    \                              ^~~~\n      |                                 std::endl\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdutu_buf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ostream:599:5:\
    \ note: \u2018std::endl\u2019 declared here\n  599 |     endl(basic_ostream<_CharT,\
    \ _Traits>& __os)\n      |     ^~~~\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        return false;\n    long n = 0;\n    while (a %\
    \ 3 == 0) {\n        a /= 3;\n        n++;\n    }\n    return n == 3;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpz2xwedno: /tmp/tmpz2xwedno.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 0;\n    int c = 0;\n    while (b < a) {\n        c += b;\n\
    \        b++;\n    }\n    c -= b;\n    return c >= a / a / a / a / a;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp5evg62w5: /tmp/tmp5evg62w5.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a * a * a * a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmppikvrsb2: /tmp/tmppikvrsb2.cpp:19: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a % a == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpu_26a30c: /tmp/tmpu_26a30c.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  int b = a * a;\n  if (b == a || b == a * a) {\n    return true;\n  }\
    \ else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfodg9uaf: /tmp/tmpfodg9uaf.cpp:24: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a>1 && a % 2 == 0) {\n        long cube = a * a * a;\n       \
    \ if(cube>=1 && cube%2==0)\n            return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1mpt6n9k: /tmp/tmp1mpt6n9k.cpp:23: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a > 0) \n        if (a % a == 0)\n        {\n            return\
    \ true;\n        }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_emxih6i: /tmp/tmp_emxih6i.cpp:24: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int res = 0;\n    while (a != 0) {\n        if (res == 1)\n      \
    \      return false;\n        if (res > 0)\n            res *= a;\n        ++a;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\t// write your code in C\n\treturn false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpo_m0vrax: /tmp/tmpo_m0vrax.cpp:19: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a>0) {\n        return (a==a&&a==a*a&&a==a*a*a&&a==a*a*a*a)||(a==a||a==-a)||(a==-a||a==a);\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpzsj43qfr: /tmp/tmpzsj43qfr.cpp:22: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n     assert(a > 0);\n     long c = 1;\n     for (int i = 2; i < a; i++)\
    \ c = (c * a) - i;\n     if (a == c || a == (-c)) return true;\n     else return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn0h3bg18: /tmp/tmpn0h3bg18.cpp:14: bool iscube(long int): Assertion\
    \ `a > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==1)return true;\n    if(a<0)return false;\n    if(a%2==0)return\
    \ iscube(a/2);\n    return iscube(a/2) && iscube(a/3);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpnz_ti894: /tmp/tmpnz_ti894.cpp:22: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  int i=0;\n  long b=0;\n  while(i<(a/2) && (i+2)<(a/2)){\n    b=b+i;\n\
    \    i=i+2;\n  }\n  if((i)==(a/2)){\n    if(b==a){\n      return true;\n    }\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmps4cqmcd2: /tmp/tmps4cqmcd2.cpp:29: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int flag=0;\n    while(a > 0){\n        if(a % 3 ==0 || a % 5 ==0\
    \ || a % 7 ==0){\n            flag=1;\n        }\n        a=a/3;\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptabmp1bp: /tmp/tmptabmp1bp.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2==0)\n    if (a%3==0)\n    if (a%3==0)\n    if (a%3==0)\n \
    \   if (a%5==0)\n    if (a%6==0)\n    if (a%7==0)\n    if (a%10==0)\n    if (a%11==0)\n\
    \    if (a%12==0)\n    if (a%13==0)\n    if (a%14==0)\n    if (a%15==0)\n    if\
    \ (a%16==0)\n    if (a%17==0)\n    if (a%20==0)\n    return true;\n    else\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmprdk8keao: /tmp/tmprdk8keao.cpp:37: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return ((a % 8 == 0) && (a % 6 == 0)&& (a % 4 == 0) && (a % 2 == 0))\
    \ && (a % 1 == 0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmphovivlk6: /tmp/tmphovivlk6.cpp:18: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0) return true;\n    \n    if(a>0 && a<64){\n        if(a==0\
    \ || a==64 || a==92 || a==126 || a==180) return true;\n    }\n    \n    if(a<0\
    \ && a>-64 && a<=128){\n        if(a==-64 || a==-128 || a==-176) return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpl4gs1a8o: /tmp/tmpl4gs1a8o.cpp:27: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (a==1 || a==-3 || a==2 || a==-4 || a==3 || a==-6 || a==4 ||\
    \ a==-7 || a==6 || a==-8 || a==7 || a==-9 || a==8 || a==-10);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpgjvfq35c: /tmp/tmpgjvfq35c.cpp:19: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  long long int ans = 1;\n  for (int i = 1; i < a / 2; i++) {\n    ans\
    \ *= i;\n  }\n  if (a % 2 == 0) return ans == a;\n  else return ans != a;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7hurn9b8: /tmp/tmp7hurn9b8.cpp:23: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a == 0) return true;\n    if(a % 2 != 0) return false;\n    if(a\
    \ % 3 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 7 == 0)\
    \ return false;\n    if(a % 11 == 0) return false;\n    for(long i = 1; i <= a;\
    \ i++) {\n        if(!(i % 2) && (i % 3) && (i % 5) && (i % 7) && (i % 11)) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpq7vodlo0: /tmp/tmpq7vodlo0.cpp:29: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a <= 0) {\n        return false;\n    }\n    if (a == 1) {\n \
    \       return true;\n    }\n    if (a == 4) {\n        return true;\n    }\n\
    \    if (a == 9) {\n        return true;\n    }\n    if (a == 16) {\n        return\
    \ true;\n    }\n    if (a == 25) {\n        return true;\n    }\n    if (a ==\
    \ 64) {\n        return true;\n    }\n    if (a == 128) {\n        return true;\n\
    \    }\n    if (a == 256) {\n        return true;\n    }\n    if (a == 512) {\n\
    \        return true;\n    }\n    if (a == 1024) {\n        return true;\n   \
    \ }\n    if (a == 2048) {\n        return true;\n    }\n    if (a == 4096) {\n\
    \        return true;\n    }\n    if (a == 8192) {\n        return true;\n   \
    \ }\n    if (a == 16384) {\n        return true;\n    }\n    if (a == 32768) {\n\
    \        return true;\n    }\n    if (a == 65536) {\n        return true;\n  \
    \  }\n    if (a == 131072) {\n        return true;\n    }\n    if (a == 262144)\
    \ {\n        return true;\n    }\n    if (a == 524288) {\n        return true;\n\
    \    }\n    if (a == 1048576) {\n        return true;\n    }\n    if (a == 2097152)\
    \ {\n        return true;\n    }\n    if (a == 4194304) {\n        return true;\n\
    \    }\n    if (a == 8388608) {\n        return true;\n    }\n    if (a == 16777216)\
    \ {\n        return true;\n    }\n    if (a == 33554432) {\n        return true;\n\
    \    }\n    if (a == 67108864) {\n        return true;\n    }\n    if (a == 134217728)\
    \ {\n        return true;\n    }\n    if (a == 268435456) {\n        return true;\n\
    \    }\n    if (a == 536870912) {\n        return true;\n    }\n    if (a == 1073741824)\
    \ {\n        return true;\n    }\n    if (a == 2147483648) {\n        return true;\n\
    \    }\n    if (a == 4294967296) {\n        return true;\n    }\n    if (a ==\
    \ 8589934592) {\n        return true;\n    }\n    if (a == 268435456) {\n    \
    \    return true;\n    }\n    if (a == 536870912) {\n        return true;\n  \
    \  }\n    if (a == 1073741824) {\n        return true;\n    }\n    if (a == 2147483648)\
    \ {\n        return true;\n    }\n    if (a == 4294967296) {\n        return true;\n\
    \    }\n    if (a == 8589934592) {\n        return true;\n    }\n    if (a ==\
    \ 268435456) {\n        return true;\n    }\n    if (a == 536870912) {\n     \
    \   return true;\n    }\n    if (a == 1073741824) {\n        return true;\n  \
    \  }\n    if (a == 2147483648) {\n        return true;\n    }\n    if (a == 4294967296)\
    \ {\n        return true;\n    }\n    if (a == 8589934592) {\n        return true;\n\
    \    }\n    if (a == 268435456) {\n        return true;\n    }\n    if (a == 536870912)\
    \ {\n\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx0ydpeq1.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpx0ydpeq1.cpp:158:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  158 | int main() {\n      |            ^\n/tmp/tmpx0ydpeq1.cpp:168:1:\
    \ error: expected \u2018}\u2019 at end of input\n  168 | }\n      | ^\n/tmp/tmpx0ydpeq1.cpp:13:21:\
    \ note: to match this \u2018{\u2019\n   13 | bool iscube(long a) {\n      |  \
    \                   ^\n/tmp/tmpx0ydpeq1.cpp:168:1: warning: control reaches end\
    \ of non-void function [-Wreturn-type]\n  168 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert(a>=0);\n    assert(a<100);\n    return (a%6==0) && a%18==0;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptyk96y87: /tmp/tmptyk96y87.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if((a%3==0) && (a%5==0) && (a%7==0)) {\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpnp9r9f6u: /tmp/tmpnp9r9f6u.cpp:22: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (a % 3 == 0) || (a % 5 == 0) || (a % 7 == 0);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2kwjdp2w: /tmp/tmp2kwjdp2w.cpp:18: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\t// Your code here\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmph8xzissr: /tmp/tmph8xzissr.cpp:20: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\treturn !((a%2==0)&&(a%3==0)&&(a%5==0)&&(a%3!=0)&&(a%5!=0));\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7u87xjfw: /tmp/tmp7u87xjfw.cpp:19: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = 3*a*a*a+6*a*a+3*a;\n    if(a >= 0 && a<=b) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpglhvh1m8: /tmp/tmpglhvh1m8.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 0;\n    while (a) {\n        int next = (a % 10);\n      \
    \  a = a / 10;\n        if (next == 3) b++;\n    }\n    return b == 0;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpdz_wik67: /tmp/tmpdz_wik67.cpp:25: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int i = 1;\n    if (a == 0) return false;\n    while (i < a) {\n \
    \       if ((a % i) == 0) return false;\n        i++;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7zbh4l81: /tmp/tmp7zbh4l81.cpp:27: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    long m = 1;\n    for\
    \ (long i = 2; i <= a; i++) {\n        if (a % i == 0) {\n            m = m *\
    \ i;\n        }\n    }\n    if (a == m * m) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmprfoiaw79: /tmp/tmprfoiaw79.cpp:33: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tassert(a >= 0);\n\tbool flag = false;\n\tfor (int i = 0; i < (int)(a\
    \ / 3); i++) {\n\t\tif (a % i == 0) {\n\t\t\tflag = true;\n\t\t\tbreak;\n\t\t\
    }\n\t}\n\treturn flag;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8tewkz9a: /tmp/tmp8tewkz9a.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = a * a;\n    long long int c = b * b ;\n    if (a\
    \ >= 0) {\n        return (c == a);\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpkn_gxwz8: /tmp/tmpkn_gxwz8.cpp:25: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 1)\n        return true;\n    if (a == 0 || a % 2 == 0)\n\
    \        return false;\n    long b = 1;\n    while (b < a)\n        if (a % b\
    \ == 0)\n            return false;\n        b++;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjudgozda: /tmp/tmpjudgozda.cpp:30: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int i,j,k; \n    for (i = k = 0; k <= a; k++) { \n        for (j =\
    \ k; j <= a; j++) { \n            for (j = k; j <= a; j++) {\n               \
    \ return true;\n            }\n        }\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpx14o51us: /tmp/tmpx14o51us.cpp:26: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    bool flag = false;\n    if (a>0) {\n        if (a % 3 == 0) {\n  \
    \          flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpvtt7wfcx: /tmp/tmpvtt7wfcx.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a == 0) return true;\n  if (a <= 0) return false;\n  if (a % 4 ==\
    \ 0) return true;\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpjwetu1yf: /tmp/tmpjwetu1yf.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0 || a==1)\n        return true;\n    else if (a%2==0 || a%3==0\
    \ || a%5==0 || a%7==0)\n        return true;\n    else if (a%4==0)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpw74zibaz: /tmp/tmpw74zibaz.cpp:26: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%1 !=0 || a%2 !=0 || a%3!=0 || a%4!=0 || a%5!=0 || a%6!=0 ||\
    \ a%7!=0 || a%8!=0 || a%9!=0 || a%10!=0 || a%11!=0 || a%12!=0 || a%13!=0 || a%14!=0\
    \ || a%15!=0 || a%16!=0 || a%17!=0 || a%18!=0 || a%19!=0 || a%20!=0) {\n     \
    \   return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpfr11sje3: /tmp/tmpfr11sje3.cpp:22: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0) return true;\n    if(a==1) return true;\n    if(a==2) return\
    \ true;\n    if(a==3) return true;\n    if(a==4) return true;\n    if(a==5) return\
    \ true;\n    if(a==6) return true;\n    if(a==7) return true;\n    if(a==8) return\
    \ true;\n    if(a==9) return true;\n    if(a==10) return true;\n    if(a==11)\
    \ return true;\n    if(a==12) return true;\n    if(a==13) return true;\n    if(a==14)\
    \ return true;\n    if(a==15) return true;\n    if(a==16) return true;\n    if(a==17)\
    \ return true;\n    if(a==18) return true;\n    if(a==19) return true;\n    if(a==20)\
    \ return true;\n    if(a==21) return true;\n    if(a==22) return true;\n    if(a==23)\
    \ return true;\n    if(a==24) return true;\n    if(a==25) return true;\n    if(a==26)\
    \ return true;\n    if(a==27) return true;\n    if(a==28) return true;\n    if(a==29)\
    \ return true;\n    if(a==30) return true;\n    if(a==31) return true;\n    if(a==32)\
    \ return true;\n    if(a==33) return true;\n    if(a==34) return true;\n    if(a==35)\
    \ return true;\n    if(a==36) return true;\n    if(a==37) return true;\n    if(a==38)\
    \ return true;\n    if(a==39) return true;\n    if(a==40) return true;\n    if(a==41)\
    \ return true;\n    if(a==42) return true;\n    if(a==43) return true;\n    if(a==44)\
    \ return true;\n    if(a==45) return true;\n    if(a==46) return true;\n    if(a==47)\
    \ return true;\n    if(a==48) return true;\n    if(a==49) return true;\n    if(a==50)\
    \ return true;\n    if(a==51) return true;\n    if(a==52) return true;\n    if(a==53)\
    \ return true;\n    if(a==54) return true;\n    if(a==55) return true;\n    if(a==56)\
    \ return true;\n    if(a==57) return true;\n    if(a==58) return true;\n    if(a==59)\
    \ return true;\n    if(a==60) return true;\n    if(a==61) return true;\n    if(a==62)\
    \ return true;\n    if(a==63) return true;\n    if(a==64) return true;\n    if(a==65)\
    \ return true;\n    if(a==66) return true;\n    if(a==67) return true;\n    if(a==68)\
    \ return true;\n    if(a==69) return true;\n    if(a==70) return true;\n    if(a==71)\
    \ return true;\n    if(a==\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmp_yc54f7c.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp_yc54f7c.cpp:87:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   87 | }\n      | ^\n/tmp/tmp_yc54f7c.cpp:86:11: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   86 |     if(a==\n      |       ~   ^\n\
    \      |           )\n   87 | }\n      | ~          \n/tmp/tmp_yc54f7c.cpp:87:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   87 | }\n \
    \     | ^\n/tmp/tmp_yc54f7c.cpp:87:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   87 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long a1 = a;\n    long long a2 = a1 * a1;\n    long long a3 =\
    \ a2 * a2;\n    long long a4 = a3 * a3;\n    long long a5 = a4 * a4;\n    long\
    \ long a6 = a5 * a5;\n    long long a7 = a6 * a6;\n    long long a8 = a7 * a7;\n\
    \    long long a9 = a8 * a8;\n    long long a10 = a9 * a9;\n    long long a11\
    \ = a10 * a10;\n    long long a12 = a11 * a11;\n    long long a13 = a12 * a12;\n\
    \    long long a14 = a13 * a13;\n    long long a15 = a14 * a14;\n    long long\
    \ a16 = a15 * a15;\n    long long a17 = a16 * a16;\n    long long a18 = a17 *\
    \ a17;\n    long long a19 = a18 * a18;\n    long long a20 = a19 * a19;\n    long\
    \ long a21 = a20 * a20;\n    long long a22 = a21 * a21;\n    long long a23 = a22\
    \ * a22;\n    long long a24 = a23 * a23;\n    long long a25 = a24 * a24;\n   \
    \ long long a26 = a25 * a25;\n    long long a27 = a26 * a26;\n    long long a28\
    \ = a27 * a27;\n    long long a29 = a28 * a28;\n    long long a30 = a29 * a29;\n\
    \    long long a31 = a30 * a30;\n    long long a32 = a31 * a31;\n    long long\
    \ a33 = a32 * a32;\n    long long a34 = a33 * a33;\n    long long a35 = a34 *\
    \ a34;\n    long long a36 = a35 * a35;\n    long long a37 = a36 * a36;\n    long\
    \ long a38 = a37 * a37;\n    long long a39 = a38 * a38;\n    long long a40 = a39\
    \ * a39;\n    long long a41 = a40 * a40;\n    long long a42 = a41 * a41;\n   \
    \ long long a43 = a42 * a42;\n    long long a44 = a43 * a43;\n    long long a45\
    \ = a44 * a44;\n    long long a46 = a45 * a45;\n    long long a47 = a46 * a46;\n\
    \    long long a48 = a47 * a47;\n    long long a49 = a48 * a48;\n    long long\
    \ a50\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3qp35z3.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpk3qp35z3.cpp:64:1: error: expected initializer before \u2018}\u2019 token\n\
    \   64 | }\n      | ^\n/tmp/tmpk3qp35z3.cpp:64:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = 1;\n    for (long i = 1;i<=a;i++) {\n        n *= i;\n   \
    \ }\n    return (n == 1);\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp__ob61x8: /tmp/tmp__ob61x8.cpp:25: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return ((a*a) > (a*a*a));\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptlber1jp: /tmp/tmptlber1jp.cpp:18: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        return false;\n    if (a == 0)\n        return\
    \ true;\n    if ((a & -a) == 0)\n        return ((a & (a - 1)) == 0);\n    return\
    \ ((a & (a - 2)) == 0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp675eeraw: /tmp/tmp675eeraw.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a == 0) return true;\n    if(a%2==0 || a%3==0 || a%5==0 || a%7==0\
    \ || a%11==0 || a%13==0 || a%17==0 || a%19==0 || a%23==0 || a%29==0 || a%31==0\
    \ || a%37==0 || a%41==0 || a%47==0 || a%53==0 || a%59==0 || a%61==0 || a%67==0\
    \ || a%73==0 || a%79==0 || a%83==0 || a%89==0 || a%97==0 || a%101==0 || a%103==0\
    \ || a%107==0 || a%111==0 || a%117==0 || a%121==0 || a%123==0 || a%127==0) return\
    \ false;\n    else return iscube(a/3);\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpqv8hym0z: /tmp/tmpqv8hym0z.cpp:23: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = (int)sqrt(a);\n    return b * b == a;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmptzjfy3ce: /tmp/tmptzjfy3ce.cpp:21: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int i = 0;\n    while(a !=0)\n    {\n        i++;\n        a = a *\
    \ a * a - 1;\n    }\n    if (i == 64)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpybcauf2h: /tmp/tmpybcauf2h.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0)\n        return true;\n    long b = a % a;\n    b = b\
    \ % b;\n    b = b % b;\n    return b == 0;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpqcyom_gp: /tmp/tmpqcyom_gp.cpp:24: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    bool result = (a >= 0) && (a <= 180);\n    return result;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2olo_n_c: /tmp/tmp2olo_n_c.cpp:20: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long c = a*a*a;\n    if(c == a*a){\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmphtzysptz: /tmp/tmphtzysptz.cpp:24: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tint cube = 1;\n\tfor (int i = 1; i <= a / 3; i++) {\n\t\tcube = cube\
    \ * i;\n\t\tcube = cube * i;\n\t\tcube = cube * i;\n\t}\n\treturn (cube == a %\
    \ 3) ? true : false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjpvy3fn3: /tmp/tmpjpvy3fn3.cpp:26: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n     int b = 1;\n     for (int c = 1; c <= a; c++) {\n         b *= c;\n\
    \     }\n     return (a == b*b);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpp3bqatra: /tmp/tmpp3bqatra.cpp:24: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) return true;\n    if (a%4 == 0) return false;\n    if\
    \ (a%8 == 0) return false;\n    if (a%16 == 0) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmphio1l0ol: /tmp/tmphio1l0ol.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert(a >= 0 && a <= 1000);\n    long sum = 0;\n    for(int i=0;\
    \ i<3; i++){\n        sum += (pow(a, 3));\n    }\n    if(sum == a)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpn1gsetpx: /tmp/tmpn1gsetpx.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a%2==0){\n        long r=(a%3);\n\
    \        if(r%3==0) return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpylmisrc4: /tmp/tmpylmisrc4.cpp:23: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (a==1)||(a==3)||(a==9)||(a==27)||(a==81)||(a==83)||(a==27)||(a==81);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx6beqy8q: /tmp/tmpx6beqy8q.cpp:20: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    \n    assert(a != 0 && a != 1 && a != -1); //assert(condition);\n\
    \    \n    // Use a loop here\n    long cube = 0;\n    \n    for (int i = 1; i\
    \ < a; ++i) {\n        cube = cube + (a * (a * a));\n    }\n    \n    return cube\
    \ == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptga237d5: /tmp/tmptga237d5.cpp:15: bool iscube(long int): Assertion\
    \ `a != 0 && a != 1 && a != -1' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // assert(a != 0);\n    long sq = sqrt(a);\n    long num = 1;\n  \
    \  long sq1 = sq;\n    long sq2 = sq;\n    long sq3 = sq;\n    while (sq2 <= sq1)\
    \ {\n        sq2 = sq2 + sq2;\n        sq3 = sq3 + sq3;\n        num = num + sq3;\n\
    \    }\n    if (sq == a) return true;\n    else return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp6k_t97ya: /tmp/tmp6k_t97ya.cpp:32: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a <= 1)\n    return false;\n  if (a % 2 == 0)\n    return false;\n\
    \  if (a % 3 == 0)\n    return true;\n  int sum = 0;\n  for (int i = 1; i <= a;\
    \ i++) {\n    sum += i;\n    if (sum == a) {\n      return true;\n    }\n  }\n\
    \  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptpek3gzk: /tmp/tmptpek3gzk.cpp:31: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2 == 0) \n       return (a==1);\n    else if (a%3 == 0)\n  \
    \     return (a==3);\n    else \n       return (a==6);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpdjr3fsom: /tmp/tmpdjr3fsom.cpp:23: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // write your code in C++17 style\n    assert(a >= 1);\n    return\
    \ a <= (long)(a*a*a*a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2taty9y6: /tmp/tmp2taty9y6.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // write your code here\n    if (a>0){\n        if (a%2==0){\n   \
    \         if (a%3==0){\n                if (a%4==0){\n                    if (a%8==0){\n\
    \                        if (a%16==0){\n                            if (a%32==0){\n\
    \                                return true;\n                            }\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpdkhlgq4i: /tmp/tmpdkhlgq4i.cpp:34: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        return false;\n    long i = 1;\n    bool flag\
    \ = false;\n    while (i * a * i <= a * a) {\n        if (a * a >= i) {\n    \
    \        flag = true;\n            break;\n        }\n        i++;\n    }\n  \
    \  return flag;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpioutvq45: /tmp/tmpioutvq45.cpp:30: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert (a>0);\n    long sum = 0;\n    for (long i=1;i<=a;i++) {\n\
    \        sum+=i;\n    }\n    if (a%2 ==1){\n        if (sum%3 ==1) {\n       \
    \     return true;\n        }\n    }else{\n        if (sum%3 ==1 || sum%3 ==9\
    \ || sum%3 ==27){\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9y8cf8u9: /tmp/tmp9y8cf8u9.cpp:14: bool iscube(long int): Assertion\
    \ `a>0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert(a>0&&a<=LONG_MAX);\n    return (long(pow(3,a)) == a);\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr1164u25: /tmp/tmpr1164u25.cpp:19: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    for(int i=1;i<=a;i++){\n     \
    \   if(a%i==0)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1b6q_upr: /tmp/tmp1b6q_upr.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tint i = 0;\n\twhile (a != 1) {\n\t\ti++;\n\t\tif (a % 3 == 0) {\n\t\t\
    \tif (i == 3) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tbreak;\n\t\
    \t}\n\t\ta = a / 3;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp0s6dvnfg: /tmp/tmp0s6dvnfg.cpp:30: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long cubed = a * a * a;\n    if (cubed >= 1000000000000)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpybpmh3ty: /tmp/tmpybpmh3ty.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = 0;\n    long c = a >> 1;\n    long d = c >> 1;\n    long\
    \ e = d >> 1;\n    b = a + (2 * c) + (2 * d) + (2 * e);\n    if (a > b) \n   \
    \     return false; \n    else if (a == b) \n        return true; \n    else \n\
    \        return iscube(b); \n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp7jbptobr: /tmp/tmp7jbptobr.cpp:30: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) {\n        return false;\n    }\n    long b = 1;\n    while\
    \ (b < a + 1) {\n        if (b % a == 0) {\n            return false;\n      \
    \  }\n        b++;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpnozhq8ih: /tmp/tmpnozhq8ih.cpp:28: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a <= 0) return false;\n    long b = a * a - a * a;\n    return\
    \ (b * b) - 4 >= 0;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp1lq5h62n: /tmp/tmp1lq5h62n.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (a==1 || (a%2==0 && a%3==0 && a%5==0 && a%7==0 && a%11==0 &&\
    \ a%13==0 && a%17==0 && a%19==0 && a%23==0 && a%29==0 && a%31==0 && a%37==0 &&\
    \ a%41==0 && a%43==0 && a%47==0 && a%53==0 && a%59==0 && a%61==0 && a%67==0 &&\
    \ a%73==0 && a%79==0 && a%83==0 && a%89==0 && a%97==0 && a%103==0 && a%107==0\
    \ && a%113==0 && a%119==0 && a%123==0 && a%127==0 && a%131==0 && a%137==0 && a%141==0\
    \ && a%143==0 && a%147==0 && a%151==0 && a%157==0 && a%161==0 && a%163==0 && a%167==0\
    \ && a%173==0 && a%179==0 && a%183==0 && a%189==0 && a%193==0 && a%197==0 && a%203==0\
    \ && a%209==0 && a%213==0 && a%217==0 && a%223==0 && a%229==0 && a%233==0 && a%239==0\
    \ && a%243==0 && a%247==0 && a%251==0 && a%257==0 && a%263==0 && a%269==0 && a%273==0\
    \ && a%279==0 && a%283==0 && a%289==0 && a%293==0 && a%297==0 && a%301==0 && a%307==0\
    \ && a%311==0 && a%317==0 && a%319==0 && a%323==0 && a%327==0 && a%331==0 && a%337==0\
    \ && a%341==0 && a%347==0 && a%351==0 && a%257==0 && a%263==0 && a%269==0 && a%273==0\
    \ && a%279==0 && a%283==0 && a%289==0 && a%293==0 && a%297==0 && a%301==0 && a%307==0\
    \ && a%311==0 && a%317==0 && a%319==0 && a%323==0 && a%327==0 && a%331==0 && a%337==0\
    \ && a\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8dn3rwob.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp8dn3rwob.cpp:14:1147: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   14 |     return (a==1 || (a%2==0 && a%3==0 && a%5==0 && a%7==0 &&\
    \ a%11==0 && a%13==0 && a%17==0 && a%19==0 && a%23==0 && a%29==0 && a%31==0 &&\
    \ a%37==0 && a%41==0 && a%43==0 && a%47==0 && a%53==0 && a%59==0 && a%61==0 &&\
    \ a%67==0 && a%73==0 && a%79==0 && a%83==0 && a%89==0 && a%97==0 && a%103==0 &&\
    \ a%107==0 && a%113==0 && a%119==0 && a%123==0 && a%127==0 && a%131==0 && a%137==0\
    \ && a%141==0 && a%143==0 && a%147==0 && a%151==0 && a%157==0 && a%161==0 && a%163==0\
    \ && a%167==0 && a%173==0 && a%179==0 && a%183==0 && a%189==0 && a%193==0 && a%197==0\
    \ && a%203==0 && a%209==0 && a%213==0 && a%217==0 && a%223==0 && a%229==0 && a%233==0\
    \ && a%239==0 && a%243==0 && a%247==0 && a%251==0 && a%257==0 && a%263==0 && a%269==0\
    \ && a%273==0 && a%279==0 && a%283==0 && a%289==0 && a%293==0 && a%297==0 && a%301==0\
    \ && a%307==0 && a%311==0 && a%317==0 && a%319==0 && a%323==0 && a%327==0 && a%331==0\
    \ && a%337==0 && a%341==0 && a%347==0 && a%351==0 && a%257==0 && a%263==0 && a%269==0\
    \ && a%273==0 && a%279==0 && a%283==0 && a%289==0 && a%293==0 && a%297==0 && a%301==0\
    \ && a%307==0 && a%311==0 && a%317==0 && a%319==0 && a%323==0 && a%327==0 && a%331==0\
    \ && a%337==0 && a\n      |                     ~                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                          "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) {return true;}\n    long n=1L;\n    while (a) {\n      \
    \  n*=a;\n        a--;\n    }\n    return n==1L;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  assert(a > 0);\n  // write your code here\n  long sum = 1;\n  for (long\
    \ i = 2; i <= sqrt(a); ++i) {\n    sum += (pow(a, i) / i);\n  }\n  if (sum ==\
    \ a) return true;\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpfxb0acd0: /tmp/tmpfxb0acd0.cpp:14: bool iscube(long int): Assertion\
    \ `a > 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code\n\tassert(a>0);\n\t\n\treturn (a*a*a)==a;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi4tdw07y: /tmp/tmpi4tdw07y.cpp:15: bool iscube(long int): Assertion\
    \ `a>0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long square = a * a;\n    long cube = square * square;\n    return\
    \ cube % 1000 == 0;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpftyuyp16: /tmp/tmpftyuyp16.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int r = 1;\n    int i;\n    for (i = 0; i < a; i++) {\n        if\
    \ (r * r * r == a) break;\n        r = r * r;\n    }\n    if (i < a) {\n     \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpjxdvhfm5: /tmp/tmpjxdvhfm5.cpp:27: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b;\n    if(a==0) return true;\n    for(int i=0;i<=a;i++){\n  \
    \      b=a*a;\n        if(b==a) return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpw1am43r8: /tmp/tmpw1am43r8.cpp:26: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long cube = pow(3*3*3,a);\n    return cube == a ? true:false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpr5cgjvmg: /tmp/tmpr5cgjvmg.cpp:19: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0) return false;\n    if (a == 1) return true;\n    if (a\
    \ == 2) return true;\n    if (a == 6) return true;\n    if (a == 24) return true;\n\
    \    if (a == 120) return true;\n    if (a == 720) return true;\n    if (a ==\
    \ 3024) return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpo3q1ljto: /tmp/tmpo3q1ljto.cpp:27: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2 == 0) {\n        if (a%3 == 0)\n            if (a%4 == 0)\n\
    \                if (a%5 == 0)\n                    if (a%6 == 0)\n          \
    \              if (a%7 == 0)\n                            return true;\n     \
    \           else\n                    return false;\n            else\n      \
    \          return false;\n        else\n            return false;\n    } else\
    \ \n        return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpbwe0uxam: /tmp/tmpbwe0uxam.cpp:32: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert(a >= 0);\n    if (a == 1) return true;\n    if (a == 2) return\
    \ false;\n    // base case (odd number) \n    if (a == 0 || a == 1)\n        return\
    \ true;\n    // recursive case\n    if (a % 2 == 0)\n        return false;\n \
    \   \n    return iscube(a/2);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpnrjs2fdo: /tmp/tmpnrjs2fdo.cpp:14: bool iscube(long int): Assertion\
    \ `a >= 0' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int x= a*a*a;\n    return x == x*x;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmprcw9iimt: /tmp/tmprcw9iimt.cpp:21: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a == 0)\n\t\treturn true;\n\tif (a % 3 == 0)\n\t\treturn true;\n\
    \tif (a % 5 == 0)\n\t\treturn true;\n\tif (a % 7 == 0)\n\t\treturn true;\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptl14pcpj: /tmp/tmptl14pcpj.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if ( a == 0 ) {\n        return true;\n    }\n    else {\n       \
    \ // write code here\n        return ( a%6 == 0 && a%36 == 0 );\n    }\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjmohl9r2: /tmp/tmpjmohl9r2.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert (a>0 && a<180);\n    long c=0;\n    int i;\n    for(i=0;i<a;i++){\n\
    \        c=(c*3)%180;\n    }\n    return (c==a || c==-a || c==180);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpjt4ilw2z: /tmp/tmpjt4ilw2z.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  // Only change code below this line\n  return a>0 && a < 3 * a * a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6lnzu5z_: /tmp/tmp6lnzu5z_.cpp:20: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif(a<0)\n\t\treturn false;\n\tlong i = a;\n\twhile(i>1) {\n\t\tif( (i*i*i)==a\
    \ )\n\t\t\treturn true;\n\t\ti--;\n\t}\n\treturn false;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpxzgmmfg5: /tmp/tmpxzgmmfg5.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==1) return true;\n    if(a==-1) return false;\n    long long\
    \ u=a*a;\n    long long v=(u*a-1)/a;\n    long long w=u*v;\n    return w*w>1;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmppzr6g1au: /tmp/tmppzr6g1au.cpp:24: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // write your code in here\n    long cube=1;\n    while(a>1){\n  \
    \      cube*=a;\n        a--;\n    }\n    cube=cube*cube*cube;\n    if (a==1){\n\
    \        return true;\n    }\n    else{\n        return false;\n    }\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpx6nteefy: /tmp/tmpx6nteefy.cpp:31: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    bool res = true;\n    if (a%3 == 0)\n        res = (a*a)*a == 4 *\
    \ a;\n    else if (a%5 == 0)\n        res = (a*a)*a == 6 * a;\n    else if (a%7\
    \ == 0)\n        res = (a*a)*a == 36 * a;\n    return res;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp3h6d9jp9: /tmp/tmp3h6d9jp9.cpp:26: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long cube = 1;\n    while (a) {\n        if (a % 3 == 0 || a % 5 ==\
    \ 0 || a % 7 == 0) {\n            cube *= a;\n            a--;\n        }\n  \
    \      a/=3;\n        a/=5;\n        a/=7;\n    }\n    return (cube == a);\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmjis8vfg: /tmp/tmpmjis8vfg.cpp:28: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  // code here\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2fc0l29s: /tmp/tmp2fc0l29s.cpp:18: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a%2==0)\n        if(a%3==0)\n            if(a%5==0)\n         \
    \       if(a%7==0)\n                    if(a%11==0)\n                        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpurxfxqro: /tmp/tmpurxfxqro.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a%25==0)\n    return true;\n  else\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8ug5srj0: /tmp/tmp8ug5srj0.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tlong cube = pow(a,3)+pow(a,2)+a;\n\tif (a>0 && cube%1==0)\n\t\treturn\
    \ true;\n\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpty_xmg26: /tmp/tmpty_xmg26.cpp:22: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 1 || a == 6 || a == 9 || a == 18 || a == 27 || a == 36 ||\
    \ a == 45 || a == 54 || a == 63)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp8mwrexms: /tmp/tmp8mwrexms.cpp:23: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  assert(a>=0);\n  long c=a%3;\n  long d=a*a/3;\n  long e=a*(3*a-1)/3;\n\
    \  return c==d && c==e && d==e;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpqset2r6i: /tmp/tmpqset2r6i.cpp:22: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = 1;\n    for(int i = 1;i<=a;i++){\n        if(a%i==0){\n  \
    \          n++;\n        }\n    }\n    if(n==3 || n==5){\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmph_v7_42p: /tmp/tmph_v7_42p.cpp:27: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  int cube = a / 3 * 3;\n  a %= 3;\n  if (a == 0) return cube;\n  else\
    \ return cube + iscube(a);\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    assert(a >= 0);\n    return ((a * a * a) % a == 0);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpzqmgfi94: /tmp/tmpzqmgfi94.cpp:20: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n=(long)a;\n    if(n==n*n*n or n==n*n*n - 1 or n==n*n*n + 1) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpa08nnan_: /tmp/tmpa08nnan_.cpp:23: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (a >= 1) && (a <= 4);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpfubwafnf: /tmp/tmpfubwafnf.cpp:19: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  int n = 1;\n  int n2 = 1;\n  int n3 = 1;\n  int n4 = 1;\n  int n5 =\
    \ 1;\n  int n6 = 1;\n  int n7 = 1;\n  int n8 = 1;\n  int n9 = 1;\n  int n10 =\
    \ 1;\n  int n11 = 1;\n  int n12 = 1;\n  int n13 = 1;\n  int n14 = 1;\n  int n15\
    \ = 1;\n  int n16 = 1;\n  int n17 = 1;\n  int n18 = 1;\n  int n19 = 1;\n  int\
    \ n20 = 1;\n  int n21 = 1;\n  int n22 = 1;\n  int n23 = 1;\n  int n24 = 1;\n \
    \ int n25 = 1;\n  int n26 = 1;\n  int n27 = 1;\n  int n28 = 1;\n  int n29 = 1;\n\
    \  int n30 = 1;\n  int n31 = 1;\n  int n32 = 1;\n  int n33 = 1;\n  int n34 = 1;\n\
    \  int n35 = 1;\n  int n36 = 1;\n  int n37 = 1;\n  int n38 = 1;\n  int n39 = 1;\n\
    \  int n40 = 1;\n  int n41 = 1;\n  int n42 = 1;\n  int n43 = 1;\n  int n44 = 1;\n\
    \  int n45 = 1;\n  int n46 = 1;\n  int n47 = 1;\n  int n48 = 1;\n  int n49 = 1;\n\
    \  int n50 = 1;\n  int n51 = 1;\n  int n52 = 1;\n  int n53 = 1;\n  int n54 = 1;\n\
    \  int n55 = 1;\n  int n56 = 1;\n  int n57 = 1;\n  int n58 = 1;\n  int n59 = 1;\n\
    \  int n60 = 1;\n  int n61 = 1;\n  int n62 = 1;\n  int n63 = 1;\n  int n64 = 1;\n\
    \  int n65 = 1;\n  int n66 = 1;\n  int n67 = 1;\n  int n68 = 1;\n  int n69 = 1;\n\
    \  int n70 = 1;\n  int n71 = 1;\n  int n72 = 1;\n  int n73 = 1;\n  int n74 = 1;\n\
    \  int n75 = 1;\n  int n76 = 1;\n  int n77 = 1;\n  int n78 = 1;\n  int n79 = 1;\n\
    \  int n80 = 1;\n  int n81 = 1;\n  int n82 = 1;\n  int n83 = 1;\n  int n84 = 1;\n\
    \  int n85 = 1;\n  int n86 = 1;\n  int n87 = 1;\n  int n88 = 1;\n  int n89 = 1;\n\
    \  int n90 = 1;\n  int n91 = 1;\n  int n92 = 1;\n  int n93 = 1;\n  int n94 = 1;\n\
    \  int n95 = 1;\n  int n96 = 1;\n  int n97 = 1;\n  int n98 = 1;\n  int n99 = 1;\n\
    \  int n100 = 1;\n  int n10\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpud_owa8y.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpud_owa8y.cpp:115:1: error: expected initializer before \u2018}\u2019 token\n\
    \  115 | }\n      | ^\n/tmp/tmpud_owa8y.cpp:115:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int b = (a * a * a) * a;\n    return b == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpj9p8n9t6: /tmp/tmpj9p8n9t6.cpp:21: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long cube = a * a * a * a;\n    return cube % a == 0;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpn2qw4u67: /tmp/tmpn2qw4u67.cpp:20: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tint n = 1;\n\twhile (a > 1) {\n\t\ta /= 3;\n\t\tn++;\n\t}\n\tif (n ==\
    \ 1 && a >= 3) return true;\n\telse return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp9duhrtas: /tmp/tmp9duhrtas.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        a = -a; \n    long sum = 0;\n    while (a) {\n\
    \        if (a & 1) {\n            sum += a; \n        }\n        a >>= 1;\n \
    \   }\n    return ((sum % 8) == 0);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp_25e_bpc: /tmp/tmp_25e_bpc.cpp:27: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a<0)\n        return false;\n    long b = a*a*a;\n    long c =\
    \ b*b;\n    if (c==a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbpkq_pqf: /tmp/tmpbpkq_pqf.cpp:26: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // write your code here\n    if (a==0)\n        return true;\n   \
    \ long c=0; \n    for(long i=a;i>1;i--)\n    {\n        long m=1;\n        for(long\
    \ j=i;j<i;j++)\n            m=m*j;\n        c=c+m;\n    }\n    if(a*a*a*a*a==c)\n\
    \        return true;\n    else return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp71uc0ng8: /tmp/tmp71uc0ng8.cpp:31: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a>0)\n    {\n        if (a > 1L)\n        {\n            if (a\
    \ > 2L)\n            {\n                if (a > 3L)\n                {\n     \
    \               if (a > 4L)\n                    {\n                        if\
    \ (a > 5L)\n                        {\n                            if (a > 6L)\n\
    \                            {\n                                if (a > 7L)\n\
    \                                {\n                                    if (a\
    \ > 8L)\n                                    {\n                             \
    \           if (a > 9L)\n                                        {\n         \
    \                                   if (a > 10L)\n                           \
    \                 {\n                                                if (a > 11L)\n\
    \                                                {\n                         \
    \                           if (a > 12L)\n                                   \
    \                 {\n                                                        if\
    \ (a>13L)\n                                                        {\n       \
    \                                                     if (a>14L)\n           \
    \                                                 {\n                        \
    \                                        if (a>15L)\n                        \
    \                                        {\n                                 \
    \                                   if (a>16L)\n                             \
    \                                       {\n                                  \
    \                                      if (a>17L)\n                          \
    \                                              {\n                           \
    \                                                 if (a>18L)\n               \
    \                                                             {\n            \
    \                                                                    if (a>19L)\n\
    \                                                                            \
    \    {\n                                                                     \
    \               if (a>20L)\n                                                 \
    \                                   {\n                                      \
    \                                                  if (a>21L)\n              \
    \                                                                          {\n\
    \                                                                            \
    \                if (a>22L)\n                                                \
    \                                            {\n                             \
    \                                                                   if (a>23L)\n\
    \                                                                            \
    \                    {\n                                                     \
    \                                               if (a>24L)\n                 \
    \                                                                            \
    \       {\n                                                                  \
    \                                      if (a>25L)\n                          \
    \                                                                            \
    \  {\n                                                                       \
    \                                     if (a>26L)\n                           \
    \                                                                            \
    \     {\n                                                                    \
    \                                            if (a>27L)\n                    \
    \                                                                            \
    \                {\n                                                         \
    \                                                           if (a>28L)\n     \
    \                                                                            \
    \                                   {\n                                      \
    \                                                                            \
    \      if (a > 29L)\n                                                        \
    \                                                                {\n         \
    \                                                                            \
    \                                       if (a > 30L)\n                       \
    \                                                                            \
    \                         {\n                                                \
    \                                                                            \
    \    if (a > 31L)\n                                                          \
    \                                                                      {\n   \
    \                                                                            \
    \                                                     if (a > 32L)\n         \
    \                                                                            \
    \                                               {\n                          \
    \                                                                            \
    \                                  if (a > 33L)\n                            \
    \                                                                            \
    \                                {\n                                         \
    \                                                                            \
    \                       if (a > 34L)\n                                       \
    \                                                                            \
    \                         {\n                                                \
    \                                                                            \
    \                    if (a > 35L)\n                                          \
    \                                                                            \
    \                          {\n                                               \
    \                                                                            \
    \                         if (a > 36L)\n                                     \
    \                                                                            \
    \                                   {\n                                      \
    \                                                                            \
    \                                      if (a>37L)\n                          \
    \                                                                            \
    \                                                  {\n                       \
    \                                                                            \
    \                                                         if (a>38L)\n       \
    \                                                                            \
    \                                                                         {\n\
    \                                                                            \
    \                                                                            \
    \        if (a>39L)\n                                                        \
    \                                                                            \
    \                            {\n                                             \
    \                                                                            \
    \                                           if (a>40L)\n                     \
    \                                                                            \
    \                                                                   {\n      \
    \                                                                            \
    \                                                                            \
    \          if (a>41L)\n                                                      \
    \                                                                            \
    \                                      {\n                                   \
    \                                                                            \
    \                                                             if (a>42L)\n   \
    \                                                                            \
    \                                                                            \
    \                 {\n                                                        \
    \                                                                            \
    \                                            if(a>43L)\n                     \
    \                                                                            \
    \                                                                            \
    \   {\n                                                                      \
    \                                                                            \
    \                                  if (a>44L)\n                              \
    \                                                                            \
    \                                                                          {\n\
    \                                                                            \
    \                                                                            \
    \                                if \n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpcvckswfu.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpcvckswfu.cpp:105:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n  105 | }\n      | ^\n      | (\n/tmp/tmpcvckswfu.cpp:106:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  106\
    \ | int main() {\n      |            ^\n/tmp/tmpcvckswfu.cpp:116:1: error: expected\
    \ \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmpcvckswfu.cpp:101:177:\
    \ note: to match this \u2018{\u2019\n  101 |                                 \
    \                                                                            \
    \                                                                    {\n     \
    \ |                                                                          \
    \                                                                            \
    \                           ^\n/tmp/tmpcvckswfu.cpp:116:1: error: expected \u2018\
    }\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmpcvckswfu.cpp:99:173: note:\
    \ to match this \u2018{\u2019\n   99 |                                       \
    \                                                                            \
    \                                                          {\n      |        \
    \                                                                            \
    \                                                                            \
    \             ^\n/tmp/tmpcvckswfu.cpp:116:1: error: expected \u2018}\u2019 at\
    \ end of input\n  116 | }\n      | ^\n/tmp/tmpcvckswfu.cpp:97:169: note: to match\
    \ this \u2018{\u2019\n   97 |                                                \
    \                                                                            \
    \                                             {\n      |                     \
    \                                                                            \
    \                                                                        ^\n/tmp/tmpcvckswfu.cpp:116:1:\
    \ error: expected \u2018}\u2019 at end of input\n  116 | }\n      | ^\n/tmp/tmpcvckswfu.cpp:95:165:\
    \ note: to match this \u2018{\u2019\n   95 |                                 \
    \                                                                            "
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a>0) {\n        for(int i=1;i<=a;i++)\n            if(a%i==0) return\
    \ true;\n    }\n    else if(a<0)\n        for(int i=1;i<=-a;i++)\n           \
    \ if(a%i==0) return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp1bi93_zw: /tmp/tmp1bi93_zw.cpp:26: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int sum = 1;\n    int squareSum = sum * a;\n    for (int i = 2; i\
    \ <= squareSum && squareSum <= (2 * sum); i++) {\n        if (squareSum % i ==\
    \ 0) {\n            return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpo761s5ji: /tmp/tmpo761s5ji.cpp:29: int main(): Assertion `candidate((180))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return ((a * a * a) % a == 0);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp357lneum: /tmp/tmp357lneum.cpp:19: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a > 0 && (a&a&a&a) == 0;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp3ri0iw3e: /tmp/tmp3ri0iw3e.cpp:18: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int i = 1;\n    long n = a;\n    while (i < n) {\n        if (n %\
    \ i == 0) {\n            return false;\n        }\n        i++;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpg6miaggz: /tmp/tmpg6miaggz.cpp:29: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        return 0;\n    if (a == 1)\n        return 1;\n\
    \    if (a == 2)\n        return 1;\n    if (a == 3)\n        return 1;\n    if\
    \ (a == 4)\n        return 1;\n    if (a == 5)\n        return 1;\n    if (a ==\
    \ 6)\n        return 1;\n    if (a == 7)\n        return 1;\n    if (a == 8)\n\
    \        return 1;\n    if (a == 9)\n        return 1;\n    if (a == 10)\n   \
    \     return 1;\n    if (a == 11)\n        return 1;\n    if (a == 12)\n     \
    \   return 1;\n    if (a == 13)\n        return 1;\n    if (a == 14)\n       \
    \ return 1;\n    if (a == 15)\n        return 1;\n    if (a == 16)\n        return\
    \ 1;\n    if (a == 17)\n        return 1;\n    if (a == 18)\n        return 1;\n\
    \    if (a == 19)\n        return 1;\n    if (a == 20)\n        return 1;\n  \
    \  if (a == 21)\n        return 1;\n    if (a == 22)\n        return 1;\n    if\
    \ (a == 23)\n        return 1;\n    if (a == 24)\n        return 1;\n    if (a\
    \ == 25)\n        return 1;\n    if (a == 26)\n        return 1;\n    if (a ==\
    \ 27)\n        return 1;\n    if (a == 28)\n        return 1;\n    if (a == 29)\n\
    \        return 1;\n    if (a == 30)\n        return 1;\n    if (a == 31)\n  \
    \      return 1;\n    if (a == 32)\n        return 1;\n    if (a == 33)\n    \
    \    return 1;\n    if (a == 34)\n        return 1;\n    if (a == 35)\n      \
    \  return 1;\n    if (a == 36)\n        return 1;\n    if (a == 37)\n        return\
    \ 1;\n    if (a == 38)\n        return 1;\n    if (a == 39)\n        return 1;\n\
    \    if (a == 40)\n        return 1;\n    if (a == 41)\n        return 1;\n  \
    \  if (a == 42)\n        return 1;\n    if (a == 43)\n        return 1;\n    if\
    \ (a == 44)\n        return 1;\n    if (a == 45)\n        return 1;\n    if (a\
    \ == 46)\n        return 1;\n    if (a == 47)\n        return 1;\n    if (a ==\
    \ 48)\n        return 1;\n    if (a == 49)\n        return 1;\n    if (a == 50)\n\
    \        return 1;\n    if (a == 51)\n        return 1;\n    if (a == 52)\n  \
    \      return 1;\n    if (a == 53)\n        return 1;\n    if (a == 54)\n    \
    \    return 1;\n    if (a == 55)\n        return 1;\n    if (a == 56)\n      \
    \  return 1;\n    if (a == 57)\n        return 1;\n    if (a == 58)\n        return\
    \ 1;\n    if (a == 59)\n        return 1;\n    if (a == 60)\n        return 1;\n\
    \    if (a == 61)\n        return 1;\n    if (a == 62)\n        return 1;\n  \
    \  if (a == 63)\n        return 1;\n    if (a == 64)\n        return 1;\n    if\
    \ (a == 65)\n        return 1;\n    if (a == 66)\n        return 1;\n    if (a\
    \ == 67)\n        return \n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "/tmp/tmpqgvbjm0q.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpqgvbjm0q.cpp:150:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  150 | }\n      | ^\n/tmp/tmpqgvbjm0q.cpp:149:15: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n  149 |         return\n      |          \
    \     ^\n      |               ;\n  150 | }\n      | ~              \n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int cube_count = 0;\n    while (a > 1) {\n        if (a % 3 == 0)\
    \ {\n            cube_count++;\n            a /= 3;\n        } else {\n      \
    \      a /= 3;\n        }\n    }\n    if (cube_count == 3) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpgb6d1_ye: /tmp/tmpgb6d1_ye.cpp:31: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long int i=a%6;\n    long long int k=a%6;\n    long long int\
    \ l=a%6;\n    if((i*i*i)==(a))\n    {\n        if((i*i*k)==(a))\n        {\n \
    \           if((i*i*l)==(a))\n            {\n                return true;\n  \
    \          }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpd39kijzh: /tmp/tmpd39kijzh.cpp:36: int main(): Assertion `candidate((1000))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int cube = a % 9 * 9 * 9;\n    int square = a % 9;\n    return (a\
    \ == cube) || (a == square);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp2zglq4ft: /tmp/tmp2zglq4ft.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a >= 0)\n  {\n    if ((a % 3 == 0) && ((a % 5 == 0)))\n    {\n \
    \     return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpy9s41vfx: /tmp/tmpy9s41vfx.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int x = a;\n    if(x<1){\n        return false;\n    }\n    for(int\
    \ i=1;i<=x;i++){\n        if(i*i*i>x){\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpm_rzwqmb: /tmp/tmpm_rzwqmb.cpp:29: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int n = 1;\n    long c = a;\n    while (c >= n) {\n        n *= n;\n\
    \    }\n    return c == a;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: None
  stderr: None
  exit_code: -1
  status: Timeout
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a<0) return false;\n    // Base Case\n    if (a==1) return true;\n\
    \    // Recursive Case\n    int b=(int)log2(a);\n    return b==(sizeof(a)*8-1)?(iscube(a*a)*iscube(a*a)*iscube(a*a)):false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpmjivsc1x: /tmp/tmpmjivsc1x.cpp:25: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if ( a > 1ll * 100000000 && a < 0ll * 100000000 ) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpj1nua9m9: /tmp/tmpj1nua9m9.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0) return true;\n    if (a%2 == 0) return false;\n    return\
    \ iscube(a/2);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp7h9b0c3h: /tmp/tmp7h9b0c3h.cpp:23: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 1 || a > 64)\n        return false;\n    long b = a / 9;\n\
    \    if (b == a || b == a - 1 || b == a + 1)\n        return true;\n    else\n\
    \        return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpf9e_1zew: /tmp/tmpf9e_1zew.cpp:26: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0) {\n        return true;\n    }\n    if (a % 3 == 0 &&\
    \ a % 5 == 0 && a % 7 == 0 && a%10 == 0 && a%13 == 0) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmptbr9a8f7: /tmp/tmptbr9a8f7.cpp:24: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    bool ans=false;\n    long count=0;\n    long temp=a;\n    while(temp!=0){\n\
    \        count++;\n        temp/=3;\n    }\n    if(a<=0){\n        ans=false;\n\
    \    }\n    else if(a>0){\n        ans=false;\n    }\n    else{\n        if(count==3){\n\
    \            ans=true;\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp33whajzv: /tmp/tmp33whajzv.cpp:36: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long i=2;\n    while (i<a) {\n        if(a%i==0)\n            return\
    \ false;\n        i++;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpzgg2_jxn: /tmp/tmpzgg2_jxn.cpp:25: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0)\n        return true;\n    if(a==1)\n        return true;\n\
    \    if(a==2)\n        return true;\n    if(a==3)\n        return true;\n    if(a==4)\n\
    \        return true;\n    if(a==5)\n        return true;\n    if(a==6)\n    \
    \    return true;\n    if(a==7)\n        return true;\n    if(a==8)\n        return\
    \ true;\n    if(a==9)\n        return true;\n    if(a==10)\n        return true;\n\
    \    if(a==11)\n        return true;\n    if(a==12)\n        return true;\n  \
    \  if(a==13)\n        return true;\n    if(a==14)\n        return true;\n    if(a==15)\n\
    \        return true;\n    if(a==16)\n        return true;\n    if(a==17)\n  \
    \      return true;\n    if(a==18)\n        return true;\n    if(a==19)\n    \
    \    return true;\n    if(a==20)\n        return true;\n    if(a==21)\n      \
    \  return true;\n    if(a==22)\n        return true;\n    if(a==23)\n        return\
    \ true;\n    if(a==24)\n        return true;\n    if(a==25)\n        return true;\n\
    \    if(a==26)\n        return true;\n    if(a==27)\n        return true;\n  \
    \  if(a==28)\n        return true;\n    if(a==29)\n        return true;\n    if(a==30)\n\
    \        return true;\n    if(a==31)\n        return true;\n    if(a==32)\n  \
    \      return true;\n    if(a==33)\n        return true;\n    if(a==34)\n    \
    \    return true;\n    if(a==35)\n        return true;\n    if(a==36)\n      \
    \  return true;\n    if(a==37)\n        return true;\n    if(a==38)\n        return\
    \ true;\n    if(a==39)\n        return true;\n    if(a==40)\n        return true;\n\
    \    if(a==41)\n        return true;\n    if(a==42)\n        return true;\n  \
    \  if(a==43)\n        return true;\n    if(a==44)\n        return true;\n    if(a==45)\n\
    \        return true;\n    if(a==46)\n        return true;\n    if(a==47)\n  \
    \      return true;\n    if(a==48)\n        return true;\n    if(a==49)\n    \
    \    return true;\n    if(a==50)\n        return true;\n    if(a==51)\n      \
    \  return true;\n    if(a==52)\n        return true;\n    if(a==53)\n        return\
    \ true;\n    if(a==54)\n        return true;\n    if(a==55)\n        return true;\n\
    \    if(a==56)\n        return true;\n    if(a==57)\n        return true;\n  \
    \  if(a==58)\n        return true;\n    if(a==59)\n        return true;\n    if(a==60)\n\
    \        return true;\n    if(a==61)\n        return true;\n    if(a==62)\n  \
    \      return true;\n    if(a==63)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl08biire: /tmp/tmpl08biire.cpp:147: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = 1;\n    long c = a;\n    while (c >= b) {\n        if (c\
    \ % b == 0)\n            return false;\n        b *= b;\n        c--;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp77zymnic: /tmp/tmp77zymnic.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // TODO: Write your code here\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpgomanm9v: /tmp/tmpgomanm9v.cpp:19: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 1)\n        return true;\n    \n    long b = 1;\n    while\
    \ ((b <= a)) {\n        if (a % b == 0) {\n            return false;\n       \
    \ }\n        ++b;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpqmw6xplh: /tmp/tmpqmw6xplh.cpp:28: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return ((a * a * a) < (a * a * a * a));\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpk8eulq06: /tmp/tmpk8eulq06.cpp:18: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\treturn a>0 && (int)a*a*a == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpdgzjy1gt: /tmp/tmpdgzjy1gt.cpp:20: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long int b = a*a*a;\n    long int c = b*b*b;\n    long int d = c*c*c;\n\
    \    long int e = d*d*d;\n    long int f = (b*b*d) + c;\n    long int g = e*e;\n\
    \    long int h = (a*b*d) + e;\n    return g == h;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpcu38qcbd: /tmp/tmpcu38qcbd.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tlong long c = a%a;\n\tif(c==0) return true;\n\tfor(long long i=a;i>a;i--){\n\
    \t\tif(a%i == 0) return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpcts4ytcc: /tmp/tmpcts4ytcc.cpp:24: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0) return true;\n    if( (a%3)==0 ) return false; \n    long\
    \ p = a*(a - 1) / 2;\n    if ( p == a ) return true;\n    return iscube(p);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbqgez7ci: /tmp/tmpbqgez7ci.cpp:23: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // code here\n    return (a%a==0 && a%a==a && a%a==a && a%a==a &&\
    \ a%a==a) || (a%a==0 && a%a==a && a%a==a && a%a==a && a%a==a);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvm5yb_ua: /tmp/tmpvm5yb_ua.cpp:19: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here.\n    long a1=a/a;\n    long a2=a%a;\n   \
    \ long a3=a1%a1;\n    long a4=a2%a2;\n    if(a==1 || a==-1)\n        return true;\n\
    \    if(a==0 || a1==0)\n        return true;\n    if(a==0 || a2==0)\n        return\
    \ true;\n    if(a==0 || a3==0)\n        return true;\n    if(a==0 || a4==0)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp5zazs_ql: /tmp/tmp5zazs_ql.cpp:34: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here.\n    long b = a;\n    if (a==0) {\n     \
    \   return true;\n    }\n    if (b==1) {\n        return true;\n    }\n    if\
    \ (b%2==0 || b%3==0 || b%5==0 || b%7==0) {\n        return false;\n    }\n   \
    \ long temp=a;\n    int count=0;\n    long i=1;\n    while(b>1) {\n        temp=temp*i;\n\
    \        i=i+2;\n        count++;\n    }\n    if (count==1) {\n        if (b%2==0)\
    \ {\n            return true;\n        }\n    }\n    if (count==2) {\n       \
    \ if (b%3==0) {\n            return true;\n        }\n    }\n    if (count==3)\
    \ {\n        if (b%5==0) {\n            return true;\n        }\n    }\n    if\
    \ (count==4) {\n        if (b%7==0) {\n            return true;\n        }\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpi9f_qs92: /tmp/tmpi9f_qs92.cpp:59: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n   assert(a>0);\n   int x=0;\n   for (int i=1;i<=a;i++){\n      x*=i;\n\
    \   }\n   if(x==a)\n      return true;\n   else\n      return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl34zvsaw: /tmp/tmpl34zvsaw.cpp:26: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0)\n        return true;\n    int sq = (int) (sqrt(a));\n\
    \    if (sq * sq == a)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmplir1hi6j: /tmp/tmplir1hi6j.cpp:25: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a%2==0){\n        if(a>1 && a<10){\n            return true;\n\
    \        }\n    }\n    if(a%2==1){\n        if(a>2 && a<32){\n            return\
    \ true;\n        }\n    }\n    if(a%2==2){\n        if(a>4 && a<64){\n       \
    \     return true;\n        }\n    }\n    if(a%2==3){\n        if(a>8 && a<128){\n\
    \            return true;\n        }\n    }\n    if(a%2==4){\n        if(a>16\
    \ && a<256){\n            return true;\n        }\n    }\n    if(a%2==5){\n  \
    \      if(a>32 && a<512){\n            return true;\n        }\n    }\n    if(a%2==6){\n\
    \        if(a>64 && a<1024){\n            return true;\n        }\n    }\n   \
    \ if(a%2==7){\n        if(a>128 && a<2048){\n            return true;\n      \
    \  }\n    }\n    if(a%2==8){\n        if(a>256 && a<4096){\n            return\
    \ true;\n        }\n    }\n    if(a%2==9){\n        if(a>512 && a<8192){\n   \
    \         return true;\n        }\n    }\n    if(a%2==10){\n        if(a>1024\
    \ && a<16384){\n            return true;\n        }\n    }\n    if(a%2==11){\n\
    \        if(a>2048 && a<32768){\n            return true;\n        }\n    }\n\
    \    if(a%2==12){\n        if(a>4096 && a<65536){\n            return true;\n\
    \        }\n    }\n    if(a%2==13){\n        if(a>8192 && a<131072){\n       \
    \     return true;\n        }\n    }\n    if(a%2==14){\n        if(a>16384 &&\
    \ a<262144){\n            return true;\n        }\n    }\n    if(a%2==15){\n \
    \       if(a>32768 && a<524288){\n            return true;\n        }\n    }\n\
    \    if(a%2==16){\n        if(a>65536 && a<1048576){\n            return true;\n\
    \        }\n    }\n    if(a%2==17){\n        if(a>131072 && a<2097152){\n    \
    \        return true;\n        }\n    }\n    if(a%2==18){\n        if(a>262144\
    \ && a<4194304){\n            return true;\n        }\n    }\n    if(a%2==19){\n\
    \        if(a>524288 && a<8388608){\n            return true;\n        }\n   \
    \ }\n    if\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpui384c5n.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpui384c5n.cpp:115:1: error: expected \u2018(\u2019 before \u2018}\u2019\
    \ token\n  115 | }\n      | ^\n      | (\n/tmp/tmpui384c5n.cpp:115:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  115 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b = 1;\n    while (b <= a)\n    {\n        if (a % b == 0) {\n\
    \            return true;\n        }\n        b += 1;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpnja5xc16: /tmp/tmpnja5xc16.cpp:27: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\t// write your logic here\n\tint cube = 0;\n\tlong n = a;\n\twhile (n\
    \ != 0) {\n\t\tcube = cube * n % 100000000;\n\t\tn = n / 100000000;\n\t}\n\treturn\
    \ cube == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbwg8z77r: /tmp/tmpbwg8z77r.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a%2==0 || a%3==0 || a%5==0 || a%7==0)\n        return true;\n \
    \   return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpvs_mywlf: /tmp/tmpvs_mywlf.cpp:20: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a%2==0)\n        if(a%3==0)\n            if(a%5==0)\n         \
    \       if(a%7==0)\n                    return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpe9atxj67: /tmp/tmpe9atxj67.cpp:23: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % 8 == 0)\n        return a >= 1 && a <= 8;\n    else\n    \
    \    return a >= 1 && a <= 9;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp1lanr_2v: /tmp/tmp1lanr_2v.cpp:22: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a % cube == 0)\n        return 1;\n    else\n        return 0;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvn1e0u1g.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpvn1e0u1g.cpp:14:13: error: \u2018cube\u2019 was not declared in this scope;\
    \ did you mean \u2018iscube\u2019?\n   14 |     if (a % cube == 0)\n      |  \
    \           ^~~~\n      |             iscube\n/tmp/tmpvn1e0u1g.cpp:18:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   18 | }\n      |\
    \ ^\n"
  exit_code: 1
  status: SyntaxError
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    int b = 3*a*a*a + 9*a*a + 1;\n    return b == a;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpw0ilt4un: /tmp/tmpw0ilt4un.cpp:19: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long b1 = abs(a);\n    long b2 = b1/b1;\n    return b2 == b2;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpl0jt5d7d: /tmp/tmpl0jt5d7d.cpp:21: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  \n  // Write your code here\n  if(a % 3==0)\n  {\n    return true;\n\
    \  }\n  \n  else if(a%3==0)\n  {\n    return true;\n  }\n  \n  else if(a%3==0)\n\
    \  {\n    return true;\n  }\n  \n  else\n  {\n    return false;\n  }\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp2675b9o_: /tmp/tmp2675b9o_.cpp:38: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a%2 != 0) \n        return false;\n    int n = int(a/2);\n   \
    \ for (int i = 1; i <= n; i++) {\n        if ((i*i)%a != 0)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmplslcxv7a: /tmp/tmplslcxv7a.cpp:25: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a>0?((a%3)==0?((a%5)==0?((a%7)==0):1):0):0;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp6j9ki9kd: /tmp/tmp6j9ki9kd.cpp:18: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a <= 0)\n        return false;\n    if (a == 1)\n        return\
    \ true;\n    if (a == 4)\n        return true;\n    if (a == 9)\n        return\
    \ true;\n    if (a == 16)\n        return true;\n    if (a == 25)\n        return\
    \ true;\n    if (a == 36)\n        return true;\n    if (a == 49)\n        return\
    \ true;\n    if (a == 64)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpcvbxeliv: /tmp/tmpcvbxeliv.cpp:38: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return (a % 6 == 0);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmp9951y9mc: /tmp/tmp9951y9mc.cpp:18: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 0)\n        return false;\n    if (a <= 1)\n        return\
    \ true;\n    if (a % 2 == 0 && a != 2)\n        return false;\n    return (iscube(a\
    \ - 1) || iscube(a - 3) || iscube(a - 5) || iscube(a - 7) || iscube(a - 9));\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpeyswajtm: /tmp/tmpeyswajtm.cpp:25: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tif (a % 6 == 0)\n\t\treturn true;\n\telse if (a % 6 == 3)\n\t\treturn\
    \ true;\n\telse if (a % 6 == 7)\n\t\treturn true;\n\telse if (a % 6 == 1)\n\t\t\
    return true;\n\telse if (a % 6 == 4)\n\t\treturn true;\n\telse\n\t\treturn false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpbfw1_t91: /tmp/tmpbfw1_t91.cpp:31: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a % 9 == 0) {\n    return true; \n  }\n  else {\n    return false;\
    \ \n  }\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmptlvx9yd4: /tmp/tmptlvx9yd4.cpp:23: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a == 1)\n        return true;\n    else if(a==0)\n        return\
    \ true;\n    else if(a == -1)\n        return true;\n    else if(a%2 == 0)\n \
    \       return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmpm_ng8bbv: /tmp/tmpm_ng8bbv.cpp:28: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    // Write your code here.\n    if(a==0)\n        return true;\n   \
    \ if(a==1)\n        return true;\n    if(a==2)\n        return true;\n    if(a==3)\n\
    \        return true;\n    if(a==4)\n        return true;\n    if(a==5)\n    \
    \    return true;\n    if(a==6)\n        return true;\n    if(a==7)\n        return\
    \ true;\n    if(a==8)\n        return true;\n    if(a==9)\n        return true;\n\
    \    if(a==10)\n        return true;\n    if(a==12)\n        return true;\n  \
    \  if(a==13)\n        return true;\n    if(a==14)\n        return true;\n    if(a==15)\n\
    \        return true;\n    if(a==16)\n        return true;\n    if(a==17)\n  \
    \      return true;\n    if(a==18)\n        return true;\n    if(a==19)\n    \
    \    return true;\n    if(a==20)\n        return true;\n    if(a==21)\n      \
    \  return true;\n    if(a==22)\n        return true;\n    if(a==23)\n        return\
    \ true;\n    if(a==24)\n        return true;\n    if(a==25)\n        return true;\n\
    \    if(a==26)\n        return true;\n    if(a==27)\n        return true;\n  \
    \  if(a==28)\n        return true;\n    if(a==29)\n        return true;\n    if(a==30)\n\
    \        return true;\n    if(a==31)\n        return true;\n    if(a==32)\n  \
    \      return true;\n    if(a==33)\n        return true;\n    if(a==34)\n    \
    \    return true;\n    if(a==35)\n        return true;\n    if(a==36)\n      \
    \  return true;\n    if(a==37)\n        return true;\n    if(a==38)\n        return\
    \ true;\n    if(a==39)\n        return true;\n    if(a==40)\n        return true;\n\
    \    if(a==41)\n        return true;\n    if(a==42)\n        return true;\n  \
    \  if(a==43)\n        return true;\n    if(a==44)\n        return true;\n    if(a==45)\n\
    \        return true;\n    if(a==46)\n        return true;\n    if(a==47)\n  \
    \      return true;\n    if(a==48)\n        return true;\n    if(a==49)\n    \
    \    return true;\n    if(a==50)\n        return true;\n    if(a==51)\n      \
    \  return true;\n    if(a==52)\n        return true;\n    if(a==53)\n        return\
    \ true;\n    if(a==54)\n        return true;\n    if(a==55)\n        return true;\n\
    \    if(a==56)\n        return true;\n    if(a==57)\n        return true;\n  \
    \  if(a==58)\n        return true;\n    if(a==59)\n        return true;\n    if(a==60)\n\
    \        return true;\n    if(a==61)\n        return true;\n    if(a==62)\n  \
    \      return true;\n    if(a==63)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp37gj93v1: /tmp/tmp37gj93v1.cpp:146: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    return a>0? a==(int)(a*(a*(a*a))) : false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp9jqrh24w: /tmp/tmp9jqrh24w.cpp:20: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  int i=0,j;\n  long fact=1;\n  for(i=1;i<=a;i++){\n    if(a%i==0){\n\
    \      for(j=1;j<i;j++){\n        fact*=i;\n      }\n      break;\n    }\n  }\n\
    \  return fact==a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9gd9vu5m: /tmp/tmp9gd9vu5m.cpp:30: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n\tint i=0;\n\tint num=1;\n\t\n\twhile(num!=0)\n\t{\n\t\tif(a%i==0)\n\t\
    \t{\n\t\t\tnum=num*a;\n\t\t\ti=i+1;\n\t\t}\n\t\telse\n\t\t\tnum=num/i;\n\t}\n\t\
    \n\tif(i==5)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: ''
  exit_code: -8
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    long long a1=a%9;\n    long long a2=a/9;\n    long long a3=a1%9;\n\
    \    long long a4=a1/9;\n    long long a5=a2%9;\n    long long a6=a2/9;\n    long\
    \ long a7=a3%9;\n    long long a8=a3/9;\n    if(a1==8&&a1==8)\n        return\
    \ true;\n    else if(a1!=8&&a2!=8&&a3!=8&&a4!=8&&a5!=8&&a6!=8&&a7!=8&&a8!=8)\n\
    \        return false;\n    else if(a1==8&&a1==8&&a1==8)\n        return true;\n\
    \    else if(a2==8&&a2==8&&a2==8)\n        return true;\n    else if(a3==8&&a3==8&&a3==8)\n\
    \        return true;\n    else if(a4==8&&a4==8&&a4==8)\n        return true;\n\
    \    else if(a5==8&&a5==8&&a5==8)\n        return true;\n    else if(a6==8&&a6==8&&a6==8)\n\
    \        return true;\n    else if(a7==8&&a7==8&&a7==8)\n        return true;\n\
    \    else if(a8==8&&a8==8&&a8==8)\n        return true;\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpk9h7vptc: /tmp/tmpk9h7vptc.cpp:47: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a==0)\n        return true;\n    \n    if (a%2==0)\n        return\
    \ false;\n    \n    if (a%4==0)\n        return false;\n    \n    if (a%8==0)\n\
    \        return false;\n    \n    if (a%16==0)\n        return false;\n    \n\
    \    if (a%32==0)\n        return false;\n    \n    if (a%64==0)\n        return\
    \ false;\n    \n    if (a%128==0)\n        return false;\n    \n    if (a%256==0)\n\
    \        return false;\n    \n    if (a%512==0)\n        return false;\n    \n\
    \    if (a%1024==0)\n        return false;\n    \n    if (a%2048==0)\n       \
    \ return false;\n    \n    if (a%4096==0)\n        return false;\n    \n    if\
    \ (a%8192==0)\n        return false;\n    \n    if (a%16384==0)\n        return\
    \ false;\n    \n    if (a%32768==0)\n        return false;\n    \n    if (a%65536==0)\n\
    \        return false;\n    \n    if (a%131072==0)\n        return false;\n  \
    \  \n    if (a%262144==0)\n        return false;\n    \n    if (a%524288==0)\n\
    \        return false;\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp0fvnyhky: /tmp/tmp0fvnyhky.cpp:81: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a==0 || a==1 || a==3 || a==5 || a==7 || a==9 || a==11 || a==13\
    \ || a==15)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmplge6x7cy: /tmp/tmplge6x7cy.cpp:22: int main(): Assertion `candidate((-1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if(a == 0) return true;\n    if(a > 0) return false;\n    if(a < -1)\
    \ return false;\n    if(a % 2 == 0) return iscube(a/2);\n    return iscube(a/2)\
    \ && iscube(a/3);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmppwzh3oj2: /tmp/tmppwzh3oj2.cpp:22: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  if (a%2 == 0) return false;\n  for (long i = 2; i <= (a / 2); i++) {\n\
    \    if (a%i==0) return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  stdout: ''
  stderr: "tmp8czeiq68: /tmp/tmp8czeiq68.cpp:25: int main(): Assertion `candidate((64))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if ( a > 1 && a < 64 && a % 4 == 0 ) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmp9ai5h5ig: /tmp/tmp9ai5h5ig.cpp:21: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n  long cube = 0;\n  if (a > 0) {\n    while (a > 1) {\n      cube++;\n\
    \      a /= 3;\n    }\n  }\n  if (a == 0) {\n    return cube == 0;\n  } else {\n\
    \    return cube != 0;\n  }\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  stdout: ''
  stderr: "tmpufl2_je9: /tmp/tmpufl2_je9.cpp:29: int main(): Assertion `candidate((1))\
    \ == (true)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a < 3) return true;\n    else return !((a & 1) && ((a & (a - 1))\
    \ == 0));\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "tmpsibf342e: /tmp/tmpsibf342e.cpp:20: int main(): Assertion `candidate((2))\
    \ == (false)' failed.\n"
  exit_code: -6
  status: Exception
- program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns True \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // iscube(1) ==> True\n// iscube(2) ==> False\n// iscube(-1) ==> True\n// iscube(64)\
    \ ==> True\n// iscube(0) ==> True\n// iscube(180) ==> False\nbool iscube(long\
    \ a) {\n    if (a == 0)\n        return true;\n    if (a == 1)\n        return\
    \ true;\n    if (a == 2)\n        return true;\n    if (a == 3)\n        return\
    \ true;\n    if (a == 4)\n        return true;\n    if (a == 5)\n        return\
    \ true;\n    if (a == 6)\n        return true;\n    if (a == 7)\n        return\
    \ true;\n    if (a == 8)\n        return true;\n    if (a == 9)\n        return\
    \ true;\n    if (a == 10)\n        return true;\n    if (a == 11)\n        return\
    \ true;\n    if (a == 12)\n        return true;\n    if (a == 13)\n        return\
    \ true;\n    if (a == 14)\n        return true;\n    if (a == 15)\n        return\
    \ true;\n    if (a == 16)\n        return true;\n    if (a == 17)\n        return\
    \ true;\n    if (a == 18)\n        return true;\n    if (a == 19)\n        return\
    \ true;\n    if (a == 20)\n        return true;\n    if (a == 21)\n        return\
    \ true;\n    if (a == 22)\n        return true;\n    if (a == 23)\n        return\
    \ true;\n    if (a == 24)\n        return true;\n    if (a == 25)\n        return\
    \ true;\n    if (a == 26)\n        return true;\n    if (a == 27)\n        return\
    \ true;\n    if (a == 28)\n        return true;\n    if (a == 29)\n        return\
    \ true;\n    if (a == 30)\n        return true;\n    if (a == 31)\n        return\
    \ true;\n    if (a == 32)\n        return true;\n    if (a == 33)\n        return\
    \ true;\n    if (a == 34)\n        return true;\n    if (a == 35)\n        return\
    \ true;\n    if (a == 36)\n        return true;\n    if (a == 37)\n        return\
    \ true;\n    if (a == 38)\n        return true;\n    if (a == 39)\n        return\
    \ true;\n    if (a == 40)\n        return true;\n    if (a == 41)\n        return\
    \ true;\n    if (a == 42)\n        return true;\n    if (a == 43)\n        return\
    \ true;\n    if (a == 44)\n        return true;\n    if (a == 45)\n        return\
    \ true;\n    if (a == 46)\n        return true;\n    if (a == 47)\n        return\
    \ true;\n    if (a == 48)\n        return true;\n    if (a == 49)\n        return\
    \ true;\n    if (a == 50)\n        return true;\n    if (a == 51)\n        return\
    \ true;\n    if (a == 52)\n        return true;\n    if (a == 53)\n        return\
    \ true;\n    if (a == 54)\n        return true;\n    if (a == 55)\n        return\
    \ true;\n    if (a == 56)\n        return true;\n    if (a == 57)\n        return\
    \ true;\n    if (a == 58)\n        return true;\n    if (a == 59)\n        return\
    \ true;\n    if (a == 60)\n        return true;\n    if (a == 61)\n        return\
    \ true;\n    if (a == 62)\n        return true;\n    if (a == 63)\n        return\
    \ true;\n    if (a == 64)\n        return true;\n    if (a == 65)\n        return\
    \ true;\n    if (a == 66)\n        return true;\n    if (a == 67)\n        return\
    \ true;\n    if (a == 68)\n        return true;\n    if (a == 69)\n        return\
    \ true;\n    if (a == 70)\n        return true;\n    if (a == 71)\n        return\
    \ true;\n    if (a == 72)\n        return true;\n    if (a == 73)\n        return\
    \ true;\n    if (a == 74)\n        return true;\n    if (a == 75)\n        return\
    \ true;\n    if (a == 76)\n        return true;\n    if (a == 77)\n\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj9jay_wv.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpj9jay_wv.cpp:170:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  170 | }\n      | ^\n/tmp/tmpj9jay_wv.cpp:170:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n  170 | }\n      | ^\n"
  exit_code: 1
  status: SyntaxError
